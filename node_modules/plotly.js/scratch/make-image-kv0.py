import asyncio
import json
import os

import kaleido
import plotly.io as pio

PLOTLY_JS_PATH = "dist/plotly.js"

MOCK_DIR = "test/image/mocks"
IMG_DIR = "scratch/images"


pio.kaleido.scope.plotlyjs = plotly=os.path.abspath(PLOTLY_JS_PATH)
pio.templates.default = 'none'


async def generate_images(mock_names):
    # For each mock .json file in the mocks directory, generate an image
    for mock_name in mock_names:
        mock_path = os.path.join(MOCK_DIR, mock_name + ".json")
        output_filename = mock_name + ".png"
        output_path = os.path.join(IMG_DIR, output_filename)

        if os.path.exists(output_path):
            print(f"Overwriting {output_path}")
        else:
            print(f"Creating new image at {output_path}")

        # Load the mock data
        with open(mock_path, "r") as f:
            fig = json.load(f)

        # Apply same modifications done in Plotly.js image test pipeline
        width = 700
        height = 500
        if "layout" in fig:
            layout = fig["layout"]
            if "autosize" not in layout or layout["autosize"] != True:
                if "width" in layout:
                    width = layout["width"]
                if "height" in layout:
                    height = layout["height"]

        # pio.write_image(fig, output_path, validate=False)
        img_data = pio.to_image(
            fig=fig,
            width=width,
            height=height,
            validate=False
        )
        with open(output_path, "wb") as f:
            f.write(img_data)

    print("Done.")




if __name__ == "__main__":

    # Get list of mock names from command line arguments
    import sys

    if not len(sys.argv) > 1:
        print("Usage: python generate.py mock_name1 mock_name2 ...")
        sys.exit(1)
    mock_names = sys.argv[1:]

    asyncio.run(generate_images(mock_names))
