[
  {
    "body": "Excellent, looks great! This time the image tests actually ran, and for some reason `container-colorbar-vertical-w-margin` failed to render in both cases - can you try this mock on your branch and see if something really did break there? Once that passes we'll also need a baseline image for your new mock, but that's easiest to do off the artifacts in the `test-baselines` job, once we get to that point.",
    "created_at": "2025-05-16T01:26:59Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/7417#issuecomment-2885400727",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/7417",
    "updated_at": "2025-05-16T01:26:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@my-tien this looks great. There are some more test failures in `axes_test.js`, see https://app.circleci.com/pipelines/github/plotly/plotly.js/11937/workflows/35ad298f-0a05-44b8-95de-f8adbfef3f09/jobs/264167 - as mentioned @emilykl is working on the image test failures in #7418 but please make sure that *only* image tests are failing 😅 ",
    "created_at": "2025-05-15T14:05:00Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/7417#issuecomment-2883941114",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/7417",
    "updated_at": "2025-05-15T14:05:00Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Oh that's cool, thanks for pointing that out! We should be able to use `kbwood/world-calendars` directly rather than doing codegen from your jQuery package. I'm not sure if plotly.js has any TypeScript dependencies right now but that should not be a blocker.\n\nI'm curious what you plan for these projects going forward. Clearly it's not ideal to be maintaining two parallel codebases, perhaps there's a route to `calendars` becoming a thin jQuery wrapper around `world-calendars`?",
    "created_at": "2025-05-15T13:49:33Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/7421#issuecomment-2883888463",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/7421",
    "updated_at": "2025-05-15T13:49:33Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "It isn't really possible for us to use `kbwood/calendars` directly, as it's structured as a jQuery plugin. But `world-calendars` is codegen'd from `kbwood/calendars`, we just have to rerun the codegen on the new version, and make any updates necessary for that to work. And perhaps also find a way to either pull the codegen input directly from `kbwood/calendars` or automate copying it into the `world-calendars` repo, I originally just copied the relevant files manually.\n\nI'm kind of in the same boat as @kbwood in that I don't really understand the distinction between `persian` and `iranian`, it kind of sounds like only `iranian` is in common use but perhaps we keep both and just add an explanatory note to our docs for both, something like \"`persian` and `iranian` differ only in leap year algorithm. `iranian` is the calendar in current common use in Iran.\"?",
    "created_at": "2025-05-14T19:28:06Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/7421#issuecomment-2881324782",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/7421",
    "updated_at": "2025-05-14T19:28:06Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@hmanz we (Plotly) will need to rebuild using the new version of @kbwood's calendar code in order to get the new `iranian` calendar. And again that may take some time due to the altered structure so bear with us.\n\nBut I'm still unclear on the usage of these calendars and how we can help our users to pick the correct one for their needs. @Vahid-Taheri what do you mean by \"mostly use Jalali\"? Are there specific cases where the other one is used?",
    "created_at": "2025-05-12T12:23:24Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/7421#issuecomment-2872348476",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/7421",
    "updated_at": "2025-05-12T12:23:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice find and diagnosis @my-tien! I wonder though if there's a better way to do this - specifically, adding this whole extra loop at the end, in addition to being unnecessary vs. just doing the desired thing from the start, I worry it will cause those labels to be missing later like if you drag the axis around, either during or after the drag.\r\n\r\nInstead, I wonder if we can avoid this extra step by instead of `opacity: 0 | 1` use `display: none | block` here:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/8e2a5d764c6c4b4d82ba958c2631ed26b9c00cb8/src/plots/cartesian/axes.js#L3654\r\n\r\nand here:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/8e2a5d764c6c4b4d82ba958c2631ed26b9c00cb8/src/plots/cartesian/axes.js#L3712-L3714\r\n\r\nBecause unlike `opacity: 0`, `display: none` causes `getBoundingClientRect` to give zero size.",
    "created_at": "2025-05-09T03:30:46Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/7417#issuecomment-2864981933",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/7417",
    "updated_at": "2025-05-09T03:30:46Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thank you @kbwood - and I don't think we've corresponded before but let me say thank you for creating and maintaining your calendar plugin, that's been the basis of Plotly's international calendar support for nearly a decade now!\n\nIt does look like your leap year logic in [iranian.js](https://github.com/kbwood/calendars/blob/7070ac5f0985ffcfbf784e918124b80fed800b4a/src/js/jquery.calendars.iranian.js#L250-L255) matches that in [ng2-datepicker-jalali](https://github.com/mehrabisajad/ng2-datepicker-jalali/blob/d271c9ba511e84a7d0adb1a5609fa32ec4fe60f6/src/ngb-calendar-persian.ts#L201-L210). The `persian-leap` package uses a bit different logic so it's a bit hard to match up but it also has [two different calculations available](https://github.com/movahhedi/persian-leap/blob/8dcd5567509a6f3ade559f2e32bae941eac6944e/src/index.ts#L6-L22), presumably corresponding to the distinction between your Persian and Iranian calendars. Do we know if both of these calendars are in use, and if so in what contexts? We can certainly follow your lead and include both, but because they're so similar it would be useful to give users clear guidance on their usage. I see on [your docs](http://keith-wood.name/calendarsRef.html) that the Iranian calendar is \"also known as Solar Hijri calendar\" whereas the Persian is \"also known as Jalali calendar\" but the implication of this discussion is that @Vahid-Taheri considers your Iranian/Solar Hijri to be the Jalali calendar so I gather there's still some confusion.",
    "created_at": "2025-05-08T13:29:51Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/7421#issuecomment-2863079720",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/7421",
    "updated_at": "2025-05-08T13:29:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Hmm I was optimistic that the new upstream version would fix the issue you identified @Vahid-Taheri, especially since the latest version over there is just two months old (suspiciously close to the date this discrepancy occurs!) but it seems the `leapYear` code has not changed since then. Here's the current [kbwood code](https://github.com/kbwood/calendars/blame/master/src/js/jquery.calendars.persian.js#L81-L85) for Persian leap year and the corresponding [world-calendars code](https://github.com/alexcjohnson/world-calendars/blob/810693882512dec1b804456f8d435b962bd6cf31/dist/calendars/persian.js#L93-L97)\n\n@Vahid-Taheri is that the same code you were trying to edit? Do you have a proposed update that would give the correct leap years in all cases? Or a reference you can point us to for precisely how to decide which years are leap years?\n\nIdeally I guess this means we should open a PR upstream to fix the bug there before we update world-calendars.",
    "created_at": "2025-05-07T16:43:50Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/7421#issuecomment-2859277874",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/7421",
    "updated_at": "2025-05-07T16:43:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "FYI back in 2016 when we pulled the original I apparently didn't find it published on NPM so I copied the source code into my repo. It now apparently is published: https://www.npmjs.com/package/kbw-calendars - but I only see up to v2.1.0 published there while the latest in https://github.com/kbwood/calendars is v2.2.0, so I guess best is to still copy in the source code. Also note that in v2.1.0 kbwood reorganized the repo, so there will likely be a bunch of work to get the codegen working again.",
    "created_at": "2025-05-07T16:27:25Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/7421#issuecomment-2859232850",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/7421",
    "updated_at": "2025-05-07T16:27:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Hi @Vahid-Taheri, thanks for pointing this out! [`world-calendars`](https://github.com/alexcjohnson/world-calendars) is a package we created specifically for plotly.js, though apparently it's still housed in my personal GH account (@gvwilson FYI I'm happy to keep it or transfer to the plotly org at your discretion). It hasn't been updated in 8 years because nobody has reported any issues with it during that time, until now. Originally the project was codegen'd from [this JQuery plugin](https://github.com/kbwood/calendars) by @kbwood, which I see has had some updates since we pulled it in 2016, so perhaps your issue has already been fixed upstream and we should just rebuild and pull it through? Alternatively we could break that link and inline the code in plotly.js, or we could move the codegen into plotly.js - though there are apparently [a few non-plotly.js dependents](https://www.npmjs.com/browse/depended/world-calendars) on world-calendars so the best overall would be to fix it in place.",
    "created_at": "2025-05-07T15:45:25Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/7421#issuecomment-2859111954",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/7421",
    "updated_at": "2025-05-07T15:45:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Neat! The code looks promising, I’ll give it a try and see how well it works",
    "created_at": "2025-03-19T20:29:54Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/7392#issuecomment-2738031687",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/7392",
    "updated_at": "2025-03-19T20:29:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I'm not aware of Plotly ever promoting the use of jsdelivr. I personally have no experience with it or why it would be preferred over cdn.plot.ly, which works with all these versions. (to be clear I'm not saying there's no reason - I just don't know what it is) \n\nSo I feel like the most productive path forward here would be for someone who's actually interested in using plotly.js via jsdelivr to contact the jsdelivr team and see if they can track down the issue on their side.\n\nIf this effort uncovers something we could do on our side to play nicer with jsdelivr - particularly if it comes with a test so we know we're continuing to abide by whatever constraint this is going forward - then we'd be happy to accept a PR and commit to keeping that test passing going forward. I'll note this does NOT mean we'd be committing to keeping jsdelivr working - we can't do that because we have no control over what they do.",
    "created_at": "2025-03-13T14:46:32Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/7322#issuecomment-2721525384",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/7322",
    "updated_at": "2025-03-13T14:46:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Also #4838",
    "created_at": "2025-03-08T00:05:22Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/7384#issuecomment-2707754677",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/7384",
    "updated_at": "2025-03-08T00:05:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Closed by #7325 in 3.0.1",
    "created_at": "2025-02-21T04:33:34Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6760#issuecomment-2673390601",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6760",
    "updated_at": "2025-02-21T04:33:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Good point. Maybe this would be clearer as a container with booleans in it, rather than a flaglist? That would also be more extensible, since those booleans could default to `true` which you can't do with a flaglist. This would work with a flaglist of buttons to _disable_, but that seems even more confusing.\r\n\r\nSo perhaps:\r\n```js\r\nmodebarbuttons: {\r\n    autoscale: false,\r\n    zoominout: false\r\n}\r\n```\r\nThat's more verbose when you want to disable both, but seems clearer about exactly what it applies to. Thoughts?",
    "created_at": "2025-02-19T14:30:12Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/7358#issuecomment-2668823925",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/7358",
    "updated_at": "2025-02-19T14:30:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@snowPu we typically don't expose direct DOM access to elements inside plots, because the plots then stop being portable. Ideally everything should be configurable through the figure object. Can you say a little more about what you're trying to accomplish?",
    "created_at": "2025-02-18T21:36:43Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/7370#issuecomment-2666980700",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/7370",
    "updated_at": "2025-02-18T21:36:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Excellent, thanks! Let’s use the `require().default` form for now, until we get a chance to do more extensive testing. There are a lot of ways people include this library in their projects - lots of build tools and lots of environments - so it’s not a small task to convince ourselves that a change in how files link is OK. ",
    "created_at": "2025-02-18T12:46:25Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/7325#issuecomment-2665616871",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/7325",
    "updated_at": "2025-02-18T12:46:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I'd love to update from `require` to `import` but I'm nervous to do just one unless we do a bunch of extra manual testing, especially given the other bundling issues we've encountered that only show up in certain environments (like #7361 and https://github.com/plotly/plotly.py/issues/5027, that we just fixed with #7367).\r\n\r\nI wonder if instead it would work to change to `var rgba = require('color-rgba').default;`?\r\n\r\ncc @marthacryan",
    "created_at": "2025-02-17T22:49:27Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/7325#issuecomment-2664188324",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/7325",
    "updated_at": "2025-02-17T22:49:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@Lexachoc I merged master since there have been some changes particularly with testing recently, but that didn't fix the failures we're seeing on CI, would you be able to look into it? In particular it's showing messages like `TypeError: rgba3 is not a function` from every test that tries to make a `parcoords` plot, looks like there may have been a breaking change in the API between v2 and v3? Presumably that'll be an easy fix, then we can see if there's anything left (maybe the change altered the colors in some of our baseline images? That would likely be an improvement but would still need updating in the tests, I can help with that part.",
    "created_at": "2025-02-14T22:47:16Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/7325#issuecomment-2660420658",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/7325",
    "updated_at": "2025-02-14T22:47:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Still an issue in 3.0 and it's become a blocker for me, I'm going to see if I can fix it.",
    "created_at": "2025-02-07T20:07:16Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6108#issuecomment-2644025893",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6108",
    "updated_at": "2025-02-07T20:07:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Curious what you want this for? We don’t generally consider DOM structure like this to be part of the public API so in principle it’s subject to change at any time, though in practice it has likely been very stable. ",
    "created_at": "2025-01-07T14:58:39Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/7329#issuecomment-2575509184",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/7329",
    "updated_at": "2025-01-07T14:58:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "That's correct, as of v2.0 we are no longer updating `plotly-latest`. It's stuck at the end of v1.x, so that breaking changes in new major versions don't impact users of `plotly-latest`. We considered creating a new bundle that tracks the latest release (`plotly-latest-v2` or some such) but ultimately decided against it on the grounds that it's better to update explicitly so that you get a chance to test the new version.\n\n@archmoj at some point we discussed adding a console warning or some such to `plotly-latest` describing this behavior... @LiamConnors is this documented anywhere else?",
    "created_at": "2024-12-16T13:48:55Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/7315#issuecomment-2545680557",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/7315",
    "updated_at": "2024-12-16T13:48:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "FYI apparently virtual-webgl has compatibility issues with Bokeh too, though I haven't investigated myself https://github.com/holoviz/panel/issues/7375",
    "created_at": "2024-12-06T23:10:34Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/7298#issuecomment-2524587949",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/7298",
    "updated_at": "2024-12-06T23:10:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Hmph I guess we DO have image animation? Investigating the test failure...",
    "created_at": "2024-11-21T01:44:10Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/7277#issuecomment-2489893764",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/7277",
    "updated_at": "2024-11-21T01:44:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This was merged with a failing test, but I put a fix in https://github.com/plotly/plotly.js/pull/7277",
    "created_at": "2024-11-21T00:49:31Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/7273#issuecomment-2489838816",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/7273",
    "updated_at": "2024-11-21T00:49:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "LGTM, thanks @dberardi99! It’ll need a draftlog entry, I’d call it an addition rather than a bug fix. @archmoj I see you have this slotted for the next release after 3.0, sounds reasonable, I’ll defer to you for a final review",
    "created_at": "2024-10-25T12:31:40Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/7249#issuecomment-2437657671",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/7249",
    "updated_at": "2024-10-25T12:31:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yep that’s exactly the kind of thing it tends to do unless your data is either gridded or equivalent to gridded, the real solution here is to write a triangulation contour algorithm. ",
    "created_at": "2024-10-18T20:25:55Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/7239#issuecomment-2423182329",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/7239",
    "updated_at": "2024-10-18T20:25:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "`connectgaps` defaults to `True` when you provide 1D arrays for all the data, because we don’t have real triangulation so we make a grid, and it’s too easy to wind up with weird holes with 1D data. But you can try turning it off and maybe it’ll give the behavior you want. Better yet, grid your own data and provide z as 2D, x and y as 1D. Better still let’s put in the time to render data like this using triangulation 😉 \n\nhttps://plotly.com/python/reference/contour/#contour-connectgaps",
    "created_at": "2024-10-18T18:32:21Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/7239#issuecomment-2423023570",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/7239",
    "updated_at": "2024-10-18T18:32:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yes, this is clearly a bug. All of these traces have `y=[1,1,1]` so they should each get a height of 1 no matter what else is done.\r\n\r\nIt seems that setting `zorder` confuses them about which other traces they're stacked on - each trace gets the right total y values, so they definitely know at that point what's stacked below them, but then when it comes time to draw the fills they go to the wrong place.",
    "created_at": "2024-10-18T03:54:43Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/7235#issuecomment-2421280968",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/7235",
    "updated_at": "2024-10-18T03:54:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj one of the tests that fails with my change is `should remove the image tag if an invalid source`. Instead we see the browser's \"broken image\" icon if it fails to load. I think this is useful behavior for chart creators so I'm inclined to leave it this way and adapt the test (run as-is in `staticPlot` mode but verify that the image points to the source unchanged in interactive mode), do you agree or do you want to call this a breaking change that I should fix?\r\n\r\nHere's me intentionally breaking the first image of the `layout-images` mock:\r\n<img width=\"786\" alt=\"Screenshot 2024-10-07 at 16 06 18\" src=\"https://github.com/user-attachments/assets/87e8d19e-5a2b-4e83-ba22-79220694aaca\">\r\n\r\nFYI we've demonstrated that this greatly improves the experience for our tile-server-in-a-graph app - using `relayout` data to decide which images to show, so overall it's definitely a win!",
    "created_at": "2024-10-07T20:36:01Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/7199#issuecomment-2397844147",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/7199",
    "updated_at": "2024-10-07T20:36:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Several years ago we expanded all the `title` attributes from strings to dicts, with the original string moved to the `text` field inside the dict. But we kept it backward compatible, so a figure supplied with a string gets converted to the dict form automatically. This leads to confusion, both because people will see examples done both ways and because anyone using the old one will then inspect their graphs and see something else in them, so it’s probably time to remove this compatibility layer. ",
    "created_at": "2024-10-01T18:37:11Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/7177#issuecomment-2386703587",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/7177",
    "updated_at": "2024-10-01T18:37:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "fixed in the 2.35.3 branch",
    "created_at": "2024-09-20T21:32:13Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/7166#issuecomment-2364645204",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/7166",
    "updated_at": "2024-09-20T21:32:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "You can also set `layout.autotypenumbers = 'strict'` (which is currently in the default plotly.py template, but in plain plotly.js the default is `'convert types'`) https://plotly.com/javascript/reference/layout/#layout-autotypenumbers",
    "created_at": "2024-09-10T21:02:24Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/7147#issuecomment-2342004938",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/7147",
    "updated_at": "2024-09-10T21:02:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Great! I’m afraid I don’t know much about `@types/react-plotly.js` though, that’s not made by Plotly. ",
    "created_at": "2024-09-06T02:14:01Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6025#issuecomment-2333054974",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6025",
    "updated_at": "2024-09-06T02:14:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I believe what you’re looking for is `autotickangles` https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-autotickangles - implemented about 6 months ago by @my-tien 😄 ",
    "created_at": "2024-09-04T12:15:07Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6025#issuecomment-2328817490",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6025",
    "updated_at": "2024-09-04T12:15:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yes, somewhere we need more complete documentation of what `alignmentgroup` and `offsetgroup` really mean and do (cc @LiamConnors - also in writing this up I found a bug https://github.com/plotly/plotly.js/issues/7133). Let me take a shot at it here:\r\n- Traces of any type in the same `alignmentgroup` take each other into account when determining their width (for all but scatter) and position. Traces with _different_ `alignmentgroup` will not influence each other's width or position in any way.\r\n- Within one `alignmentgroup`, the available width is divided up according to the number of distinct `offsetgroup` values found among the traces in that `alignmentgroup`.\r\n  - All traces of any type (other than scatter) in the same `alignmentgroup` are given the same width.\r\n  - All traces of any type in the same `alignmentgroup` AND `offsetgroup` are given the same position.\r\n  - The available width is the minimum difference between any of the distinct position coordinates among all traces of any type in that `alignmentgroup`, reduced by the appropriate `gap` value.\r\n\r\n> I am a little bit unsure about the intended interaction between different trace types and their bar/scatter/box...modes. As far as I understand it, across traces we have the implicit behavior of \"overlay\" (with the exception of bars and histograms, because histograms also use barmode). Is this correct?\r\n\r\nThe default for `scattermode`, `boxmode`, and `violinmode` is `overlay` - and currently in that case all of this grouping is ignored, you need to explicitly set them to `group` for any of this to matter. I'm not sure that's the _right_ behavior, particularly given your goal here of allowing stacking and grouping simultaneously for bars, but I think it's OK to leave as is for those three types since they only have two `mode` values (`overlay` and `group`) and in `group` mode you can recover `overlay` behavior for an individual trace by giving it a unique `alignmentgroup`. If you don't provide any `offsetgroup` values it makes the most sense to put one trace of each type into each implicit `offsetgroup`, rather than making a new `offsetgroup` for each trace regardless of type, because typically different trace types are used to show different information about the same underlying objects. I would also say that no trace with a missing `offsetgroup` or `alignmentgroup` should be implicitly given the same value as an explicitly-provided `offsetgroup` or `alignmentgroup`.\r\n\r\n> How should alignmentgroup work exactly? The description in the documentation wasn't clear to me.\r\n> And should alignmentgroups only matter among traces of the same type? And should alignmentgroups only matter among traces of the same type? I was experimenting with bars and boxplots in this codepen and saw some interaction. Boxplots become invisible when a bar shares its alignmentgroup:\r\nhttps://codepen.io/toffi-fee/pen/zYVaKrB\r\n\r\nBoth of those look wrong to me based on the rules above:\r\n\r\nClearly something is wrong if the boxes in the same `alignmentgroup` as the bar disappear. But it's also wrong if the bar doesn't have a consistent width with the boxes, and if no `offsetgroup`s are provided, the bar trace should be aligned with the first box trace. If I take your codepen, put everything into the same `alignmentgroup`, and provide all traces with explicit `offsetgroup`s, the bar matching the first box trace, I get what I consider correct behavior (with the exception that the bar and box widths and alignment are a little off - this is bug #7133 again - because the default `boxgap` is `0.3` whereas the default `bargap` is 0.2). https://codepen.io/alexcjohnson/pen/xxozBJb?editors=0010\r\n<img width=\"426\" alt=\"Screenshot 2024-08-27 at 11 22 58\" src=\"https://github.com/user-attachments/assets/4b84cd5a-24d2-4ff8-8cef-6a34279c33e6\">\r\n\r\nExplicitly setting `boxgap=0.2` it looks exactly correct:\r\n<img width=\"439\" alt=\"Screenshot 2024-08-27 at 11 23 33\" src=\"https://github.com/user-attachments/assets/c3eb598f-7c26-4af4-804e-c2d454466a52\">\r\n\r\nAlso, clearly something is wrong if boxes with different `alignmentgroup` influence each other's position and width - as is the case in your codepen since the third box trace is in `alignmentgroup=\"2\"` whereas the other two are in `alignmentgroup=\"1\"`. Again, providing explicit `offsetgroup`s makes this look correct to me, in that the last box trace takes up the whole width because it's the only one in its `alignmentgroup`, and the other three split the width evenly because they're all in the same `alignmentgroup` with different `offsetgroup` (again, except for #7133) - so I think the root bug here is just how we deal with missing `offsetgroup`s. https://codepen.io/alexcjohnson/pen/MWMXxxR?editors=0010\r\n<img width=\"426\" alt=\"Screenshot 2024-08-27 at 11 31 29\" src=\"https://github.com/user-attachments/assets/8c557720-f162-480c-8abd-579564d1e4b4\">\r\nThis last one is what I think your codepen, exactly as it's written right now, should look like if we fixed this bug.",
    "created_at": "2024-08-27T15:39:08Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/7009#issuecomment-2312907403",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/7009",
    "updated_at": "2024-08-28T12:12:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@my-tien yes, that’s all correct, and thank you for catching my error, I will fix it above. ",
    "created_at": "2024-08-28T12:11:13Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/7009#issuecomment-2315154289",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/7009",
    "updated_at": "2024-08-28T12:11:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ah, I missed that @drderiv reworked this in line with my suggestion - thank you! This looks great. I haven't tested it, but assuming it works as intended I'm quite happy to accept this.\r\n\r\nI suspect adding a programmatic test of this will be tough - and the change is only in the non-default setting anyway, so manual testing may be the best way to handle this one.",
    "created_at": "2024-08-22T13:27:57Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6682#issuecomment-2304676482",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6682",
    "updated_at": "2024-08-22T13:27:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj don’t worry about my contributions, I just kicked it off but the vast majority of the work is from you guys - do whatever gets the PR done quickest 😎 ",
    "created_at": "2024-08-20T02:41:21Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/7120#issuecomment-2297856195",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/7120",
    "updated_at": "2024-08-20T02:41:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Given that we can support users back to npm v7 (older node 16 versions) I think it's reasonable to make this switch now and not consider it a breaking change. It'll require _contributors_ to be on later node/npm versions at least if they're touching dependencies, but that's fine, we've never considered contributor requirement changes as breaking. Also I'll note we already describe later node/npm as a requirement for custom bundling:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/74dedd4888748083da45cdc0548dafaae9784bcd/CUSTOM_BUNDLE.md?plain=1#L4-L7",
    "created_at": "2024-08-14T14:48:47Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/7099#issuecomment-2289027446",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/7099",
    "updated_at": "2024-08-14T14:48:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "There are two separate issues here.\r\n\r\nThe original one (2022, GL-specific on Apple silicon) looks like a variant of https://github.com/plotly/plotly.js/issues/6820 so may have been fixed by https://github.com/plotly/plotly.js/pull/6830, we'd need to test this on Apple silicon (which would be much easier if we had a codepen than a repo that needs cloning and building)\r\n\r\nThe newer one (2024, not dependent on GL or Apple silicon) looks to me like it's an unpleasant interaction between axis automargin and scroll zoom. I see it happening when the length of the longest y-axis tick label changes, and this is what triggers automargin to change. I don't think the solution is to call `dragTail` immediately, that'll seriously degrade performance for plots with more data. Really what we want, I think, is to somehow prevent automargin from running until the `redrawTimer` function finally runs after you're done scrolling.",
    "created_at": "2024-08-09T21:58:45Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6235#issuecomment-2278805433",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6235",
    "updated_at": "2024-08-09T21:58:45Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "No, not the expected behavior... but if I update the plotly.js version in that codepen to the latest 2.34.0 it seems like this was fixed at some point.",
    "created_at": "2024-08-09T21:34:03Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6693#issuecomment-2278784194",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6693",
    "updated_at": "2024-08-09T21:34:03Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I don’t know all the implications of what’s being proposed here, but the primary goal is to ensure we always draw the SVG elements in a space where 1 unit is 1 pixel exactly. If we lose that, lots of things will start to look terrible, like lines for which we’ve disabled antialiasing via crisp rendering occasionally disappearing if they end up sub-pixel in width.\r\n\r\nIf we can accomplish that goal in a different way that’s more responsive then great! The current system was created long ago when we needed to support a lot of browsers that are no longer relevant today, so I’m sure there are modern features we aren’t taking advantage of. Any change we make will need very thorough enumeration of cases we currently support (there are more than you might think!), to ensure they still behave the same. ",
    "created_at": "2024-07-26T21:33:09Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/7064#issuecomment-2253536646",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/7064",
    "updated_at": "2024-07-26T21:33:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I wonder if it would be more intuitive to specify this as something like `ticklabeloffset: {x: 20, y: 10}` ie a number of pixels to move the labels in the x direction (positive to the right, negative to the left) and the y direction (positive up, negative down)?\r\n\r\n`standoff` is clear to me that it refers to moving orthogonal to the axis and away from the line or tick marks. But `runoff` I find confusing, and I can't think of another name that clearly refers to motion in that direction, which is what led me to suggest changing both of them.",
    "created_at": "2024-06-26T14:00:41Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/7006#issuecomment-2191787982",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/7006",
    "updated_at": "2024-06-26T14:00:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ok great, just wanted to confirm that this is truly the intent. So yes, let’s keep the behavior as implemented.\r\n\r\nI’d still like to discuss the name, as to me `drawminorticklabel` implies adding extra labels rather than moving the already expected labels. It’s also a bit long: @etpinard had what I think is a great rule that no attribute name should concatenate more than three words and this is four. \r\n\r\nWhat about `minor.shiftlabels`? ie put it inside the `minor` container since it only applies when there are minor ticks, but we don’t label minor ticks so it’s clear the shift applies to major tick labels. ",
    "created_at": "2024-06-26T12:20:42Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/7036#issuecomment-2191551597",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/7036",
    "updated_at": "2024-06-26T12:20:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I see, that’s reasonable. And in this case moving all the tick labels to Q2 is the desired behavior, not just a side effect? Ie would you ideally prefer Q1 to be labeled on all the earlier years (and possibly also 2024) and just label Q2 on 2024, or is what you’ve drawn with every Q2 labeled in fact the goal?",
    "created_at": "2024-06-26T11:47:20Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/7036#issuecomment-2191492260",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/7036",
    "updated_at": "2024-06-26T11:47:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I thought based on the attribute name that this would be about labeling ALL the minor ticks, but it’s just about shifting the label away from the major tick. Is there a use case other than period ticks, where the label is already shifted but now you want to shift it the other way? If that’s the only purpose I’d suggest making this specific to period ticks, something like `labelminorperiod=“first”|”last”`?",
    "created_at": "2024-06-26T04:45:09Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/7036#issuecomment-2190693234",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/7036",
    "updated_at": "2024-06-26T04:45:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Is this already solved by the new `font.shadow` attributes? https://github.com/plotly/plotly.js/pull/6983 ?",
    "created_at": "2024-06-10T14:47:01Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1597#issuecomment-2158568267",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1597",
    "updated_at": "2024-06-10T14:47:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "To my knowledge foreignObject does not work outside browsers - so this would break SVG export",
    "created_at": "2024-06-05T19:14:18Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/382#issuecomment-2150779504",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/382",
    "updated_at": "2024-06-05T19:14:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "To me it feels a little limiting to put these attributes on the axes rather than in each shape. What if you want a rectangle outlining one bar (or bar group), a line going from the middle of one category to the middle of another, and a circle around a single scatter point?\r\n\r\nThe name is also awfully long. What about just `x0shift`?",
    "created_at": "2024-06-04T14:36:20Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/7010#issuecomment-2147702403",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/7010",
    "updated_at": "2024-06-04T14:36:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I think it should go inside `layout.title` object instead of `layout`. It reminds of when we added `minor` ticks in #6166.\r\n> \r\n> That would also allow adding multiple titles and subtitles later on.\r\n\r\nI think that’s right. Also makes it clear that it inherits positioning from the title (presumably with optional overrides to at least the spacing relative to the main title) and it can inherit the main title font (but smaller, and remove bold if you bolder the main font?)",
    "created_at": "2024-05-17T03:02:11Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6856#issuecomment-2116543146",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6856",
    "updated_at": "2024-05-17T03:02:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Is `diagonal` not already enough of a container? Everything in there, including `type`, is trace attributes for what you show on the diagonal, with the caveat that the one existing attribute there, `visible`, also controls whether we even create that subplot, but that seems OK to me. ",
    "created_at": "2024-05-08T21:37:29Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6991#issuecomment-2101522872",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6991",
    "updated_at": "2024-05-08T21:37:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj very cool!\r\n\r\nI'm not totally set on either way, but a couple other arguments in favor of making this a subtype of `treemap`:\r\n- The name \"treemap\" itself doesn't say anything about how the regions are packed, so this could just be a different packing type (and we could add others, like [circle packing](https://www.google.com/search?q=circle+packing+treemap&sca_esv=a69b8a5a4d8be7ee&sca_upv=1&udm=2&biw=1440&bih=692&ei=nEkyZt-1N7SsptQPss2iwA0&ved=0ahUKEwjf8_mdzeyFAxU0lokEHbKmCNgQ4dUDCBE&uact=5&oq=circle+packing+treemap&gs_lp=Egxnd3Mtd2l6LXNlcnAiFmNpcmNsZSBwYWNraW5nIHRyZWVtYXBI6ilQwQhYlChwBHgAkAEBmAG-AaAB4wyqAQQxNi4zuAEDyAEA-AEBmAIQoAKCCMICChAAGIAEGEMYigXCAgcQABiABBgYwgIIEAAYgAQYsQPCAg4QABiABBixAxiDARiKBcICBRAAGIAEwgILEAAYgAQYsQMYgwGYAwCIBgGSBwQxNS4xoAeEPw&sclient=gws-wiz-serp#vhid=Cb85qwrJCiwx8M&vssid=mosaic))\r\n- We have other uses of the voronoi / delaunay algorithm in plotly.js today (eg `delaunayaxis` in `mesh3d`) and eventually we should support this in more places - for example I'd love to make contour maps for arbitrary xyz triplet data using delaunay triangulation. Calling this \"the voronoi trace\" implies that this is the only place we're using that algorithm.\r\n\r\nAnd to @emilykl's comment \"The multiple levels of hierarchy sort of blend together visually\" - I agree, with the parents only visible in the gaps between children, I find it hard to really see the hierarchy. One option would be to expand the parent nodes so that they actually surround their children, similar to how `treemap` works. I know this breaks the exact correspondence between area and data value, but that was true for treemap as well and we chose clarity over fidelity for the same reason. Or perhaps for voronoi packing we don't show the parent nodes at all, we just decrease the line width as the nesting level increases? That's the approach [I see most often elsewhere](https://www.google.com/search?sca_esv=a69b8a5a4d8be7ee&sca_upv=1&q=voronoi+treemap&uds=AMwkrPt8eR8Q1gfQGx0g1guoVKhM8EQYLMwTJWdzQc0V-wprfDeBcAgeyEqWmUXOZUTbamPVCjL16FyQK3IIcGSvQG5NMDmgUyfyt-1pjsKpP98vaZYWEo5b8-TXXJsj8Ucq-3RuQ3Ra1xze4HDA0ZEByPET-6NvFWoJRcLWblTlW1qn_u7ZG2mkcvgRxDWjku1yI_ZIiYkeLSxJYl_MN3wrAjp2Iqe5GsQfNLP3ot8zna_HmgcSngvZrxCgv68q8iIxi9O37TrSa2zohBftNqb5Q3UFpDIHmwTjKyb0DUthWqvm7TrOl4pnzIxYNdaCgL3aPJQDoFX6&udm=2&prmd=ivsnmbt&sa=X&ved=2ahUKEwiKuOyUz-yFAxVTtokEHao0BcYQtKgLegQIFRAB&cshid=1714572206598499&biw=1440&bih=692&dpr=2), and I think it makes sense. As a side-effect though, since we don't have a place to display text for the parent nodes I think the proportions need to be relative to the entire data set rather than each parent. In the image in @emilykl's comment https://github.com/plotly/plotly.js/pull/6987#issuecomment-2083823697 there are nine 33% and eight 50% labels but unless we find a way to label the intermediate parents and THEIR proportions, all those numbers should sum to 100% rather than summing to 100% within each subset.",
    "created_at": "2024-05-01T14:14:18Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6987#issuecomment-2088526164",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6987",
    "updated_at": "2024-05-01T14:14:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "By ancient I meant my response came 3 years after the question, so was probably not much use to the original poster. But that’s correct, we do not intend to implement this. ",
    "created_at": "2024-04-24T01:58:08Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4840#issuecomment-2073853489",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4840",
    "updated_at": "2024-04-24T01:58:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "How about `layout.hoversubplots` with values (eventually, wouldn’t need to implement all of these now) `single` (just the axis pair of the primary point), `overlaying` (all subplots using the main axis and occupying the same space), `axis` (also include stacked subplots using the same axis) and `matching` (also include other axes matching the main axis)",
    "created_at": "2024-04-06T16:13:39Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6947#issuecomment-2041128431",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6947",
    "updated_at": "2024-04-06T16:13:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@Sharpz7 good point - TBH I’ve forgotten the rationale behind the original two modes and their names, but if we were designing the API today, the new version would probably have been called `absolute`.  But we have a bit of a conundrum since that’s already taken. \r\n\r\n@archmoj i haven’t played with this much, but if I’m understanding it correctly, `absolute` scales all the sizes up or down so they don’t intersect, leaving the ratios between different sized cones unchanged. Whereas `scaled` makes the largest cone the same size as `absolute` but the smaller ones may be larger than they would have been, so that you can still see their directions even if their real magnitudes are much smaller, is that right?\r\n\r\nIf I have that right, I might suggest `raw` as the name for the new one. That’s about the only word I can think of that implies “even less processed than absolute”",
    "created_at": "2024-03-27T23:09:31Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6938#issuecomment-2024130917",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6938",
    "updated_at": "2024-03-27T23:09:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Let's add some `Plotly.react` tests\r\n\r\nAbsolutely. Also perhaps a `Plotly.restyle` test doing the same.\r\n\r\nAnd a question: does `zindex` affect the stack order of bar traces or stacked area traces? Should it?\r\n\r\n> In terms of naming the other alternative is zorder as noted in https://github.com/plotly/plotly.py/issues/2345 known to matplotlib users.\r\n\r\nI think the only other places we use `order` in an attribute name it refers to \"which algorithm should we use to set the order\" - `axis.categoryorder` or `legend.traceorder`; whereas `index` is used only in one rather obscure place (`parcats.dimensions[i].displayindex`) in the sense we're using here \"a number that alters where this item appears in the order\". So I'd call that a very weak vote in favor of `zindex` but if anyone feels strongly in favor of `zorder` that's OK too.",
    "created_at": "2024-03-19T02:36:47Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6918#issuecomment-2005641354",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6918",
    "updated_at": "2024-03-19T02:36:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Interesting, thanks @hatienloi!\r\n\r\nI suspect this is due to the fact that with JS floating point, 171.95 actually IS closer to 171.9 than to 172.0:\r\n```js\r\n> 171.95-171\r\n0.9499999999999886\r\n```\r\nAnd if so it's going to be tough to fix without breaking numbers that are just a little bit lower, like 171.949999, so really SHOULD round down.\r\n\r\nIf anyone is interested in taking a crack at this, it will be crucial to add good unit tests",
    "created_at": "2024-03-19T02:13:21Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6926#issuecomment-2005614376",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6926",
    "updated_at": "2024-03-19T02:13:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Currently not possible, but it would be a nice feature to add, if you're interested in making a PR. Could be as simple as `smith.type: 'impedance'|'admittance'` and then adjusting the drawing code. I'm not particularly familiar with either variant though, if you're plotting admittance will the input data also be admittance or are there cases you want to use impedance data to create an admittance plot?",
    "created_at": "2024-02-26T23:42:48Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6842#issuecomment-1965526650",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6842",
    "updated_at": "2024-02-26T23:42:48Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ah! Yep, missing for me too in Safari. Even weirder, when I start dragging one of the ends of the axis, very often the points appear, then they disappear again on mouseup, until I get to a range of ~500 then they stay visible.\r\n\r\nSo feels to me like this is a bug in Safari's SVG rendering engine, some optimization when the total coordinate range on the plot is very large (the off-screen point is translated up `2159999999865` pixels!) that it stops doing when things get more complicated (in this case, while dragging the end of the axis we apply a scale transform to the points).\r\n\r\nWe could try to work around this bug by restricting the number of pixels we'll try to shift; that should be fine for markers, but we'll have to be careful if we do this for lines, so that they keep the correct angle while shooting off-screen, so we'd need to constrain x and y together in a smart way.",
    "created_at": "2024-02-15T20:39:01Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6896#issuecomment-1947304634",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6896",
    "updated_at": "2024-02-15T20:39:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Certainly reasonable, though it may take a long time to get on our roadmap unless someone is willing to sponsor the work. Zoom and pan will also take some designing, so if you can recommend behavior you've seen in a different program and found nice (or even what NOT to do), that would be very helpful. For example:\r\n- Do we want to keep the plot area circular or when you zoom in would it expand to fill the rectangular domain? I guess based on analogy to polar and ternary probably we'd keep circular, is that reasonable? What then would the zoom interaction look like? Perhaps you click-drag and the start and end of the drag form the diameter of a circle, which becomes the new view? This I guess is the closest analog of cartesian, where the start and end of the drag are the corners of a rectangle that becomes the new view.\r\n- How do you specify the view when zoomed/panned? `xcenter`, `ycenter`, and `radius`? `realaxis.center`, `imaginaryaxis.center`, and `radius`? Something else? Presumably mostly this would be determined by the GUI so you wouldn't need to calculate them yourself, but not always so we should find a way to describe the view that's meaningful to the chart creator.\r\n- In the current implementation, `tickvals` are hardcoded for both coordinates. If you gain the ability to pan and zoom you'll probably also want automatic ticks of some sort, such that to get back the current default behavior you'd say something like `nticks=5` and we'd automatically choose these ticks for full range view, but as you zoom in we'd choose different values, and it's not exactly obvious how to do this. In general I guess we wouldn't even be able to put the real labels across the center and the imaginary labels around the edge, depending on exactly where you've zoomed into.",
    "created_at": "2024-02-15T03:03:31Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6895#issuecomment-1945290883",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6895",
    "updated_at": "2024-02-15T03:03:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @28raining - I see 2 points, for you it's just blank?\r\n<img width=\"1140\" alt=\"Screenshot 2024-02-14 at 21 33 46\" src=\"https://github.com/plotly/plotly.js/assets/2678795/bc86c6f2-2369-472f-9ef3-e44ed7a6b1b9\">\r\nWhat browser/version/OS are you on?\r\n@archmoj what does it look like for you?",
    "created_at": "2024-02-15T02:35:51Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6896#issuecomment-1945271883",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6896",
    "updated_at": "2024-02-15T02:35:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @willhuang1997 - please note, `plotly-latest` is stuck on v1.x; to use v2.x you need to use an explicit version number. Can you update the fiddles to use v2.29.1? Is the behavior still buggy? If so, say more about exactly what you've observed - is there a specific sequence of clicks that consistently causes problems?",
    "created_at": "2024-02-15T01:59:50Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6898#issuecomment-1945245554",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6898",
    "updated_at": "2024-02-15T01:59:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "For those still interested in this issue, the crux is that 3D plots currently draw _everything_ in WebGL, including the text. Up in https://github.com/plotly/plotly.js/issues/608#issuecomment-600920777, @archmoj proposed one way to solve this, by rasterizing the LaTeX. Another way (which is more akin to what we did with 2D WebGL plots) would be to refactor this to draw the text (ideally both titles and tick labels) in SVG instead of in WebGL. That would make it easy to support LaTeX the same way we do the rest of SVG text, and would make all of these labels higher-quality overall, particularly in vector output like PDF. Unfortunately it's a fairly major refactor, and I'm not quite sure what would be needed to pull the coordinates for all of these text items out of the stack.gl modules that handle 3D subplots and return them to our SVG drawing code.",
    "created_at": "2024-02-10T03:56:44Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/608#issuecomment-1936846598",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/608",
    "updated_at": "2024-02-10T03:56:44Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@ayjayt FYI we're working on transitioning this project from `webpack` to `esbuild`. `webpack` can of course be made to handle modern syntax and output to any feature set we want, but this project has some odd quirks particularly around the WebGL code that have made it tricky for us to get right, and anyway we're provisionally seeing some great benefits to switching to `esbuild`. So hang on just a bit, hopefully next week we'll have this sorted out and be able to move forward 🙏 ",
    "created_at": "2024-02-09T18:53:08Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6680#issuecomment-1936442545",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6680",
    "updated_at": "2024-02-09T18:53:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Good idea, I could even see this becoming a default addition to the modebar.\r\n\r\nWe have a lot of work in our queue already so would probably take us a while to get to this, but we'd gladly review a PR, should be a relatively straightforward addition.",
    "created_at": "2024-02-08T23:55:40Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6888#issuecomment-1935112997",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6888",
    "updated_at": "2024-02-08T23:55:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The problem is right here, click handler needs to refer to the specific legend being clicked, rather than `fullLayout.legend`:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/08e06bd23651ef4bbede2640d1aad022be5ead38/src/components/legend/handle_click.js#L14-L16",
    "created_at": "2024-02-06T15:00:13Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6886#issuecomment-1929969249",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6886",
    "updated_at": "2024-02-06T15:00:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @NirRazor - confirmed, this is a bug, click behavior was never updated to support multiple legends. I'll move this to the plotly.js repo and comment on where the fix is needed.",
    "created_at": "2024-02-06T14:58:41Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6886#issuecomment-1929966129",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6886",
    "updated_at": "2024-02-06T14:58:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "You're exactly right @RichardNeill - an unfortunate decision very early in the history of plotly.js 😅 \r\n\r\n@LiamConnors thoughts on how best to warn people about this? We do already mention this in the description for x and y, but you'll only see that if you look carefully at the reference for these attributes:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/5272c3824170583f6e899225ba2246b68327819c/src/components/annotations/attributes.js#L366-L367",
    "created_at": "2024-02-02T18:14:11Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6880#issuecomment-1924435877",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6880",
    "updated_at": "2024-02-02T18:14:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for checking @IbraheemHaseeb7 - no assignment necessary, you can just submit a PR when you're ready!\r\n\r\n@DongVyThu thanks for the report, definitely a bug, and you're exactly right about the desired behavior: double-click on any hidden item and ALL items are made visible.\r\n\r\nOne more detail: double-click on a _visible_ legend item currently behaves correctly: if any other items are visible they are hidden; if no other legend items are visible then all items are shown. The problem is only if you double-click on a hidden item, which currently does nothing regardless of the state of all the other items.",
    "created_at": "2024-01-30T16:56:08Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6863#issuecomment-1917483538",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6863",
    "updated_at": "2024-01-30T16:56:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I pushed a small commit that makes the behavior what I wanted: when using `autotickangles`, start with the first angle in the array even if it isn't 0. I also moved a little more of the logic into the defaults step, so that we don't have `autotickangles` unless we're going to use it (except for the funny log exclusion), which is more in line with our standard practice so that `_fullLayout` doesn't contain unused attributes.\r\n\r\nThen a couple more to fix colorbar ticks and polar ticks (which both thought they were preventing autotickangles, but they weren't and in certain cases they shouldn't!)\r\n\r\n@archmoj @my-tien there's still one failing image that I don't quite understand, I can take a look again in the morning, and for some reason I wasn't able to rebuild the schema tonight. Also the same failing jasmine tests as before. But otherwise I think this is good to go from my side!",
    "created_at": "2024-01-26T03:38:05Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6790#issuecomment-1911417429",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6790",
    "updated_at": "2024-01-26T03:38:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> it seems there would need to be proposal for this\r\n\r\nThe discussion in this issue suffices as a \"proposal\" - we just want to ensure the general concept is something we'll approve (yep!) before you go and spend a lot of time developing the feature. We appreciate your enthusiasm!",
    "created_at": "2024-01-23T02:49:13Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6849#issuecomment-1905199504",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6849",
    "updated_at": "2024-01-23T02:49:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@TortoiseHam thanks for the PR! I think though we should implement it via trace attributes rather than CSS. Most users of this library are coming not directly from JS - primarily they're in Python but there are other clients too - so they don't readily have access to the CSS, and even if you're staying in JS we want the figure (data and layout objects) to be self-contained so it's portable.\r\n\r\nI'd suggest adding just `link.hovercolor`, and having that handle both color and opacity in one. Like `link.color` it should be `arrayOk` so you can either provide a single value or a complete array.\r\n\r\nThe default here is kind of tricky - and in fact looking at it in detail I think the hover opacity is handled badly right now if you either provide your own link color (we always use opacity 0.4 on hover, regardless of whether the color you provide has greater or lesser - or the same - opacity) or you don't provide a color but the background is dark (the default opacity is [0.6 in that case](https://github.com/plotly/plotly.js/blob/620a56bcc043e3391e6649bbab1b8597a8ca07e4/src/traces/sankey/defaults.js#L66-L68), so on hover the link becomes _less_ prominent, not more)\r\n\r\nI'd suggest the default `link.hovercolor` be something like:\r\n- If `link.color` has opacity < 1, use the same color with greater opacity. Not sure if that should be `+0.2` or `*2` (both of which match the current default on a light background of 0.2 -> 0.4 but they'd behave differently on a dark background), or something in between - capped at 1 of course... maybe we see what looks good?\r\n- If `link.color` is fully opaque, look at `paper_bgcolor` like we do now, and if it's dark (light), alter `link.color` to be a similar color but brighter (darker)\r\n- Note the [`Lib.repeat`](https://github.com/plotly/plotly.js/blob/620a56bcc043e3391e6649bbab1b8597a8ca07e4/src/traces/sankey/defaults.js#L70) we do now is unnecessary - it's totally fine to set a single color. But we do need to support `link.color` being either a single color or an array, and the default rules above should generate a matching shape.",
    "created_at": "2024-01-18T23:44:26Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6839#issuecomment-1899393362",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6839",
    "updated_at": "2024-01-18T23:44:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj after my two comments [above](https://github.com/plotly/plotly.js/pull/6819#discussion_r1458048611) this looks good. Thanks @andrew-matteson!\r\n\r\nThere's still an issue with `histogram2d` failing on log axes if the bins go past zero, but that's a trickier problem, we need to decide if the bins should also be spaced geometrically (and if so support binning that way) but that feels more like a new feature than a fix like the rest of this PR, since it will alter the data to be displayed, not just the details of how it's displayed - so it doesn't belong here - and is probably a much lower priority anyway, I don't think `histogram2d` gets a whole lot of use.",
    "created_at": "2024-01-18T22:55:23Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6819#issuecomment-1899349115",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6819",
    "updated_at": "2024-01-18T22:55:23Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @arieleiz - this is certainly a bug, but the fix goes in plotly.js, the validator you identified here is the result of codegen from the underlying plotly.js code. I'll transfer the issue and close the PR here.",
    "created_at": "2024-01-11T21:15:00Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6841#issuecomment-1887973550",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6841",
    "updated_at": "2024-01-11T21:15:00Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I was using `bar.p` previously, but that doesn't work in grouped barmode because different bars in the same group have the same `p` but should be individually rounded. I'm not sure what else to use as a key which satisfies all the constraints, but open to suggestions.\r\n\r\nLooks like `bar[pLetter]` would work (where [`pLetter = getAxisLetter(pa);`](https://github.com/plotly/plotly.js/blob/9664ca9253829bf2ecb70599765baa29e2eb3e5a/src/traces/bar/cross_trace_calc.js#L722) ie `'x'` for vertical, `'y'` for horizontal bars, if you don't already have that where you need it)",
    "created_at": "2024-01-10T01:57:05Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6761#issuecomment-1884069516",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6761",
    "updated_at": "2024-01-10T01:57:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> > I am not sure how `bar_attrs_relative` mock should look. But it renders like this:\r\n>\r\n> I can't think of a better way to handle this one really... I think it's OK to leave as-is as I can't imagine it coming up in a real use-case.\r\n\r\nThat's a funny one - you're probably right @emilykl that this won't come up in practice, though if it ever did it looks like a bug. But why are the bottom bars rounded rather than fully rectangular? This makes me a little concerned that there might be a situation where the bars look correctly stacked and yet the bottom ones get rounded anyway - however I can't find such a situation, so I'd say we can leave it as is for now.\r\n\r\n(side note: right now if I open `bar_attrs_relative` and call `Plotly.relayout(gd,'barcornerradius','50%')` nothing happens, then on `Plotly.newPlot(gd,gd.data,gd.layout)` I see the rounding, on all bars as in @archmoj's comment. Presumably this is due to [`editType`](https://github.com/plotly/plotly.js/pull/6761#pullrequestreview-1811853892)",
    "created_at": "2024-01-09T20:54:53Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6761#issuecomment-1883777567",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6761",
    "updated_at": "2024-01-09T20:54:53Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I'm worried that this may be related to the off-screen but in-DOM tester element:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/9664ca9253829bf2ecb70599765baa29e2eb3e5a/src/components/drawing/index.js#L1244-L1255\r\n\r\nBut `<svg>` elements don't support the `dir` attribute so it doesn't work to for example add a rule like:\r\n`#js-plotly-tester {dir: ltr}`. We could wrap it in a `<div>` with that attribute, perhaps that would fix it.",
    "created_at": "2024-01-05T21:28:10Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6837#issuecomment-1879277017",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6837",
    "updated_at": "2024-01-05T21:28:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@mosaikme that's certainly a nice use case, but it seems to me a little too specific to add a dedicated field for `((x0 / x1) - 1) * 100` or even `((x0 / x1) - 1)` and let the user multiply by 100 with the existing capability. This would be better done with a more general syntax parser as I mentioned in https://github.com/plotly/plotly.js/issues/6511#issuecomment-1462937672.\r\n\r\nCertainly not a simple addition, and unfortunately this isn't really on our roadmap any time soon but if you or anyone else is interested in sponsoring it we'd be happy to discuss.",
    "created_at": "2024-01-05T01:14:03Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6511#issuecomment-1877978450",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6511",
    "updated_at": "2024-01-05T01:14:03Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Interesting, thanks for bringing this up! I don't personally have any experience with SolidJS, but the good news is `react-plotly.js` and other related wrappers are generally very stable - you can plug in new versions of plotly.js without needing any updates to the wrapper. So I suspect the best route here would be for you or another community member who actively uses SolidJS to create and publish the wrapper, modeled off `react-plotly.js`, and we would happily promote it among our user community.",
    "created_at": "2024-01-04T17:42:37Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6823#issuecomment-1877511453",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6823",
    "updated_at": "2024-01-04T17:42:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@sirpeas that example looks to me like it's behaving correctly: there's only a `minallowed` on the x axis (so you can pan as far to the right as you want, but you're limited on the left) and only a `maxallowed` on the y axis (so you can pan as far down as you want but not up).",
    "created_at": "2024-01-04T16:29:59Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6779#issuecomment-1877398716",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6779",
    "updated_at": "2024-01-04T16:29:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @Keyur-Gondaliya - I see two issues in the downloaded image:\r\n(1) the front right surface is cut off so you lose some of the data and you see inside the shape (blue arrow)\r\n(2) there are visible seams between some of the facets (red arrows)\r\n![surface cracks](https://github.com/plotly/plotly.js/assets/2678795/f8f2264e-97b2-4fdf-8724-5c6770c6f280)\r\n\r\nIssue (2) I also see in the preview - so we should address it but it's not specific to `downloadImage`.\r\n\r\nIssue (1) looks like we're somehow generating different clip boundaries during download from those we generate during initial draw. Might be something about the different aspect ratio or the different resolution? Are you able to create a codepen with this figure so we can investigate?",
    "created_at": "2024-01-04T16:26:12Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6833#issuecomment-1877390904",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6833",
    "updated_at": "2024-01-04T16:26:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "“maxallowed is not working” would be a separate bug, are you able to reproduce this in a codepen? Thanks!",
    "created_at": "2024-01-04T10:42:36Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6779#issuecomment-1876879904",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6779",
    "updated_at": "2024-01-04T10:42:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @hyiltiz! Clearly we weren't aware of this convention when we created our implementation of the box plot, but it does look to me as though the distinction you're describing is used fairly consistently in the stats community. Unfortunately, this naming is part of the API, for example:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/f6c33bdb467458650d749fd7382d535c8f2aba62/src/traces/box/attributes.js#L113-L134\r\n\r\n(oops part of the `upperfence` description still talks about the lower fence, cc @archmoj)\r\n\r\nSo it would be a breaking change to alter that now, and I don't think this is severe enough to warrant that big a step. I suggest we leave the API as is and address the confusion in the docs / descriptions.\r\n\r\nThe hover text labels we could certainly change, though I'll note that this is not so simple either since it's included in all the translations, so we would need to update those too, or add some custom code to fall back on the translation of `upper fence` if the dictionary hasn't been updated to include `upper whisker`.",
    "created_at": "2024-01-03T23:45:11Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6832#issuecomment-1876118640",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6832",
    "updated_at": "2024-01-03T23:45:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "OK great. I suspect if the goal is feature parity, these ticks will always be evenly spaced, ie what I'm proposing as `tickmode='full domain'`. So let's start with just that and if a need arises later we can add `tickmode='domain array'`.\r\n\r\nIn that case the implementation can be even simpler than you're suggesting: generate `tick0 = range[0]` and `dtick = Math.abs((range[1] - range[0]) / (nticks - 1))` and then let the auto/linear algorithm take it from there.\r\n\r\nPlease note a few extra situations we'll want to pay attention to:\r\n- Category axes should not accept `tickmode='domain array'` at all, since they aren't continuous so this would have no meaning.\r\n- Log axes I guess should be OK, but we'll need to be check that the tick values they display are meaningful.\r\n- Other subplot types reuse a lot of this logic, so it either needs to be tested in all of these or explicitly excluded: 3D, polar, ternary, maybe parcoords, probably some others I'm not thinking of right now...\r\n- We should also ensure dynamic behavior is clean, ie when labels update while you're dragging the axis or an end of the axis.",
    "created_at": "2024-01-03T15:02:33Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6824#issuecomment-1875512952",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6824",
    "updated_at": "2024-01-03T15:02:33Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@ayjayt thanks for the issue and related PR.\r\n\r\nJust to make sure I understand your goals here: Our automatic ticks try to give nice round numbers, but the cost of doing that, in general, is that you won't have ticks exactly at the ends of the axis range. What you're proposing here, putting ticks at precise fractions of the axis length, does show the axis range exactly (at least if you include 0 and 1 in the list) at the expense of round values. I'll note that we have the same tradeoff with [`tickmode='sync'`](https://github.com/plotly/plotly.js/pull/6356), where the tick positions are set by the other axis and therefore their values are in general not nice round numbers.\r\n\r\nAnother way to accomplish a subset of the functionality you're proposing but with a more concise API would be to continue using `nticks` but make a `tickmode` that forces ticks at both ends and then divides up the axis evenly, ie the tick spacing is exactly `(range[1] - range[0]) / (nticks - 1)`, so your example would have `nticks=3`. If you instead wanted ticks at the ends and every quarter of the axis you would set `nticks=5`.\r\n\r\nThat feels to me like it would cover most of the uses for this feature, do you ever foresee wanting to use this with tickvals that are either (a) not evenly spaced or (b) not spanning exactly 0 to 1? We could of course start with one of these and then add the other later, but if nearly everyone will use the simpler one we should start there.\r\n\r\nRe: [naming](https://martinfowler.com/bliki/TwoHardThings.html) - to me the key here is that (in the variant I'm proposing) the ticks span the whole domain, so maybe we just say that: `tickmode='full domain'`? And in the original variant you provide an array of fractions of the axis domain, so perhaps this mode could be called `tickmode='domain array'`?",
    "created_at": "2024-01-02T23:02:06Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6824#issuecomment-1874665683",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6824",
    "updated_at": "2024-01-02T23:02:06Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Using `shape-rendering: 'crispEdges'` the rounded bars do not look great inside the browser.\r\n> I suggest we do not add it when there is a rounded bar that position.\r\n\r\n`crispEdges` needs to have the same value for all bars at least in a given subplot, and bars that are either stacked or grouped with no gap don't look good without `crispEdges`, an odd subpixel gap ends up being created. So within those constraints we could look for opportunities to disable it, but my hunch is we should just keep it enabled everywhere.",
    "created_at": "2023-12-16T11:34:16Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6761#issuecomment-1858796179",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6761",
    "updated_at": "2023-12-16T11:34:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> @alexcjohnson Is `autotickangles` the bast name we could use? Should we use singular form?\r\n\r\nI think `autotickangles` is the right name. Plural because we only accept an array (and if we go with my suggestion in https://github.com/plotly/plotly.js/pull/6790#discussion_r1428544799 there would be no reason to use a single-item array)",
    "created_at": "2023-12-15T22:23:01Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6790#issuecomment-1858562037",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6790",
    "updated_at": "2023-12-15T22:23:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I'm not sure this is quite right - if I make the labels take up a large fraction of the total area, the axis isn't expanded enough to keep the desired range off the labels (this is `zz-insiderange-x-multi-y` with `\"tickprefix\": \"MMMMMMM\",` added to `layout.template.yaxis`):\r\n\r\n<img width=\"812\" alt=\"Screenshot 2023-12-15 at 13 11 26\" src=\"https://github.com/plotly/plotly.js/assets/2678795/7c13b40b-3e6f-478d-b3b2-56c8659a26b9\">\r\n",
    "created_at": "2023-12-15T18:14:12Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6817#issuecomment-1858300952",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6817",
    "updated_at": "2023-12-15T18:14:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I wouldn't consider this a bug, but it's certainly not helpful for your use case.\r\n\r\n(Also: please don't use `plotly-latest` from the CDN anymore, it's stuck at the end of v1.x. Use exact versions ie `plotly-2.27.1.min.js` in version 2.)\r\n\r\nPlotly bar charts don't natively do any aggregation. We try to display all the data you give us, so if you ask for bars of size 20, -6, and 5 we'll draw bars with heights 20, -6, and 5. This is all well and good when all of these heights are positive, but it gets ambiguous when some are negative. Here's a fork of your codepen with v2.27.1 and making the individual bars semitransparent so you can see them when they overlap: https://codepen.io/alexcjohnson/pen/ZEwPPVR?editors=0010 Here's what the different barmodes do:\r\n- `overlay` - starts each bar separately from the origin, draws them all on top of each other\r\n- `relative` - positive bars stack above the origin, negative bars stack below\r\n- `group` - for one trace, same as `relative`; for multiple traces, sets traces side-by-side\r\n- `stack` - each bar starts where the previous left off, so the stack will end at the overall total, but there's no guarantee that you didn't at some point go outside the range from 0 to the final sum (in fact in your examples it's unavoidable, regardless of the order you provide the data)\r\n\r\nIf you want aggregation, use a `histogram` trace with `histfunc: 'sum'` (the default is `histfunc: 'count'` which ignores the `y` data)",
    "created_at": "2023-12-10T14:04:45Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6809#issuecomment-1848974719",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6809",
    "updated_at": "2023-12-10T14:04:45Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "That's a great idea @fzeiser - I believe this is only implemented for 2D cartesian axes, but it could be useful for all subplot types - geo, mapbox, 3D, polar, smith, ternary... It'd be a bit of a project (even to do one subplot type at a time, which would be fine) but if anyone wants to give it a shot we'd be happy to advise. This would need to happen in JS though, so I'll move this to the plotly.js repo.",
    "created_at": "2023-12-08T22:49:47Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6813#issuecomment-1847941057",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6813",
    "updated_at": "2023-12-08T22:49:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "We don't have anyone on staff who speaks Belarusian, but we'd gladly accept a PR to add it. See https://github.com/plotly/plotly.js/blob/master/.github/PULL_REQUEST_TEMPLATE.md#translations for details.",
    "created_at": "2023-12-08T02:18:42Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6808#issuecomment-1846452203",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6808",
    "updated_at": "2023-12-08T02:18:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Great! So this works with the `@plotly/d3-sankey` we already have, doesn't need upstream changes?\r\n\r\nHas this been tested with circular links in the diagram? Can we maybe add one mock showing this?",
    "created_at": "2023-12-05T21:39:22Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6800#issuecomment-1841657339",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6800",
    "updated_at": "2023-12-05T21:39:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj this looks great, really nice work! No comments, other than as discussed let's try to skirt the only-lines issue by adding mock markers - either tiny and matching the line color, or maybe they can be specified as transparent... or maybe there's a way to add markers that doesn't require them to match the input arrays at all, and we can just add a single marker at some point that we know won't affect anything? However you come up with to do it, make sure it doesn't impact autorange.",
    "created_at": "2023-11-30T22:32:17Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6784#issuecomment-1834664762",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6784",
    "updated_at": "2023-11-30T22:32:17Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @Worschi! Good to know that this can be done with a geojson layer. But I'd like to keep this issue open until we investigate adding it to scattermapbox, that will still be more useful if we can get it working.",
    "created_at": "2023-11-29T15:23:00Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6791#issuecomment-1832106354",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6791",
    "updated_at": "2023-11-29T15:23:00Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "IIRC these characters are in D3 code that we import, not in the plotly.js codebase itself, which may make it harder to edit. ",
    "created_at": "2023-11-24T14:28:19Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6797#issuecomment-1825751726",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6797",
    "updated_at": "2023-11-24T14:28:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@LeonidKokhnovich are the markers missing in https://plotly.com/javascript/webgl-vs-svg/ ? Or can you provide a codepen that renders incorrectly for you? And what can you tell us about your hardware, OS, and browser? If we have a clear reproduction we can certainly reopen.",
    "created_at": "2023-11-14T22:59:09Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4511#issuecomment-1811525905",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4511",
    "updated_at": "2023-11-14T22:59:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Oh that's an interesting idea, but no I don't believe it's possible currently.",
    "created_at": "2023-11-08T21:00:03Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/887#issuecomment-1802666083",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/887",
    "updated_at": "2023-11-08T21:00:03Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ah, this feature was actually released just recently as `axis.minallowed` / `axis.maxallowed` - added in plotly.js v2.26 / plotly.py v5.17, via #6547\r\nSee https://plotly.com/python/axes/#setting-a-maximum-and-minimum-allowed-axis-value for usage from Python!",
    "created_at": "2023-11-08T20:46:15Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/887#issuecomment-1802649717",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/887",
    "updated_at": "2023-11-08T20:46:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@mosaikme arbitrary math was not implemented but was discussed in the original issue https://github.com/plotly/plotly.js/issues/6511#issuecomment-1462937672 - feel free to open a new issue to request this, or even better a PR to make it happen 😉 ",
    "created_at": "2023-11-08T19:12:48Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6527#issuecomment-1802496322",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6527",
    "updated_at": "2023-11-08T19:12:48Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @david-bezero - yes, this is one we haven't gotten to yet but your suggestion is probably the way to go. Feel like making a PR?",
    "created_at": "2023-11-03T18:11:43Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6672#issuecomment-1792912825",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6672",
    "updated_at": "2023-11-03T18:11:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Would you be using https://momentjs.com/timezone/ to handle tz conversions or something else?\r\n\r\nWe're hoping this can all be done with built-in browser APIs but there's still some research to be done before we can confirm this.",
    "created_at": "2023-10-31T16:49:07Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3870#issuecomment-1787601809",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3870",
    "updated_at": "2023-10-31T16:49:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj is this also fixed by https://github.com/plotly/plotly.js/pull/6757, like #4729 is?",
    "created_at": "2023-10-26T15:23:48Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5316#issuecomment-1781347106",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5316",
    "updated_at": "2023-10-26T15:23:48Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice detective work @RichardNeill! As a workaround until we resolve this, you can use `yaxis: {autorangeoptions: {minallowed:0}}` to get the same initial effect without the bug.",
    "created_at": "2023-10-25T22:56:50Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6762#issuecomment-1780169244",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6762",
    "updated_at": "2023-10-25T22:56:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This has been discussed many times over the years (see eg #1464), but in light of changes in the ecosystem perhaps it's worth revisiting. Three commitments we've made for plotly.js make functions like this this difficult. The decreasing importance of [Chart Studio](https://chart-studio.plotly.com/) has shifted things a bit but these are still firm requirements:\r\n- The figure spec for plotly.js must be JSON-serializable, so that the full functionality is available from all back-end languages, no functionality is JavaScript-only.\r\n- The figure must be portable - ie no information is lost and no visual changes if the figure is saved and reconstituted in another environment.\r\n- For security purposes we do not execute arbitrary code from strings in the figure spec. Many applications allow part or all of the figure to be provided by one user, stored, and reloaded by another user, and we do not want authors of such applications to have to think about XSS via plotly.js.\r\n\r\nThere is a workaround we could imagine adding here, which already exists in [Dash AG Grid](https://github.com/plotly/dash-ag-grid) - bundle in a JS parser that can execute a restricted set of functionality from a string. This is an awfully heavy solution, and would be even more limited here because the portability requirements for plotly.js are stronger than in Dash AG Grid so the code here would need to be fully self-contained, ie no reaching out to functions somewhere in the global namespace. So it's not clear to me that adding a parser would be better than continuing to enhance the declarative spec.\r\n\r\nI'm sorry you find the code disorganized, feel free to submit a PR to help us improve the organization.",
    "created_at": "2023-10-23T16:28:25Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6755#issuecomment-1775570703",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6755",
    "updated_at": "2023-10-23T16:28:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This is ancient, sorry - but see #1464 ",
    "created_at": "2023-10-23T16:19:15Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4840#issuecomment-1775555249",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4840",
    "updated_at": "2023-10-23T16:19:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I don't see an image but if `element.style` shows `font-size: 12px` rather than the size you specified, it's not extra CSS overriding this, could really be a bug in the library. It's going to be very hard for us to track it down though unless we can find the conditions to reproduce it ourselves.",
    "created_at": "2023-10-18T17:30:02Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6749#issuecomment-1769014726",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6749",
    "updated_at": "2023-10-18T17:30:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "What version of plotly.js do you have in your app, and how are you getting it?\r\n\r\nThe next thing to look at is `gd._fullLayout` where `gd` is the `<div>` in which you created the plot. It should contain all the layout info you specified, plus the defaults for anything you didn't specify. However given that the `__data__` for the `g.xtick` element contains `fontSize: 36` I suspect we're doing what we can to set the `font-size` style attribute but it's getting overridden by something in your CSS. Try `document.querySelector('g.xtick text')` and then (if you're in Chrome) right-click the result -> \"Reveal in Elements panel\". If I do that in https://codepen.io/alexcjohnson/pen/wvQYwvy I see:\r\n<img width=\"866\" alt=\"Screenshot 2023-10-17 at 22 22 31\" src=\"https://github.com/plotly/plotly.js/assets/2678795/9964ca8c-2f7a-4d8e-a3c2-eb69e317d993\">\r\nwhere `font-size: 36px;` is visible on the right side. Either that's not there in your plot, or it's there and crossed out, meaning it was overridden and farther down you should be able to see what's overriding it.",
    "created_at": "2023-10-18T02:26:09Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6749#issuecomment-1767511880",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6749",
    "updated_at": "2023-10-18T02:26:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks like #6749 has more info so I'll close this one",
    "created_at": "2023-10-18T02:06:29Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6748#issuecomment-1767495710",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6748",
    "updated_at": "2023-10-18T02:06:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @igi-chris - apologies for not noticing this issue earlier, but yes, it's a known issue that we don't handle depth correctly with opacity in 3D https://github.com/plotly/plotly.js/issues/1267 (and other trace types too, eg https://github.com/plotly/plotly.js/issues/3243) - closing since the problem is covered in other issues.\r\n\r\nTo the best of our knowledge there's no order-independent transparency algorithm with anywhere near the performance we have for opaque objects, so this would require a very different approach.",
    "created_at": "2023-10-06T15:21:53Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6536#issuecomment-1750886942",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6536",
    "updated_at": "2023-10-06T15:21:53Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @alexturcea - as I mentioned before, we'll need to adapt your fiddle into a test, would you be able to try that? We'll also need a [draftlog](https://github.com/plotly/plotly.js/tree/master/draftlogs) item.",
    "created_at": "2023-10-06T15:14:51Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6452#issuecomment-1750871429",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6452",
    "updated_at": "2023-10-06T15:14:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "#6547 (released in v2.26.0) covered a lot of the use cases here, but there's a lot that's been discussed here, I see at least three more pieces still open:\r\n- autoranging one axis based on only the data that's visible based on the range set on the opposite axis.\r\n- `rangemode: symmetric` (has its own issue plotly/plotly.py#1022)\r\n- making the trace-dependent autorange adjustments configurable: padding added beyond the data range, whether we ensure the range goes to zero\r\n\r\nAny I missed?\r\n\r\n@archmoj I wonder if we should make new issues for the two pieces that don't already have their own issues, and close this one? It's gotten too big and diffuse to be very useful anymore, and most of it is done.",
    "created_at": "2023-10-02T22:57:56Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1876#issuecomment-1743885754",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1876",
    "updated_at": "2023-10-02T22:57:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ideally it would be great to allow ALL font attributes to take several extra pieces, not just `family`, `size`, and `color`. Easiest would be to just pass more CSS attributes through:\r\n- `weight` -> [`font-weight`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight) for bold etc\r\n- `style` -> [`font-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-style) for italic\r\n\r\nand maybe if we want to be (more) complete:\r\n- `variant` -> [`font-variant`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant) for small caps and ligature control\r\n- `stretch` -> [`font-stretch`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-stretch)\r\n\r\nThere's more... but we're already awfully deep in the weeds if we add these 4!",
    "created_at": "2023-09-27T16:52:56Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4646#issuecomment-1737760153",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4646",
    "updated_at": "2023-09-27T16:52:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "That page describes `layout.images`, which is meant for displaying non-data images like logos. You're trying to use the `image` trace type, which is https://plotly.com/javascript/reference/image/#image-source - and in particular this doesn't support display from a URL, it wants either a `data:image` URI or an MxNx(3 or 4) array. We don't have a reference page for doing this in JS, but in Python the lower-level interface looks like this: https://plotly.com/python/imshow/#passing-image-data-as-a-binary-string-to-goimage or https://plotly.com/python/imshow/#display-multichannel-image-data-with-goimage respectively.",
    "created_at": "2023-09-25T21:31:41Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6732#issuecomment-1734491948",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6732",
    "updated_at": "2023-09-25T21:31:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Oh you know, from the icons it looks like you have an old version of plotly.js. Please note if you're using https://cdn.plot.ly/plotly-latest.min.js, that's the end of the v1.x line, not the current v2.x. The current version is https://cdn.plot.ly/plotly-2.26.1.min.js\r\n\r\nIf that doesn't fix it, please try to make a [codepen](https://codepen.io/alexcjohnson/pen/yLGPgdE) showing the issue. What you've posted here is not something we can run without a lot of guesswork.",
    "created_at": "2023-09-25T21:12:47Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6733#issuecomment-1734470388",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6733",
    "updated_at": "2023-09-25T21:12:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "PDF generation is awkward within the browser, unfortunately - we haven't found a workable way to build this in like you can with the other formats. If you're just concerned about file size I don't think SVG should be much worse than PDF if at all. The issue with SVG typically is in fact the opposite: it does NOT include fonts, which can make it smaller but causes it to render differently in different environments (even on the same computer) which not only makes it look different, but can make the text overflow its container, since we use the as-rendered size of the text in the browser to decide how much margin to add, how big a box to put around legends and annotations, etc.\r\n\r\nBrowsers can generally print to PDF, but this isn't available programmatically. So the best I can suggest is to save as SVG, reopen that in the browser, and print to PDF. You should be able to remove the step of saving the SVG, and just open a new window/tab with only the plot in it, which the user can then save as a PDF directly - which should also enable you to ensure the right fonts are loaded.",
    "created_at": "2023-09-25T16:54:35Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6729#issuecomment-1734130725",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6729",
    "updated_at": "2023-09-25T16:54:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @droberts-ctrlo - I'm curious to hear about what you implemented. From the sound of it I'm guessing you already have a choropleth, and I think what you're adding is a flavor of categorical colorscales https://github.com/plotly/plotly.js/issues/1747. The alternative for this kind of data is to break it into different traces, one per category, and give each trace a fixed color. This is what `plotly.express` does from the Python side, but we don't have a clean way to construct traces like this purely in JS.",
    "created_at": "2023-09-25T16:05:57Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6731#issuecomment-1734050571",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6731",
    "updated_at": "2023-09-25T16:05:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "We expect to make a new release next week. Thanks for your contribution @andrej-vasilj!",
    "created_at": "2023-09-22T18:46:28Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6727#issuecomment-1731894668",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6727",
    "updated_at": "2023-09-22T18:46:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The first piece is a common feature of violin plots, by smoothing out the KDE it winds up implying a distribution that extends beyond the observed min and max (you can see in your data the max goes farther than the data too, though this may not have the same impossible interpretation as negative values). If you want it to end at the data you can set `spanmode='hard'`, or just to prevent negatives you can set `span: [0, null]`\r\n\r\nThe second piece (cut-off violin due to too-small autorange) looks like a bug. Can you provide a complete figure that shows this effect? As a codepen would be ideal.",
    "created_at": "2023-09-22T15:58:14Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6733#issuecomment-1731660872",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6733",
    "updated_at": "2023-09-22T15:58:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ah, `white-space: pre`, nice to know that this supports `\\n` linebreaks - @archmoj any reason you can think of not to do this?\r\n\r\nThis text is funny, as it’s inserted with an `:after{content}` CSS rule so it can’t include tags. ",
    "created_at": "2023-09-22T10:44:41Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6722#issuecomment-1731205644",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6722",
    "updated_at": "2023-09-22T10:44:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Just came up again... the root issue here is that in WebGL numbers generally are single-precision floats, whereas elsewhere in JS they're double-precision. To fix this we would need to rescale all the input data prior to sending it to WebGL. Possible, but a fairly big project and may have performance implications.",
    "created_at": "2023-09-22T01:44:55Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5346#issuecomment-1730670143",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5346",
    "updated_at": "2023-09-22T01:44:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I think it's actually a bit tricky to explicitly set line breaks, but these tooltips are HTML, not SVG, so you can tweak them in CSS, something like:\r\n```\r\n.js-plotly-plot .plotly.plotly [data-title]:after {\r\n    max-width: 200px;\r\n    white-space: normal;\r\n}\r\n```\r\n(the long selector is just to give more specificity than the built-in rule - you could also use `!important`)",
    "created_at": "2023-09-21T21:14:50Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6722#issuecomment-1730311772",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6722",
    "updated_at": "2023-09-21T21:14:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Sounds like the violin plot itself is doing the right thing given the data it received, so I'll close this issue. My guess is if the zeros are not meaningful data to you, they should be filtered out in a preprocessing step (maybe leaving one of them so you still see that there are zeros, but not so many that they swamp the real data) but if you want to discuss this further the right place to post is https://community.plotly.com/",
    "created_at": "2023-09-19T15:25:55Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6730#issuecomment-1725888561",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6730",
    "updated_at": "2023-09-19T15:25:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Oh that example is using the wrong flavor of log, should be log10 https://codepen.io/alexcjohnson/pen/yLGPgdE - thanks @Turakar ",
    "created_at": "2023-09-19T12:36:55Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1258#issuecomment-1725429514",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1258",
    "updated_at": "2023-09-19T12:36:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for the nudge @uraani - This looks good to me, @archmoj any comments?",
    "created_at": "2023-09-18T14:41:57Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6718#issuecomment-1723585204",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6718",
    "updated_at": "2023-09-18T14:41:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @baptistelabat-syroco!\r\n\r\nLooks like the SVG engine treats the start and end points as identical in this case, so it can't figure out how to draw the nearly-360-degree arc. We already catch this when the arc is *exactly* 360 degrees:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/f316a7a8a5b9d914664e6fbc9b851dd7ba98a6b0/src/traces/pie/plot.js#L101-L111\r\n\r\nSeems like we just need to loosen this criterion. Might as well do this for any slice bigger than 50%. Should be as simple as changing `pt.v === cd0.vTotal` to `pt.v > cd0.vTotal / 2` and changing a couple of those `pt.px0` to `pt.px1` (probably the last one in the main arc and the first in the hole)... then adding the condition you found to a test image. Feel like making a PR???",
    "created_at": "2023-09-18T14:20:10Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6728#issuecomment-1723525490",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6728",
    "updated_at": "2023-09-18T14:20:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Maybe possible, but this is not officially supported. We use various browser APIs, perhaps most importantly `getBoundingClientRect` for sizing text.",
    "created_at": "2023-09-15T19:06:46Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6719#issuecomment-1721721566",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6719",
    "updated_at": "2023-09-15T19:06:46Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Great catch @wkmor1 - this will close #4612. Also see the general issue about this #2269 if anyone is interested in ensuring we catch ALL issues of this nature.",
    "created_at": "2023-09-13T21:53:53Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6723#issuecomment-1718366403",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6723",
    "updated_at": "2023-09-13T21:53:53Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Getting much closer! There's still some weird behavior if you set a partial range and `autorange: true` (it keeps the specified end, but on double-click does not fully autorange) or `autorange: 'reversed'` (it drops BOTH the reversing and the partial range and gives you full non-reversed autorange).\r\n\r\nAs I started writing this I was hoping we could allow you to specify a single-ended range along with `autorange: 'reversed'` and have it infer `autorange: 'max reversed'` or `'min reversed'`. But that's incompatible with the current behavior that if you specify a complete range along with `autorange: true` where the input range is discarded.\r\n\r\nSo I think the correct logic must be:\r\n- First coerce `range`\r\n- Then coerce `autorange`:\r\n  - If no range is given, the only allowed `autorange` values are `[true, 'reversed']`, default `true`\r\n  - If only `range[0]` is given, `autorange` may be `[true, 'reversed', 'max', 'min reversed']`, default `'max'`\r\n  - If only `range[1]` is given, `autorange` may be `[true, 'reversed', 'min', 'max reversed']`, default `'min'`\r\n  - If both are given, any `autorange` value is allowed, default `false`\r\n- Push the resulting `autorange` back into the input container\r\n- Based on the chosen `autorange` value, either remove the entries from `range` that we've determined should be autoranged, or ensure the autorange ignores and replaces those values.\r\n\r\nWhat do you think? Does this make sense?",
    "created_at": "2023-08-23T16:00:03Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6547#issuecomment-1690224678",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6547",
    "updated_at": "2023-08-23T16:00:03Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj if I set one end of the range and ask for normal order, the behavior now is perfect AFAICT, ie either of these a doubleclick alternates between the original range and a full autorange, and if I first pan/zoom and then doubleclick, it goes to the original range first, then to a full autorange.:\r\n```js\r\nPlotly.newPlot(gd,[{y:[4,5,6,7]}],{yaxis:{range:[5.5,null]}})\r\nPlotly.newPlot(gd,[{y:[4,5,6,7]}],{yaxis:{range:[null, 5.5]}})\r\n```\r\nAnd if I get the reversed setting precisely correct, the behavior is also correct, with axis reversed and doubleclick toggling between initial state and full autorange:\r\n```js\r\nPlotly.newPlot(gd,[{y:[4,5,6,7]}],{yaxis:{range:[null, 5.5], autorange:'max reversed'}})\r\nPlotly.newPlot(gd,[{y:[4,5,6,7]}],{yaxis:{range:[5.5, null], autorange:'min reversed'}})\r\n```\r\nHowever, if I instead add `autorange: 'reversed'` (which I would have expected would be interpreted the same as the two cases above), then a doubleclick does nothing (until I pan/zoom, then doubleclick takes me back to the original as desired, but a second doubleclick should then go to full autorange).\r\n```js\r\nPlotly.newPlot(gd,[{y:[4,5,6,7]}],{yaxis:{range:[null, 5.5], autorange:'reversed'}})\r\nPlotly.newPlot(gd,[{y:[4,5,6,7]}],{yaxis:{range:[5.5, null], autorange:'reversed'}})\r\n```\r\n\r\nAlso if I pick the wrong reversed option:\r\n```js\r\nPlotly.newPlot(gd,[{y:[4,5,6,7]}],{yaxis:{range:[null, 5.5], autorange:'max'}})\r\nPlotly.newPlot(gd,[{y:[4,5,6,7]}],{yaxis:{range:[5.5, null], autorange:'min'}})\r\nPlotly.newPlot(gd,[{y:[4,5,6,7]}],{yaxis:{range:[null, 5.5], autorange:'min reversed'}})\r\nPlotly.newPlot(gd,[{y:[4,5,6,7]}],{yaxis:{range:[5.5, null], autorange:'max reversed'}})\r\n```\r\nI think would expect the `autorange` setting to be ignored, except maybe for whether it's reversed or not. And that's how it looks initially (the provided end of the range is respected and the other end is autoranged, even though the setting asked for the opposite), but after that a doubleclick takes me to full autorange and then with further doubleclicks we stay there, rather than going back to the initial range.",
    "created_at": "2023-08-22T22:58:20Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6547#issuecomment-1689031429",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6547",
    "updated_at": "2023-08-22T22:58:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The bars in bar charts have antialiasing disabled, but we do try to adjust them so that at least one pixel is always visible. Giving your bars a width of 0 and a line width of 0.001 is pushing our algorithm to its edge though. Is it fixed if you increase that line width to something like 0.5? Can you share a link ot that codepen?",
    "created_at": "2023-08-22T14:38:00Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6715#issuecomment-1688316820",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6715",
    "updated_at": "2023-08-22T14:38:00Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "closed by #6698 🎉 ",
    "created_at": "2023-08-18T18:31:39Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6697#issuecomment-1684284616",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6697",
    "updated_at": "2023-08-18T18:31:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Good point! I don't see any way currently to turn this behavior off. Seems like the options are:\r\n- add something like `false` to the acceptable options for `scaleanchor` so you can explicitly override a default set by having an image\r\n- add an attribute to `image` traces to disable automatic `scaleanchor` - ie giving the image trace an attribute like `squarepixels` which would default to `true` but you can set it to `false` in which case that image would not contribute to `axHasImage`.\r\n\r\nThe second might be more discoverable in the documentation, but it's less direct and if you have multiple images you'd need to set this on all of them. The first requires you to figure out that the constraint is specified on the Y axis and that an explicit `false` will remove it, but you only have to do this once (per Y axis) and would generalize if we ever add any other conditions that automatically set a constraint.\r\n\r\nSo I'd lean toward the first, plus a note somewhere in the docs for image trace about this setting in the Y axis.",
    "created_at": "2023-08-17T16:49:56Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6709#issuecomment-1682626973",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6709",
    "updated_at": "2023-08-17T16:49:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@tony it's been long enough that sure, this issue can be about CSS variables even if there might have been other pieces in the past.\r\n\r\nI'll just note that due to blending, WebGL, and exporting we probably can't simply use CSS variables directly in the rendered SVG, we'd need to materialize them at the main div level and use that materialized value to render, and if we want to support dynamic styling we'd need to watch for changes in those variables. And for exporting we'd need to also insert those values back into the figure spec.",
    "created_at": "2023-08-15T22:09:36Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4915#issuecomment-1679686851",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4915",
    "updated_at": "2023-08-15T22:09:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I kind of doubt it, but anyway the setting needs to be per-plot, so it would need to be applied at the point of use rather than in this constants file. I think we just need to find the logic around choosing x vs y vs d and have it ignore the disallowed flavors.\r\n\r\nBTW I gather @AdnanBoota has moved on, but if we want to support the original use case `zoomdirection` would need a value `xy` in addition to `x`, `y`, and `d`. ",
    "created_at": "2023-08-13T15:38:29Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3923#issuecomment-1676394785",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3923",
    "updated_at": "2023-08-13T15:38:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@josephernest this feature has yet to be implemented and I'm not aware of any hacks to achieve your goal. We'd be happy to accept a PR adding a `zoomdirection` attribute.",
    "created_at": "2023-08-13T06:33:40Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3923#issuecomment-1676250614",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3923",
    "updated_at": "2023-08-13T06:33:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Did you solve this @tuankhang39?",
    "created_at": "2023-07-31T12:20:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6687#issuecomment-1658264066",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6687",
    "updated_at": "2023-07-31T12:20:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @tuankhang39 - this does look like a bug to me, @archmoj do you agree or is this behavior somehow expected?",
    "created_at": "2023-07-30T01:20:42Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6687#issuecomment-1656989133",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6687",
    "updated_at": "2023-07-30T01:20:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @drderiv - this is an interesting concept and clearly useful! I'm a little worried about it though, as the user would need to be pretty careful to end any particular chain of operations with `redraw=true`, otherwise some data would be missing when the graph looks static.\r\n\r\nWhat if we instead added a `throttle` parameter, that specified a minimum number of milliseconds between redraws but then we could schedule one last update to happen that much time later if no more data arrives? And it would default to zero to match the current behavior.",
    "created_at": "2023-07-25T02:05:15Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6682#issuecomment-1648860977",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6682",
    "updated_at": "2023-07-25T02:05:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Excited for this! \r\nFYI @julianna-langston @spmealin - I think we can sort out most of what we need but your feedback is of course welcome!\r\n\r\n@archmoj thoughts about packaging? Is a 50kb increase in minified bundle acceptable or should we keep `chart2music` external like `MathJax`? If we did make it external we'd probably want it included by default in plotly.py output, and we could have Dash detect and autoload it, but plain plotly.js users would need to explicitly load it",
    "created_at": "2023-07-24T21:27:25Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6680#issuecomment-1648644426",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6680",
    "updated_at": "2023-07-24T21:27:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "If we do this we should add `lib.getgraphDiv` to the function (or make the exported function a wrapper that adds this), so in Dash you'd do something like:\r\n```py\r\nclientside_callback(\r\n    \"\"\"\r\n    function eraseShape(_, graph_id) {\r\n        Plotly.eraseActiveShape(graph_id)\r\n        return dash_clientside.no_update\r\n    }\r\n    \"\"\"\r\n    Output('my-graph', 'id'),\r\n    Input('erase-button', 'n_clicks'),\r\n    State('my-graph', 'id'),\r\n    prevent_initial_call=True\r\n)\r\n```\r\nrather than needing `Plotly.eraseActiveShape(document.getElementById(graph_id))`\r\n(note this code won't work with pattern-matching IDs but that's a broader issue...)",
    "created_at": "2023-07-24T17:57:13Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6679#issuecomment-1648355710",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6679",
    "updated_at": "2023-07-24T17:57:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I notice a bug that seems to be new in this PR: if you have multiple legends, with or without shapes, you can double-click a trace or shape to isolate it, but if you double-click the same trace or shape again it doesn't bring the others back.",
    "created_at": "2023-07-24T14:38:13Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6653#issuecomment-1648043371",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6653",
    "updated_at": "2023-07-24T14:38:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I think the _right_ solution here is to rewrite how the `contour` trace handles \"triplet\" data - ie x/y/z all 1D arrays so that you end up with a collection of (x,y,z) triplets rather than a grid of 2D z vs 1D x and y. Currently we take that input, smoosh it into a grid and then interpolate, but as described in #3166 that doesn't scale well at all. See also #3503 where we discussed applying this to ternary phase diagrams.\r\n\r\nAs described in those issues, we would first do Delaunay triangulation from the (x,y) points, then create a \"marching triangles\" algorithm, like the \"marching squares\" algorithm the gridded contour plots use but at least it should be simpler since there are many fewer cases to consider, and then we can plug this into the plotting routines we already have for contour plots.\r\n\r\nIt's a big project, and not something that's on our internal roadmap right now unless someone is interested in sponsoring it, but we'd be happy to support if anyone is interested in working toward a PR.",
    "created_at": "2023-07-18T16:50:08Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4509#issuecomment-1640582663",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4509",
    "updated_at": "2023-07-18T16:50:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I was thinking I'd have to write an example but then I stumbled on [this codepen](https://codepen.io/ajoposor/pen/vmePBp?editors=0010) (from 2017!) that does exactly what I was imagining. 🙇 @ajoposor",
    "created_at": "2023-07-17T13:12:29Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6314#issuecomment-1638115738",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6314",
    "updated_at": "2023-07-17T13:12:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @apparebit ! This looks great, I'll defer to @archmoj (who's on vacation this week) for whether this needs to be included in a test image or a Jasmine test - anyway we'll wait to merge until he's back.\r\n\r\n@archmoj the webgl-jasmine tests were particularly flaky here, took 3 retries before they passed. Is this just a bad day at CircleCI or has that test gotten flakier recently?",
    "created_at": "2023-07-11T16:56:01Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6670#issuecomment-1631168997",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6670",
    "updated_at": "2023-07-11T16:56:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @colbster5 - that certainly is confusing. Here's the same in a pared-down codepen: https://codepen.io/alexcjohnson/pen/RwJQGdZ?editors=0010\r\n\r\nWhat seems to be happening is we treat the label as though it's located at the end of the bar, even though it's at the start. Then when `cliponaxis=False`, the full label is either shown or hidden based on whether the point it's located at is in or out of range. Certainly it would be better to base this on the start of the bar, but I think it might make more sense for inside text to ignore `cliponaxis=False` entirely. For example look what happens when you pan these bars part-way off the other side of the chart:\r\n![Screenshot 2023-06-26 at 08 55 51](https://github.com/plotly/plotly.js/assets/2678795/8b52d3c0-a2ba-4d76-94dc-2fe57f4a4948)\r\nNote that in your original example this wouldn't be seen at all since the white text is invisible on the white background, which is why I left it black for demonstation.\r\n\r\nWe should definitely fix this, but in the meantime, can you just omit `cliponaxis=False`? Is there some other purpose to including this flag?",
    "created_at": "2023-06-26T15:10:39Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6651#issuecomment-1607689385",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6651",
    "updated_at": "2023-06-26T15:10:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @CnrLwlss - I had forgotten about this part, but I think (correct me if I'm wrong @archmoj) it's just the 3D plots, which use the old stack.gl system rather than regl, that still create one WebGL context per subplot. If you do the same test using `scattergl` instead of `scatter3d` it works correctly with an arbitrary number of subplots.\r\n\r\n@archmoj I guess as we're considering a full solution to this issue we'll have to figure out either porting 3D into regl or making the 3D subplots reuse regl's context before we can consider it done.",
    "created_at": "2023-06-22T14:00:26Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2333#issuecomment-1602693824",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2333",
    "updated_at": "2023-06-22T14:00:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@lvlte very interesting, thanks for this PR. In most cases I think this exactly the right change - in the fully-auto case now we're representing the full data range in the colorbar, which is the main thing. Even when it results in a substantial change in the colorbar, like the `airfoil` and `h-colorbar_airfoil` mocks, for some reason these specify `zmin` and `zmax` and currently we just ignore those, but this PR makes us honor those. That said, it looks like we'll only honor them if they're outside the range of the contours (+/- half a contour on either end) - shouldn't we also allow users to specify a narrower range and honor that in the colorbar?\r\n\r\nThe other case I think might not be what we want is when you specify `contours: {start, end}` but do NOT specify `zmin` or `zmax`. That's the case in the `contour_edge_cases` mock for example, all but the top two subplots, where including the implicit zmin and zmax from the data range collapses your specified contours into invisibility in the middle of the colorbar. I don't think it's reasonable to ask the user to also specify `zmin` and `zmax` in that case, that feels duplicative. Can we add logic like \"if your input trace specifies contour `start` and `end`, use `start-size/2` and `end+size/2` as the default for `zmin` and `zmax` instead of the data min/max\"?",
    "created_at": "2023-06-22T13:33:27Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6625#issuecomment-1602648779",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6625",
    "updated_at": "2023-06-22T13:33:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @warrickball - do you have a reference for how exactly `id` and / or `name` attributes improve accessibility? These anchor elements are the actual modebar buttons, `rel=\"tooltip\"` looks to me like an obsolete artifact we should remove (the buttons have tooltips added by CSS based on the `data-title` attribute).\r\n\r\nThe buttons are created here:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/ab5e16afc34fa4f22efffef129f811381580e0fe/src/components/modebar/modebar.js#L140\r\n\r\nbased on config items in [buttons.js](https://github.com/plotly/plotly.js/blob/master/src/components/modebar/buttons.js)\r\n\r\nObvious `name` would be `config.name`, or `id` maybe `config.name + '-' + this.graphInfo._fullLayout._uid`",
    "created_at": "2023-06-22T11:49:01Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6645#issuecomment-1602499521",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6645",
    "updated_at": "2023-06-22T11:49:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Please try again, should be working now. Sorry for the inconvenience!",
    "created_at": "2023-06-21T12:19:36Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6648#issuecomment-1600732010",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6648",
    "updated_at": "2023-06-21T12:19:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks all - we're working on it.",
    "created_at": "2023-06-21T12:02:27Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6648#issuecomment-1600708228",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6648",
    "updated_at": "2023-06-21T12:02:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @dustinstender - the TODO in that test makes it look like we just never completed this behavior for pie charts, so we removed the broken behavior, but we would prefer the feature to be completed. @archmoj is that how you understand this too?",
    "created_at": "2023-06-20T12:08:21Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6633#issuecomment-1598652006",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6633",
    "updated_at": "2023-06-20T12:08:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "If you’re using 1.58.5 because it’s “latest” via CDN, please note that we did not advance the “latest” tag to v2.x, to avoid pushing breaking changes to users. Please use an explicit recent version, current is 2.24.2",
    "created_at": "2023-06-14T10:42:30Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1244#issuecomment-1590947853",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1244",
    "updated_at": "2023-06-14T10:42:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "OK great - if you're interested in helping get the process going, I think the first step would be to make a PR updating the config and tests and using modern syntax in a few parts of the code.\r\n\r\nRe: config, looking at some of our other projects, plotly.js has a `target`:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/ac2ce6619180a231233e0e38cf7a0de80d1df2de/webpack.config.js#L5\r\n\r\nthat some of the others don't have at all, so we can likely just delete it. In `package.json` in other projects we set `browserslist` to [`[\"last 8 years and not dead\"]`](https://github.com/plotly/dash/blob/db23cdcc5fbc33029ffdf1b3083ccc5b2010b3ac/dash/dash-renderer/package.json#L89-L91) or some such, and that determines the output feature set. Then we have a test that currently verifies we're only publishing ES5:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/ac2ce6619180a231233e0e38cf7a0de80d1df2de/package.json#L43\r\n\r\nThat's a very custom implementation, elsewhere we just use [`es-check`](https://github.com/plotly/dash/blob/db23cdcc5fbc33029ffdf1b3083ccc5b2010b3ac/components/dash-table/package.json#L32) so we can probably do the same and delete the custom script entirely. It's possible `es-check` just didn't exist when we wrote that long ago, or we didn't find it?\r\n\r\nUnless I'm missing something, those changes will be enough to get dependencies using more modern syntax, at least if they're being distributed that way, which more and more of them are, and allow modern syntax in our code. But then the next piece is picking a piece of the plotly.js source code to update. I'd pick some reasonable-sized piece that's not currently being worked on, since a lot of lines will likely change and would create merge conflicts if another PR was active in the same file. Maybe something in `components`, like [`rangslider`](https://github.com/plotly/plotly.js/tree/master/src/components/rangeslider)?\r\n\r\nIf we can do that much in one PR, it'll get the ball rolling and provide a template others can use to convert more of the code.",
    "created_at": "2023-06-12T21:31:19Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6366#issuecomment-1588135359",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6366",
    "updated_at": "2023-06-12T21:31:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@raulmarindev we'd be happy to discuss, but I'm curious, do you have reason to expect substantial size or speed gains? Our impression is yes both would improve but only a tiny fraction. My main interest in this is modernizing our syntax to make the codebase friendlier to developers.",
    "created_at": "2023-06-08T19:01:36Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6366#issuecomment-1583176617",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6366",
    "updated_at": "2023-06-08T19:01:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The problem here is that we don't know how wide you want a brick to be if there's only one brick. With two or more we can infer that from the next coordinate. With only one we use a default width of 1, which for dates means 1ms because that's the internal representation of dates. It's not a great default but it's not clear what would be better.\r\n\r\nThere's an alternative form for heatmaps where instead of providing the center positions of the bricks (for `x` or `y`) you provide the edges - ie if your z matrix has dimension MxN, instead of using length M for the `x` array you can use M+1. That removes this ambiguity.\r\n\r\nAnother way to do this is instead of an x array, use the attributes `x0` (the center of the first x brick, as a time string) and `dx` (the width of each brick, in milliseconds). That only works if all the bricks have identical widths.",
    "created_at": "2023-05-25T20:27:44Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6594#issuecomment-1563467256",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6594",
    "updated_at": "2023-05-25T20:27:44Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @questionlp - must be from #6574, cc @lvlte @archmoj ",
    "created_at": "2023-05-13T15:02:16Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6604#issuecomment-1546676746",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6604",
    "updated_at": "2023-05-13T15:02:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> With respect the original issue, could a simpler API just be `xaxis.range = [5, null]` and `xaxis.range = [null, 10]`? If specified `null`, then we base it off of the data. That way users don't have to learn a new attribute and it matches the current shape of things. (AJ edited `None` -> `null`, we're in JS here 😉)\r\n\r\nI do love the simplicity of this API, and it would let us get rid of `autorangeoptions.min/max` but we'd keep `autorangeoptions.clipmin/max` and `rangemin/max`. Or maybe we call both of these `min/maxallowed`? In many ways I like that more: consistent names, makes it clear these are limits (`rangemin` could be taken to mean \"the min value is only allowed to be that\" rather than \"the min is not allowed to go lower than that\"). The only thing I don't like is that `xaxis.minallowed` doesn't explicitly say `range` so it could be taken to mean \"no data to be plotted here can be less than that\" - but I think it's better to keep these short and consistent with the names inside `autorangeoptions`.\r\n\r\nWhat happens though if we later change the data? We write the computed range back to `layout.xaxis.range` so we've lost the information that only one end should autorange. There's also a question of how to handle reversed axes.\r\n\r\nSo what if we create 4 new `axis.autorange` values to go along with these situations:\r\n- `xaxis.range = [5, null]` would cause a default `xaxis.autorange = 'max'` ie \"only autorange the max end of the range\" but if you want 5 to be the max of a reversed range you can also set `xaxis.autorange = 'min reversed'`\r\n- `xaxis.range = [null, 10]` would cause a default `xaxis.autorange = 'min'` ie \"only autorange the min end of the range\" but if you want 10 to be the min of a reversed range you can also set `xaxis.autorange = 'max reversed'`\r\n\r\nNext question is what happens if the viewer doubleclicks, or zooms/pans and then doubleclicks - seems like mostly this should do a full autorange, ie it sets `autorange=true` (and then by the current default behavior the second doubleclick takes you back to the initial range), but if you wanted autorange still limited or extended on either end you could set `autorangeoptions` to achieve this. Or if you always want doubleclick to give the initial range you can set `config.doubleClick='reset'`\r\n\r\nSo the new API would be:\r\n```\r\nminallowed: min value allowed in range. Even explicitly setting range:[a,b] can't go past this.\r\nmaxallowed: max value allowed in range. Even explicitly setting range:[a,b] can't go past this.\r\n    must be more than minallowed\r\nrange: allowed to leave either or both elements `null`, this impacts the default `autorange`\r\nautorange: 'min', 'max', 'min reversed', 'max reversed' as well as existing true, false, 'reversed'\r\n    if 'min' or 'max' is in the value, only autorange that end, use existing `range` entry for the other end\r\n    if range[0] is missing, 'min' is the default and false, 'max', and 'min reversed' are prohibited\r\n    if range[1] is missing, 'max' is the default and false, 'min', and 'max reversed' are prohibited\r\nautorangeoptions: {\r\n    minallowed: do not let min autorange go below this. Ignore if autorange = false, 'max', 'max reversed',\r\n        or if it's <axis.minallowed or >axis.maxallowed\r\n    maxallowed: do not let max autorange go above this. Ignore if autorange = false, 'min', 'min reversed',\r\n        or if it's <axis.minallowed or >axis.maxallowed\r\n    include: number or [num1, num2], ensure the autorange min <= and max >= these values,\r\n        ignore any num outside either set of min/maxallowed constraints\r\n}\r\n```",
    "created_at": "2023-05-12T20:10:58Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6547#issuecomment-1546236028",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6547",
    "updated_at": "2023-05-12T20:10:58Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@lvlte great work! Not only better performance, I think the results actually look better than before, ie the brick edges are positioned more accurately. Also you taught me about `CSS.supports` 🧑‍🏫 ",
    "created_at": "2023-05-12T13:10:44Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6574#issuecomment-1545723914",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6574",
    "updated_at": "2023-05-12T13:10:44Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I'm happy to see the extra discussion around this topic - FYI we have a PR currently in progress to cover a lot of these use cases: https://github.com/plotly/plotly.js/pull/6547 - we have a bit more work to do on it, but comments are welcome.",
    "created_at": "2023-05-09T16:38:32Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1876#issuecomment-1540511924",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1876",
    "updated_at": "2023-05-09T16:38:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Old indeed - feel free to open a new issue if you want to continue the discussion, but my hunch is this would be pretty hard in scattergl, as the rectangular viewport is baked in at a fairly low level",
    "created_at": "2023-05-08T13:23:13Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1385#issuecomment-1538355700",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1385",
    "updated_at": "2023-05-08T13:23:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "According to their [docs page you linked](https://docs.mapbox.com/mapbox-gl-js/guides/projections/):\r\n> Starting from v2.6, Mapbox GL JS supports multiple map projections.\r\n\r\nUnfortunately we can't advance beyond [v1.x of mapbox-gl](https://github.com/plotly/plotly.js/blob/a4ce2b71f083cdbcd6dcf04931496ee13d0872e8/package.json#L100) because they changed their license to one that's incompatible with use in libraries like ours. You can read more about this here: https://www.geoapify.com/mapbox-gl-new-license-and-6-free-alternatives",
    "created_at": "2023-05-05T14:06:14Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6591#issuecomment-1536315429",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6591",
    "updated_at": "2023-05-05T14:06:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Can you say more about\r\n> then you can zoom only with a certain aspect ratio rectangular shape, which is sometimes a limiting factor for the UX/UI\r\n\r\nIs your concern that the point where you mouse down is always a corner of the final viewport, but you think the behavior you describe better reflects user intention? That may be the case, ie you zoom by essentially “highlighting” the points you care about, and if that’s smaller than the region needed to satisfy the scale constraint you’d prefer to expand the range so your whole “selection” is visible and centered. \r\n\r\nI don’t like the idea of the final viewport being different from what you saw, but if we agree that this mechanism is better we could just change to doing it this way, ie rather than the mouse down point always being a corner, it’s always on an edge, as is the final cursor location, but the box expands symmetrically in whichever dimension it needs to to maintain the constraint.\r\n\r\nOne potentially weird effect: if you drag across an edge, using this rule the box would expand to include some areas outside the current viewport. Maybe better to avoid that, and expand only as far as the edge of the current viewport, and expand more on the other side when that happens. ",
    "created_at": "2023-05-02T11:13:23Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6586#issuecomment-1531289349",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6586",
    "updated_at": "2023-05-02T11:13:23Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yes, that’s expected. On a log axis zero is infinitely far away from 1, so you could zoom out as far as you want and you still wouldn’t reach zero. ",
    "created_at": "2023-05-02T00:31:36Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6585#issuecomment-1530678796",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6585",
    "updated_at": "2023-05-02T00:31:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Duplicate of #6552 - thanks!",
    "created_at": "2023-04-25T18:46:49Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6576#issuecomment-1522254653",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6576",
    "updated_at": "2023-04-25T18:46:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @lvlte! Re: feature detection - I did a little checking and wasn't able to get an svg `<image>` tag to tell me whether it successfully pixelated or not, but I could on an html `<img>` tag. Could translate this into D3 but doesn't much matter, and I was fiddling in vanilla JS. Here's what I came up with:\r\n```js\r\nvar _supportsPixelated = null;\r\nfunction supportsPixelated() {\r\n    if(_supportsPixelated === null) {  // only run the feature detection once\r\n        var img = document.createElement('img');\r\n        document.body.appendChild(img);\r\n        img.style.imageRendering = 'pixelated';\r\n        _supportsPixelated = getComputedStyle(img).imageRendering === 'pixelated';\r\n        document.body.removeChild(img);\r\n    }\r\n    return _supportsPixelated;\r\n}\r\n```\r\n",
    "created_at": "2023-04-19T16:26:36Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6574#issuecomment-1515031635",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6574",
    "updated_at": "2023-04-19T16:26:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @lvlte - this is a great idea, the main constraint here is we need to detect whether the browser supports [`image-rendering: pixelated`](https://developer.mozilla.org/en-US/docs/Web/CSS/image-rendering) - all current browsers do seem to support this, but we generally aim to support at least 7-year-old browsers and some of them only got this 2-3 years ago.",
    "created_at": "2023-04-18T16:18:46Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6573#issuecomment-1513453407",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6573",
    "updated_at": "2023-04-18T16:18:46Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The original use case in #400 was to specify one end of the range exactly and have us automatically determine the other end. For that purpose (with the names I'm suggesting) let's say you specify `automin=10` - then whether your data range was 1-15 or 14-15, we'd set the range to `[10,15]`. If your data range was 1-5 we'd have no data to show, but with the minimum constrained to be 10 maybe we'd default to a span of 1, for a final range of `[10,11]`.\r\n\r\nI could also imagine saying \"I want viewers always to come back to `[10,15]` when they double click\" and setting both `automin=1-` and `automax=15`. Then the range is `[10,15]` regardless of the data. There's no \"auto\" work for us to do, it's just about controlling the interactive behavior. This is the same as `config.doubleClick='reset'`, but more flexible as it's specified per-axis. Kind of an odd use case, but plausible enough that I'm pleased this set of attributes allows for it.\r\n\r\n`softmin`/`softmax` would clip the results of autorange to stay within certain bounds. So `softmin=0` would be equivalent to `rangemode='nonnegative'`, but it would also allow limiting at any other value as well as limiting the max autorange result.\r\n\r\nOne thing I'm noticing now is there's currently no equivalent generalization of to `rangemode: 'tozero'`, which basically means \"make sure zero is included in the autorange regardless of the data.\" If we were to add more attributes for that purpose, then `rangemode` could become just a way to set the defaults for these other attributes, and we ignore it after the `supplyDefaults` step. One thing to remember though, `rangemode: 'tozero'` has a very specific bit of behavior when the data get close to zero but don't cross it: It prevents the range from expanding past zero just due to padding:\r\n```js\r\n> Plotly.newPlot(gd,[{y:[0.01,2,3]}],{yaxis:{rangemode:'tozero'}})\r\n> gd.layout.yaxis.range\r\n[0, 3.2047477744807122]  // entirely positive data, padding would expand past zero but tozero prevents this\r\n> Plotly.newPlot(gd,[{y:[-0.01,2,3]}],{yaxis:{rangemode:'tozero'}})\r\n> gd.layout.yaxis.range\r\n[-0.2304777070063694, 3.2204777070063693]  // data on both sides of zero, padding works normally\r\n> Plotly.newPlot(gd,[{y:[-0.01,-2,-3]}],{yaxis:{rangemode:'tozero'}})\r\n> gd.layout.yaxis.range\r\n[-3.2047477744807122, 0]  // totally negative data also won't expand past zero due to padding\r\n```\r\n\r\nAn alternative to creating 4 sets of attributes would be one or two sets plus another mode attribute to say how it should behave; I don't like that idea though, because with separate attributes you can specify combinations of behavior: soft and hard limits, an exact setting for one end of the range and a limit on the other end, etc.\r\n\r\nAnother alternative to 4 attribute pairs would be 4 length-2 arrays, where you can use `null` for one of the entries if you only want to set one. This is looking more appealing now that we're up to 4 pairs, but three problems with this: (1) only setting one will be the most common situation, so that's a lot of `null` values cluttering things up, and (2) `autorange='reversed'` and bounds with one `null` become ambiguous: is it still `[constraintOnMinimum, constraintOnMaximum]` or is it `[constraintOnRange0, constraintOnRange1]`? I think it would need to be the former, otherwise when you flip `range` you also need to flip all these constraints, but specifying it this way in the first place would feel weird. (3) The `rangemode='tozero'` generalization doesn't fit the \"limit min and/or max\" pattern anyway - whatever value(s) you specify need to be included in both the min and the max. So perhaps it could be either a number or a length-2 array (we could accept longer, but we only care about the extrema)\r\n\r\n### New API suggestion:\r\n\r\nWith so many it's getting tough to figure out clear, concise names... maybe we put the three autorange-specific ones in a container and leave the hard limits at the top level?\r\n\r\n```\r\nautorangeoptions: {\r\n    min / max: use these values exactly for autorange\r\n    clipmin / clipmax: do not let autorange go beyond these values. Ignore if corresponding min/max is provided\r\n    include: number or [num1, num2], ensure the autorange min <=, and max >=, all of these.\r\n},\r\nrangemin / rangemax: Back to Mojtaba's names, do not let range (auto, explicit, or dynamic) go beyond these values\r\n```\r\nSo then `rangemode: 'tozero'` would set the default `autorangeoptions.include=0` (ignored if there's already a value for `include`), and `rangemode: 'nonnegative'` would set the default `autorangeoptions.clipmin=0` (likewise ignored if that already exists)",
    "created_at": "2023-04-18T14:56:09Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6547#issuecomment-1513302220",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6547",
    "updated_at": "2023-04-18T14:56:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "After chatting with @archmoj last week and playing with this, I think I understand the attributes implemented here:\r\n- `autorange(min|max)` - the smallest and largest values that are allowed to be in the results of autoranging this axis. So if these are outside the autorange we calculate they have no effect\r\n- `range(min|max)` - the smallest and largest values that are allowed to be in the range EVER. If you try to drag beyond this, or `relayout` beyond this, we replace either bound that goes outside this range.\r\n\r\nBoth of these are useful, but I think this is missing an important one, perhaps the first one people will think of in this vein: a specific value to use for one or the other end of autorange, for example \"no matter the data, I want the bottom of the range to be 50, but I want Plotly to choose the top of the range.\" This would almost be a generalization of `rangemode: 'tozero'`, except that even if the data go past zero, the autorange would end at exactly zero.\r\n\r\nSo I think we need three pairs of attributes, not just two. What if we put them all in a new container:\r\n```\r\nrangebounds: {\r\n    automin / automax: use these values exactly for autorange\r\n    softmin / softmax: do not let autorange go beyond these values. Ignore if corresponding auto is provided\r\n    hardmin / hardmax: do not let range (auto, explicit, or dynamic) go beyond these values\r\n}\r\n```\r\n`rangebounds.softmin` is what you currently have as `autorangemin`, and `rangebounds.hardmin` is what you have as `rangemin`. `rangebounds.automin` is new behavior.\r\n\r\nAnd two things I notice playing with the PR as it stands today:\r\n- If one end of autorange is restricted, currently this has no impact on the other end, but it should. For example if there are scatter markers we pad by the marker size plus 5%, but this padding is a smaller data value if the other end of the range is clipped, and bigger if the other end is extended.\r\n- Make sure the dynamic restrictions work right when you drag. Currently when you drag the trace keeps moving, but the axis stays put. Furthermore, if you drag both ends of the axis (either dragging the center of the axis or panning the whole subplot) and one gets clipped, I think the other end should stop too, rather than starting to zoom at this point.\r\n",
    "created_at": "2023-04-14T23:14:12Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6547#issuecomment-1509382919",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6547",
    "updated_at": "2023-04-14T23:14:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Right, non-cartesian subplots don't belong in `_plots`, but that's just an implementation detail. The real point is you want to be able to use `Plotly.Fx.hover` on other trace types like mapbox, and the fact that this doesn't work does seem to me to be a bug.",
    "created_at": "2023-04-14T19:10:51Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6548#issuecomment-1509102411",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6548",
    "updated_at": "2023-04-14T19:10:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@wanghe199512 can you repost this on https://community.plotly.com/? That's a much better forum for \"how to\" questions, so we can keep GitHub more focused on features and bugs. Thanks!",
    "created_at": "2023-04-13T17:04:02Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6561#issuecomment-1507306335",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6561",
    "updated_at": "2023-04-13T17:04:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "If you want `nRows`, with `rowHeight` each, `grout` between rows (for axis labels between subplots), and at the edges `marginTop` and `marginBottom` it would look something like:\r\n\r\n```js\r\nfunction findDomains(nRows, rowHeight, grout, marginTop, marginBottom) {\r\n    const innerHeight = nRows * rowHeight + (nRows - 1) * grout;\r\n    const height = innerHeight + marginTop + marginBottom;\r\n    const domains = [];\r\n    const domainDelta = rowHeight / innerHeight;\r\n    const domainStep = (rowHeight + grout) / innerHeight;\r\n    for(let i = 0; i < nRows; i++) {\r\n        domains.push([domainStep * i, domainStep * i + domainDelta]);\r\n    }\r\n    return {height, domains};\r\n}\r\n```\r\n\r\nThen you'd insert these into your `layout`, starting with `{height, margin: {b: marginBottom, t: marginTop}}`, then `domains[0]` going to the bottom `yaxis`, `domains[1]` to the one above it, and so on.",
    "created_at": "2023-04-13T12:32:52Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6561#issuecomment-1506884868",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6561",
    "updated_at": "2023-04-13T12:32:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yes, Python adds an extra layer on top of this but in Javascript this is controlled by the [`axis.domain`](https://plotly.com/javascript/reference/layout/yaxis/#layout-yaxis-domain) attribute, a length-2 array of numbers from 0 to 1. If you want to know the exact height of each, you must give the plot a fixed `layout.height` and `layout.margins` and disable any `automargin` properties because the domain refers to the height minus all margins.",
    "created_at": "2023-04-12T19:21:11Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6561#issuecomment-1505802749",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6561",
    "updated_at": "2023-04-12T19:21:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Moved to the plotly.js repo, which is where the fix will need to be. My guess is the fact that it now reproduces without explicit `standoff` is due to https://github.com/plotly/plotly.js/pull/6428 but its origin is clearly much before that.",
    "created_at": "2023-04-05T20:30:14Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6552#issuecomment-1498114276",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6552",
    "updated_at": "2023-04-05T20:30:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I like it, thanks @VelizarVESSELINOV! Moved to plotly.js where it'll need to be implemented. Also I'll note that in principle we need two separate thresholds, an x and a y, or a threshold and an axis (though maybe you could come up with a scenario where you want both simultaneously?), in case your smoothly-incrementing variable is in the y direction. I'm not sure about the name... `line.autogapx` and `line.autogapy` perhaps?\r\n\r\nWould also be nice for wrapped periodic data, that scans across and then jumps back to the start and scans again, where currently you also need to insert a null to avoid drawing a line connecting one scan to the next.",
    "created_at": "2023-04-04T20:56:59Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6551#issuecomment-1496596452",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6551",
    "updated_at": "2023-04-04T20:56:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Let’s keep `slope`, and if we add angle let’s just call it `angle`, even though if you stretch the axes (or invert them!) the angle on-screen will be different (the same can be said of slope, though typically a slope is given with units so this is clearer). \r\n\r\nPersonally I like `width`, `height`, and `length`, I think if I were not reading the docs but just guessing those are among the first I would guess whereas `len` would take a while and I might never guess `xlen` and `ylen`. But I feel super strongly about that, with docs all of those names work.\r\n\r\nTo me, the behavior on log axes is clear (one unit of difference on a log scale is one power of ten in the data, again the same as our internal representation), but since nobody is requesting it right now we can leave it for later. \r\n\r\nRe: milliseconds - we have a bunch of places in plotlyjs where time differences are already specified in milliseconds, so I don’t think it’s a good idea to change just this one. At some point we could try to add a units field somewhere, then people could specify seconds, days, or whatever. But absent that I think we need to leave it as milliseconds. ",
    "created_at": "2023-03-21T08:23:27Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6527#issuecomment-1477433318",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6527",
    "updated_at": "2023-03-21T08:23:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@drscotthawley (and @brianpenghe if you're still interested, sorry I didn't see your comment last year!) I don't see any problems in my tests with `opacity=1.0`, can you share some self-contained code showing the issue you see with that?\r\n\r\nUnfortunately, for any opacity < 1 as some of the older comments here say, there seems to be no good known order-independent algorithm, which means we can't parallelize the render in the usual way, and the solution would need to be a major rewrite of our rendering system, and likely far slower than what we do today.",
    "created_at": "2023-03-18T11:15:40Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1267#issuecomment-1474816757",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1267",
    "updated_at": "2023-03-18T11:15:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This looks like the one you want: https://github.com/FortAwesome/Font-Awesome/blob/6.x/svgs/regular/calendar-days.svg\r\nYou will likely need to scale it to the pixel size you want, basically multiply all the numbers in the path by the same number, since plotlyjs only supports exact pixel paths right now. Kind of a pain, but there are likely programs out there that will do this (or you can write a small script to do it)\r\n\r\nI can’t commit to collaborating, but once you have something working @archmoj or I will be happy to help finish it up. ",
    "created_at": "2023-03-16T23:26:28Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6504#issuecomment-1472891491",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6504",
    "updated_at": "2023-03-16T23:26:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Here's an example where I draw a simple blue triangle: https://codepen.io/alexcjohnson/pen/VwGdzdB?editors=0010\r\n\r\nYou'd just need to find the path data for the icon you're interested in, and use that instead of my little `path` attribute in the shape.",
    "created_at": "2023-03-16T22:06:28Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6504#issuecomment-1472816407",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6504",
    "updated_at": "2023-03-16T22:06:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ah interesting - `width` and `height` would be only positive but `dx` and `dy` would be signed. So perhaps there’s room for all of those.\r\n\r\n`angle` is interesting, sure. I’ll note that both `angle` and `length` are meaningful only on a space with a well-defined metric, ie x and y have matching units, and they’ll look funny if you don’t enforce `scaleratio = 1`. There would also be cases where they might *seem* correct but they aren’t, like if you plot latitude and longitude on cartesian axes rather than a map. Not a reason to not do them, just a note of caution we might include in our docs. \r\n\r\nLet’s stay away from paths please. It’s going to be a rabbit hole dealing with straight lines, arcs, and two orders of Bézier curves, plus open and closed paths, and nobody has asked for it. If and when we do that we can add `centroid` or whatever, but no need to tailor the fields that apply to simple shapes to try and match paths, it’ll just make the normal cases more confusing. ",
    "created_at": "2023-03-16T04:05:02Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6527#issuecomment-1471272098",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6527",
    "updated_at": "2023-03-16T04:05:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> For the first two, would `width` and `height` be better names than `dx` and `dy`?\r\n\r\nyes 😁 \r\n\r\n> How should we handle the case where a user sets a `texttemplate` for a path?\r\n\r\nDo whatever we do today if you make a `texttemplate` or `hovertemplate` in another context that has invalid fields.",
    "created_at": "2023-03-15T21:28:03Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6527#issuecomment-1470869659",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6527",
    "updated_at": "2023-03-15T21:28:03Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice! If it's easy there are a few more that occur to me might be useful. We can leave them for later too though:\r\n\r\n- `dx===x1-x0`\r\n- `dy===y1-y0`\r\n- `length===sqrt(dx^2+dy^2)`\r\n- `xcenter===(x0+x1)/2` or maybe just `x`\r\n- `ycenter===(y0+y1)/2` or `y`\r\n\r\n> * Paths (no x0/x1/y0/y1)\r\n\r\nLet's not support paths for now.\r\n\r\n> * Shapes where the coordinates are datetime strings\r\n\r\nSeems like we should handle absolute and relative differently here: for `{x|y}{0|1}` we should use the date directly, but support d3 datetime format specifiers. For slope (and, later, if we add `dx`, `dy`, or `length`) it should use milliseconds.\r\n\r\nMakes me think about log axes though - seems like if you've drawn a line on a log axis the only meaningful slope is also in log units. The use cases I've seen for this:\r\n- log/linear plots: the slope of a line is the decay constant (or time constant if the linear axis is time)\r\n- log/log plots: the slope is the power law relationship between x and y - linear has slope 1, quadratic has slope 2, etc.\r\n\r\nSo `ax.d2l` is your friend here - will convert to \"linearized numeric\" format which is milliseconds for dates and log base 10 for log axes. So users who want natural log will need to get comfortable with `Math.LN10` but that should be fine.\r\n\r\n> * Divide by zero errors\r\n\r\nJS doesn't have those 😉 \r\n```js\r\n> 1/0\r\nInfinity\r\n> 0/0\r\nNaN\r\n```\r\nIf the result is we just show those strings with no further formatting, that's fine IMO\r\n\r\n> * \"slope\" for circles and rectangles -- should we allow it?\r\n\r\nI guess it's the aspect ratio for those shapes. Odd use case but probably easy to just allow it.",
    "created_at": "2023-03-15T21:10:07Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6527#issuecomment-1470847974",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6527",
    "updated_at": "2023-03-15T21:10:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Our biggest user community by far is Python users, and [plotly.py](https://github.com/plotly/plotly.py) is more vocal about errors. Whereas the original JS consumer of plotly.js was [Chart Studio](https://chart-studio.plotly.com/) that's a bit more constrained but also intentionally flexible about ignoring invalid input because it's easy to get in a situation there that some settings are useless but the user doesn't care.\r\n\r\nhttps://community.plotly.com/ will be happy to help with specific questions. But if you want a programmatic description of what we didn't recognize in your input, try [`Plotly.validate`](https://plotly.com/javascript/plotlyjs-function-reference/#plotlyvalidate)",
    "created_at": "2023-03-13T18:00:59Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6520#issuecomment-1466644156",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6520",
    "updated_at": "2023-03-13T18:00:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> If the timezone is like ET then there will be some ambiguity around the EST/EDT transition times if we infer that a timezone-less time is \"in ET\"\r\n\r\nTrue. Nothing we can do about that, other than to suggest to the user that they send that data with timezone info included. I still think this is the way to structure the API, we just document that ambiguity.",
    "created_at": "2023-03-13T17:00:10Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3870#issuecomment-1466532604",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3870",
    "updated_at": "2023-03-13T17:00:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Bringing in @ndrezn's comment from #6519:\r\n\r\n> This is an example using `px` but I believe the core issue/feature would be resolved in Plotly.js. Happy to move this to https://github.com/plotly/plotly.py if that makes more sense.\r\n> \r\n> ```python\r\n> import plotly.express as px      \r\n> import pandas as pd\r\n>  \r\n> df = pd.DataFrame({\"time\": pd.date_range(\"2022-10-30 00:00:00\", \"2022-10-30 04:00:00\", freq=\"1h\", tz=\"Europe/Zurich\")})\r\n> df[\"values\"] = [1,1, 1, 2, 1, 1]\r\n> fig = px.line(df, x=\"time\", y=\"values\")\r\n> fig.show(“browser”)\r\n> ```\r\n> \r\n> Just for reference, since October 30th crosses daylight savings, this dataset will look like this:\r\n> ```\r\n>                        time  values\r\n> 0 2022-10-30 00:00:00+02:00       1\r\n> 1 2022-10-30 01:00:00+02:00       1\r\n> 2 2022-10-30 02:00:00+02:00       1\r\n> 3 2022-10-30 02:00:00+01:00       2\r\n> 4 2022-10-30 03:00:00+01:00       1\r\n> 5 2022-10-30 04:00:00+01:00       1\r\n> ```\r\n> Notice that there are two 2am's -- one at +02 and one at +01.\r\n> \r\n> \r\n> In this example, Plotly will render:\r\n> ![image001 copy 2](https://user-images.githubusercontent.com/38958867/224733349-9557acf6-cfd5-46a1-80b9-689058466a6b.jpg)\r\n> \r\n> What you might expect instead is that it would have two 2ams on the x-axis, so our output would look more like a triangle.\r\n> \r\n\r\nMy take on this:\r\n- Once our date axes understand the concept of timezones, every second in the real world (well, ignoring leap seconds I guess!) should be represented by an equal number of pixels on the axis.\r\n- Tick labels with `dtick<=1h` may repeat, with `dtick>1h` they should be equally spaced in clock numbers - so if `dtick=2h` then right around DST changes we'll have two ticks spaced by either 1h or 3h but always with a 2h difference in the digits shown.\r\n\r\n",
    "created_at": "2023-03-13T16:56:50Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3870#issuecomment-1466526486",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3870",
    "updated_at": "2023-03-13T16:56:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Let's move this whole convo to #3870 ",
    "created_at": "2023-03-13T16:46:52Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6519#issuecomment-1466506611",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6519",
    "updated_at": "2023-03-13T16:46:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Can we do this on top of `axis.type='date'`? Feels to me as though we could just add a new attribute `axis.timezone` - if not set you get the current behavior, but it would accept fixed timezones (`'UTC'`, `'+01'`, `'CET'`, `'EST'`) as well as timezones that include daylight saving shifts (`'Europe/Zurich'`, `'ET'`) and use that for tick marks.\r\n\r\nThen if you specify a timezone, any date data that doesn't include timezone info is assumed to be in that timezone. Any date data that includes timezone info is shifted into that timezone.\r\n\r\nIf we want to support the case of date data without included timezone info but representing a timezone different from the axis timezone, we could follow the example of world calendars and add attributes like `trace.xtimezone`.",
    "created_at": "2023-03-13T16:02:54Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3870#issuecomment-1466431805",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3870",
    "updated_at": "2023-03-13T16:02:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Just to be clear on terminology: to my mind there's actually no \"changing timezone\" in the charts you want. The timezone is `\"Europe/Zurich\"` which includes daylight saving shifts from `\"UTC+1\"` (aka Central European Time `\"CET\"`) in the winter to `\"UTC+2\"` (aka Central European Summer Time `\"CEST\"`) in the summer. The tricky thing about this is that all of those are valid timezones, some of which shift with the seasons and some of which don't.\r\n\r\nIn North America the situation is a little simpler to describe (though this usage isn't universally accepted and there are a few places that don't use DST so need their own timezones):\r\n- `\"EST\"` is Eastern Standard Time - the same as `\"UTC-5\"`\r\n- `\"EDT\"` is Eastern Daylight Time - the same as `\"UTC-4\"`\r\n- `\"ET\"` is Eastern Time, which includes the daylight saving shifts and matches `\"EST\"` in the winter and `\"EDT\"` in the summer.\r\n\r\nUnfortunately Europe doesn't follow that pattern, I'm not aware of any better way to designate \"the time actually observed by most of Europe\" other than picking a specific city.",
    "created_at": "2023-03-13T15:28:53Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6519#issuecomment-1466367550",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6519",
    "updated_at": "2023-03-13T15:28:53Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "`Plotly.downloadImage` starts here:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/a8631b8a242a9b14d307e71394a4e0c1ec053531/src/snapshot/download.js#L20\r\n\r\nThe conversion that I think is failing is here:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/a8631b8a242a9b14d307e71394a4e0c1ec053531/src/snapshot/svgtoimg.js#L63-L71\r\n\r\nor maybe it's happening earlier, at setting the initial data url:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/a8631b8a242a9b14d307e71394a4e0c1ec053531/src/snapshot/svgtoimg.js#L104\r\n\r\nEither way I think to fix it we'd need to do the font inlining described in that blog post right before we serialize the SVG element here:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/a8631b8a242a9b14d307e71394a4e0c1ec053531/src/snapshot/tosvg.js#L143",
    "created_at": "2023-03-10T23:38:40Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6504#issuecomment-1464646208",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6504",
    "updated_at": "2023-03-10T23:38:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@JulianWgs that's great, thanks for the feedback. Sounds like we're in agreement. `<field><operation><value>:<format>` where `<operation>` can either be `*` or `/` and `<value>` is a literal number.\r\n\r\nFor `slope` I can't think of any use case for more complex transformations. I could imagine for coordinate values maybe you want scaling and offset, like to convert between ºC and ºF, but there's no need to add that now.",
    "created_at": "2023-03-10T14:00:35Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6511#issuecomment-1463844961",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6511",
    "updated_at": "2023-03-10T14:00:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I think the multiplication / division solution is the best here. Right now IIRC we support format strings in text templates, like `%{x:.3f}`, let's just put the operation before the colon (if there is one) so `%{slope*60000:.3f}`.\r\n\r\nDoes it make sense what numbers you'd want to use here? `60000` is msec/min, so would be used if you want your data in units of <y data>/min, since internally date data is represented as msec. We could try and come up with ways to name the units of ∂x and ∂y so you don't have to figure out the numbers, but that feels like it may be more confusion than it's worth, and we'll need arbitrary numbers anyway in order to cover all the edge cases people might think of.\r\n\r\n@emilykl if we're just doing `<field><operation><value>:<format>` we can easily write a purpose-built parser from scratch. But if we ever want to do anything more flexible there's a relatively lightweight one we built for Dash Table [here](https://github.com/plotly/dash/tree/dev/components/dash-table/src/core/syntax-tree) and [here](https://github.com/plotly/dash/tree/dev/components/dash-table/src/dash-table/syntax-tree) that could be ported over. It looks more complex than it is 😉 - if we get to that point I can help.",
    "created_at": "2023-03-09T22:55:39Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6511#issuecomment-1462937672",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6511",
    "updated_at": "2023-03-09T22:55:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "OK great - let us know if you find how to reproduce the log axis problem.\r\n\r\nBTW you may find `xref='paper'` useful for these stripes, so they align with the y axis but keep full x axis coverage even as you pan or zoom: https://codepen.io/alexcjohnson/pen/bGxYMBR?editors=1010",
    "created_at": "2023-03-09T17:01:08Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6510#issuecomment-1462423188",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6510",
    "updated_at": "2023-03-09T17:01:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "If that is indeed the problem, we would need to implement the procedure described there, to download, encode, and in-line the relevant font(s). No workaround AFAICT, other than not using icons from the font but instead making your own SVG shape to mimic it",
    "created_at": "2023-03-08T14:06:02Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6504#issuecomment-1460206976",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6504",
    "updated_at": "2023-03-08T14:06:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @carmelocassisi - can you create a codepen that shows the problems you're encountering? I'm not able to reproduce, if I put our original shapes test image into a codepen I can zoom & pan on top of the shapes, and they appear to work correctly on log axes. https://codepen.io/alexcjohnson/pen/QWVqNZj?editors=1000 (note the subplot with the pink rectangle and the smily face has linear and log axes, and the subplot to its right has category and date axes) (also: you can fork my codepen and just change the figure to your own)\r\n\r\nI see your shapes have `editable: false` - have you enabled other editable features?",
    "created_at": "2023-03-07T21:23:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6510#issuecomment-1458893426",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6510",
    "updated_at": "2023-03-07T21:23:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Actually doesn't give much more info when you find the error. Seems like the `canvas.toDataURL` call errors, I wonder if it's related to this: https://alligatr.co.uk/blog/render-an-svg-using-external-fonts-to-a-canvas/",
    "created_at": "2023-03-06T22:53:35Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6504#issuecomment-1457171017",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6504",
    "updated_at": "2023-03-06T22:53:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @stumpykilo - I'm not sure what's going on, but I can confirm the problem. We should `console.trace` the error that led to [\"Sorry, there was a problem downloading your snapshot!\"](https://github.com/plotly/plotly.js/blob/2b4584dfe54598db03e8d9724a766789293b4f69/src/components/modebar/buttons.js#L70) to make it easier to debug.",
    "created_at": "2023-03-06T21:27:06Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6504#issuecomment-1457026960",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6504",
    "updated_at": "2023-03-06T21:27:06Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @Hermeij - this is a problem in plotly.js, I will move the issue over there. Both parts of the problem you identified are visible in this codepen: https://codepen.io/alexcjohnson/pen/BaORKpj?editors=0010: whenever the map tried to render with the blue line displayed it throws the error: `Uncaught (in promise) Error: There is already a source with this ID`",
    "created_at": "2023-03-03T14:11:02Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6508#issuecomment-1453590022",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6508",
    "updated_at": "2023-03-03T14:11:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Hi @Quska45 - I'm afraid plotly.js is not supported in web workers, for the same reason it doesn't work server-side: it needs an actual DOM in order to render. Things like this `userAgent` check we could presumably work around, but there are a few items, most importantly measuring the size of rendered text elements via `getBoundingClientRect`, that I'm not aware of any way to do outside a real DOM. I'm not an expert with web workers so If there's a workaround for that need we would gladly consider it!",
    "created_at": "2023-03-03T13:59:02Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6506#issuecomment-1453571521",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6506",
    "updated_at": "2023-03-03T13:59:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @Nauss - very clearly a bug, it's throwing a JS error.",
    "created_at": "2023-03-03T13:51:08Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6507#issuecomment-1453561562",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6507",
    "updated_at": "2023-03-03T13:51:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Definitely a plotly.js issue, and it goes away if you switch to numeric z data `z=z` rather than date `z=z2`. We have some other 3D date issues like https://github.com/plotly/plotly.js/issues/3306 but this looks different so I'll move it over.",
    "created_at": "2023-03-02T21:16:45Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6505#issuecomment-1452558486",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6505",
    "updated_at": "2023-03-02T21:16:45Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj is there a way to use the strict gl traces in custom bundles?",
    "created_at": "2023-03-02T20:50:15Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6496#issuecomment-1452524609",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6496",
    "updated_at": "2023-03-02T20:50:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@L0Z1K if you're able to track down the source of this and suggest a fix that would be most welcome!\r\n\r\nMy hunch is it's this:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/7427f14ad1b175ca1f4bda23c0ce763fa88791b8/src/traces/violin/calc.js#L53\r\n\r\nand the `step` is so small that sometimes `k++; t += step` doesn't actually change `t` because `step` is on the edge of the floating-point precision of the data values. Maybe it can be fixed by changing to `k++, t = span[0] + k * step`? Also perhaps change the termination condition to `k < n`. That said if several `t` values are identical there may be rendering issues we need to address too.\r\n\r\nIf that fixes it, we'd also need a test - [here](https://github.com/plotly/plotly.js/blob/7427f14ad1b175ca1f4bda23c0ce763fa88791b8/test/jasmine/tests/violin_test.js#L213) if indeed the issue is just in the calc step, testing something about `cd[0].density`",
    "created_at": "2023-03-02T15:58:17Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6490#issuecomment-1452104360",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6490",
    "updated_at": "2023-03-02T15:58:17Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "As a matter of best practice I agree @nicolaskruchten - though there are cases it might be useful, like:\r\n```\r\nJan 2020        Jul        Jan 2021        Jul        Jan2022        Jul\r\n```\r\nAlso exactly what @Rizwan-Hasan is trying to do works on cartesian axes, just not in parcoords:\r\n```js\r\nPlotly.newPlot(gd,[{y:[1,2,3,4]}],{xaxis:{ticktext:['a','b','a','b'],tickvals:[0,1,2,3]}})\r\n```\r\n<img width=\"492\" alt=\"Screenshot 2023-03-01 at 12 16 40\" src=\"https://user-images.githubusercontent.com/2678795/222213597-b87a5ed7-d7cb-4b95-9ef3-d8e61cd6e17d.png\">\r\nSo I think we had better consider this a bug in parcoords. I'll move this to the plotly.js repo. Thanks for the report @Rizwan-Hasan! I'll caution though, unless you're interested in digging in personally it may be some time before this gets addressed. In the meantime I'd suggest trying the workaround @nicolaskruchten proposed:\r\n\r\n> make the tick labels unique by adding leading or trailing spaces to them",
    "created_at": "2023-03-01T17:23:02Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6503#issuecomment-1450539954",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6503",
    "updated_at": "2023-03-01T17:23:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yep, looks like we simply don't check whether the right edge of the slider is actually farther right than its left edge. This one doesn't need `responsive` to make it happen, you can just set a small fixed width like `600` in that example.\r\n\r\nSo we could catch that, but there isn't much we could do at that point other than refuse to draw the slider. You already have the play and pause buttons taking up the space they take. All I can really suggest is to listen to the `plotly_autosize` event and modify the layout - put the slider below the buttons perhaps - if the width is too narrow. And vice versa, if you've gone from narrow to wide. I've tweaked your codepen to show the new width in that event handler. https://codepen.io/alexcjohnson/pen/NWLdLaG?editors=0010",
    "created_at": "2023-02-28T20:56:06Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6493#issuecomment-1448901150",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6493",
    "updated_at": "2023-02-28T20:56:06Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "A full solution to this issue would be best done as a `hovermode` that spans subplots - proposed long ago and lots of 👍  but hasn't bubbled up to the top https://github.com/plotly/plotly.js/issues/2114\r\n\r\nMeantime, if your traces all have the same x data it's pretty easy to get all the corresponding y values inside the event handler because they'll be at the same position in the data arrays - look at `points[0].pointNumber`, then you can do something like:\r\n```js\r\nconst yVals = myplot.data.map(trace=> trace.y[eventdata.points[0].pointNumber])\r\n```",
    "created_at": "2023-02-28T18:52:20Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6500#issuecomment-1448693503",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6500",
    "updated_at": "2023-02-28T18:52:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @GeorgeFlorian - I can confirm, if I do a single resize from a small width (where the legend has two rows) to somewhat wider (where it has one row) we wind up with too small a bottom margin. It's a little finicky to get this to happen on desktop because usually you get more than one resize, then it fixes itself on the second resize with a single row.\r\n\r\nApologies if we've missed your other issues, we do try to comment on issues that come in but sometimes they slip through the cracks.",
    "created_at": "2023-02-27T21:40:07Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6492#issuecomment-1447136886",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6492",
    "updated_at": "2023-02-27T21:40:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "hmph that's a weird CI error, but I get a similar failure when I try to pull your changes locally, looks like something went wrong at the git level 🙄 \r\n```\r\n> git pull dagroe issue-3973-overlap-hover\r\nremote: fatal: bad tree object 59144c5f100ab5bde6fbcd473e71f3a75fa060ec\r\nremote: aborting due to possible repository corruption on the remote side.\r\nfatal: protocol error: bad pack header\r\n```\r\nUsually we don't like to do this because it makes re-reviews harder, but maybe you could try to rebase locally, then force push? Just so git goes through the motions again and hopefully avoids whatever it broke here?",
    "created_at": "2023-02-24T14:31:02Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6442#issuecomment-1443760467",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6442",
    "updated_at": "2023-02-24T14:31:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Oh that's a good point - I don't think any of those built-in keys will be a string unless you do something truly strange... but it wouldn't hurt to tighten up the initial condition `if(ax.labelalias)` into perhaps:\r\n```js\r\nif(Lib.isPlainObject(ax.labelalias) && ax.labelalias.hasOwnProperty(out.text))\r\n```\r\nOr maybe even better, move the `isPlainObject` test into supplyDefaults (ie delete `containerOut.labelalias` if it's not a plain object) so we don't have to repeat that all the time.",
    "created_at": "2023-02-23T18:12:28Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6481#issuecomment-1442220012",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6481",
    "updated_at": "2023-02-23T18:12:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "looks like in that particular case, the 2-digit labels slide behind the 1-digit labels 🤔 ",
    "created_at": "2023-02-23T16:32:00Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6442#issuecomment-1442078473",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6442",
    "updated_at": "2023-02-23T16:32:00Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@dagroe nice touch continuing to allow the labels to show when the common label is very short ✨ \r\n\r\nI do notice a problem though, that doesn't seem to be present before this PR: sometimes labels in the middle now overlap each other:\r\n\r\n<img width=\"142\" alt=\"Screenshot 2023-02-23 at 11 19 05\" src=\"https://user-images.githubusercontent.com/2678795/220966743-2602d08d-e836-426a-be51-566011476630.png\">\r\n\r\nHere's the graph in that screenshot:\r\n```js\r\nPlotly.react(\r\n    gd,\r\n    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20].map(v=>({x:[100,200,300],y:[v,v+1,v+2]})),\r\n    {width:500,height:400,hovermode:'x'}\r\n)\r\n\r\n```\r\nIf all the y values are the same (as in your screenshots above) this problem doesn't occur.\r\n\r\n<img width=\"144\" alt=\"Screenshot 2023-02-23 at 11 22 47\" src=\"https://user-images.githubusercontent.com/2678795/220967769-69e95a05-6c57-46f6-bf4e-6b49df9f0edb.png\">\r\n\r\n```js\r\nPlotly.react(\r\n    gd,\r\n    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20].map(v=>({x:[100,200,300],y:[1,2,3]})),\r\n    {width:500,height:400,hovermode:'x'}\r\n)\r\n```",
    "created_at": "2023-02-23T16:29:04Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6442#issuecomment-1442074400",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6442",
    "updated_at": "2023-02-23T16:29:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yes, looks like a bug to me. I think the root is the event is emitted too early, meaning this bug probably dates to when we added double-click-to-isolate-one-trace. The solution would be to wait to emit the legendclick event until we know it's not a doubleclick and we actually process the change. That would be different from regular browser click events, but I think it makes sense in this case since what you care about isn't really the click but the change to the figure, and we don't know what that change will be until later.",
    "created_at": "2023-02-22T22:37:26Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6471#issuecomment-1440923073",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6471",
    "updated_at": "2023-02-22T22:37:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @ldorigo - `container` reference is a relatively new feature, we should roll it out to more components. Meantime all I can suggest is making the left and right margins the same, then both reference systems have the same center.\r\n\r\nI'll rename the issue and move it to plotly.js, where the feature would need to be added.",
    "created_at": "2023-02-22T22:18:54Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6498#issuecomment-1440889184",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6498",
    "updated_at": "2023-02-22T22:18:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Duplicate of #2175 - and I'll note there's an open PR #6327 that would add this, just needs to be completed.",
    "created_at": "2023-02-17T14:22:16Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6489#issuecomment-1434717960",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6489",
    "updated_at": "2023-02-17T14:22:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @L0Z1K - I moved this to the plotly.js repo, because the same happens in plain plotly.js https://codepen.io/alexcjohnson/pen/ExejRPQ the page locks up with your data:\r\n```js\r\nPlotly.newPlot(\"myDiv\", {\r\n   \"data\":[\r\n      {\r\n         x: [0,0], y: [0.5006312999999999, 0.5006313],\r\n         type:\"violin\"\r\n      }\r\n   ]\r\n})\r\n```",
    "created_at": "2023-02-17T14:14:50Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6490#issuecomment-1434708687",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6490",
    "updated_at": "2023-02-17T14:14:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Confirmed, I'll move to plotly.js. If I open the `mapbox_scattercluster` mock and call:\r\n`Plotly.relayout(gd,'mapbox.style','open-street-map')`\r\nthe same error happens, with this error message:\r\n<img width=\"483\" alt=\"Screenshot 2023-02-15 at 15 12 43\" src=\"https://user-images.githubusercontent.com/2678795/219142335-390f9bfc-085f-4c11-929a-df24349d64c6.png\">\r\n",
    "created_at": "2023-02-15T20:13:31Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6486#issuecomment-1431969802",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6486",
    "updated_at": "2023-02-15T20:13:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yes, you can just provide a new figure, ideally via `Plotly.react`.\r\nThis kind of question is best asked on our community forum: https://community.plotly.com/",
    "created_at": "2023-02-15T15:38:09Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6484#issuecomment-1431564135",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6484",
    "updated_at": "2023-02-15T15:38:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Does look like a bug to me, and certainly a zero-size bar is different from no bar! Nice detective work @AaronStiff - fixing this may be as simple as removing that `textPosition === 'auto' ||` line (and adding this situation to a test image) but it would be good to at least investigate why that condition was added in the first place...",
    "created_at": "2023-02-09T02:56:13Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6474#issuecomment-1423547426",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6474",
    "updated_at": "2023-02-09T02:56:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @willhuang1997 - both of your codepens appear to have the \"-\" now, and when I remove it (I got lazy and only did the first 4 traces) it seems to work fine: https://codepen.io/alexcjohnson/pen/BaPegza?editors=0010\r\n\r\nHappy to look into it if you can find us a complete (hopefully simplified 😉 ) reproduction!",
    "created_at": "2023-02-09T02:41:14Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6475#issuecomment-1423535997",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6475",
    "updated_at": "2023-02-09T02:41:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Hmm, the only thing that jumps out to me is that `const Plot = createPlotlyComponent(Plotly);` is inside the `App` component - perhaps doing it that way means React doesn't know that it's the same component each time so it recreates the DOM element rather than reusing it? So does it work if you move that statement to the outer scope?",
    "created_at": "2023-02-07T17:59:41Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6473#issuecomment-1421220238",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6473",
    "updated_at": "2023-02-07T17:59:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@marcstern14 it has not - but we'd gladly accept a PR to add this. Should be pretty simple, just a matter of finding a few key places to add `% whateverArray.length`.",
    "created_at": "2023-02-03T23:48:12Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2130#issuecomment-1416536607",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2130",
    "updated_at": "2023-02-03T23:48:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The fact that this bug has been present since v2.5 is a good indication that IE doesn't matter to our users.",
    "created_at": "2023-02-02T16:59:55Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6466#issuecomment-1414067496",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6466",
    "updated_at": "2023-02-02T16:59:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@ciskoh I believe you’re seeing #5505 which is a different bug from this one",
    "created_at": "2023-02-01T13:04:12Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6444#issuecomment-1412024523",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6444",
    "updated_at": "2023-02-01T13:04:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This appears to be a distinct issue from #6444 \r\nHere's a codepen updated to the latest plotly.js version: https://codepen.io/alexcjohnson/pen/NWBOVLM\r\n(note `plotly-latest.js` from the CDN is stuck on v1.x and no longer updating)",
    "created_at": "2023-02-01T04:02:02Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5505#issuecomment-1411430242",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5505",
    "updated_at": "2023-02-01T04:02:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@alexturcea great! Nicely done, and your fiddles are very convincing. I'll let @archmoj give the code a review, but we'll need to adapt your fiddle to a test we can run on CI - maybe in [animate_test.js](https://github.com/plotly/plotly.js/blob/master/test/jasmine/tests/animate_test.js)? And hopefully we can pare it down to something small and readable 😉 \r\n\r\nA bunch of failures in the CI runs, but they don't look like the kind of thing that would have resulted from your changes.",
    "created_at": "2023-02-01T03:30:39Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6452#issuecomment-1411412155",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6452",
    "updated_at": "2023-02-01T03:30:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@ciskoh do you see an error in the JS console: `Uncaught (in promise) Error: There is already a source with this ID`? If so perhaps your bug is another flavor of https://github.com/plotly/plotly.js/issues/6444",
    "created_at": "2023-02-01T03:01:00Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6363#issuecomment-1411387402",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6363",
    "updated_at": "2023-02-01T03:01:00Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "ooh the app @coding-with-adam posted in https://github.com/plotly/plotly.py/issues/3631#issuecomment-1408694360 shows the same JS error, and it's pretty simple. @archmoj is that enough to go off?",
    "created_at": "2023-02-01T02:50:35Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6444#issuecomment-1411378896",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6444",
    "updated_at": "2023-02-01T02:50:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Right so I bet if you use the latest versions of dash and plotly.py but load plotly.js `2.13.3` it will work correctly. Then you can step forward from there to plotly.js `2.16.4` that won't work... the question is which intermediate version caused the bug? the full set of possibilities is `2.14.0`, `2.15.0`, `2.15.1`, `2.16.0`, `2.16.1`, `2.16.2`, `2.16.3`, `2.16.4`... most likely it's one of the minors, not one of the patches.\r\n\r\nMy guess is it'll be `2.16.0`, specifically https://github.com/plotly/plotly.js/pull/5827. That already caused one other bug that we've fixed: https://github.com/plotly/plotly.js/issues/6382 - but that apparently didn't fix your issue.",
    "created_at": "2023-02-01T02:39:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6444#issuecomment-1411371873",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6444",
    "updated_at": "2023-02-01T02:39:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I'm going to assume https://github.com/plotly/plotly.js/pull/6429 fixes this one as well, if you're still seeing this problem with plotly.js v2.18 please reopen or make a new issue.",
    "created_at": "2023-02-01T02:25:22Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6404#issuecomment-1411362529",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6404",
    "updated_at": "2023-02-01T02:25:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The observation in https://github.com/plotly/dash/issues/2406 that this happens between Dash v2.6.1 and v2.7.1 narrows this down a bit - you could try adding a specific plotly.js version to your app, either by putting it in the `assets/` folder or with a CDN link in `external_scripts`. That Dash range upgraded plotly.js from 2.13.3 to 2.16.4, so perhaps we can figure out which precise plotly.js release broke this for you.\r\n\r\nOf course that's still not the same as reproducing it, what we really need is a standalone app that triggers the bug. Perhaps you can augment my app above with more details from your app until the bug appears?",
    "created_at": "2023-02-01T01:05:19Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6444#issuecomment-1411293378",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6444",
    "updated_at": "2023-02-01T01:05:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @andresrcs - would you be able to make a PR to update https://github.com/plotly/plotly.js/blob/master/lib/locales/es-pe.js with the correct entries, and ask one other Peruvian to review and approve?",
    "created_at": "2023-01-29T15:43:24Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6450#issuecomment-1407697323",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6450",
    "updated_at": "2023-01-29T15:43:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@hottwaj that’s correct, making the ticks also round numbers for the synced axis would require adjusting its (auto)range, which was out of scope for this PR. I do like that idea, though I don’t think we want I to to be the default. But we’d gladly accept a PR adding an option to expand the autorange until the tick values are round numbers. With the caveat that in some cases this will not be possible, like syncing axes of different types. ",
    "created_at": "2023-01-27T16:13:15Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6356#issuecomment-1406713917",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6356",
    "updated_at": "2023-01-27T16:13:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @kevalshah90 - are you able to reduce this to a standalone app? I try to do that and it works with no error, but I had to comment out some of your missing variables\r\n\r\n```py\r\nfrom dash import Dash, dcc, html, Input, Output\r\nimport pandas as pd\r\n\r\nMAPBOX_KEY = \"<YOUR KEY>\"\r\n\r\ndf = pd.DataFrame({\r\n    'x': [1, 2, 3],\r\n    'Lat': [37.774322, 37.777035, 37.773033],\r\n    'Long': [-122.489761, -122.485555, -122.491220]\r\n})\r\n\r\napp = Dash(__name__)\r\n\r\napp.layout = html.Div([dcc.Graph(id=\"map\"), dcc.Input(id=\"inp\")])\r\n\r\n@app.callback(Output('map','figure'), Input('inp','value'))\r\ndef fin(val):\r\n    data = [{\r\n        \"type\": \"scattermapbox\",\r\n        \"lat\": df[\"Lat\"],\r\n        \"lon\": df[\"Long\"],\r\n        \"name\": \"Location\",\r\n        \"showlegend\": False,\r\n        \"hoverinfo\": \"text\",\r\n        \"mode\": \"markers\",\r\n        \"clickmode\": \"event+select\",\r\n        #  \"customdata\": df.loc[:,cd_cols].values,\r\n        \"marker\": {\r\n            \"symbol\": \"circle\",\r\n            \"size\": 8,\r\n            \"opacity\": 0.7,\r\n            \"color\": \"black\"\r\n        }\r\n    }]\r\n\r\n    layout = {\r\n        \"autosize\": True,\r\n        \"hovermode\": \"closest\",\r\n        \"mapbox\": {\r\n            \"accesstoken\": MAPBOX_KEY,\r\n            \"bearing\": 0,\r\n            #  \"center\": {\r\n            #      \"lat\": xxx,\r\n            #      \"lon\": xxx\r\n            #  },\r\n            #  \"pitch\": 0,\r\n            #  \"zoom\": zoom,\r\n            \"style\": \"satellite-streets\",\r\n        }\r\n    }\r\n\r\n    return ({'data': data, 'layout': layout})\r\n\r\nif __name__ == '__main__':\r\n    app.run(debug=True)\r\n```",
    "created_at": "2023-01-24T16:03:42Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6444#issuecomment-1402193850",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6444",
    "updated_at": "2023-01-24T16:03:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "That sacrifice is fine IMO - a common label as short as `1` like in that image is itself an edge case, in most cases there will be overlap. But it looks like all of those labels got pushed too far up, the lowest one could go right on the axis line.",
    "created_at": "2023-01-24T15:30:59Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6442#issuecomment-1402144320",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6442",
    "updated_at": "2023-01-24T15:30:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Sure enough, in the [unminified bundle](https://circleci-tasks-prod.s3.us-east-1.amazonaws.com/storage/artifacts/65346d72-8e7b-46e9-8db2-cbb77f4980f3/1da78c4f-e999-4f97-a04f-f90cda14c785/0/dist/plotly.js?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQVFQINEOIVW2AUOU%2F20230118%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20230118T141458Z&X-Amz-Expires=60&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEPf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLWVhc3QtMSJHMEUCIDjqjkQAPM9B58NvfIS0F2Uj8wttcvUwekSxdgMuhuHPAiEAszKevlL%2FS0ZNuhQPOFblatV2pCzOLFty7%2FOq3y22uAsqqwIIXxADGgwwNDU0NjY4MDY1NTYiDFfFteycYRc4loBS%2FiqIAvsjzyxStL6b0hRZ1NMMUXKVowEPDtT7IBTTu%2Bq6H%2BL7b1VRDUcU%2F11thsikivfuC9Tjj8WFV2YyS1xzYohCV82IxwQd7u8waWTE6YejVU1yzoxomyV7yuYeIOl2FdhxWo65vOVjvYvcddEFs9KW%2BcfHbVR8gzJbtKD%2FyaGytPf%2F%2FSxnwCwLOrXuXtYyj%2FeXf2YUSjE5BY2z1LYItM9LeuqCRvLtBr9b3A5sdYy0N5mobygOWDQ5PVsHSBzl2nGKVtXh1bpRK5CykLDaUNoDrVkGCNuHKNJ%2FdwO%2BB3ObVBcOewE8aSTNwLZF5%2BeLhRbnUGc%2B%2BJEprSabWc3ToJtuz%2B65RSid4GZc%2BDCe%2FJ%2BeBjqdARH8NVc1FvT2lA7jaJCIM5YSe0P7UZXWWjCXoK2GdiLYnKmQK82AXkEQUeqboJscF3dBO8GjTp%2FyueILzncrBy4xSX4K0DQu%2B7LCEr4XD06kooIf%2FceRBwFw8kdYdw31CDDRL%2F7PtuC%2FbQ4s0A5MnWRqMIr9hUFo4dj%2FoxylW5kCR1LTmPsraJmQzzKEp0KbsENGTwwFZ1eFvRBawmU%3D&X-Amz-SignedHeaders=host&x-id=GetObject&X-Amz-Signature=832744ad1174207112c97cb0f85cd55e5fdc7dc308d5ce7f3955274a731b43a6) I see `define([], factory);` like we had previously with browserify rather than the `define('Plotly', [], factory);` it had in the previous webpack build. So I expect this will work, but how hard would it be to test it in the actual docs pipeline? @nicolaskruchten ?\r\n\r\nAfter `define` there are still some different code paths between the two headers, but the only other one I'm aware of that we care about is setting `window.Plotly` and they both do that - browserify by explicitly looking for `window`, webpack by setting `self.Plotly` and assuming `self===window`.\r\n\r\nBTW, the link above was from the artifacts tab of the circleci job, if I go to the \"Show URLs to Build Files\" step instead the links (like https://176356-45646037-gh.circle-artifacts.com/0/dist/plotly.js) don't work.",
    "created_at": "2023-01-18T14:36:30Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6440#issuecomment-1387175551",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6440",
    "updated_at": "2023-01-18T14:36:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> As a workaround, `-ffast-math` can be disabled by marking `gl_Position` as `invariant` in the GLSL shader, but it should be noted that this comes with a potential impact on the performance of the shader.\r\n\r\n@djg thanks for the tip! I'm not too worried about the performance implications, in most practical cases we're limited more by data transfer than by the shaders for these charts, but of course this remains to be tested. I'd like to understand the extent of this a bit better though before we move on to implementation, and I don't have access to an M1 device so would be grateful if others could chime in:\r\n- Does it apply to the 3D trace types as well, if you give them the same datetime data as 2D?\r\n- Can we replicate the problem with numeric axes as well? ie reduced precision if you have data with small variations around a large baseline? Looks like on M1 we drop down to ~10^7 (24 bits) resolution on the absolute data. Here's a codepen you can use to test: https://codepen.io/alexcjohnson/pen/RwJQGdZ - on my machine with a baseline of 10^9 I have no problem with integer resolution, but if I increase the baseline to 10^17 I see the granularity, and oddly it's different for markers and lines:\r\n<img width=\"1474\" alt=\"Screenshot 2023-01-11 at 13 27 22\" src=\"https://user-images.githubusercontent.com/2678795/211888129-769e84e4-8efd-498a-90a2-3b61175afea6.png\">\r\n",
    "created_at": "2023-01-11T18:29:01Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6820#issuecomment-1858396828",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6820",
    "updated_at": "2023-01-11T18:29:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@VictorBezak @filipesantiagoAM just playing with this now, it's sooo satisfying to pan/zoom sync axes ☺️  Very nicely done!",
    "created_at": "2023-01-05T22:45:09Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6356#issuecomment-1372887382",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6356",
    "updated_at": "2023-01-05T22:45:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@Axios0ne this issue is closed not because we view it as complete (although that was originally why it was closed) but so that we collect all relevant discussions in one place. As I said before, please continue the discussion at https://github.com/plotly/plotly.py/issues/3719, particularly if you'd like to contribute to improving the situation 😄 ",
    "created_at": "2023-01-03T22:55:31Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4345#issuecomment-1370305585",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4345",
    "updated_at": "2023-01-03T22:55:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @Duc-Developer - I see it too, looks like this gets below the precision of the SVG rendering engine, I can trace this down to the `path` attribute, and two paths that should give nearly the same result put the nearly-full circle in totally different places.\r\n\r\n@archmoj maybe we can address this by breaking the arc into two pieces when it's >180 degrees? By the same token I wouldn't be surprised if there's a situation where a very small arc would decide to go the other way around and turn into almost the whole circle (or vice versa but breaking a large arc into two would fix that)... so if the arc is less than say a tenth of a degree maybe we should just turn it into a line?",
    "created_at": "2023-01-03T20:35:01Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6419#issuecomment-1370200059",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6419",
    "updated_at": "2023-01-03T20:35:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "`@noCIdep` came in here: https://github.com/plotly/plotly.js/commit/623146f91c\r\n```\r\n    // Although not recommended, some tests \"depend\" on other\r\n    // tests to pass (e.g. the Plotly.react tests check that\r\n    // all available traces and transforms are tested). Tag these\r\n    // with @noCIdep, so that\r\n    // - $ npm run test-jasmine -- tags=noCI,noCIdep\r\n    // can pass.\r\n```\r\nSo looks like on CI it's ignored, but it marks tests that need to run so the noCI tests succeed. Quite possibly obsolete by now, you could try running just `npm run test-jasmine -- tags=noCI` and see if it works?\r\n\r\nAnd good call, I somehow hadn't noticed the cartesian test right above that 😅 But that test was already passing, right? So what can we add to that test that would have broken before this change but now works correctly?",
    "created_at": "2022-12-22T01:59:12Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6395#issuecomment-1362298781",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6395",
    "updated_at": "2022-12-22T01:59:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj this looks great! There's one piece I don't understand: if I load `zz-scatter-grouping-vs-defaults`, then clear all the `alignmentgroup` attrs - `Plotly.restyle(gd,'alignmentgroup',null)` - then the traces in the upper right subplot disappear. They also disappear if I set the `alignmentgroup` for just those two traces to `'bottom'` to match the ones below - `Plotly.restyle(gd,'alignmentgroup','bottom', [3,9])`.\r\n\r\nIf I also clear `offsetgroup` they come back, and if I set the `offsetgroup` for those two to something explicit they get their own group.\r\n\r\nSo I guess the odd case is when `alignmentgroup` is either all `null` or all the same but one trace, in a different subplot from the others, doesn't have an `offsetgroup`.\r\n\r\nThere's a related case that's clearly broken: in the same mock, if I just clear `offsetgroup` for the last trace it stays where it was. But if I first give it a new `offsetgroup` (so it correctly gets new space) and THEN clear it, it gets pushed into the next group!\r\n```js\r\nPlotly.restyle(gd, 'offsetgroup', null, 11) // clear the group for the last trace, this is OK\r\n```\r\n<img width=\"483\" alt=\"Screenshot 2022-12-20 at 19 24 03\" src=\"https://user-images.githubusercontent.com/2678795/208792202-61086219-8a89-4404-a931-cad26985eb41.png\">\r\n\r\n```js\r\nPlotly.restyle(gd, 'offsetgroup', '3', 11) // put it in a new group\r\nPlotly.restyle(gd, 'offsetgroup', null, 11) // clear its group\r\n```\r\n<img width=\"493\" alt=\"Screenshot 2022-12-20 at 19 18 43\" src=\"https://user-images.githubusercontent.com/2678795/208792108-9f98013d-b3c3-4e32-89b7-d5a5bcb8ab7b.png\">\r\n\r\nI don't think this is unique to scatter, I can get a similar history-dependent errors from bars from setting / clearing the `offsetgroup` of the FIRST bar in the bottom right subplot (ie replace the 11 with 4 in those commands). Maybe we just treat `null` as its own `offsetgroup` if there are other traces with an `offsetgroup` on the same axis?",
    "created_at": "2022-12-21T00:30:19Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6381#issuecomment-1360562317",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6381",
    "updated_at": "2022-12-21T00:30:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@vp-walter does this problem go away if you downgrade to v2.14.0? If so it's probably indeed the same problem as #6407.",
    "created_at": "2022-12-20T22:33:06Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6404#issuecomment-1360401268",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6404",
    "updated_at": "2022-12-20T22:33:06Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@pawelciesielka like #6407 this is fixed if you downgrade to v2.14.0 so it's almost certainly the same problem. I'll close this issue, we'll track progress in #6407, but before we close that we'll ensure the fix also works with your data.",
    "created_at": "2022-12-20T22:28:31Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6411#issuecomment-1360398270",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6411",
    "updated_at": "2022-12-20T22:28:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for the simplified example @dbuezas !\r\n\r\nSeems this problem appeared between v2.14.0 and v2.15.0 - @archmoj the only thing I see in there that touched line drawing  is the `angleref` work https://github.com/plotly/plotly.js/pull/6297. Let's put this in line for immediately after the 2.17 feature work is complete.\r\n\r\nMeantime, if you're hitting this problem please downgrade to v2.14.0",
    "created_at": "2022-12-20T22:25:03Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6407#issuecomment-1360396130",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6407",
    "updated_at": "2022-12-20T22:25:03Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks like a duplicate of #6404 and #6407",
    "created_at": "2022-12-20T22:07:03Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6411#issuecomment-1360383081",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6411",
    "updated_at": "2022-12-20T22:07:03Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Good timing, this is exactly what @hannahker is working on in https://github.com/plotly/plotly.js/pull/6334",
    "created_at": "2022-12-17T13:09:02Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6405#issuecomment-1356255095",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6405",
    "updated_at": "2022-12-17T13:09:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @Quost - I also see the distortion and shaking you're describing in https://codepen.io/matheus-wc/pen/LYrwmbO\r\nFYI `plotly-latest` is misleading, it's the end of the v1 releases, but if I upgrade to the real latest release (`plotly-2.16.5`) the issue is still present.\r\n\r\nSince there's an indication this is machine-dependent (@archmoj?) I'm seeing this on an Intel MacBook Pro regardless of browser. @Quost what system are you using?",
    "created_at": "2022-12-17T13:00:46Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6400#issuecomment-1356246889",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6400",
    "updated_at": "2022-12-17T13:00:46Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@vp-walter shared the figure JSON with me off-thread, as it's a large file (thank you!). I see the problem even in the original interactive view, particularly if I pan:\r\n![phantom_segments](https://user-images.githubusercontent.com/2678795/208124150-21c22f10-d19b-40df-8c1e-ac90c50f4033.gif)\r\n@archmoj I'll move this issue to plotly.js and share the figure with you separately - not for the upcoming release, but let's try and tackle this soon after in the new year.",
    "created_at": "2022-12-16T14:53:33Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6404#issuecomment-1354996928",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6404",
    "updated_at": "2022-12-16T14:53:33Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Terrifying indeed! But even if you can’t give a minimal example, are you able to share the code for this exact chart?",
    "created_at": "2022-12-16T02:35:47Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6404#issuecomment-1354996902",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6404",
    "updated_at": "2022-12-16T02:35:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "We stopped updating `latest` when we released v2.0, to avoid accidental breaking changes",
    "created_at": "2022-12-15T12:04:07Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6399#issuecomment-1352962613",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6399",
    "updated_at": "2022-12-15T12:04:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "For completeness, the [decision we made in Dash](https://github.com/plotly/dash/blob/bf03758e493f136ca1bc09d64f514ea8757739e2/dash/dash-renderer/package.json#L89-L91) was:\r\n\r\n```\r\n  \"browserslist\": [\r\n    \"last 7 years and not dead\"\r\n  ]\r\n```\r\nMy rationale was that 7 years is the typical lifetime of a laptop, and there is likely a significant subset of users in very restricted environments who can't update their browsers even if they wanted to. And there's more for us to lose by breaking for those users than there is to gain from the performance and bundle size benefits of compiling to newer feature sets.",
    "created_at": "2022-12-14T20:28:41Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6366#issuecomment-1352118393",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6366",
    "updated_at": "2022-12-14T20:28:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice! Maybe then just a test like this one but for cartesian?\r\n\r\nhttps://github.com/plotly/plotly.js/blob/897fb0a35a64ed0c914075b9dad141ffe008a3f0/test/jasmine/tests/plot_api_react_test.js#L439",
    "created_at": "2022-12-14T19:39:25Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6395#issuecomment-1352048807",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6395",
    "updated_at": "2022-12-14T19:39:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@araichev Dash 2.7.1, released Monday, includes this fix. But in general, if there's a feature or fix in plotly.js that's been released but not included in Dash yet, you can grab the plotly.js bundle (or even build your own bundle, to get unreleased features or a slimmed-down bundle size) and put it in the `assets/` folder of your Dash app https://dash.plotly.com/external-resources#example:-including-local-css-and-javascript\r\n\r\nOr include a plotly.js CDN link in `external_scripts` https://dash.plotly.com/external-resources#adding-external-css/javascript",
    "created_at": "2022-12-14T14:40:56Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6387#issuecomment-1351541350",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6387",
    "updated_at": "2022-12-14T14:40:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "It's still able to generate too big of a radius. On the latest commit if I load `treemap_packages_colorscale_novalue` and then run `Plotly.restyle(gd,'marker.cornerradius', 40)`, the result is the same image as in https://github.com/plotly/plotly.js/pull/6351#discussion_r1007458397",
    "created_at": "2022-12-13T22:07:03Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6351#issuecomment-1349848716",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6351",
    "updated_at": "2022-12-13T22:07:03Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "You can try `{ ...element._context, staticPlot: true }` as the new config. But I think you may need to switch to `Plotly.newPlot` instead of `Plotly.react` since we're aware of some cases that config changes are not properly adopted by `Plotly.react` today. Also I'll note if you have the DOM element you can use that instead of its ID as the first arg. So with the caveat that I haven't tried it myself:\r\n\r\n```js\r\nPlotly.newPlot(element, element.data, element.layout, { ...element._context, staticPlot: true });\r\n```",
    "created_at": "2022-12-13T15:50:27Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6394#issuecomment-1348865075",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6394",
    "updated_at": "2022-12-13T15:50:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Haha how timely, @archmoj and I were just discussing this exact question yesterday in the context of https://github.com/plotly/plotly.js/pull/6393\r\n\r\nSometimes it works to change config via `Plotly.react`, sometimes it doesn't. I think the right thing to do is, if `config` changes, we should completely empty and recreate the graph. That means using the [`newPlot` pathway](https://github.com/plotly/plotly.js/blob/0e2b24951a2d73c08ca87157185f80a6e4364eb8/src/plot_api/plot_api.js#L2636) instead of the [`_doPlot` pathway](https://github.com/plotly/plotly.js/blob/0e2b24951a2d73c08ca87157185f80a6e4364eb8/src/plot_api/plot_api.js#L2730-L2732) it uses today.\r\n\r\n> How to get `element.config` in the same way `element.layout` and `element.data` exist?\r\n\r\nRight, we should save that but currently we do not. At the moment we have only `element._context` which is the \"filled in version\" akin to `element._fullData` rather than `element.data`.",
    "created_at": "2022-12-13T15:31:54Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6394#issuecomment-1348812123",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6394",
    "updated_at": "2022-12-13T15:31:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@OrchidSoleil This issue is closed, but see our full answer to this question of how to handle Putin's war crimes: https://github.com/plotly/plotly.py/issues/3719#issuecomment-1124000834\r\n\r\nFeel free to add to the discussion over there.",
    "created_at": "2022-12-06T16:11:45Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4345#issuecomment-1339614829",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4345",
    "updated_at": "2022-12-06T16:11:45Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yes, makes sense that if we’re going to treat individual boxes that way on log axes we should do the same for grouped boxes. And violins too. And bars? That might be a bigger change than we can make to the default behavior without considering it breaking, ideally we’d make an option to scale either way. Moving to the plotly.js repo. ",
    "created_at": "2022-12-02T00:29:58Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6383#issuecomment-1334616672",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6383",
    "updated_at": "2022-12-02T00:29:58Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@ndoulgeridis are you able to recreate this chart in shiny and find the figure JSON? You can pull this out from the JavaScript console by selecting the div with class js-plotly-plot and then `JSON.stringify({data:$0.data, layout:$0.layout})`. I’m not sure what it’s doing to create these features. ",
    "created_at": "2022-11-30T19:53:50Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6380#issuecomment-1332667117",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6380",
    "updated_at": "2022-11-30T19:53:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "OK - sounds like the best option would be to implement `container` vs `paper` positioning (adding attributes `slider.xref` and `slider.yref`) like we did with the main plot title in https://github.com/plotly/plotly.js/commit/66a8154fd31f976fd86c42b315eb6ef233be09c2 ( 👋 @rmoestl )\r\n\r\n@GeorgeFlorian If you're interested to make a PR, this would probably be a fairly easy one!",
    "created_at": "2022-11-23T18:51:53Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6372#issuecomment-1325522422",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6372",
    "updated_at": "2022-11-23T18:51:53Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@patson12 usage questions like this are better suited to https://community.plotly.com/c/plotly-js/6 - would you mind moving the question over there? Also, in order to help they're going to need more information about *how* you're changing the content - ie the specific code you're using.",
    "created_at": "2022-11-23T13:26:57Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6376#issuecomment-1325069005",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6376",
    "updated_at": "2022-11-23T13:26:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "You _can_ use a legend with a heatmap - but by default the colorscale is shown and the legend is not. https://codepen.io/alexcjohnson/pen/qBKxvpM",
    "created_at": "2022-11-22T19:00:48Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2448#issuecomment-1324119533",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2448",
    "updated_at": "2022-11-22T19:00:48Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj is my max radius comment https://github.com/plotly/plotly.js/pull/6351#discussion_r1007458397 still open?",
    "created_at": "2022-11-21T20:15:29Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6351#issuecomment-1322591270",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6351",
    "updated_at": "2022-11-21T20:15:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Rather than making room for the labels via `layout.margin` you could change `xaxis.domain`. If the plot width is variable this can be annoying as you need to convert between px and plot fraction, but if you know the width ahead of time it's easy.",
    "created_at": "2022-11-21T16:34:24Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6372#issuecomment-1322339274",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6372",
    "updated_at": "2022-11-21T16:34:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "It's a good idea. A prerequisite would be adjustable width for these lines https://github.com/plotly/plotly.js/issues/2573 - that's a bit challenging on its own due to the peculiarities of how parcoords was implemented in the first place. After that we could talk about adding fixed highlights.",
    "created_at": "2022-11-21T16:24:36Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6188#issuecomment-1322326417",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6188",
    "updated_at": "2022-11-21T16:24:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @Bansems - we probably should be more careful with attributions and licenses, though in this case it looks to me like a dead end: that block points - for the specific chunk we copied - to [this StackOverflow post](https://stackoverflow.com/questions/14967647/encode-decode-image-with-base64-breaks-image) which itself states that the solution came from [this defunct Evernote](https://www.evernote.com/shard/s18/sh/50ea8199-3f8c-4061-8c90-82e264380412/2c92f01382e0b35e1a48fd8e173ac8b2?noteKey=2c92f01382e0b35e1a48fd8e173ac8b2&noteGuid=50ea8199-3f8c-4061-8c90-82e264380412) and if I understand it correctly, it really should have been the license on that Evernote - if there was one - that governed this snippet of code. But now we can't even tell who the original author was. So ... ?\r\n\r\nAnyway if it's relevant, that snippet is the obvious implementation of \"convert the string into an ArrayBuffer,\" so the value here is simply recognizing that this is what you need as input to `window.Blob`.",
    "created_at": "2022-11-11T03:21:24Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6364#issuecomment-1311182412",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6364",
    "updated_at": "2022-11-11T03:21:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @Braintelligence - TBH I'm not sure what the purpose of `showticksuffix = \"none\"` (also for `showtickprefix`) is. It's there at least for symmetry with `showexponent = \"none\"`, and THAT has two purposes I know of: (1) reinterpreting the data without the extra exponent, for example if your data was in milligrams but you want the plot to look like it's in grams, or (2) to simplify the tick labels when you have another way to indicate the exponent to users, such as in the axis title. For use case (1) it's important that hover NOT show the exponent in hover, but for use case (2) it's probably mostly better if you DO show it in hover.\r\n\r\nSo yeah, I think in order to maintain this symmetry, the best solution would be to add `\"hoveronly\"` to all three of these attributes.\r\n\r\nIn the meantime though, could you get the effect you want just from `hovertemplate`? I guess that may be more awkward as it's a trace-level attribute and you want something that applies to all traces on the axis, but I'd think it should give the same final result.",
    "created_at": "2022-11-08T22:13:09Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6361#issuecomment-1307895995",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6361",
    "updated_at": "2022-11-08T22:13:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj this is looking great! My biggest comment so far: can we use `webpack.config.js` as an input to [`test_dashboard/server.js`](https://github.com/plotly/plotly.js/pull/6355/files#diff-852ae8f652fcdc3aef63e08a42016fe271180244e72ab26f634db1b3a576705eR48) and [`karma.conf.js`](https://github.com/plotly/plotly.js/pull/6355/files#diff-e5d9ca9c8a09ae063f7ecd31057f8eca5882b0af32d09fa21cd280aa5436332cR263) - and just modify what we need to for those two contexts? This would be easier to maintain, clearer about what's different between the three, and give more confidence that what works in one context works in all.",
    "created_at": "2022-11-03T13:00:38Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6355#issuecomment-1302065794",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6355",
    "updated_at": "2022-11-03T13:00:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I like `marker.cornerradius` - a little verbose but totally unambiguous.\r\n\r\nLooks beautiful for treemaps (if you don't try to break it like I did 😈 )\r\n\r\nFor icicle though, can we NOT round the edges where the parts abut the whole? Kind of the analog of bars \"only the top bar\" though I think rounding both sides is fine. I just don't like it rounded in the middle, as I think it obscures the \"part of a whole\" model. Also looks particularly bad where a very small slice isn't touching its parent at all:\r\n<img width=\"165\" alt=\"Screen Shot 2022-10-27 at 19 03 20\" src=\"https://user-images.githubusercontent.com/2678795/198416863-568c5bc7-a8ab-4246-84da-e9889103c100.png\">\r\nIf that's going to be too annoying to implement, perhaps better to leave icicle out of this pr?",
    "created_at": "2022-10-27T23:35:27Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6351#issuecomment-1294234233",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6351",
    "updated_at": "2022-10-27T23:35:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice and simple! Can we create a test based on your reproduction in https://github.com/plotly/plotly.js/issues/6346?",
    "created_at": "2022-10-21T13:54:37Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6345#issuecomment-1287001076",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6345",
    "updated_at": "2022-10-21T13:54:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice idea @subsurfaceiodev - moving the issue to plotly.js which is where it would need to be implemented.",
    "created_at": "2022-10-20T21:48:08Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6347#issuecomment-1286194236",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6347",
    "updated_at": "2022-10-20T21:48:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj using your new bundle (and the updated app https://github.com/plotly/dash/issues/1097#issuecomment-1285782694) I don't see any console errors, but I also (after clicking the button any number of times) don't the deselected points dim.",
    "created_at": "2022-10-20T15:50:03Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6345#issuecomment-1285788135",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6345",
    "updated_at": "2022-10-20T15:50:03Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This foundation looks good! As far as `shift=true, position=0.2`, the way I'd frame this is that position is where we first put it, but then `shift`, either auto or fixed, might move it relative to that original location. So there should be no problem having both of these attributes. I can think of two situations this would make sense:\r\n\r\n- `xaxis.domain` is set to start at `0.2`. Then I guess with `shift=true`, `position` would default to `0.2` as the starting point before shifting, but (as a general rule) setting any attribute explicitly to the value it would default to should not change the result.\r\n- You have multiple y axes, and you want to set a minimum separation between them, but allow that to grow if necessary to avoid overlap. So you'd set them all with `shift=true`, but `position` values eg `0`, `0.1`, `0.2`...\r\n- This might also be how you'd handle it if you don't want a minimum separation but you DO want a custom order? say `y` is the anchored axis, and normally `y2` would be next to it and then `y3` but instead you want `y3` closest to `y`? Or do we just say that's not supported? I was imagining you'd set some tiny `position` difference, but to do this the way people expect I guess we'd need to allow positions beyond `[0, 1]`, otherwise they'd need to artificially restrict `xaxis.domain` to something like `[0.001, 1]` then set `y3.position=0.001`, `y2.position=0`. OK yeah that's too awkward, let's not do that.",
    "created_at": "2022-10-17T14:44:37Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6334#issuecomment-1280979546",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6334",
    "updated_at": "2022-10-17T14:44:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj I think you're right, if I replace the x data in that codepen with just the integers on a normal numeric or category axis we see all the data on hover. Thanks for the report @fsantiago99!",
    "created_at": "2022-10-14T15:32:26Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6331#issuecomment-1279160005",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6331",
    "updated_at": "2022-10-14T15:32:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yes, something went wrong during publishing, we’re still working with NPM support to try and resolve it. Sorry for the inconvenience!",
    "created_at": "2022-10-10T19:54:51Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6340#issuecomment-1273747495",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6340",
    "updated_at": "2022-10-10T19:54:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Given that there are reasons to prefer either the way this is currently done (axis line bordering the plot area on the outside) or the alignment being requested here (axis line centered on the end of the counter-axis range) I'd say we can consider this a feature request. Implementation would need to be in plotly.js, so I'll transfer the issue over there. I'm not sure quite sure what the API should be - something like `axis.lineposition: 'outside' (default, current behavior) | 'centered' (new behavior)` perhaps?\r\n\r\nIf anyone is interested in working on a PR for this, one of the keys will be a test figure with fat differently-colored semi-transparent lines on all axes and ticks so we can clearly see exactly how they all meet each other - similar to what we've done in https://github.com/plotly/plotly.js/blob/master/test/image/baselines/20.png (notice how you can see that the x axes continue out into the corners but the y axes don't, so we cover every desired pixel exactly once) but with explicit axis ranges and using the new attribute.",
    "created_at": "2022-10-07T13:44:45Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6338#issuecomment-1271615746",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6338",
    "updated_at": "2022-10-07T13:44:45Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@richardnm-2 thanks so much for opening this PR! Just a couple of structural comments while I'm reviewing the rest of the code:\r\n- Per the [contributing guide](https://github.com/plotly/plotly.js/blob/master/CONTRIBUTING.md#development) please use node 16.x / npm 7.x - or at least don't commit the `package-lock.json` generated by an earlier version.\r\n- This PR shouldn't touch anything in the `devtools/test_dashboard` dir. Instead let's add one or more new figures in `test/image/mocks`, then you can load these in the regular dashboard, but they also become part of the test suite. If you can't get the [baseline generation](https://github.com/plotly/plotly.js/blob/master/CONTRIBUTING.md#draft-new-baselines) part to work we can help with that.",
    "created_at": "2022-10-05T17:49:31Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6327#issuecomment-1268747355",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6327",
    "updated_at": "2022-10-05T17:49:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Is there just some css we can use to change the box-shadow, border radius, etc. of the hover templates?\r\n\r\nThese hover labels are drawn in SVG, not HTML. So border radius isn't going to work, that would need to be implemented as part of the path for the label box. Some effects like box shadow may be possible through CSS, the trick will be finding the right selectors. I believe single-trace labels are [`<g.hovertext>`](https://github.com/plotly/plotly.js/blob/6f0122704b467ef6c36a915b7a52bfdeef0f6972/src/components/fx/hover.js#L1243) elements containing a [`<path>`](https://github.com/plotly/plotly.js/blob/6f0122704b467ef6c36a915b7a52bfdeef0f6972/src/components/fx/hover.js#L1258) for the main label, with a [`<rect>`](https://github.com/plotly/plotly.js/blob/6f0122704b467ef6c36a915b7a52bfdeef0f6972/src/components/fx/hover.js#L1254) next to it for the trace name. If the common x position gets a label over the axis, that's a [`<g.axistext>`](https://github.com/plotly/plotly.js/blob/6f0122704b467ef6c36a915b7a52bfdeef0f6972/src/components/fx/hover.js#L929). Unified hover labels will be a bit tricky with CSS because plotly.js internally actually thinks they're [legends](https://github.com/plotly/plotly.js/blob/6f0122704b467ef6c36a915b7a52bfdeef0f6972/src/components/fx/hover.js#L1151) but maybe something based on the fact that they're drawn in the hover layer rather than the info layer?\r\n\r\n> how about allowing us to set the animation delay on the movement of tooltips. They are very choppy and not as smooth as other charting APIs, in which tooltips glide across the screen smoothly, rather than jumping.\r\n\r\nI understand the appeal of a gliding effect, but it's probably not something we're going to build. From the standpoint of data interpretability, animation provides object constancy: \"this shape moving or changing size represents the same entity, just evolving to a different view.\" But that's not what's happening at all with hover labels as you move your mouse around the plot. You leave one data point, so the information about that data point should disappear, and you arrive at another data point, so information about that data point should appear. This is also why we don't attach the hover label to the mouse cursor, only to the data points themselves: we're not giving info about the mouse cursor, we're giving info about the data point the cursor is nearest.\r\n\r\nThat said there are things we could do to soften the hover effects without tampering with the association between data value and label position. We could fade in and out, or shrink and grow, for example. If anyone is interested in making a PR to allow effects like this (or styling like border radius), the part of the code I link to above is probably where it goes - along with creating appropriate attributes, that will need to be fed in from traces or layouts similar to how colors are handled now.",
    "created_at": "2022-09-30T14:07:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2342#issuecomment-1263623306",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2342",
    "updated_at": "2022-09-30T14:07:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Absent a sponsor this is unlikely to make it onto Plotly's roadmap - but we'd gladly accept a PR and help get it finished, if any of the folks giving this issue a 👍 would like to give it a go!",
    "created_at": "2022-09-29T16:24:53Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2196#issuecomment-1262515957",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2196",
    "updated_at": "2022-09-29T16:24:53Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@longranger2 plotly.js doesn't have \"smart\" logic for placing each pie in the next grid cell, you need to do this yourself by adding to each trace `domain: {row: rowNum, column: colNum}` where `rowNum` and `colNum` are 0 or 1 starting from the top left.",
    "created_at": "2022-09-26T15:19:22Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6322#issuecomment-1258204362",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6322",
    "updated_at": "2022-09-26T15:19:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@richardnm-2 fantastic, nice work!\r\n\r\nPerhaps the easiest would be to create a PR into the main repo, that would be the easiest way for us to look at what you have and see if we can help resolve those two issues, as well as figure out what else might be needed to get it merged.",
    "created_at": "2022-09-26T14:44:55Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2175#issuecomment-1258150397",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2175",
    "updated_at": "2022-09-26T14:44:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks like we're adding backoffs and prohibiting `spline` in some cases we shouldn't. For example:\r\n```js\r\nPlotly.newPlot(gd,[{\r\n    x:[0,1,1], y:[0,1,0],\r\n    marker:{size:50, symbol:'arrow'},\r\n    line:{width:20, shape:'spline'}\r\n}],\r\n{width:400,height:400})\r\n```\r\nWith or without asking for `spline` there, the implied `line.backoff` should have been 0 because `angleref` isn't included so it defaults to `up`, and thus `spline` should have been accepted. Instead we get:\r\n<img width=\"304\" alt=\"Screen Shot 2022-09-26 at 08 43 35\" src=\"https://user-images.githubusercontent.com/2678795/192279632-45b4c60f-6483-4a33-b47f-325bfdd48c4e.png\">\r\nIf I explicitly set `line.backoff=0` we get the right behavior:\r\n<img width=\"305\" alt=\"Screen Shot 2022-09-26 at 08 45 30\" src=\"https://user-images.githubusercontent.com/2678795/192279973-b99138f6-c002-4c81-930f-ab08d8af06f6.png\">\r\n",
    "created_at": "2022-09-26T12:46:28Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6297#issuecomment-1257988151",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6297",
    "updated_at": "2022-09-26T12:46:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> With that said, do you think it would be better (& more specific) to use stroke-opacity and fill-opacity instead of general opacity?\r\n\r\nYou could also say `opacity` is better because it's the same attribute for both types of pattern. I don't think it matters. Let's just fix the bgcolor part and call it done.",
    "created_at": "2022-09-19T20:05:07Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6318#issuecomment-1251488555",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6318",
    "updated_at": "2022-09-19T20:05:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Browser compatibility of [stroke-opacity](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-opacity) and [fill-opacity](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill-opacity) is unknown.\r\n\r\nWe've been using those attributes all over the place for years, I think we can conclude they're safe :) But simpler is better as long as the effect is the same. Did anything actually change in the images you regenerated? They look identical to me.\r\n\r\nWe still want to separate out [`bgcolor`](https://github.com/plotly/plotly.js/blob/adcb081a09fec15e7af2d70210e01a525b83cacd/src/components/drawing/index.js#L571) per the last part of my comment https://github.com/plotly/plotly.js/pull/6318#issuecomment-1251242102",
    "created_at": "2022-09-19T19:39:58Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6318#issuecomment-1251466631",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6318",
    "updated_at": "2022-09-19T19:39:58Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks like pattern `.` needs the same applied to `fill` (ie create `fill-opacity`) instead of `stroke`\r\n\r\nhttps://github.com/plotly/plotly.js/blob/adcb081a09fec15e7af2d70210e01a525b83cacd/src/components/drawing/index.js#L530\r\n\r\nBut I wonder: is there any difference in effect between `opacity` and `stroke-opacity` (or `fill-opacity`) in this case? ie could we just multiply `fgopacity` and `fgStrokeOpacity` together into a single `opacity` value?\r\n\r\nAlso: looks like the `bgcolor` part may need to be split into `fill` and `fill-opacity`, since we aren't setting it with `Color.fill`:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/adcb081a09fec15e7af2d70210e01a525b83cacd/src/components/drawing/index.js#L571",
    "created_at": "2022-09-19T16:18:13Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6318#issuecomment-1251242102",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6318",
    "updated_at": "2022-09-19T16:18:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "No - perhaps you can use a carpet plot? https://plotly.com/javascript/carpet-scatter/",
    "created_at": "2022-09-14T16:25:55Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6316#issuecomment-1247014842",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6316",
    "updated_at": "2022-09-14T16:25:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "For security purposes we don't allow any JS inside the figure spec, since figures don't always come from trusted sources. You could hack something to achieve your purpose by creating a `restyle` or `relayout` call that does nothing, ie set a nonexistent attribute, then listen for that event with that attribute.\r\n\r\nWe could advance that concept into a real feature by allowing you to just emit an event of your choosing, but do nothing else to the graph. For example, we could make it so this button:\r\n```js\r\n{ args: ['party', 'like it\\'s 1999'], label: 'Party Time!', method: 'event' }\r\n```\r\nwould emit a `plotly_party` event with data `\"like it's 1999\"` when clicked. Then you could attach whatever handler you want:\r\n```js\r\ngd.on('plotly_party', e => { console.log(e) })\r\n```\r\n\r\nThis feature is probably pretty straightforward to implement, if you'd like to make a PR. It's not likely to be worked on by Plotly staff in the near future but we'd happily help review and merge a PR 😄 ",
    "created_at": "2022-09-12T22:07:40Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6314#issuecomment-1244576078",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6314",
    "updated_at": "2022-09-12T22:07:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Right, `staticPlot` has other useful effects, like omitting most of the invisible elements used only to capture interactions, and changing some of the antialiasing settings for better print behavior. So I definitely think it deserves to stay.\r\n\r\nSeems like what this requires is when `staticPlot` is enabled we wait until the webgl rendering is complete, then pull the images out of its canvases and into image elements, and finally dispose of the webgl contexts and canvases entirely.\r\n\r\n@McPonolith if you're creating many graphs simultaneously this still may cause problems of too many contexts, and us dropping some. I guess in principle we could stash some global state saying \"we're rendering a webgl plot as static\" and have any others wait until previous ones are done and have released their contexts before they even try to render. Still not 100% clear that this would work, as in my experience browsers don't always handle these resources on the schedule we want them to!",
    "created_at": "2022-09-09T16:47:36Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/457#issuecomment-1242215630",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/457",
    "updated_at": "2022-09-09T16:47:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I don't know of a way, unless you've included plotly.js from source in which case you should be able to directly import `plotly.js/src/lib` and replace `Lib.randstr` with whatever you want. Anyway the function is defined [here](https://github.com/plotly/plotly.js/blob/55f86ea9661afeb4bff1e4a0d0b22fb3679c29cb/src/lib/index.js#L326), we'd be happy to accept a PR to make it easily mockable.",
    "created_at": "2022-09-06T23:02:31Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6311#issuecomment-1238733819",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6311",
    "updated_at": "2022-09-06T23:02:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "We'll need to back off the end of the line, when using `angleref='previous'` and `angle=0` so it's hidden under the marker to the extent possible - obviously a wide enough line can't have its end hidden by the marker, but a medium-width line can. For annotations we did this by giving each arrowhead a specific [`backoff` parameter](https://github.com/plotly/plotly.js/blob/8206eb50805b248327573b0ea8d2514c5375b06d/src/components/annotations/arrow_paths.js#L27) that causes the line to end where its center is definitely under the arrowhead, but at the widest point possible to accommodate the largest possible width.\r\n\r\nYou can see the problem a little bit in some of the existing mocks, for example `polar-direction` there's some pink poking out the front of the blue markers. But it becomes more blatant if you make the line width bigger, for example on `z-line-shape-arrow`:\r\n<img width=\"188\" alt=\"Screen Shot 2022-08-26 at 13 25 11\" src=\"https://user-images.githubusercontent.com/2678795/186974189-3e00f9b1-94cd-4e30-95e7-66169276f936.png\">\r\n\r\nor `z-marker-standoff`:\r\n<img width=\"733\" alt=\"Screen Shot 2022-08-26 at 15 06 05\" src=\"https://user-images.githubusercontent.com/2678795/186974482-5c0fc749-7b79-4b58-b22d-31c56510bf9d.png\">\r\n\r\nThis backoff should only happen at the end of a path; if the path continues through the point in question it should be unchanged. This might produce unexpected results when you add an extra marker-only trace like `z-marker-standoff`, because you've got two segments and only the second one will pull the line back. But I don't think it makes sense otherwise - you could argue that if there's a nonzero `standoff` we should pull the line back anyway, but users might add a standoff without an extra marker in order to account for `marker.line.width` so I don't think we can rely on that. To get the effect where all segments are pulled back you can always double up those middle points and put a `null` between.",
    "created_at": "2022-08-26T19:24:34Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6297#issuecomment-1228838347",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6297",
    "updated_at": "2022-08-26T19:24:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks like `gl2d` has a problem with the original arrow symbols... clipping them but also not drawing the bars when requested. From the test images (open variant as it's easiest to see, but applies to all variants), here's svg:\r\n<img width=\"67\" alt=\"Screen Shot 2022-08-26 at 11 33 30\" src=\"https://user-images.githubusercontent.com/2678795/186941343-b4b00814-88ba-435f-a8b2-24f35d6c7f87.png\">\r\nand gl2d:\r\n<img width=\"63\" alt=\"Screen Shot 2022-08-26 at 11 33 46\" src=\"https://user-images.githubusercontent.com/2678795/186941373-695264bd-0dbf-48a1-aba8-9cebe4a52694.png\">\r\n\r\nThe missing bars may not be new in this PR, but the clipping I'm guessing is new (or at least more prominent now) since it's based on the angle.",
    "created_at": "2022-08-26T15:41:09Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6297#issuecomment-1228652106",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6297",
    "updated_at": "2022-08-26T15:41:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Let’s keep it in the scatter trace. We still want to support other features of scatter traces like error bars, lines… and it’s often going to be a different data set from the associated bars, perhaps on a different y axis. ",
    "created_at": "2022-08-17T20:14:08Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4913#issuecomment-1218448065",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4913",
    "updated_at": "2022-08-17T20:14:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "You can drag one end of an axis - put your mouse over the axis labels near one end and you'll see the cursor as a single-ended arrow, whereas it's double-ended when your mouse is over the middle of the axis.\r\n\r\nThis kind of question will get a quicker answer on https://community.plotly.com/ 😄 ",
    "created_at": "2022-08-12T19:58:55Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6283#issuecomment-1213468100",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6283",
    "updated_at": "2022-08-12T19:58:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Let's leave arrowheads+markers out of this PR. If we did want to do that, I suspect it'd be better to add a separate arrowhead option than to try and shoehorn it into the marker framework - and at that point it could automatically back off to the edge of the marker.\r\n\r\nNote for annotations, we called this \"pull back from the target point\" `standoff`. We could certainly add that on its own, which would allow certain effects people might occasionally want - use a centered marker as an arrow for example, or give the marker an outline and point the edge of the outline at the target point. And it would allow particularly motivated users to hack your arrowheads+markers too :)\r\n\r\nBut again, not for this PR.",
    "created_at": "2022-08-12T19:49:05Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6297#issuecomment-1213461459",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6297",
    "updated_at": "2022-08-12T19:49:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "LGTM - aside from the revised name as suggested by @archmoj in https://github.com/plotly/plotly.js/pull/6202#discussion_r932218467 I think we just want to use the new attributes in an image test.",
    "created_at": "2022-08-02T20:32:24Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6202#issuecomment-1203185810",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6202",
    "updated_at": "2022-08-02T20:32:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks great! We'll need to figure out why the tests are failing, and let's see if @archmoj has any further comments.",
    "created_at": "2022-07-25T13:17:31Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6276#issuecomment-1194036916",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6276",
    "updated_at": "2022-07-25T13:17:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @Andy2003 - that's a nice effect 😎\r\n\r\nI'd call it a length though, since it's along the direction of the link, rather than a width which is typically perpendicular to the direction of the object. So `arrowlen` (we prefer not to use `length` in attribute names because of the built-in `.length`)\r\n\r\nTwo cases I'm curious about:\r\n- Does this work for vertical Sankey diagrams (`orientation: 'v'`)?\r\n- What happens to non-circular links if the space between two nodes is close to or even less than the arrow length? Maybe we need to limit each arrow to take no more than perhaps half the available space?",
    "created_at": "2022-07-25T09:43:59Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6276#issuecomment-1193822962",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6276",
    "updated_at": "2022-07-25T09:43:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "What exactly is the conflict here? Does this mean sankey selection after this won't work if there's an `xy` subplot but it will work if you only have some other subplot like `x2y2`?",
    "created_at": "2022-07-15T21:10:42Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6268#issuecomment-1185946023",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6268",
    "updated_at": "2022-07-15T21:10:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @fraupflaume!\r\n\r\n@archmoj perhaps we can write a test that all the keys in all translation dictionaries are valid? If it’s just formatting issues like this we can fix them ourselves, but if it’s more than that we can just delete the broken ones. And then as an informational test have it output a list of missing keys per language? We know some of the older translations will have a bunch of missing keys, but having that collected would be nice so we can post somewhere (perhaps in the community forum) asking for help to update them. ",
    "created_at": "2022-07-14T01:02:08Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6256#issuecomment-1183835219",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6256",
    "updated_at": "2022-07-14T01:02:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I see - I had forgotten about that. I can't really see how someone would depend on that undefined event, but having made that choice before let's not change it now. I had also forgotten that we already have a `plotly_deselect` event. So with that in mind, it looks to me as though the PR right now has the events exactly right 🎉 \r\n\r\nAfter talking to @chriddyp just now, I think we should revisit the decision to have multiple selections be the default result when you drag multiple times, and instead go back to how it was before this PR: dragging a second time clears the first selection before creating a new one; if you want to add a second selection you need to shift-drag.\r\n\r\nHis main argument is that since this is how it worked before, most people probably never found the shift-drag functionality, so there's probably a lot of code out there that only supports a single selection region, and will appear broken if used with multiple regions. In addition, double-click to clear a selection might not be obvious to everyone, but getting stuck with one selection until you figure it out is a lot nicer than winding up with a dozen.\r\n\r\nI think in the interest of time, in this PR we should simply change back to \"you need to shift-drag to get a second selection.\" Down the line though we could add configurability, to either (a) keep that behavior, (b) disallow multiple selections entirely, or (c) the behavior you have right now, with no shift needed.\r\n\r\nAnother idea Chris had to make this easier is adding a delete button to each selection, that appears in the corner when you're hovering on the selection. But again, not needed for this PR, we can do this later.",
    "created_at": "2022-07-12T18:13:50Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6243#issuecomment-1182171520",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6243",
    "updated_at": "2022-07-12T18:13:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I see your point, but there's an argument to be made that the current behavior is actually more correct: the zero tick mark is pointing at the value zero, while the bottom axis line is bordering the chart on the outside. Since the axis is intended to go to zero, that means the top of the axis line should be at the middle of the zero tick mark. If the two were aligned, that would mean the axis line is covering up the very bottom of the axis.\r\n\r\nI was going to suggest that if what you want is a line centered on zero, use the zero line instead of the axis line. Unfortunately that has other artifacts that I would _definitely_ consider to be bugs: the y axis line stops slightly short of flush with the bottom of the zero tick mark, and the x axis tick marks have a gap with the zero line.\r\n<img width=\"612\" alt=\"Screen Shot 2022-07-12 at 12 15 54\" src=\"https://user-images.githubusercontent.com/2678795/178542250-4058a3e7-72e2-4ab0-8d38-06a37a1443e0.png\">\r\n\r\n",
    "created_at": "2022-07-12T16:16:24Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6338#issuecomment-1271615740",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6338",
    "updated_at": "2022-07-12T16:16:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@shaurya-sisodia thanks for the investigation and the PR! It's great to know that only `addStyleRule` is problematic for strict CSP - from the earlier discussion I was worried that d3 `selection.style` was also a problem, which would have made this MUCH harder to resolve.\r\n\r\nSo given that, I wonder if we can just inline all the styles we need? There aren't that many, and you've already figured out one of the most annoying parts, the hover pseudo-selector. That would avoid having two separate builds (which is more to test & maintain) as well as requiring strict users to remember the stylesheet - easy to forget as it doesn't do all that much until you start interacting with the graph, and it seems like including an external stylesheet brings its own headaches in a strict CSP environment.",
    "created_at": "2022-07-12T12:57:59Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6239#issuecomment-1181729335",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6239",
    "updated_at": "2022-07-12T12:57:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Alright, getting close :slightly_smiling_face: Aside from my [latest comment](https://github.com/plotly/plotly.js/pull/6243#discussion_r918876485) (yes, always include all points in the event data) I only see two things:\r\n\r\n(1) Currently when you’re in a selection mode and you click somewhere on the plot, whether you have a selection or not you get a selected event with no data. Can we just drop that event? ie if between mousedown and mouseup you didn't move the mouse enough to get a selecting event, don't emit a selected event.\r\n\r\n(2) When you double click to deselect a region we don’t emit a `selected` event; we should, with just the remaining points. In fact when you double click to deselect everything, the first click gives an event (point 1 above, it shouldn't), but the second click which actually clears the selection doesn't give an event. It should, with no event data.",
    "created_at": "2022-07-12T12:04:26Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6243#issuecomment-1181676768",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6243",
    "updated_at": "2022-07-12T12:04:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "It’s best if you load a new copy of `d3-format` rather than try to use the one inside plotly.js. In v1.x we used to export d3, but in v2.x we removed that export, so that we could upgrade d3 and drop pieces we don’t use without breaking user code that depends on d3. ",
    "created_at": "2022-07-09T10:38:02Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6254#issuecomment-1179521030",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6254",
    "updated_at": "2022-07-09T10:38:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@sec2 I didn't see it pushed, but I needed to fix the entry I just made for Sinhala so I made one myself. Will merge once tests pass. Thanks again!",
    "created_at": "2022-07-08T02:31:13Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6247#issuecomment-1178472077",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6247",
    "updated_at": "2022-07-08T02:31:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yes perhaps, thanks for the report! Can you give us a reproduction case for the issue you see, so we can use it to write a test ensuring the bug doesn't recur?",
    "created_at": "2022-07-06T21:36:13Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6251#issuecomment-1176773168",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6251",
    "updated_at": "2022-07-06T21:36:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Probably because we want the result to be as if we had called `restyle` providing the new `selectedpoints`, but we don't want the overhead of a full `restyle` call.",
    "created_at": "2022-07-06T19:03:16Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6167#issuecomment-1176571737",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6167",
    "updated_at": "2022-07-06T19:03:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This will be in the next release, hopefully out this week. It will be plotly.js 2.13 and plotly.py 5.10",
    "created_at": "2022-07-06T18:59:48Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3939#issuecomment-1176568737",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3939",
    "updated_at": "2022-07-06T18:59:48Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@migupry note that plotly.js uses a fork of d3-sankey: https://github.com/plotly/d3-sankey - mainly this was done to switch how we draw links: d3-sankey draws a path from source to target, using stroke-width and stroke-color to set its size and color. Our fork draws the full link outline and uses fill-color. This allows us to avoid overlaps when several links travel in parallel, and lets us outline the links. But as a result we would need to re-implement gradient link colors. There would be two steps to getting this into plotly.js: (1) add the capability to https://github.com/plotly/d3-sankey - probably following the general pattern of how this was done in the original, but applying it to fill instead of stroke; if the only gradient allowed by the original is `'source-target'`, that seems like the main thing people are interested in but if we can do something more general and allow each link to specify its own gradient that would be even better. (2) expose this capability inside plotly.js",
    "created_at": "2022-07-06T12:10:14Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3261#issuecomment-1176144054",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3261",
    "updated_at": "2022-07-06T12:10:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj this is looking great! A couple of bits of behavior I notice though:\r\n- When I make two selections in a row, then click back onto the first selection and edit it, the second selection disappears.\r\n- The first selection selects points immediately while the mouse move as it should. But the second shape doesn't select points even on mouse up, only when I click off it.\r\n- Similarly when I modify an existing selection shape, the selected points don't change until mouse up - they should change while I'm dragging, with an associated `plotly_selecting` event.\r\n- Currently if I make one selection, then shift-drag, it modifies that selection. If the new rectangle overlaps the old one it converts the combined shape into a path. I feel like the general flow should be closer to what it was before: a regular drag clears the previous selection and starts making a new one, shift-drag adds a new shape (but works like plain drag does today, ie the two shapes stay independent rather than combining into one)\r\n- Do we really need the gray fill when a selection is selected? Aren't the handles enough? I feel like there will be a lot of situations where that obscures the data too much. Also the ghost \"original shape\" when you're modifying a selection - neat idea, could include it for editable shapes but I think it's too much for selections.\r\n- This one I'd say we can do later, but I agree with @chriddyp's thought that we shouldn't have a state where no selection is active. When you create a selection, it should be active from mouseup. When you add another one, it should become the active one. If you then then click on the first one, that one should go back to being active.",
    "created_at": "2022-07-06T02:20:44Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6243#issuecomment-1175704408",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6243",
    "updated_at": "2022-07-06T02:20:44Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @sec2! It looks like there are 6 new keys in [translation-keys.txt](https://github.com/plotly/plotly.js/blob/master/dist/translation-keys.txt) since ja.js was created:\r\n- Click to enter radial axis title\r\n- Draw circle\r\n- Draw closed freeform\r\n- Draw line\r\n- Draw open freeform\r\n- Draw rectangle\r\n\r\nWould you be able to add these?\r\n\r\nCan you please also tag another native zh-tw speaker to review?\r\n\r\nLastly, the date localization also changed, I just want to confirm that this was intentional?",
    "created_at": "2022-06-30T16:11:07Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6247#issuecomment-1171410299",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6247",
    "updated_at": "2022-06-30T16:11:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@sudeepag can you elaborate why you closed this PR? I haven't seen the problem you observed so I'm wondering if this was a conflict with some other CSS applied on the page, and fixing that resolved the issue without changes to plotly.js?",
    "created_at": "2022-06-29T16:39:25Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6195#issuecomment-1170221590",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6195",
    "updated_at": "2022-06-29T16:39:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Excellent! Yes, we create a lot of elements inside our plots and it’s frustratingly easy for your CSS to leak in there. Glad you figured it out!",
    "created_at": "2022-06-29T16:25:48Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6211#issuecomment-1170206395",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6211",
    "updated_at": "2022-06-29T16:25:48Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @paulovieira, this looks great! @archmoj anything this PR needs, other than including the new attributes in a mock somewhere? Perhaps the same mock you already modified to remove faulty attributes?",
    "created_at": "2022-06-29T16:10:17Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6246#issuecomment-1170182997",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6246",
    "updated_at": "2022-06-29T16:10:17Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@whippysundew I think we still need a little more information about the kind of data it would be useful to represent with such a stack, and come to a consensus on the API for this that's most consistent with our other traces such as bar. After that we can look back at previous waterfall PRs such as https://github.com/plotly/plotly.js/pull/3531 to see where the code needs to be amended.",
    "created_at": "2022-06-27T16:28:32Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4450#issuecomment-1167576179",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4450",
    "updated_at": "2022-06-27T16:28:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "There's a little bit of customization you can do within plotly.js itself https://plotly.com/python/hover-text-and-formatting/#customizing-hover-label-appearance but more substantial customization requires breaking out of this, for example the Dash `dcc.Tooltip` component https://dash.plotly.com/dash-core-components/tooltip",
    "created_at": "2022-06-23T18:00:25Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6241#issuecomment-1164710848",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6241",
    "updated_at": "2022-06-23T18:00:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "That's our default trace color set, not really any statement about what's the \"ideal\" or \"official\" gray color. We can adopt it if you think it's better that way, but I wouldn't consider the current color a bug :)",
    "created_at": "2022-06-20T16:29:49Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6236#issuecomment-1160647209",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6236",
    "updated_at": "2022-06-20T16:29:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Discussed in #2355 (ancient issue but it hasn't yet become a top priority)",
    "created_at": "2022-06-20T14:25:23Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6233#issuecomment-1160513680",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6233",
    "updated_at": "2022-06-20T14:25:23Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Re: downsampling: ironically we DO downsample, in a way that should have almost zero visual impact, when drawing SVG line traces. But I don't believe we do for gl2d because in general the downsampling operation there is slower in our experience than just drawing all the points. These days I spend most of my own time in Python so I'm not sure about JS libraries to do this, but specifically for time series https://github.com/predict-idlab/plotly-resampler (not made by Plotly, but targeting Plotly charts) does a very good job and may have some good inspiration for you.\r\n\r\nRe: zoom / pan: actually my statement about rangeslider vs interactions on the plot itself may only be relevant to SVG traces. The technique we use with SVG to do a fast rescaling while the mouse is down, then redraw on mouse up, can't be done in webgl because we need to make one large canvas that covers the entire plot area (so as to not use too many webgl contexts) and in the general case there may be subplots that aren't being moved while some of them are.",
    "created_at": "2022-06-16T19:44:38Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6230#issuecomment-1158067622",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6230",
    "updated_at": "2022-06-16T19:44:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I suspect that `Cartesian.rangePlot` may still need to be run just to get the framework set up correctly, even if there are no SVG traces to draw. But I'm not 100% sure about that, it may be OK to skip it if you have only `gl2d` traces.",
    "created_at": "2022-06-16T18:59:38Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6231#issuecomment-1158027813",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6231",
    "updated_at": "2022-06-16T18:59:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "`rangePlot` is a little utility that just strings together a couple of pieces deeper in the SVG drawing path, needed to correctly draw these traces into the rangeslider subplot. I think rather than fitting the `gl2d` traces into `Cartesian.rangePlot`, we probably should create a similar routine on the `gl2d` side - that runs after `Cartesian.rangePlot` so it can depend on the framework already being present - but just adds the `gl2d` pieces.\r\n\r\nAnother thing to note: we support partial bundles, some of which don't include `gl2d` traces, so we'll want to find this code not via normal `require` statements but via perhaps [`Registry.getModule`](https://github.com/plotly/plotly.js/blob/b2df3710d7877ff5b4f85256015a88c8ea8fbe1d/src/plots/cartesian/index.js#L257) so we can skip this part if that module isn't found.",
    "created_at": "2022-06-16T14:53:20Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6231#issuecomment-1157753485",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6231",
    "updated_at": "2022-06-16T14:53:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Excellent :)\r\n\r\nRangesliders live here: https://github.com/plotly/plotly.js/tree/master/src/components/rangeslider\r\n\r\nTo actually render the data they call out to the cartesian (2D) [plotting code](https://github.com/plotly/plotly.js/blob/b2df3710d7877ff5b4f85256015a88c8ea8fbe1d/src/plots/cartesian/index.js#L373) basically pretending to be another regular cartesian subplot:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/b2df3710d7877ff5b4f85256015a88c8ea8fbe1d/src/components/rangeslider/draw.js#L500\r\n\r\nFor this issue, the challenge is that `gl2d` traces (such as `scattergl`) use a separate drawing pathway from the SVG - entrypoint [here](https://github.com/plotly/plotly.js/blob/b2df3710d7877ff5b4f85256015a88c8ea8fbe1d/src/plots/gl2d/index.js#L46) - that needs to be worked into the above flow. (And note that \"calcdata\", that the SVG plots use as an intermediate representation between the trace and the drawn objects, is not used by our webgl trace types)\r\n\r\nHope that helps! Feel free to ask more questions as you get into it.",
    "created_at": "2022-06-16T14:08:01Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6231#issuecomment-1157704171",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6231",
    "updated_at": "2022-06-16T14:08:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "True. But if it’s not over the background color it’s likely to be over a mix of multiple colors… in which case short of filling around the logo with a solid color (@angeladaodao is that what you were suggesting?) there’s really nothing we can do to make it robustly visible. ",
    "created_at": "2022-06-16T02:11:01Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6232#issuecomment-1157153339",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6232",
    "updated_at": "2022-06-16T02:11:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Glad you like it @stereokai! The one usage technique I've seen to sometimes help with data like this is explicitly downsampling based on the ranges given by `relayout` events - but that introduces its own delay so is not always a win. The other thing I'll note is zooming / panning by dragging the axis itself (note that dragging near the ends of the axis will zoom, dragging near the middle will pan) or by choosing \"pan\" from the toolbar at the top is much smoother than dragging in the rangeslider because we do it with a simple rescale until you mouse up. That's another thing we could fix with more attention to the rangeslider (see https://github.com/plotly/plotly.js/issues/6231#issuecomment-1157065970)",
    "created_at": "2022-06-15T23:28:52Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6230#issuecomment-1157071761",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6230",
    "updated_at": "2022-06-15T23:28:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @stereokai - somehow I thought we already had an open issue for this but I can't find it (@archmoj am I missing it?) anyway you're right that we never completed rangesliders for scattergl. For your use case you'd also be bothered by #2172 and #2010 - which are pretty old issues so as you can deduce rangeslider improvements have not been a top priority for us recently. PRs encouraged of course :)",
    "created_at": "2022-06-15T23:20:23Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6231#issuecomment-1157065970",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6231",
    "updated_at": "2022-06-15T23:20:23Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This looks OK, but it wouldn't be that hard to have the bars adapt to the background color: on a dark background make them white, on a light background make them black. Just give them a class but no fill or stroke, and set it explicitly (to `color.contrast(paper_bgcolor)` - which actually picks `#444` instead of black) both after drawing the modebar and after setting a background color.",
    "created_at": "2022-06-15T23:00:28Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6232#issuecomment-1157028970",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6232",
    "updated_at": "2022-06-15T23:00:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This kind of question is better suited to https://community.plotly.com/, but to get you started I'd suggest using a second set of x and y axes, set to overlay the first set, and put either the image or the markers onto that second set. Then mark the axes that the markers are on as `fixedrange: true`",
    "created_at": "2022-06-15T22:44:16Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6229#issuecomment-1157021324",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6229",
    "updated_at": "2022-06-15T22:44:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Wondering `geomean` may not be the best naming as it could be point to our geo subplots.\r\n\r\nI see your point, though I think in context it's pretty clear. Looking around I see `gmean` used in `scipy.stats` and various npm packages, `geomean` used in MATLAB and Excel, and `geometric_mean` used in the Python stdlib [statistics package](https://docs.python.org/3/library/statistics.html#statistics.geometric_mean). I'm comfortable leaving it as `geomean` but @archmoj if you feel strongly about it I'd be OK with either `gmean` or `geometric mean` (with a space, not a dash or underscore, so the full values would be `geometric mean ascending` or `geometric mean descending`)\r\n\r\nHarmonic mean commonly refers to the inverse of the mean of inverses (see eg [npm](https://github.com/stdlib-js/stats-incr-hmean) and [python stdlib](https://docs.python.org/3/library/statistics.html#statistics.harmonic_mean)) so let's stay away from that. But given that we all agree `harmean` is unpleasant, so if we ever did add it we'd need to use `hmean` or `harmonic mean`, perhaps that argues against `geomean` for consistency? In that case I'm leaning toward `geometric mean`, clarity over terseness.\r\n\r\n> should this be supported in other places like histfunc etc?\r\n\r\nYes, that would be nice. I only see two more places we could add this, and one of them (the [aggregate transform](https://github.com/plotly/plotly.js/blob/9a2e727f7c30012cd89d63418b880e645eed57ad/src/transforms/aggregate.js#L60)) is deprecated so I'm happy to ignore that. So `histfunc` ([attribute values](https://github.com/plotly/plotly.js/blob/9a2e727f7c30012cd89d63418b880e645eed57ad/src/traces/histogram/attributes.js#L46), [bin functions](https://github.com/plotly/plotly.js/blob/9a2e727f7c30012cd89d63418b880e645eed57ad/src/traces/histogram/bin_functions.js#L22), which get applied [here](https://github.com/plotly/plotly.js/blob/9a2e727f7c30012cd89d63418b880e645eed57ad/src/traces/histogram/calc.js#L118)) is really the only place this needs to be added. @nicolaskruchten am I missing anything?\r\n\r\nTwo frustrating things though:\r\n\r\n(1) we weren't consistent about the naming - for `histfunc` and the aggregate transform we said `avg` rather than `mean`. I would suggest that we add `mean` as a synonym for `avg` and maybe eventually deprecate `avg`, then add `geometric mean` alongside this.\r\n\r\n(2) The implementation for `histfunc` is different from that used in category ordering, in that it loops over the array only once, calculating all the quantities it needs for all the bins simultaneously (ie sums and counts), then in a [separate step](https://github.com/plotly/plotly.js/blob/master/src/traces/histogram/average.js) it loops over all the bins to complete the calculation (divide each sum by each count).",
    "created_at": "2022-06-14T13:51:27Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6223#issuecomment-1155215343",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6223",
    "updated_at": "2022-06-14T13:51:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @geislpxs - we'll investigate, but in the meantime I'll mention if you just need subscripts & superscripts you can do that without MathJax, just eg `\"T<sub>Lys1Air</sub>mean\"`. The allowed tags, that are supported across most elements of a graph, are listed in eg https://plotly.com/python/reference/layout/annotations/#layout-annotations-items-annotation-text. They look like HTML but we in fact reinterpret them into SVG while drawing the graph.",
    "created_at": "2022-06-13T20:25:38Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6226#issuecomment-1154393977",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6226",
    "updated_at": "2022-06-13T20:25:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Sure, however you want to do it. As I recall that PR was good, just came at the wrong time?",
    "created_at": "2022-06-09T14:51:22Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6213#issuecomment-1151221978",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6213",
    "updated_at": "2022-06-09T14:51:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Oh I forgot about #4635 - yes maybe we can just re-revert it?",
    "created_at": "2022-06-09T13:22:24Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6213#issuecomment-1151113416",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6213",
    "updated_at": "2022-06-09T13:22:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @OscarPinchen01 - The first screenshot looks reasonable to me, can you say more about what's incorrect there?\r\n\r\nThe second one is obviously wrong but I can't reproduce the issue. Would you be able to create a codepen that shows this behavior?",
    "created_at": "2022-06-08T13:01:34Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6211#issuecomment-1149886138",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6211",
    "updated_at": "2022-06-08T13:01:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "See #6199 and the discussion in the issue it points to",
    "created_at": "2022-06-08T12:23:03Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6209#issuecomment-1149844981",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6209",
    "updated_at": "2022-06-08T12:23:03Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@ndrezn Let's discuss implementation possibilities in this issue as they relate to our potential sponsorship opportunity.\r\n\r\nThe new thing here that we don't have with existing automargin capabilities is that simply using the existing \"paper\" position for each axis and adjusting the margins to make room isn't enough: that approach can only move items away from the edge, it can't move paper-positioned items away from each other.\r\n\r\nFrom the user's standpoint, I'd think that it should be enough to set:\r\n```js\r\n// the main y axis on the bottom subplot\r\nyaxis: {automargin: true, domain: [0, 0.4]}\r\n// free y axis on top of the first, defaults to left side position 0 - but because this has automargin it gets moved outward\r\n// to stay away from yaxis, and the margin expands to fit them both\r\nyaxis2: {anchor: 'free', overlaying: 'y', automargin: true}\r\n// another free y axis. because 3 > 2, this one moves out beyond yaxis2\r\n// do we need to allow users to control this order, or is it OK if numeric order determines this?\r\nyaxis3: {anchor: 'free', overlaying: 'y', automargin: true}\r\n\r\n// main right-side y axis\r\nyaxis4: {side: 'right', overlaying: 'y', automargin: true}\r\n// second right-side y axis - because it's overlaying y and side: right it detects y4 as its \"reference\" and\r\n// (should?) default to the position of y4 (which is 1 unless xaxis defines a smaller domain)\r\n// and then it moves outward from there\r\nyaxis5: {side: 'right', anchor: 'free', overlaying: 'y', automargin: true}\r\n\r\n// main top-subplot y axis\r\nyaxis6: {domain: [0.6, 1], automargin: true}\r\n// any other axes on the top subplot avoid only the other top subplot axes, and do not affect bottom subplot axes\r\nyaxis7: {anchor: 'free', overlaying: 'y6', automargin: true}\r\n```\r\n\r\nIn order to support this, and to make it easier to manually position this kind of axis in a way that's independent of `layout.width` and `layout.height`, I propose we add `yaxis.xshift` and `xaxis.yshift`, as a number of pixels to move an axis - only applicable to `anchor: 'free'` axes. If `axis.automargin=false` the shift will default to 0 but can be set manually. But if `axis.automargin=true` we will BOTH adjust the shift to avoid overlapping earlier axes AND adjust the margin to fit.\r\n\r\nDo we need an adjustable padding between axes? I suppose to start we can just pick a nice default like 3 or 5 px, then later if we see the need make that adjustable.\r\n\r\nOne situation I do NOT think this feature should address, at least for now, is axes drawn _between_ subplots - y axes between side-by-side subplots or x axes between stacked subplots. I suppose if you have two y axes on the left side of a right-side subplot, by using `automargin: true` they will avoid overlapping each other, but this won't create any more space between the subplots than was already provided by the x axis domains. That would be a nice feature to design, at least for a single axis between subplots, but it's out of scope here.",
    "created_at": "2022-06-07T21:24:30Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5252#issuecomment-1149183162",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5252",
    "updated_at": "2022-06-07T21:38:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I think we can use the same ideas for `layout.title`: add `layout.title.xshift` and `layout.title.yshift` attributes, giving number of pixels to move the title relative to where it would otherwise have been; and `layout.title.automargin` to cause the top margin, and `layout.title.yshift` in case there's a top-side y axis, to increase if necessary to avoid overlaps.",
    "created_at": "2022-06-07T21:36:50Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5252#issuecomment-1149193319",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5252",
    "updated_at": "2022-06-07T21:36:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This kind of question is better suited to https://community.plotly.com/, but you can use [`xaxis.dtick=1`](https://plotly.com/python/tick-formatting/) to force the tick spacing you want. ",
    "created_at": "2022-06-06T11:13:16Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6210#issuecomment-1147333682",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6210",
    "updated_at": "2022-06-06T11:13:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I wasn't able to reproduce - those codepens always looked identical to me. @pietersv did you close this because the issue resolved itself for you? Perhaps there's some browser out there that has a problem here?",
    "created_at": "2022-05-27T14:53:32Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6184#issuecomment-1139694941",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6184",
    "updated_at": "2022-05-27T14:53:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Created https://github.com/plotly/plotly.py/pull/3749 to allow non-string flaglist extras on the Python side",
    "created_at": "2022-05-26T16:27:25Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6193#issuecomment-1138756565",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6193",
    "updated_at": "2022-05-26T16:27:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@naten7k this is getting to a level of granularity that's pretty tough to envision adding declaratively (though if you have a proposal we'd be happy to consider it), but straightforward to manage imperatively by responding to hover events. If you're doing this in `dash`, there's a whole component dedicated to this use case: https://dash.plotly.com/dash-core-components/tooltip",
    "created_at": "2022-05-26T13:55:33Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4260#issuecomment-1138605727",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4260",
    "updated_at": "2022-05-26T13:55:33Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Definite improvment! But there may still be cases to investigate... If I load `box_plot_jitter_edge_cases` (and call `Plotly.relayout(gd,'hovermode','x')` because otherwise I can't get any hover as the boxes have no size!) two issues occur to me:\r\n\r\n(1) `median` should go in the middle, but it appears first:\r\n<img width=\"309\" alt=\"Screen Shot 2022-05-20 at 14 30 55\" src=\"https://user-images.githubusercontent.com/2678795/169591210-e21bf875-2a6b-43e0-aed5-4e92e50c636b.png\">\r\n\r\n(2) What determines whether `upper fence` and `lower fence` labels are included? In the first two traces `upper fence` appears but not `lower fence`. In the latter two (as in the image above) neither appears. Maybe they're included only when they're different from `max` or `min` respectively? I'd think based on the goal of this PR we should always show all of these labels - ie `min`, `lower fence`, `q1`, `median` (and `mean` if it's displayed), `q3`, `upper fence`, `max`. The only exception I can think of is `boxpoints=false` when we extend the fences to `min` and `max` so we shouldn't show `upper fence` or `lower fence`.\r\n<img width=\"341\" alt=\"Screen Shot 2022-05-20 at 14 30 46\" src=\"https://user-images.githubusercontent.com/2678795/169593347-74e18130-c9c6-4726-afa6-e511b56ecc55.png\">",
    "created_at": "2022-05-20T18:54:10Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6189#issuecomment-1133213962",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6189",
    "updated_at": "2022-05-20T18:54:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @mzechmeister - I think I've seen the effect you're referring to in PyQtGraph. To rephrase just to make sure I understand your suggestion clearly: in this mode while the mouse is down horizontal movement would zoom the x axis in or out and vertical movement would zoom the y axis in or out, all relative to the mouse position at mousedown.\r\n\r\nI agree that this is a very efficient way to navigate certain kinds of graphs. It takes some getting used to but we'd be happy to have this as a new `dragmode` setting if someone would like to add it.",
    "created_at": "2022-05-09T16:44:47Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6176#issuecomment-1121335178",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6176",
    "updated_at": "2022-05-09T16:44:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @adeelibr - the challenge is we're not actually restricting the axis ranges upon zoom / pan / rotate events for 3D scenes. The visible region does get clipped as you zoom in, but the clipping planes aren't aligned with the axes.\r\n\r\nI suppose we could try to calculate and return these planes with the event data, maybe as a set of four vectors `v_i` (or five? I think perhaps we clip points too close to the eye? I don't know if that's a plane though), I guess from the `center` point... then you could retrieve the set of visible points by filtering on something like `dot(dataPoint - center, v_i) < dot(v_i, v_i)` for each `v_i`.\r\n\r\nWould that be useful? It seems like a cumbersome effort for the user, but I don't see a simpler way to do it.",
    "created_at": "2022-05-04T14:42:39Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6175#issuecomment-1117407625",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6175",
    "updated_at": "2022-05-04T14:42:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for digging in to this @mzechmeister - I suspect this case is problematic for our clustering algorithm for hover\r\n\r\nhttps://github.com/plotly/plotly.js/blob/042742d67638ea970bd70d5c143db3a181e613bc/src/traces/scattergl/calc.js#L78",
    "created_at": "2022-05-03T16:06:56Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6174#issuecomment-1116273202",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6174",
    "updated_at": "2022-05-03T16:06:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Not really on our roadmap, but if anyone would like to make a PR to add this we'd happily support and help get it merged.",
    "created_at": "2022-04-26T23:09:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/993#issuecomment-1110332202",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/993",
    "updated_at": "2022-04-26T23:09:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Noting that `outside` ticks appear to be plotted by 0.5 pixel outside the plotting area, there is still 0.5 pixel gap between the two.\r\n\r\nDefinitely better, and we can leave all of this (including the 0.5px outside gap ^^) as a bug to come back to later if you prefer, since it was already there with major ticks only. But whenever we do address it, it seems like there's still some condition where the inside ticks don't quite reach as far as they should. See `mirror-all-vs-allticks` where in the green subplot the left and top inside ticks have a gap with the axis line, but the right and bottom do not.\r\n\r\n![Screen Shot 2022-04-26 at 10 40 23](https://user-images.githubusercontent.com/2678795/165326700-ab9cc83d-689f-48ee-ab7a-a474f06c49b5.png)",
    "created_at": "2022-04-26T14:47:28Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6166#issuecomment-1109890801",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6166",
    "updated_at": "2022-04-26T14:47:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj I'm not sure what's going on here, but is this fixed by the change you're making in #6166 to not need spaces in empty tick labels?",
    "created_at": "2022-04-21T16:24:02Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6172#issuecomment-1105439868",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6172",
    "updated_at": "2022-04-21T16:24:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@wkumler no plans, but I'd be happy to get you pointed in the right direction if you'd like to give it a shot. The single-click event for 3D is here:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/12a49c0f225dea785c98bd36f6820091d98d2d85/src/plots/gl3d/scene.js#L452\r\n\r\nUnfortunately it can't use the same logic as most of the other click handlers, because it's based on stack.gl and it's just taking events from those packages. So I think the way to handle this is to stash the first click event and timestamp somewhere (on the `scene` object?), and when you see a new click event check if the `eventData` is the same and the timestamp is within `gd._context.doubleClickDelay` of the first click - if so, emit a `plotly_doubleclick` event first, followed by the `plotly_click` event you'd have emitted then anyway.\r\n\r\nSame `eventData` isn't exactly the same criterion as used elsewhere to distinguish a doubleclick from two clicks while the mouse is moving, but it should be reasonable. ",
    "created_at": "2022-04-19T23:47:56Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3266#issuecomment-1103267356",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3266",
    "updated_at": "2022-04-19T23:47:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Minor drawing issues:\r\n1 - the inside minor and outside major ticks don't meet, there's a little gap:\r\n![Screen Shot 2022-04-13 at 14 52 22](https://user-images.githubusercontent.com/2678795/163250321-0e1be84a-2ab5-4fc6-a917-e78b0a0bad4e.png)\r\n\r\n2 - Y minor gridlines are on top of X major, can we put them behind?\r\n![Screen Shot 2022-04-13 at 15 03 07](https://user-images.githubusercontent.com/2678795/163251916-53391cc7-b1fc-4a6b-b7cc-a3cb2278c245.png)\r\n\r\n",
    "created_at": "2022-04-13T19:04:39Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6166#issuecomment-1098386267",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6166",
    "updated_at": "2022-04-13T19:04:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Great question - when the user is creating or modifying the selection via GUI we'll set them both, but when rendering or rerendering the graph it seems like you might want it either way:\r\n- If you passed in `trace.selectedpoints` without `layout.selections` you pretty clearly want `selectedpoints` to stay there.\r\n- Unless you're trying to programmatically clear the selection, in which case you could detect that `layout.selections` is empty and wipe out `trace.selectedpoints`, but that could be cumbersome.\r\n- If you pass in `layout.selections` and the data has changed, most likely you want `selectedpoints` to update to the new set of points within the selection.\r\n- But maybe there's a case where you want to make a selection, then let the data evolve and see where those selected points go?\r\n\r\nSo perhaps we need a boolean attribute that explicitly says \"when replotting, do I recalculate `selectedpoints` to match `selections`?\" Like `layout.syncselectedpoints` or something? `layout.syncselections`? `layout.reselect`?",
    "created_at": "2022-04-08T02:23:31Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6167#issuecomment-1092379560",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6167",
    "updated_at": "2022-04-08T02:23:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Did this fix a visible bug?",
    "created_at": "2022-04-06T21:26:26Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6165#issuecomment-1090824518",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6165",
    "updated_at": "2022-04-06T21:26:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "You're updating the data arrays in place, which we explicitly don't check for. But you can _tell_ us that the arrays have updated by using `layout.datarevision` that changes every time the data changes. See https://codepen.io/alexcjohnson/pen/gOovgBj where I set `layout.datarevision = d.toLocaleTimeString();`\r\n\r\nAnother point (that I updated in my fork of your codepen): `plotly-latest` is no longer updating, it's stuck at the end of the 1.x series. Use a specific version on the 2.x series.",
    "created_at": "2022-04-05T16:41:36Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6164#issuecomment-1089014385",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6164",
    "updated_at": "2022-04-05T16:41:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@wlach thanks for the PR! I'm a little worried though that this will lead to confusing bugs for people using the existing version - they think they're passing a `<div>` into `newPlot` but the reference is undefined for whatever reason, then we fail silently by creating the plot in a `<div>` that is immediately discarded.\r\n\r\n Does it not already work as a one-liner like this?\r\n ```js\r\nreturn await Plotly.newPlot(DOM.element('div'), data, layout);\r\n```",
    "created_at": "2022-03-31T21:32:14Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6158#issuecomment-1085141216",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6158",
    "updated_at": "2022-03-31T21:32:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@selimonat not if they all use WebGL trace types and they're all rendered on the page simultaneously. You can use as many SVG plots as you want, but if you have lots of WebGL plots you'll need to either combine them as subplots or take some of them off the page - for example put them in separate `dcc.Tab` components so only a few are rendered at a time.",
    "created_at": "2022-03-30T20:25:46Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2333#issuecomment-1083590841",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2333",
    "updated_at": "2022-03-30T20:25:46Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Great idea! feel like making a PR to add this? 🙏 😸 ",
    "created_at": "2022-03-22T20:36:31Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6152#issuecomment-1075613501",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6152",
    "updated_at": "2022-03-22T20:36:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I'm not aware of a workaround for this issue, and unfortunately the assumption that `devicePixelRatio` is an integer is made implicitly in tons of places in our codebase. You can see for example that gridlines also have this problem in your codepen, and if you make other types of plots I bet you'd see this with ticks, colorbars, annotation boxes, and legend boxes, to name just the ones that come to mind quickly. So it would be a pretty sizable effort to fix, and as I said before the fix is likely not going to be 100% robust anyway due to CSS transforms. I'll label it a bug, but it's probably not one we'll be able to address any time soon unless someone is able to sponsor the fix. But if you're interested in making a PR we'd be happy to help get it across the finish line!",
    "created_at": "2022-03-22T20:30:17Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6112#issuecomment-1075608374",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6112",
    "updated_at": "2022-03-22T20:30:17Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@timeowilliams you're more than welcome to submit a PR to address this, if that's what you mean 😃 ",
    "created_at": "2022-03-17T20:48:45Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6078#issuecomment-1071444798",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6078",
    "updated_at": "2022-03-17T20:48:45Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj Your fix works, but your codepen still fails for me. I haven't looked at why, but here's one minimally tweaked from @CallumNZ 's codepen, that does work for me: https://codepen.io/alexcjohnson/pen/GRyJBbr?editors=1111\r\n\r\n@CallumNZ thanks again for the report!",
    "created_at": "2022-03-15T19:26:50Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6140#issuecomment-1068379125",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6140",
    "updated_at": "2022-03-15T19:26:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This looks excellent! @archmoj thanks for the earlier round of reviews, here as well as on slack re: browser support. If you're comfortable with the cross-browser testing we've done I think we can conclude the functionality is solid.\r\n\r\nTwo remaining questions:\r\n- Should we be running our tests, or some subset of them, against the strict bundle as well as the regular bundle?\r\n- If someone is making a custom bundle, how do they choose whether they use the strict or non-strict flavors? Do you just specify the relevant trace names with `-strict`? Anything we can do to ensure users know which traces in their bundle HAVE a strict variant that they didn't use?\r\n\r\nFYI a quick look at the bundle sizes: right now `plotly-strict.min.js` built on my machine is 4,047,431 bytes and `plotly.min.js` is 3,676,553 bytes. So a 10% difference, which is big enough that I think they still deserve to be separate (as is the case in this PR), we don't want to grow the bundle that much for all the folks who aren't concerned about CSP. ",
    "created_at": "2022-03-10T17:42:15Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6083#issuecomment-1064327513",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6083",
    "updated_at": "2022-03-10T18:09:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Adding an attribute is fairly easy, but you need to know where to do what. First the attribute needs to be defined, this one should probably go somewhere around [here](https://github.com/plotly/plotly.js/blob/c988437853633fc0fffd7fa694e4ccd9d3f324e6/src/plots/cartesian/layout_attributes.js#L458). Then in the `supplyDefaults` step we need to set that attribute only when it applies - that would be next to [this block](https://github.com/plotly/plotly.js/blob/c988437853633fc0fffd7fa694e4ccd9d3f324e6/src/plots/cartesian/tick_label_defaults.js#L31-L37) with the condition `if(axType === 'log')`\r\n\r\nAt that point you can use it, and I think the file you've already been working in is the only one you'll need to change.\r\n\r\nAfter that we'll want some tests, but we can talk about that later :)",
    "created_at": "2022-03-09T22:14:05Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6120#issuecomment-1063425813",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6120",
    "updated_at": "2022-03-09T22:14:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Hi @jensb - thank you, this is definitely a mode a lot of people will like! But it's a big enough change that I don't think we can make it the default without a major version bump. I'd like to propose we add a new attribute like `ax.loglabels` (name and values open for discussion) that would default to `'small digits'` (the current behavior) but also support `'full value'` (your addition here). This way we would still automatically switch between linear tick labels, `D1`, `D2`, and 1 or more complete orders of magnitude as the axis range changes - your changes apply to both `D1` and `D2` modes in this evolution.\r\n\r\nAlso two issues I notice:\r\n- In your gif above you can see that the 1's are shifted down still - this shift should be removed.\r\n- We'll need to figure out how to implement this a little deeper in the stack, without altering `tickformat` or `hoverformat` - because users will still want to use those, at least `hoverformat`.\r\n\r\nThanks for kicking this off, and apologies for the slow review!",
    "created_at": "2022-03-09T20:15:21Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6120#issuecomment-1063324964",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6120",
    "updated_at": "2022-03-09T20:15:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yikes, thanks @4b11b4!\r\nThat pen is using `plotly-latest` so stuck on v1.x... dunno if anything we've done since then would have fixed this behavior but the pen needs adjusting before we can test that, because it depends on `Plotly.d3`",
    "created_at": "2022-02-17T03:59:58Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6122#issuecomment-1042549904",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6122",
    "updated_at": "2022-02-17T03:59:58Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Not a mode we have right now. You can ctrl-drag or right-button-drag to pan, then zooms and rotations are based on the new center position.",
    "created_at": "2022-02-15T13:22:08Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6117#issuecomment-1040266677",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6117",
    "updated_at": "2022-02-15T13:22:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@LoganWlv @casotto my apologies for missing this issue and your PR earlier! Your fix looks excellent, please open a PR against the main repo.\r\n\r\nThe only additional thing we'd like to see is an image test that depends on this fix - ie would fail currently but succeeds with your fix. This can either be a new [mock](https://github.com/plotly/plotly.js/tree/master/test/image/mocks) or a change to one of the existing Mapbox mocks, so long as the changed mock still serves its original purpose but also tests the custom style. If you have trouble generating the corresponding [baseline image](https://github.com/plotly/plotly.js/tree/master/test/image/baselines), just create the desired mock and @archmoj can turn the crank to generate the appropriate image.",
    "created_at": "2022-02-11T16:51:25Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6042#issuecomment-1036409476",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6042",
    "updated_at": "2022-02-11T16:51:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Do you have the page zoomed in? I can see a similar effect if I do that. It's possible we could detect a non-integer `window.devicePixelRatio` and try to adjust our rounding algorithm accordingly, though there are other ways like CSS transforms that the same problem can occur and would be harder for us to detect and remedy.",
    "created_at": "2022-02-10T20:42:22Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6112#issuecomment-1035490644",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6112",
    "updated_at": "2022-02-10T20:42:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @anvitha-bhge - I'm not able to reproduce this behavior. What browser (specific version) and OS are you seeing this on?",
    "created_at": "2022-02-10T16:34:23Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6112#issuecomment-1035134749",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6112",
    "updated_at": "2022-02-10T16:34:23Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Most of the time we put the tooltip either to the left or right of the bbox, depending on the tooltip size and the available space on either side. We don’t know how big your tooltip will be, nor whether you will allow it to spill out of the graph div, so can’t make that decision for you. \r\n\r\nWhen the tooltip ends up on the right, that means its left edge is at `x1` and it is vertically centered on `(y0+y1)/2`. When it ends up on the left its right edge is at `x0`, vertical alignment is the same. ",
    "created_at": "2022-02-03T13:58:22Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6104#issuecomment-1029017377",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6104",
    "updated_at": "2022-02-03T13:58:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Behavior looks correct to me for linear and category axes 🎉  but needs some work on date axes 🚧 \r\n\r\nIt doesn't look like we're honoring `tick0` correctly in all cases. For example here's the `date_axes` mock with all axes set to `skipticklabels=1`, notice that for the bottom axis (`xaxis`) we lose the label at year 2000 (which _is_ `tick0`), and for `xaxis5` we lose the midnight label, which is an integer number of 6-hour intervals from `tick0` so it should appear.\r\n\r\nAlso when I drag these axes around the displayed ticks are NOT stable, in quite a few cases we flip to displaying the alternate set of labels.\r\n\r\nFinally, if the removed labels are the only ones that showed the second line of the label, the second line should be shown for the remaining labels using the same logic as we would normally use if the labeled ticks were the only ticks on the graph. You can see this on `xaxis5` for example - both of these labels should keep their second lines. I think this means basically we need to run the routine that drops the second line after we remove the labels we aren't going to display, and only considering the labels that remain.\r\n\r\n![Screen Shot 2022-02-02 at 11 04 51 AM](https://user-images.githubusercontent.com/2678795/152192032-85d5144c-aee3-494c-b63a-a105b1b456bd.png)\r\n\r\n",
    "created_at": "2022-02-02T16:29:05Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6088#issuecomment-1028120460",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6088",
    "updated_at": "2022-02-02T16:29:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "You're close - I'm not sure what you're going for with `y1 / 2`, but the main issue is when you set `position: absolute` it doesn't automatically move the element out of the flow until you give it a new position, so as is it's going to appear below the plotly div. Put your x and y into `left` and `top` instead of `transform`. https://jsfiddle.net/90g8vtrj/1/\r\n\r\nAlso be aware: `bbox.x0, y0, x1, y1` are the bounds of the region being hovered on - in this case I believe it's the largest circle you can fit inside the pie slice you're hovering on, which is why the hover label isn't always pointing quite to the edge of the slice but at least it's never pointing to empty space outside the slice!. We then do some additional calculations to determine where to put the Plotly hover label so that it's outside but pointing to that region, but in the event data you just get the bounds so you can choose for yourself where to position the label with respect to that.\r\n\r\n@archmoj I notice something weird here: if I set `hoverinfo: 'none'` in that particular graph (which you normally want to do in exactly this case since you're creating your own hover box), `bbox` disappears from `eventData.points[0]`. That seems like a bug, would you agree? But it behaves correctly if I try this on the `pie_simple` mock... any idea what's going on?",
    "created_at": "2022-02-02T15:58:21Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6104#issuecomment-1028089020",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6104",
    "updated_at": "2022-02-02T15:58:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks good! Only the question about `inlineMath` delimiters is blocking.\r\n\r\n@akhmerov thanks for the reviews! Re: `tex2svgPromise`, I think we should merge with the current structure, but if performance becomes a concern it's good to know this is an option.",
    "created_at": "2022-02-02T03:20:18Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6073#issuecomment-1027537693",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6073",
    "updated_at": "2022-02-02T03:20:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "To be clear, the current behavior is not a bug, it’s just improper in the context of creating a custom colorscale that is not intended to be interpolated as a colorscale but rather a color lookup table. \r\n\r\nThe ideal solution would be to add support for `zsmooth`, and either `false` or `'fast'` would work for the use case @empet is describing. `'fast'` would be a misnomer in this case, as it would be no faster than the other options, it would just mean “interpolate in color space, not in data space,” but if we do implement this I imagine we’d keep this name for consistency. ",
    "created_at": "2022-02-01T17:41:05Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6103#issuecomment-1027113369",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6103",
    "updated_at": "2022-02-01T17:41:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Hi @VictorBezak - thanks for the PR and apologies for not commenting on it the first time around!\r\n\r\nLinking in the issue where we all discussed some of this: https://github.com/plotly/plotly.js/issues/1962\r\n\r\nFeels to me like the cleanest way to expose this is with a new `tickmode` value - I had earlier proposed `'match overlay'`, but the point is `tickmode` already answers the question \"what algorithm do we use to decide where to put ticks\" and this setting is really just a different answer to that question rather than answering a new question.\r\n\r\nAs for the implementation, a couple of things I notice right away:\r\n- The code describes y axes, but this feature should work just as well for overlaid x axes.\r\n- I see some places you attach extra info to the existing axis objects (`range_min`, `range_max`) - it's OK to add things, but if they aren't real attributes please prefix them with an underscore (`_range_min` etc).\r\n- There's some logic re: negative values... I haven't looked into why this is yet, I would have thought that by the time we're calculating the tick (and grid) positions we'd already know the ranges, so it's just a matter of using `tick0` and `dtick` from the main axis to pick `tick0` and `dtick for the overlay? Anyway if there does need to be special negative logic, let's make sure things still work if both ends of the range are negative, as well as if one or both of the relevant axes is reversed (`range[0] > range[1]`) in all three cases.\r\n- I bet we're also going to need some special handling during pan/zoom, if you only change one of these axes and not the other one. So if the left y axis is the main and the right is overlaid, if you grab just the left axis and drag it to pan, the right axis range doesn't change but its ticks and gridlines move and therefore change values, this should be reflected in realtime, not just after you mouse up at the end of the drag. Similarly if you drag the overlaid axis, its ticks shouldn't move but they should change value. We'll want tests that show this works correctly, and these tests are pretty difficult to write so we can certainly help with that part, but see if you can try this out and if it's broken (as I bet it will be) take a crack at fixing it.",
    "created_at": "2022-01-31T17:48:46Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5224#issuecomment-1026044845",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5224",
    "updated_at": "2022-01-31T17:48:46Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Very much still developing, in fact we released v2.0.0 last summer and by now we're up to v2.8.3. 2.0 didn't include everything in this wishlist, but it got some of them. Looks like we never updated this issue afterward though.\r\n\r\n@archmoj is this issue still useful? Perhaps we could rename it to \"breaking changes wishlist\" and check off the items that were completed with 2.0? Or, because the thread here is so long, perhaps it'd be better to close this issue and open a new one that collects the pieces of this one that are still relevant?",
    "created_at": "2022-01-19T15:22:28Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/420#issuecomment-1016574824",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/420",
    "updated_at": "2022-01-19T15:22:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@jankislinger the problem is just with month and year ticks - hard-coding a Monday as `tick0` will be fine for day ticks and smaller, but for month and year you'd need to find a January 1 that's a Monday, and if you care about decade and century ticks you'd need a January 1 xx00 that's a Monday. Doable, but very awkward.\r\n\r\nSo yeah, I think this is worth reopening - adding some way to specify the canonical weekday, that only gets used for autoticks with a period of 1 or 2 weeks.\r\n\r\nThis probably isn't something Plotly staff will be able to work on in the near term unless someone is interested in sponsoring the work, but we'd happily accept a PR and help get it merged.",
    "created_at": "2022-01-17T15:32:55Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4815#issuecomment-1014667053",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4815",
    "updated_at": "2022-01-17T15:32:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@akhmerov did you see @archmoj's new PR adding MathJax v3 support https://github.com/plotly/plotly.js/pull/6073? Would you like to test it and give feedback on it?",
    "created_at": "2022-01-03T15:18:43Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4563#issuecomment-1004162726",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4563",
    "updated_at": "2022-01-03T15:18:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "We work quite hard actually to prevent Plotly.js from ever evaluating a string as JS (or HTML) - not 100% successfully just yet but we're in the process of tracking down and removing the last couple instances of this now, which will allow full-featured use of Plotly.js in stricter CSP environments. So we would NOT accept a PR to add this to Plotly.js in the obvious way.\r\n\r\nOne thing we could imagine doing is allowing a string for `click` that's simply the name of a function that already exists on the `window` global namespace. Then all you'd need to do is figure out how to get Plotly.py to load an extra script file in its HTML, put your function in that file `function myCopyImage(gd) { Plotly.toImage(gd, ... }`, and then reference it as `modeBarButtonsToAdd: [{ ..., click: 'myCopyImage' }]`\r\n\r\nThat said Plotly.py has different constraints, so at that layer we can probably do this directly. I wouldn't take the comments in https://github.com/plotly/plotly.py/issues/2114 to mean we wouldn't accept a PR to do this, just that the feature doesn't exist today.",
    "created_at": "2021-12-15T22:13:09Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6060#issuecomment-995254853",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6060",
    "updated_at": "2021-12-15T22:13:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj can you say more about the problems here? I can't tell just from looking at those codepens whether it's just that our automatic positioning algorithm isn't smart enough, or we're actually doing something explicitly wrong.",
    "created_at": "2021-12-13T18:27:10Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5997#issuecomment-992751153",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5997",
    "updated_at": "2021-12-13T18:27:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> > Titles on the side: when the ticks & labels are on the inside it definitely seems like the title should be vertically centered. I think that also makes sense when the labels are outside (centered vertically wrt. the bar and labels together, not just the bar) but it's a little less clear to me in that case. ![Screen Shot 2021-12-02 at 9 45 12 AM](https://user-images.githubusercontent.com/2678795/144444422-29b01ecc-ed4b-4671-9762-261f767eb4fb.png) ![Screen Shot 2021-12-02 at 9 47 32 AM](https://user-images.githubusercontent.com/2678795/144444818-3f797788-edf8-4ade-9b6f-b111ec721b75.png)\r\n> \r\n> This part was addressed in [8a137e3](https://github.com/plotly/plotly.js/commit/8a137e3b9f1717312f49958b16a7b3087405e822).\r\n\r\n8a137e3 adjusted the horizontal alignment - I was talking about vertical",
    "created_at": "2021-12-10T17:12:40Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6024#issuecomment-991147073",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6024",
    "updated_at": "2021-12-10T17:12:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "OK, but it's way too easy to break and the breaking cases I noted above are just the tip of the iceberg - this would be a huge pain to fix. How about this then: as long as there will be at least 2 labels left, remove the ones that would need moving; if removing would result in 0 or 1 labels, we move them instead.",
    "created_at": "2021-12-10T17:09:01Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6024#issuecomment-991144310",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6024",
    "updated_at": "2021-12-10T17:09:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "How about we just remove these extremal ticks, in the cases you determine you need to shift them? It's an edge case already since mostly people won't be putting their colorbars in boxes, and the shifted labels are too easy to break (and even some non-broken cases don't look that great, when the number intersects the tick)\r\n<img width=\"231\" alt=\"Screen Shot 2021-12-10 at 12 01 50 AM\" src=\"https://user-images.githubusercontent.com/2678795/145520485-dddf3a1a-31fd-4dd0-8936-85f06c085404.png\">\r\n<img width=\"236\" alt=\"Screen Shot 2021-12-10 at 12 02 37 AM\" src=\"https://user-images.githubusercontent.com/2678795/145520483-df7dc834-302a-40fd-9152-e57c45885b7a.png\">\r\n<img width=\"232\" alt=\"Screen Shot 2021-12-10 at 12 03 03 AM\" src=\"https://user-images.githubusercontent.com/2678795/145520484-62c99824-5249-44af-8ba6-02ce07f2d044.png\">\r\n\r\nAlso, and this one I'm comfortable just making an issue for and deferring, `outside left` with many labels such that they auto-rotate does weird things:\r\n<img width=\"231\" alt=\"Screen Shot 2021-12-10 at 12 10 55 AM\" src=\"https://user-images.githubusercontent.com/2678795/145521235-53d6f4c1-399b-4f33-93c1-5d23071124bc.png\">\r\n<img width=\"230\" alt=\"Screen Shot 2021-12-10 at 12 10 28 AM\" src=\"https://user-images.githubusercontent.com/2678795/145521236-6738cbec-9fd6-498f-9c76-21b4c06068f6.png\">\r\n\r\nThis is an issue for regular cartesian axes too\r\n<img width=\"435\" alt=\"Screen Shot 2021-12-10 at 12 15 54 AM\" src=\"https://user-images.githubusercontent.com/2678795/145521350-c976b048-a034-4d52-a630-528fa5d0005c.png\">\r\n\r\nand for all shifted tick labels on both colorbars and cartesian axes if you provide explicit `tickangle`\r\n",
    "created_at": "2021-12-10T05:20:49Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6024#issuecomment-990627166",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6024",
    "updated_at": "2021-12-10T05:20:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Axes show up in two ways: you create axis objects (`layout.yaxisN`) and you reference them (`trace.yref='yN'` and similar).\r\n\r\nFor the axis objects, if both `layout.yaxis` and `layout.yaxis1` exist, `layout.yaxis1` will simply be dropped. If only `layout.yaxis1` exists, it will be moved to `layout.yaxis`.\r\n\r\nFor the references, `trace.yref='y1'` and `trace.yref='y'` are equivalent: both traces will be displayed on `layout.yaxis`.",
    "created_at": "2021-12-08T18:01:38Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6053#issuecomment-989045584",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6053",
    "updated_at": "2021-12-08T18:01:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "You can use `'y1', 'y2', 'y3', ...` if you really want - `y1` is treated as an alias for `y`, and will be converted to `y` when the figure is rendered. Or in fact if you don't want anything to be changed you can use `'y2', 'y3', 'y4', ...`, I don't believe there's any requirement to start at the lowest index.\r\n\r\nYour presumption is correct, this behavior is meant to simplify the great majority of graphs that only have one x and one y axis.",
    "created_at": "2021-12-08T04:04:14Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6053#issuecomment-988478870",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6053",
    "updated_at": "2021-12-08T04:04:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "It’s not all WebGL failing on these phones, just certain 3D graphs. ",
    "created_at": "2021-12-05T21:35:12Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6050#issuecomment-986304469",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6050",
    "updated_at": "2021-12-05T21:35:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> For titles to title change, it appears there is some magical logic somewhere in the code that convert any titlefont to title.font. So we need to figure that out.\r\n\r\nProbably just needs excluding here:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/10d3930ecdfb494075c4460c267ca7238e9a7e34/src/plot_api/plot_api.js#L1722-L1723\r\n\r\n> For legend.grouptitlefont, it appears we need major changes in src/plots/plots.js while this value is needed in traces legendgrouptitle.font while the legend object still empty in the coerce process.\r\n\r\nAh right, because we supply legend defaults after traces, which we need to do so that we know whether to show the legend or not. I still think this is worthwhile, how about this: coerce `legend.grouptitlefont` inside `legend/defaults.js`, and then in the same place loop over traces and coerce `trace.legendgrouptitle.font`. We already have a [loop over traces](https://github.com/plotly/plotly.js/blob/10d3930ecdfb494075c4460c267ca7238e9a7e34/src/components/legend/defaults.js#L19) there, and we have access to the [input trace](https://github.com/plotly/plotly.js/blob/10d3930ecdfb494075c4460c267ca7238e9a7e34/src/components/legend/defaults.js#L42) and [trace module attributes](https://github.com/plotly/plotly.js/blob/10d3930ecdfb494075c4460c267ca7238e9a7e34/src/components/legend/defaults.js#L31) which I think is all you need.",
    "created_at": "2021-12-03T13:37:02Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6040#issuecomment-985527203",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6040",
    "updated_at": "2021-12-03T13:37:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Sure, happy to take over this PR if you can give me a clear test case :)",
    "created_at": "2021-12-02T15:14:55Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6039#issuecomment-984721253",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6039",
    "updated_at": "2021-12-02T15:14:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Also, isn't there too much space below the colorbar when the title is on the side and the labels are below, as in the second screenshot in the comment above?",
    "created_at": "2021-12-02T15:11:27Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6024#issuecomment-984717842",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6024",
    "updated_at": "2021-12-02T15:11:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "A couple of things I notice about how things are laid out:\r\n\r\nTitles on the side: when the ticks & labels are on the inside it definitely seems like the title should be vertically centered. I think that also makes sense when the labels are outside (centered vertically wrt. the bar and labels together, not just the bar) but it's a little less clear to me in that case.\r\n![Screen Shot 2021-12-02 at 9 45 12 AM](https://user-images.githubusercontent.com/2678795/144444422-29b01ecc-ed4b-4671-9762-261f767eb4fb.png)\r\n![Screen Shot 2021-12-02 at 9 47 32 AM](https://user-images.githubusercontent.com/2678795/144444818-3f797788-edf8-4ade-9b6f-b111ec721b75.png)\r\n\r\nOutside labels on horizontal bars: first and last labels seem to intrude on the border padding. This is most evident with left/right `ticklabelposition` when the colorbar has a border and/or background color (as plenty of your excellent mocks do 🎉 ) but can also be seen with centered labels as in the second image above. I think without border & background the way it's drawn right now makes sense, as it would be unpleasant to have multiple colorbars that don't line up just because their tick labels have different lengths, but when you DO have a border or background color (different from `paper_bgcolor`) this situation should shrink the colorbar.\r\n![Screen Shot 2021-12-02 at 9 52 41 AM](https://user-images.githubusercontent.com/2678795/144445713-f3fd7e40-d3d7-4454-ba24-a3924e6f1a13.png)\r\n",
    "created_at": "2021-12-02T15:07:57Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6024#issuecomment-984714507",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6024",
    "updated_at": "2021-12-02T15:07:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj Can you give me a test case that would break previously but works with this PR? I have a mac with both retina and non-retina monitors so ideal to verify this with ;)\r\n\r\nI wonder if this will work correctly with maps with pitch - in that case lower areas on the map have a larger scale than those higher up, so the midpoint of the diagonal won't match the center lat/lon.\r\n\r\nCould we not just use `window.devicePixelRatio`?\r\n\r\n```\r\n> window.devicePixelRatio // with the window on my big non-retina monitor\r\n<- 1\r\n> window.devicePixelRatio // after moving the window to my built-in laptop screen (retina)\r\n<- 2\r\n```",
    "created_at": "2021-12-01T00:20:52Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6039#issuecomment-983149029",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6039",
    "updated_at": "2021-12-01T00:20:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Good find @leahlundqvist - seems like this may apply to any `mouseout` handlers (if there are any others) and yes, I think detecting that `gd` has been purged and short circuiting is the right solution. I’m worried there may be an even more problematic situation if the element is unmounted mid-drag on the plotting area or any other element that creates a `dragCover`, because these are attached to the DOM outside the main graph div. ",
    "created_at": "2021-11-30T22:04:50Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6047#issuecomment-983061464",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6047",
    "updated_at": "2021-11-30T22:04:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Behavior looks great. My only question is about the attribute names/locations:\r\n\r\n- I think we should call it `grouptitlefont` ie no `s` on `title` - I see why you did this, because the new attributes apply to multiple titles, but if you try to construct a similar English sentence you wouldn't pluralize, like \"Our team shirt color is red.\"\r\n- Instead of `legendgrouptitlefont`, can we do `legend.grouptitlefont`?",
    "created_at": "2021-11-29T17:19:06Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6040#issuecomment-981845187",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6040",
    "updated_at": "2021-11-29T17:19:06Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj weird flaky CI failure, have you seen this before? https://app.circleci.com/pipelines/github/plotly/plotly.js/6026/workflows/967ed402-5fa4-4798-a886-4fdc0b2ab842/jobs/141674\r\n```\r\n  An error was thrown in afterAll\r\n  Uncaught Error: Cannot find module '/home/circleci/plotly.js/test/jasmine/tests/box_test.js'\r\n```\r\n(and a bunch more of the same with other files)\r\n\r\nIt fixed itself with the second commit so not blocking, just strange and I wanted to flag it in case this has become a common occurrence.",
    "created_at": "2021-11-29T16:57:23Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/6046#issuecomment-981824414",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6046",
    "updated_at": "2021-11-29T16:57:23Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Could this be treated as a new hovermode? It also occurs to me it may be nice to have formatting like x unified mode, but with point selection like closest, like \"closest unified\" or something...",
    "created_at": "2021-11-05T16:29:50Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/6005#issuecomment-962039012",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/6005",
    "updated_at": "2021-11-05T16:29:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Alright, I think we're just about there! Aside from my comment about [attribute descriptions](https://github.com/plotly/plotly.js/pull/5956#discussion_r731318539), my one remaining question is what we want for the default tick/grid values. It's great that the user can specify explicit `tickvals`, though one tweak to this that I think would be helpful is if you only specify `tickvals` for `realaxis`, then `imagaxis` should inherit the same values, plus the same as negatives and zero.\r\n\r\nBut then as to what the default values should be: originally I think I asked for just `[0.2, 0.5, 1, 2, 5]` - a good deal sparser than we have right now, which I think is generally good for interactive uses, and the really cool thing about this set is on the real axis it precisely cuts the unit diameter into sixths. I don't think the imaginary lines for this set hit the unit circle at exactly 30º intervals but they're close. Can we do that?",
    "created_at": "2021-10-19T01:18:18Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5956#issuecomment-946288575",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5956",
    "updated_at": "2021-10-19T01:18:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "As discussed in #5985 I think we should call the interpolation in that demo correct, but as you note, the coloring is wrong.",
    "created_at": "2021-10-18T20:56:46Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3312#issuecomment-946158648",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3312",
    "updated_at": "2021-10-18T20:56:46Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> The point in the middle (presented by scatter point) should stay on the correct (middle) level. No?\r\n\r\nYou could ask the same question about lines connecting points on a scatter plot - we should connect them with a straight line in data space, then transform that line to log axes where it would be a curve. But that's not what we do: even with log axes we connect with a straight line in pixel space (or, if you've selected spline shape, with a bezier curve calculated in pixel space) and I think displaying the data on log axes is a way of saying that, in general, that's also the space you should be interpolating in. This PR is the equivalent for contours. Perhaps at some point the current behavior could be provided as an option, but to me this PR seems a much better default behavior.",
    "created_at": "2021-10-18T19:15:19Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5985#issuecomment-946084746",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5985",
    "updated_at": "2021-10-18T19:15:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Also closer to what we already do with smoothed heatmaps (the same mock after `Plotly.restyle(gd,{'type':'heatmap', 'zsmooth':'best'})` - the four variants look slightly different but I think this is actually a symptom of some funny and potentially incorrect things we're doing with extending beyond the data values to make the outer edges of the heatmap bricks - we may want to adapt this for log axes too, especially as this results in us dropping the first row/column in this case!):\r\n![Screen Shot 2021-10-18 at 12 06 13 PM](https://user-images.githubusercontent.com/2678795/137768268-5e89d098-cead-43be-ae77-e2d62cb49c4a.png)",
    "created_at": "2021-10-18T16:21:09Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5985#issuecomment-945944386",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5985",
    "updated_at": "2021-10-18T16:21:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "\"correct\" is a bit open to interpretation when it comes to interpolation, but I think what @andrew-matteson has implemented here is more useful. If you've displayed your data on a log axis, the implication is that variations tend to be smoother on a log scale, hence that's the space in which it makes sense to interpolate it.\r\n\r\nFor reference here's what the new mock would look like with the existing interpolation:\r\n![Screen Shot 2021-10-18 at 11 52 15 AM](https://user-images.githubusercontent.com/2678795/137767305-353136ce-dd3e-4614-bee5-d386fb0d8ca7.png)\r\n\r\nPretty obviously worse than the version added in this PR, I'd say. @archmoj do you have a case in mind where the existing interpolation is preferable?",
    "created_at": "2021-10-18T16:02:43Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5985#issuecomment-945926854",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5985",
    "updated_at": "2021-10-18T16:02:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> How/does this interact with double-clicks, out of curiosity?\r\n\r\nI'd need to play with it to really be able to say, but I'm not worried about it: this is being inserted right where the click event would have been emitted anyway, so if there's a problem with doubleclick it's already a problem without this feature.\r\n\r\nAs far as actually reporting a *usable* doubleclick for users, ATM our `plotly_doubleclick` event always returns `null` event data AFAICT, so if at some point we want to do better we can handle both hoverdata and anywhere-coordinates there.",
    "created_at": "2021-09-17T07:46:03Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5443#issuecomment-921582409",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5443",
    "updated_at": "2021-09-17T07:46:03Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj I understand your point but I think we should still make an effort to figure out what's going on here. If it's just a matter of npm6 not recognizing the link format we're using it'll be a simple fix. If it requires us to give all these forked packages different names (`@plotly/ndarray` etc) then that may be a bigger lift but perhaps a cleaner representation of what we're doing anyway.\r\n\r\nBTW one thing I notice, not sure if this has anything to do with the error, but the `repository` field in our `ndarray` fork [points to the original repo](https://github.com/plotly/ndarray/blob/70ec67233be65de444307a6916aba2655e28bd84/package.json#L23), not our own.",
    "created_at": "2021-09-07T02:22:57Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5925#issuecomment-913943096",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5925",
    "updated_at": "2021-09-07T02:22:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "TBH I suspect we could get away without using `getBoundingClientRect` at all here - and that would avoid some bugs we probably have right now in case the user has the graph inside some sort of transform.\r\n\r\nBut in the meantime, to be consistent in our usage, couldn't we switch from `outerContainer: fullLayout._paperdiv` to `outerContainer: fullLayout._paper.node()` like we have [everywhere else this gets used](https://github.com/plotly/plotly.js/blob/0841bcc6359bb1e9a900342c5e1b5c79e73b5960/src/traces/parcats/parcats.js#L1019) - ie use `_paper` (the main `<svg>`, that always seems to have a meaningful size) rather than `_paperdiv` (its enclosing `<div>`, that for whatever weird CSS reason sometimes has no size)... also just pass around a node, don't [`d3.select` it here](https://github.com/plotly/plotly.js/blob/0841bcc6359bb1e9a900342c5e1b5c79e73b5960/src/components/fx/hover.js#L209) only to [`.node()` it here](https://github.com/plotly/plotly.js/blob/0841bcc6359bb1e9a900342c5e1b5c79e73b5960/src/components/fx/hover.js#L897)",
    "created_at": "2021-08-30T21:29:50Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5913#issuecomment-908712886",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5913",
    "updated_at": "2021-08-30T21:29:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "y0===y1 isn't a big deal - mostly people will be using the average y value and depending on x0 & x1 to specify the horizontal extent. I wouldn't spend much time investigating all of these now, but later, if folks on the Dash side want to be able to position hover labels above or below the point instead of left/right, we can revisit this as a minor bug.",
    "created_at": "2021-08-26T16:00:37Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5512#issuecomment-906539594",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5512",
    "updated_at": "2021-08-26T16:00:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> The x0, y0, x1, y1 positions outside `bbox` appear to be unused.\r\n\r\nYes, that's OK - currently dcc.Graph drops nested objects from the event so it doesn't try to serialize xaxis & yaxis objects, but in the [tooltip PR](https://github.com/plotly/dash-core-components/pull/982) (which I'm going to have to remake in the monorepo anyway) we're whitelisting this object.\r\n\r\n> So after the revision made in [03b22ec](https://github.com/plotly/plotly.js/commit/03b22ec641c212b003547177acf38df1849a4dc3) commit x0, y0, x1, y1 re only exposed in the `bbox` and ONLY for the points that have `x` and `y` axes.\r\n\r\nThat's fine for right now, but please make an issue to come back to this later and add support for other traces. I'm particularly expecting people will want this to work in pies and 3D.",
    "created_at": "2021-08-25T22:09:53Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5512#issuecomment-905910096",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5512",
    "updated_at": "2021-08-25T22:09:53Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks great, thanks for the typo fixes! Aside from the comments above, it would be nice to include a test of the new behavior - I guess just a variant of the [legendgroup visibility test](https://github.com/plotly/plotly.js/blob/13944ae49b9a25fe296667ba968bdad23c2f8b96/test/jasmine/tests/legend_test.js#L1746-L1783) with `groupclick: 'toggleitem'` ",
    "created_at": "2021-08-24T22:07:42Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5849#issuecomment-905009182",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5849",
    "updated_at": "2021-08-24T22:07:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yes, I think we need to continue treating actual numbers as indices, but treat numeric strings as categories. The primary reason for this is fractional indices, if you want to draw a line halfway between two categories for example.\r\n\r\nTraces don't need this, because the whole point of a categorical trace is that the data points are all positioned on categories.",
    "created_at": "2021-08-09T13:01:53Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5880#issuecomment-895202923",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5880",
    "updated_at": "2021-08-09T13:01:53Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> There are issues when interacting with the graph e.g. panning (rotating) the axis\r\n\r\nIf any pan/zoom is currently available at all, THAT's an issue ;) We're not going to support any sort of variable viewport in the initial version, right?",
    "created_at": "2021-08-05T15:38:35Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5615#issuecomment-893559405",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5615",
    "updated_at": "2021-08-05T15:38:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@keul this looks good! Re: 1.x - we'd really rather keep our efforts focused on v2 except for security fixes. Is there something specific preventing you from updating to v2?\r\n\r\nThe one thing we should add is a test. Perhaps we could copy or extend this test:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/e27ca3c691924b760a697f7176854cd91ae4dcd5/test/jasmine/tests/sliders_test.js#L470-L508\r\n\r\nNote we have `assets/touchEvent` (and `assets/mouseEvent`) which were probably created after `sliders_test` but help to ensure these events are more realistic without making them harder to construct, like here in the shape drawing test:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/e27ca3c691924b760a697f7176854cd91ae4dcd5/test/jasmine/tests/draw_newshape_test.js#L11-L38",
    "created_at": "2021-08-04T20:56:19Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5856#issuecomment-892968298",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5856",
    "updated_at": "2021-08-04T20:56:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yep, that sounds right - if an axis is in strict mode, that should apply to shapes, annotations, and images as well as traces. So that part of this issue can be considered a bug.",
    "created_at": "2021-08-03T18:36:48Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5767#issuecomment-892073748",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5767",
    "updated_at": "2021-08-03T18:36:48Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "(which is now the default for graphs made with plotly.py)",
    "created_at": "2021-08-03T16:45:52Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5767#issuecomment-892000197",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5767",
    "updated_at": "2021-08-03T16:45:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "See also `autotypenumbers: 'strict'` https://github.com/plotly/plotly.js/pull/5240",
    "created_at": "2021-08-03T16:44:47Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5767#issuecomment-891999495",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5767",
    "updated_at": "2021-08-03T16:44:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Oh that's an exciting one... thanks @rubenhelsloot .\r\n\r\nWe add the full URL to the clip path references only when there's a `<base>` tag - which it sounds like you have, and in fact precisely _because_ we use the full URL in this case, modifying the base tag will _not_ affect this either for better or worse.\r\n\r\nSeems like what we really want is to listen to changes in the page URL and update our internal references to match. Note that it's not just clip paths though those are the most common and noticeable. Also gradients and the new pattern fills.\r\n\r\nPlotly folks probably won't have time to work on this anytime soon unless someone is able to sponsor it, but we'd be glad to review a PR if anyone feels up to contributing. For reference, here's where we interrogate the `<base>` tag:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/d0c2fac449bca4adbc9fb393cee03e11b7a603ef/src/plot_api/plot_api.js#L431-L433\r\n\r\nAnd here's where we use it:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/d0c2fac449bca4adbc9fb393cee03e11b7a603ef/src/components/drawing/index.js#L1308-L1316",
    "created_at": "2021-08-02T14:27:46Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5871#issuecomment-891073615",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5871",
    "updated_at": "2021-08-02T14:27:46Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Discussing this in another channel, @Djeramon and others with similar setups are seeing this problem on Windows 10 using either Chrome or Edge. But my own testing, whether on Windows or Mac and regardless of browser, is behaving correctly. So there's some aspect of the environment affecting this, but we haven't yet figured out what it is. If anyone else is seeing this and can shed more light on its cause, please do!",
    "created_at": "2021-07-26T18:29:36Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5822#issuecomment-886930811",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5822",
    "updated_at": "2021-07-26T18:29:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "It's still possible to have the hover label occluding the spikeline - hover on the right half of any period in `period_positioning3`\r\n![Screen Shot 2021-07-22 at 5 16 30 PM](https://user-images.githubusercontent.com/2678795/126710744-eaa606c7-b05a-4ac9-9bd9-df2371d87a70.png)\r\n",
    "created_at": "2021-07-22T21:18:14Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5846#issuecomment-885241472",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5846",
    "updated_at": "2021-07-22T21:18:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> With this build, I don't seem to be able to hover on the left-most points in the figure from #5822\r\n\r\nThis is a tricky case: those left-most points refer to 1H 2013, a period which ends exactly at the left edge of the chart. So you can never have your cursor over that region, and thus if we ever show this hover label it will violate one of the invariants in #5553:\r\n\r\n> a period-positioned point must not \"win the hover\" if the cursor is not within the period that the point represents\r\n\r\nSo do we relax that invariant? If so, in what principled way?\r\n\r\n> I think the change to this figure https://codepen.io/nicolaskruchten/pen/poPWqbL?editors=0010 is too large\r\n\r\nI actually quite like this: the spike line shows what point you're really focused on, but the extra space shows that you're also getting information about the whole bar. But I can see your argument, I'd be OK with pushing the label back to the spike line at least when it's a scatter point that wins. I think if it's a bar that wins it's still better to push it to the edge of the bar, and in fact to the edge of the bar group when we're labeling the whole group.",
    "created_at": "2021-07-22T17:00:59Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5846#issuecomment-885068558",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5846",
    "updated_at": "2021-07-22T17:00:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Better, it's now consistently showing all the traces I think it should. I still think we need to push the hover label outside the period the winning point represents, and right now it seems the hover label and spike line positions are referenced to different points: the label at the first (?) point in the hover set, but the spike line at the winning point. For example in the `period_positioning3` mock, with my cursor near the end of May, I can't see the brown point or most of the red point being hovered on, and the spike line is obscured:\r\n![Screen Shot 2021-07-21 at 4 56 21 PM](https://user-images.githubusercontent.com/2678795/126560161-26c21034-6bb3-4fe8-9e25-2063e5cedc54.png)\r\n",
    "created_at": "2021-07-21T21:11:02Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5846#issuecomment-884502464",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5846",
    "updated_at": "2021-07-21T21:11:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This is all in service of greater clarity at the bin edges. To be precise, what's happening here is two things:\r\n- We detected that the data values are all integers, so we shifted the bin edges down 0.5 to ensure that NO values are exactly at a bin edge. You can see this if you zoom in, the bins actually go -0.5 -> 49.5, 49.5 -> 99.5, 99.5 -> 149.5 etc\r\n- But listing exactly those values in the hover label would be confusing: what are half-integer values doing in a label for integer data? So we look at the data again and ask: what's the closest any value gets to the left or right edge of a bin? In this case it's 0.5 from the left edge and 9.5 from the right, and based on the bin width of 50 we can always represent these values with a zero at the end, so that's what we do - 0-40, 50-90, 100-140 etc. If you add a value that's just a little closer to the right edge of a bin - say change one of the 140s to 141 - you'll see the labels change to 0-49, 50-99, 100-149 etc, since we can no longer round to a bigger digit.\r\n\r\nWhat we really DON'T want to do is have labels 50-100 and 100-150, because then it's ambiguous in which bin we put a value of exactly 100. But you could perhaps argue that the bin shift should match the range shrinkage - ie because we shifted the bins exactly 0.5 here we should also shrink the ranges we report by exactly 0.5 on each side, to 50-99, or if we want to keep 50-90 we should shift the bins by 5.",
    "created_at": "2021-07-21T20:27:11Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5848#issuecomment-884476927",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5848",
    "updated_at": "2021-07-21T20:27:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "It's this, from the test I commented on:\r\n```js\r\nvar scatterType = 'scatter';\r\nPlotly.newPlot(gd, {\r\n                data: [\r\n                    {\r\n                        name: 'bar',\r\n                        type: 'bar',\r\n                        x: ['2000-01', '2000-02'],\r\n                        y: [1, 2],\r\n                        xhoverformat: '%b',\r\n                        xperiod: 'M1'\r\n                    },\r\n                    {\r\n                        name: 'start',\r\n                        type: scatterType,\r\n                        x: ['2000-01', '2000-02'],\r\n                        y: [1, 2],\r\n                        xhoverformat: '%b',\r\n                        xperiod: 'M1',\r\n                        xperiodalignment: 'start'\r\n                    },\r\n                    {\r\n                        name: 'end',\r\n                        type: scatterType,\r\n                        x: ['2000-01', '2000-02'],\r\n                        y: [1, 2],\r\n                        xhoverformat: '%b',\r\n                        xperiod: 'M1',\r\n                        xperiodalignment: 'end'\r\n                    },\r\n                ],\r\n                layout: {\r\n                    showlegend: false,\r\n                    width: 600,\r\n                    height: 400,\r\n                    hovermode: 'x unified'\r\n                }\r\n            })\r\n```",
    "created_at": "2021-07-21T16:44:09Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5846#issuecomment-884334143",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5846",
    "updated_at": "2021-07-21T16:44:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looking specifically at the test I [commented on above](https://github.com/plotly/plotly.js/pull/5846#discussion_r674135049) but having fixed the typo, here's the behavior on master:\r\n![pre-5846](https://user-images.githubusercontent.com/2678795/126523879-05acb34f-404f-4b0f-843b-b58861a28df7.gif)\r\nIt's not perfect, I don't think we should be showing Jan while the cursor is over the first half of Feb, but otherwise I actually think it looks correct: the spikeline shows the point that wins and the hover label shows all traces that match that period and it's positioned at one edge of the period.\r\n\r\nHere's the behavior currently with this PR:\r\n![with-5846](https://user-images.githubusercontent.com/2678795/126524212-68b9d1db-f6bd-49ba-88c1-02411c20a6f5.gif)\r\nNow the hoverlabel is positioned at the spikeline regardless of the period, it very often does NOT contain all the traces with points in a matching period, and when you do get multiple traces you mix points representing different periods - with some very weird flipping between two winning points right around the period boundary.\r\n\r\nI thought at one point we had the idea that a period-positioned scatter trace should behave like a bar for hover purposes, in that any given point should be included in the hover whenever your cursor is over the period it represents. Did we drop that idea?",
    "created_at": "2021-07-21T16:38:25Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5846#issuecomment-884330678",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5846",
    "updated_at": "2021-07-21T16:38:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Let's just take Dosis out. There's nothing special about it, we have plenty of other fonts represented in our tests.",
    "created_at": "2021-07-17T14:42:40Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5830#issuecomment-881909199",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5830",
    "updated_at": "2021-07-17T14:42:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Then can we just disable clicking the group title when there are any pies in the plot?",
    "created_at": "2021-07-17T03:00:54Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5771#issuecomment-881806157",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5771",
    "updated_at": "2021-07-17T03:00:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This works great for non-pie traces. But for pie-only situations this makes the bug much worse so I'm not really in favor of merging this as is. Either we should exclude pies entirely for now or we should sort it all out at once.\r\n\r\nFor example if I hide both of the slices in Third Group I get this:\r\n<img width=\"272\" alt=\"Screen Shot 2021-07-16 at 7 05 35 PM\" src=\"https://user-images.githubusercontent.com/2678795/126016419-ce2c9d02-4a42-44e9-a2dc-4cef7ea726a2.png\">\r\nBut if I hide the group, the item names and colors disappear, I just see a black square (which isn't even faded) and no label:\r\n<img width=\"265\" alt=\"Screen Shot 2021-07-16 at 7 09 44 PM\" src=\"https://user-images.githubusercontent.com/2678795/126016644-b6c21d7e-a998-4aa7-92c0-4aefb0a918dc.png\">\r\nWorse, if I hide the first group, its title disappears and I can't get the group back:\r\n<img width=\"254\" alt=\"Screen Shot 2021-07-16 at 7 11 52 PM\" src=\"https://user-images.githubusercontent.com/2678795/126017420-fa3ee70f-9fbc-4f7c-a8a6-e408b565d088.png\">\r\n\r\n\r\nWhen we do fix this, I'd think hiding all slices in a group should be exactly equivalent to hiding the whole group, such that in both cases the group title fades, all slices are still in the legend but faded as well, and in both cases you can click a single slice to bring just that one back (which unfades the title). When you've hidden one slice in a group, clicking the title should hide them all (Because it's not faded when you click it) but then clicking it again should show all slices, not bring you back to one hidden slice.",
    "created_at": "2021-07-16T23:25:10Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5771#issuecomment-881769286",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5771",
    "updated_at": "2021-07-16T23:25:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@aanilyildiz I assume you closed this because you found a solution - anything you can say about the required changes, to help others in your situation? Thanks!",
    "created_at": "2021-07-09T16:09:38Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5810#issuecomment-877295559",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5810",
    "updated_at": "2021-07-09T16:09:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I see. If you're explicitly calling `executeAPICommand` like that, can you call the method directly? ie change:\r\n```js\r\nPlotly.Plots.executeAPICommand(Plot2.current.el, step.method, step.args);\r\n```\r\nto:\r\n```js\r\nPlotly[step.method](Plot2.current.el, ...step.args);\r\n```",
    "created_at": "2021-07-01T20:50:14Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5794#issuecomment-872541406",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5794",
    "updated_at": "2021-07-01T20:50:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@cid8600 Can you give a full example of how you use this function? We intentionally removed a lot from `Plotly.Plots`, to minimize the surface area we need to maintain - see https://github.com/plotly/plotly.js/blob/master/CHANGELOG.md#removed, specifically:\r\n\r\n> Reduce the number of exported methods from Plotly.Fx and Plotly.Plots in the API [[#5420](https://github.com/plotly/plotly.js/pull/5420)]\r\n\r\nI'm not inherently opposed to bringing this one back, just want to understand the use cases better before we do.",
    "created_at": "2021-07-01T19:39:19Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5794#issuecomment-872501758",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5794",
    "updated_at": "2021-07-01T19:39:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks good! Can you add notes on creating these md files to the PR template, and add notes on the new package scripts to the release procedure?",
    "created_at": "2021-06-30T03:23:42Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5780#issuecomment-871067249",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5780",
    "updated_at": "2021-06-30T03:23:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Courier New is different in bold as well as italic, so I was assuming it's the whole font that changed. Anyway I think it's OK, just something to keep an eye on in the future.",
    "created_at": "2021-06-21T18:37:11Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5724#issuecomment-865257400",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5724",
    "updated_at": "2021-06-21T18:37:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> `bar_show_narrow` test is adjusted in f0c9e24.\r\n\r\nThat change misses the point, which is that even extremely thin bars should be visible in the output. But perhaps Kaleido uses `staticPlot: true`? Here's the relevant bar plotting code:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/0ce560c575faad06da1bfa8cca0302b0b6e045c2/src/traces/bar/plot.js#L199-L232\r\n\r\nWe disable this in `staticPlot` mode because vector output should have precisely correct widths, since it can be magnified arbitrarily. And Kaleido goes through [`Plotly.toImage`](https://github.com/plotly/Kaleido/blob/6a46ecae926b4c004bf7232383cf7c74c70748fd/repos/kaleido/js/src/plotly/render.js#L129) which unfortunately hard-codes `staticPlot: true` regardless of what we pass in:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/0ce560c575faad06da1bfa8cca0302b0b6e045c2/src/plot_api/to_image.js#L146-L151\r\n\r\nSo I guess we can't really do anything about this right now. Makes me think we should in principle have a more specific setting here so that for raster outputs you could say \"static plot but still do pixel rounding like the interactive version\" and have `Plotly.toImage` use that setting for raster output?\r\n\r\nAnyway that's for another time. For now, please put the mock back as it was and I'll accept the output with invisible bars, but perhaps we can include a jasmine test that rendering the `bar_show_narrow` mock generates the right bars with a 1px width?",
    "created_at": "2021-06-21T18:07:36Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5724#issuecomment-865239314",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5724",
    "updated_at": "2021-06-21T18:07:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "What we display as the upper or lower fence is actually the last data point within 1.5 IQR past the quartile. So the upper fence could have been as high as 15.5 but since there are no data values between 10 and 20 it gets pushed down to 10.\r\n\r\nSome packages do it this way, some use a fixed 1.5 IQR; what I like about this way is that it gives you extra information about where there actually are data points in the distribution (you know there's one exactly at the fence value), which then allows you to see more clearly the gap to the outliers. The disadvantage is you don't see precisely \"beyond this point we mark points as outliers.\"",
    "created_at": "2021-06-17T15:07:54Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5736#issuecomment-863320807",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5736",
    "updated_at": "2021-06-17T15:07:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I've only made it through some of the image changes so far, but there are a few I want to flag already:\r\n- The most concerning one to me is `bar_show_narrow` - the whole point of that image is to ensure the narrow bars are actually visible, but in the kaleido version a couple of them disappear. IIRC there are some different rendering modes we use in different contexts (ie set by `config`) that may impact this? This also impacts `funnel_horizontal_(group|stack)_basic` I think, though it's less problematic there.\r\n- `binding` has pretty ugly rounding on the button corners... that's true in both the old and new versions, but they're differently ugly. Not too concerned about this except that the old one looks closer to what I see in my local Chrome. Maybe we just treat it as a bug to be fixed in plotly.js (whenever we get around to caring about these buttons) and at that point confirm that the baseline is also fixed?\r\n- `fonts` - we somehow have a different variant of Courier New, that only has half a serif on the lowercase L? Also Overpass changed a bit. Also maybe fine, this doesn't prevent the test from doing its job, it's just a bit odd. Otherwise though the fonts (including in `font-wishlist`) look great!",
    "created_at": "2021-06-16T20:43:06Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5724#issuecomment-862709604",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5724",
    "updated_at": "2021-06-16T20:43:06Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "`marker.pattern.fillmode = replace | overlay` Sold 🎉 ",
    "created_at": "2021-06-15T13:47:12Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5728#issuecomment-861513036",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5728",
    "updated_at": "2021-06-15T13:47:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "\"fill\" sounds to me like \"the pattern fills the bar\", which isn't any more true for this mode than for overlay mode. By \"mask\" I meant \"the pattern masks the bar fill\" which feels more directly opposed to \"the pattern overlays the bar fill\" - I grant though that this is fairly technical / esoteric usage of the word \"mask\" so if there's a better word I'm all ears :)",
    "created_at": "2021-06-14T20:09:57Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5728#issuecomment-860960260",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5728",
    "updated_at": "2021-06-14T20:09:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I like the behavior. Maybe change the value from `fill` to `mask` though? I like the value `overlay`, but `fill` doesn't seem like its opposite for this purpose.",
    "created_at": "2021-06-14T19:34:09Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5728#issuecomment-860939344",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5728",
    "updated_at": "2021-06-14T19:34:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ah right, x unified doesn't seem to have the centered fallback for when there isn't room on either side like closest and x modes have. We should add that. But I was definitely able to get a situation where there was plenty of room on the left for the whole label, yet it was shown on the right side with just 1px border cut off. So I think we should pad it 1px as well.",
    "created_at": "2021-06-08T18:28:20Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5721#issuecomment-856997478",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5721",
    "updated_at": "2021-06-08T18:28:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Seems like in this plot we've set the figure width to a half-integer, and perhaps due to rounding that's allowing us to draw the hover label 1px beyond the true displayed edge of its container. If we keep all our hover labels 1px away from the edges no matter what (just change by 1px the condition for flipping the label to the left side), that should fix this.",
    "created_at": "2021-06-08T16:23:39Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5721#issuecomment-856913108",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5721",
    "updated_at": "2021-06-08T16:23:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @rlreamy - it's interesting that this works now, but it clearly didn't in past versions of Safari (and some docs haven't caught up yet, like https://www.w3schools.com/jsref/prop_anchor_download.asp still says \"Not Supported\")\r\n\r\nCan we instead move the special handling after the `if(canUseSaveLink)` block? That way older versions that fail this test will still at least have the previous behavior.",
    "created_at": "2021-06-08T12:48:52Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5609#issuecomment-856736797",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5609",
    "updated_at": "2021-06-08T12:48:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The key distinction is whether it's an independent `<script>` tag or part of your build pipeline. So how about \"Load via `<script>` tag\" vs \"Load as a node module\"? I think users that don't know what a node module is will recognize that they should use the script tag, and those that have a build pipeline will understand both. ",
    "created_at": "2021-06-04T21:11:36Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5710#issuecomment-854999784",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5710",
    "updated_at": "2021-06-04T21:11:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The fastly link still works for me - temporary outage?",
    "created_at": "2021-06-04T20:56:05Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5710#issuecomment-854993339",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5710",
    "updated_at": "2021-06-04T20:56:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This all looks good to me, but you've got @nicolaskruchten's comments here, wouldn't it be easier to just address the last couple in this PR and be done with it?",
    "created_at": "2021-06-03T18:23:52Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5705#issuecomment-854083490",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5705",
    "updated_at": "2021-06-03T18:23:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "AFAICT only the Carto attributions should change, the Stamen ones were already using the correct attributions as described in http://maps.stamen.com/. They're a little long, but feels to me as though we should stick to their desired attributions.",
    "created_at": "2021-06-01T14:23:53Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5696#issuecomment-852168229",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5696",
    "updated_at": "2021-06-01T14:23:53Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "FWIW this special handling is here:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/4759b7e6dfda3aae1d7246b67bed5ed942fa5a49/src/plots/cartesian/axes.js#L1425",
    "created_at": "2021-06-01T13:14:50Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5689#issuecomment-852114536",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5689",
    "updated_at": "2021-06-01T13:14:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This is indeed confusing and AFAICT undocumented: Date axis ticks have special handling of a single `\\n` character: They will split the label there, and if the second part matches the second part of the previous tick we drop it. That's how you get ticks like:\r\n```\r\nJan    July   Jan    July   Jan    July\r\n2010          2011          2012\r\n```\r\n\r\nFeels to me like (a) we should document this behavior, and (b) we may want to generalize it: do the same with `<br>`, and possibly treat `\\n` and `<br>` the same in all text.\r\nOn the other hand I suppose if people DON'T want this automatic pruning of date labels, the `\\n`/`<br>` distinction gives them a way to opt out of it. That's a pretty abstruse feature though...",
    "created_at": "2021-06-01T13:13:39Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5689#issuecomment-852113697",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5689",
    "updated_at": "2021-06-01T13:13:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Closed by #5683 ",
    "created_at": "2021-05-28T03:16:37Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5656#issuecomment-850080827",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5656",
    "updated_at": "2021-05-28T03:16:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "You can try `zsmooth: false` (which is the default `zsmooth` for regular `heatmap` traces) but as @nicolaskruchten mentions, we're deprecating `heatmapgl` in v2 because it has a number of problems; instead we will work to improve the performance of `heatmap` traces.",
    "created_at": "2021-05-27T12:34:31Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5667#issuecomment-849594859",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5667",
    "updated_at": "2021-05-27T12:34:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "FYI not new, I'm just noticing it here, there's an inconsistency in 4 mocks `(gl2d_)?text_chart(_invalid)?-arrays` that makes it look like there's a bug, but in fact the legend is just out of step with the actual mode.\r\n```json\r\n            \"mode\": \"lines+markers+text\",\r\n            \"name\": \"Lines and Text\",\r\n```",
    "created_at": "2021-05-26T16:53:59Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5682#issuecomment-848943859",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5682",
    "updated_at": "2021-05-26T16:53:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Side note: these issues also pertain in a long-dormant problem with dash-daq thermometers https://github.com/plotly/dash-daq/pull/68",
    "created_at": "2021-05-26T16:16:41Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2196#issuecomment-848909707",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2196",
    "updated_at": "2021-05-26T16:16:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "One potential pitfall: URLs with parens in them, for example: https://en.wikipedia.org/wiki/Textile_(markup_language) - makes me think we should keep the quotes when there is a `baseUrl`.\r\n\r\nFor completeness, note that the `<base>` tag is interrogate here:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/7588c9e057f5317332621e56933736eaece217b7/src/plot_api/plot_api.js#L427-L430\r\n",
    "created_at": "2021-05-26T15:42:33Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5685#issuecomment-848883869",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5685",
    "updated_at": "2021-05-26T15:42:33Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@vdgodse please file a new issue showing the misbehavior you've discovered, and we'll take a look. If at all possible, try to reduce it to plain javascript, ie `Plotly.newPlot(...).then(...).then(() => Plotly.react(...))` as that's far easier to debug than issues inside a React build (and easier to share in Codepen or the like).",
    "created_at": "2021-05-21T21:55:13Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2592#issuecomment-846282426",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2592",
    "updated_at": "2021-05-21T21:55:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The situation I'm describing in the above two comments violates the second rule in #5554:\r\n\r\n> the bar is in the hover set if-and-only-if the point that wins the hover is within the range of the bar `(bar.x +/- width/2)`\r\n\r\nNote that that rule references \"the point that wins the hover\" and says nothing about where the cursor is.",
    "created_at": "2021-05-21T19:24:39Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5668#issuecomment-846193407",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5668",
    "updated_at": "2021-05-21T19:24:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Actually even if the scatter point isn't over the gap, but the gap is small enough compared to the hover distance, you can get the same thing in more severe form:\r\n<img width=\"222\" alt=\"Screen Shot 2021-05-21 at 3 19 44 PM\" src=\"https://user-images.githubusercontent.com/2678795/119188019-181e9080-ba48-11eb-95d9-b73aa0f5685f.png\">\r\n",
    "created_at": "2021-05-21T19:21:01Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5668#issuecomment-846191770",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5668",
    "updated_at": "2021-05-21T19:21:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "One concern: looks like a scatter point in the gap between two bars, but clearly within the data range of one of them, can be paired with hover from the other one if the mouse is over that other half of the gap.\r\n<img width=\"367\" alt=\"Screen Shot 2021-05-21 at 3 08 23 PM\" src=\"https://user-images.githubusercontent.com/2678795/119187069-d2ad9380-ba46-11eb-99f7-107f5f3df1d1.png\">\r\n<img width=\"237\" alt=\"Screen Shot 2021-05-21 at 3 10 04 PM\" src=\"https://user-images.githubusercontent.com/2678795/119187075-d5a88400-ba46-11eb-8eaa-f8e571ef574c.png\">\r\n```\r\nPlotly.newPlot(gd,[\r\n    {x:[1,2,3,4],y:[1,2,3,4],type:'bar'},\r\n    {x:[0.6,0.8,1,1.2,1.49,1.75,2.51,3.2,5],y:[3,3,3,3,3,3,3,3,3],mode:'markers'}\r\n],{hovermode:'x'})\r\n```",
    "created_at": "2021-05-21T19:12:31Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5668#issuecomment-846187820",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5668",
    "updated_at": "2021-05-21T19:12:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "yaxis2 has `type: 'category'` - was that intentional? If I remove that, I think this graph behaves as you would expect.",
    "created_at": "2021-05-20T13:03:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5672#issuecomment-845099002",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5672",
    "updated_at": "2021-05-20T13:03:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This file: https://github.com/plotly/plotly.js/blob/master/dist/README.md describes which traces are included in which bundles. Any trace type not included will fall back on `scatter` (which obviously makes no sense for heatmaps!)\r\n\r\nNote there's also a complete minified dist package https://www.npmjs.com/package/plotly.js-dist-min",
    "created_at": "2021-05-20T12:54:07Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5667#issuecomment-845089652",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5667",
    "updated_at": "2021-05-20T12:54:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Any chance you're using the `scattergl` trace type? The `cartesian` bundle doesn't include that, so will fall back on `scatter`, which renders with SVG so will look a little different and has worse performance with lots of points.\r\n\r\nThe `gl2d` bundle includes `scattergl`.",
    "created_at": "2021-05-19T12:50:16Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5667#issuecomment-844074084",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5667",
    "updated_at": "2021-05-19T12:50:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Clear improvement. There are three funny cases I want to point out, though we may choose not to do anything about them:\r\n\r\n(1) the only place I can put the mouse and NOT get a label for any bar is slightly to the left of a first-of-month scatter point:\r\n![Screen Shot 2021-05-12 at 11 27 01 AM](https://user-images.githubusercontent.com/2678795/118127975-507afa80-b3c8-11eb-97fb-8526d7e5c376.png)\r\nIf I put the mouse to the right of this point I do get a bar hover:\r\n![Screen Shot 2021-05-12 at 11 27 09 AM](https://user-images.githubusercontent.com/2678795/118131027-03008c80-b3cc-11eb-9a9b-e2ab885a2d37.png)\r\nThis is presumably because the mouse is not over the range of the bar that matches the winning scatter point - so we include the previous bar in our original set of hovered points but then disqualify it because it's inconsistent with the scatter point.\r\nThis happens at all month boundaries in `x` mode, but if I switch to `x unified` mode, I see this behavior on the Dec/Jan boundary:\r\n![Screen Shot 2021-05-13 at 8 57 09 AM](https://user-images.githubusercontent.com/2678795/118128925-87054500-b3c9-11eb-9a6e-5ad702bc9930.png)\r\nbut not on the Jan/Feb boundary, there I always get the Feb bar no matter where my mouse is:\r\n![Screen Shot 2021-05-13 at 8 57 24 AM](https://user-images.githubusercontent.com/2678795/118128943-8cfb2600-b3c9-11eb-8ea5-41571e988716.png)\r\n\r\n(2) When I zoom in enough, there are gaps between scatter points so that none of them are hovered, and only a bar is shown in the hover info. But if I set `xperiod` to 5 days on the scatter trace, I would have expected that no matter how much I zoom in there would be a winning scatter point, because I'm always over the period of one of them. That doesn't happen, in either `x` or `x unified` hovermode. In both modes there's still a gap where I only see the bar's hover.\r\n\r\n(3) Except in a very narrow set of conditions, when no matter which scatter gap my mouse is in, the middle scatter point is included in hover data with the bar. I only see this with an `xperiod` on the scatter and in `x` hovermode - not with instant-positioned scatter points and not with `x unified`, and at least in the codepen given there's a very narrow zoom range where this happens, immediately after gaps in the scatter have opened up but before they get too big. Here my mouse is on about Jan 27:\r\n![Screen Shot 2021-05-13 at 8 48 02 AM](https://user-images.githubusercontent.com/2678795/118130818-ca60b300-b3cb-11eb-88f5-5de9fad1d383.png)\r\n(This third point may become moot if we choose to address the second point)",
    "created_at": "2021-05-13T13:22:25Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5618#issuecomment-840558084",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5618",
    "updated_at": "2021-05-13T13:22:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Oh I don't think we want per-subplot... except maybe for zoom in/out, but that's really better handled by other more specific interactions anyway. It's just that if you have several subplots with inconsistent modes, neither of the buttons would start out selected, and the modes would be made consistent after you click one of the buttons.\r\n\r\nBut yeah, v3 or v4 🙈 ",
    "created_at": "2021-05-11T22:01:29Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5654#issuecomment-839212938",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5654",
    "updated_at": "2021-05-11T22:01:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "LGTM! Have you seen this fail on CI? ie just push a branch off this one with a purposely invalid addition to a mock, just to make sure it will properly flag failures for us.",
    "created_at": "2021-05-11T21:54:28Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5653#issuecomment-839207136",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5653",
    "updated_at": "2021-05-11T21:54:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "As discussed this morning with @archmoj:\r\n\r\nIdeally we would collapse all the hovermode buttons to two, each with consistent behavior:\r\n- `hovercompare`: If there are cartesian subplots and `hovermode='x' or 'y'` it's selected, otherwise it's deselected. If you click on it while it's deselected, it sets `hovermode` to `'x'` (or `'y'` if we just have horizontal bars). If you click on it while it's selected, it sets `hovermode` to `false`\r\n- `hoverclosest`: If `hovermode` is `'closest'`, and any subplots that have their own `hovermode` it's also `'closest'`, it's selected; otherwise it's deselected. If you click on it while it's deselected it sets `hovermode` in layout and any relevant subplots to `'closest'`. If you click on it while selected it sets those same attributes to `false`.\r\n\r\nIn principle we should be able to do the same with the various type-specific zoom, pan, and reset buttons: define behavior for them that doesn't depend on which subplots are present, so users can just think about which functionality they want present, not which specific functions are attached to those icons.\r\n\r\nThat's probably not in scope right now though, as it'd be a bit of a project. But that seems like what we'd need to do to make these options really user-friendly.",
    "created_at": "2021-05-11T21:45:21Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5654#issuecomment-839200368",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5654",
    "updated_at": "2021-05-11T21:45:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "At some point we may want to expose an equivalent of `config.modebarButtons`, which would be most natural as `layout.modebar.buttons = [\"zoom\", \"pan\", ...]`\r\n\r\n`layout.modebar.buttons.(add|remove)` is incompatible with that, unless we do something like `buttons.(add|remove|all)`.\r\n\r\n`layout.modebar.(buttonstoadd|buttonstoremove)` feels a bit long though. Would it be ambiguous to just use `layout.modebar.(add|remove)`?",
    "created_at": "2021-05-10T17:23:43Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5623#issuecomment-837002103",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5623",
    "updated_at": "2021-05-10T17:23:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looking particularly at the [histogram-offsetgroups](https://github.com/plotly/plotly.js/pull/5638/files?short_path=ce2891e#diff-ce2891e99e98be02836d427be1dae8d852c6d8ef55c34f2d04db1ddf85c2f388) mock, I'm wondering if we shouldn't be a little more nuanced about this: if `text` is an array, default `textposition='auto'`. But if `text` is a string, that was probably meant only to show in hover so default to `textposition='none'`.\r\n\r\nWe have no such logic for scatter, but in that case it's fairly common to want all markers in a trace to get the same text - the text may even BE the marker.\r\n\r\nI could could go either way on this, just wanted to throw it out there. The \"always auto\" logic is nice for its simplicity, and I'd do it this way if starting fresh, it just may break more graphs than we would need to with the v2 upgrade.  @nicolaskruchten @archmoj thoughts?",
    "created_at": "2021-05-07T12:55:18Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5638#issuecomment-834355026",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5638",
    "updated_at": "2021-05-07T12:55:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Seems like a straightforward filter operation?\r\n\r\nYes, though there may be cases where we lose track of which is the \"best\" point by the time we're ready to do this filter.\r\n\r\nFixes like this PR may be the best route in the short term, but I think all of this does point to a need eventually to take a step back and reconceptualize our hover/spike picking framework in order to satisfy the invariants @nicolaskruchten has stated, among others that are already assumed, at an architectural level rather than by layering on more tweaks.",
    "created_at": "2021-05-06T15:14:00Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5618#issuecomment-833603875",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5618",
    "updated_at": "2021-05-06T15:14:00Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "If I give the scatter trace in your demo a period of its own, we again get multiple labels for that one trace.\r\n\r\n![Screen Shot 2021-05-06 at 9 20 13 AM](https://user-images.githubusercontent.com/2678795/117305118-747c9000-ae4c-11eb-9fe2-70e844081ed1.png)\r\n\r\n\r\nhttps://codepen.io/alexcjohnson/pen/NWpWOdQ?editors=0010",
    "created_at": "2021-05-06T13:23:41Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5618#issuecomment-833519643",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5618",
    "updated_at": "2021-05-06T13:23:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Right, if these test failures are all just rounding errors let's loosen the tests and upgrade to the latest node.",
    "created_at": "2021-05-04T15:59:12Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5604#issuecomment-832054293",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5604",
    "updated_at": "2021-05-04T15:59:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yes, when you set `scaleanchor`, `scaleratio` defaults to 1 - see https://plotly.com/javascript/reference/layout/xaxis/#layout-xaxis-scaleanchor (and `scaleratio` below it)",
    "created_at": "2021-05-04T12:26:33Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5621#issuecomment-831902492",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5621",
    "updated_at": "2021-05-04T12:26:33Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "dcc 0.44.0 is extremely old which is why you have an old plotly.js (1.45.0)\r\nCan you try upgrading dash to the latest (which, since v1.0, will also upgrade dcc)?",
    "created_at": "2021-05-03T22:33:21Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5613#issuecomment-831577017",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5613",
    "updated_at": "2021-05-03T22:33:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "If you know the aspect ratio you want for the chart ahead of time, you can use `scaleanchor` (and `scaleratio` if the aspect ratio is not 1:1) https://codepen.io/alexcjohnson/pen/mdRNYBN",
    "created_at": "2021-05-03T21:34:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5621#issuecomment-831549920",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5621",
    "updated_at": "2021-05-03T21:34:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "OK, \"big\" is fine. I still somewhat prefer \"small and bold\" I think, as a way to better disambiguate the title from the trace names, but that would be a pretty big visual change to push on people as a new default. The vertical misalignment I still think should be treated simply as a bug, having font size \"fix\" it seems awfully fragile - does the \"fix\" still work if you make `layout.font.size` bigger or smaller?",
    "created_at": "2021-04-30T12:36:13Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5595#issuecomment-830063973",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5595",
    "updated_at": "2021-04-30T12:36:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The only concern I have about doing this in a minor is if it will break the build of someone downstream who imports plotly.js from source. If we're worried about that it could be worthwhile doing a minimal version of this in v2.0 including a transpiler and at least one change somewhere in the core that depends on transpiling.",
    "created_at": "2021-04-21T21:34:50Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5596#issuecomment-824372273",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5596",
    "updated_at": "2021-04-21T21:34:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Without that the labels (namely -1 and 1) won't hide under inside ticklabels\r\n\r\nAh, got it! Sorry, I misunderstood the purpose here. Yes, please consider autorange a separate bug, which indeed is independent of how many inside-labeled axes are drawn on the subplot: if you start out autoranged everything is fine, but if you start with defined ranges or if you start autoranged and then zoom, doubleclicking will do strange things (and will toggle between two states even if you started out autoranged)",
    "created_at": "2021-04-21T17:17:28Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5589#issuecomment-824225936",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5589",
    "updated_at": "2021-04-21T17:17:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> they are not autoranged\r\n\r\nWhat's the point of that mock then? Anyway the second point stands, I can't get it to autorange correctly via GUI interactions no matter what I do.",
    "created_at": "2021-04-21T16:57:37Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5589#issuecomment-824214088",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5589",
    "updated_at": "2021-04-21T16:57:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj a few issues when I'm playing with this, using the `ticklabelposition-overlay2` mock:\r\n- Why is there so much padding? Both sides of the axes with inside labels get way more padding than they need.\r\n- Autorange gets confused with this mock: if I doubleclick one of the subplots it autoranges as if there were no labels inside, then doubleclicking again puts it back to mega-padding.\r\n- `relayout` doesn't work: eg `Plotly.relayout(gd,'xaxis2.ticklabelposition',null)` moves the tick labels but does not update `yaxis3.range`. I suspect this is related to the autorange confusion\r\n\r\nNone of these behaviors happen with only one set of inside labels on a given subplot; in fact if I remake this mock with either `xaxis2` or `xaxis3` having outside labels, the padding is correct, autorange works correctly, and relayout to move the other xaxis inside and out (toggling between zero and one set of inside labels on the top subplot) correctly updates `yaxis3.range`.",
    "created_at": "2021-04-21T11:10:44Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5589#issuecomment-823978687",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5589",
    "updated_at": "2021-04-21T11:10:44Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yes. `window.PlotlyConfig` is no longer a thing after this PR, and the sole behavior is what `window.PlotlyConfig = {MathJaxConfig: 'local'}` did previously.",
    "created_at": "2021-04-20T20:00:41Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5514#issuecomment-823562854",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5514",
    "updated_at": "2021-04-20T20:00:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks good! Probably wants a mock (or just adding legendranks to some existing mock) and the description addition I commented on, then it'll be ready to go!",
    "created_at": "2021-04-16T13:01:19Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5591#issuecomment-821157377",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5591",
    "updated_at": "2021-04-16T13:01:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Great idea! In our call today @archmoj and I discussed having the dev build process (`npm start`) generate a copy of the schema in the `build` folder, and committing that one, so that the version in `dist` stays in sync with the rest of the published files.",
    "created_at": "2021-04-14T02:25:02Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5588#issuecomment-819174599",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5588",
    "updated_at": "2021-04-14T02:25:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The new test images look great. I don't think we want the indicator mock to change though - if indicator labels overflow the div I think we should still show them.",
    "created_at": "2021-04-10T12:42:07Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5584#issuecomment-817130717",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5584",
    "updated_at": "2021-04-10T12:42:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Heh, certainly out of sync with the comment there... but why didn't this show up in any test images?",
    "created_at": "2021-04-08T14:48:12Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5583#issuecomment-815885549",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5583",
    "updated_at": "2021-04-08T14:48:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj and I were discussing the h/h case this morning - what would it look like? Would it wrap somehow (within groups? only between groups? only within a group if it also wraps both before and after that group?) or only support a single line? Where would we put group gaps and group titles? I suppose we could think up answers to these but I suspect they'll be quite a bit more complex than the one new and two existing cases, and I'm not sure when you'd want to use it. So my inclination would be to only enable `grouporientation='h'` when `orientation='v'` for now (along with the two existing cases, which correspond to `grouporientation='v'` with either value of `orientation`, right?)",
    "created_at": "2021-04-06T20:14:47Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5580#issuecomment-814410249",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5580",
    "updated_at": "2021-04-06T20:14:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I see one bit of problematic behavior: If I make the plot from your test and zoom in a bit, it's possible to get the spikelines and hover labels out of sync. Oddly enough the behavior is somewhat reversed between `x` and `x unified` but both are problematic:\r\n\r\n![Screen Shot 2021-04-06 at 10 32 01 AM](https://user-images.githubusercontent.com/2678795/113732522-a96bba80-96c7-11eb-939c-cb1d0d92d3f5.png)\r\n\r\n![Screen Shot 2021-04-06 at 10 57 47 AM](https://user-images.githubusercontent.com/2678795/113732543-acff4180-96c7-11eb-8e89-0f3477a0ed03.png)",
    "created_at": "2021-04-06T15:04:13Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5543#issuecomment-814194612",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5543",
    "updated_at": "2021-04-06T15:04:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj give it a try in this PR - it's an edge case but we really don't want to be introducing a known bug in one PR just to remove it in another.",
    "created_at": "2021-04-06T13:20:39Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5550#issuecomment-814114286",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5550",
    "updated_at": "2021-04-06T13:20:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Here's panning on one of the subplots of `axes_chain_scaleanchor_matches_inside-ticklabels` - the labels in the lower left corner appear (overlapping each other) as soon as I start to drag, and disappear only on mouseup\r\n![labels hide on mouseup](https://user-images.githubusercontent.com/2678795/113628909-9dceb400-9633-11eb-8243-d63351ac17c9.gif)\r\n",
    "created_at": "2021-04-05T21:24:54Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5550#issuecomment-813659614",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5550",
    "updated_at": "2021-04-05T21:24:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> The second bit is addressed in caf3239.\r\n\r\nThat seems to fix the ticks, but I'm still seeing some labels that should have been removed.\r\n![Screen Shot 2021-03-31 at 12 29 09 PM (2)](https://user-images.githubusercontent.com/2678795/113178671-ce21e700-921c-11eb-8bee-c2bad9254f29.png)\r\n",
    "created_at": "2021-03-31T16:31:04Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5550#issuecomment-811216390",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5550",
    "updated_at": "2021-03-31T16:31:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I gather we're talking about the [Mendix Any Chart widget](https://docs.mendix.com/appstore/modules/any-chart). That appears to be based on Plotly.js v1.47.4, which is nearly two years old, so this bug may already have been fixed, and if not I'm not sure what the process will be to update that widget. Nevertheless if you can recreate the problem in plain plotly.js in a codepen, like https://codepen.io/alexcjohnson/pen/OJbGMMo we'd be happy to take a look. Note that you can replace `plotly-latest.min.js` with `plotly-1.47.4.min.js` to test the same version as in that Mendix widget.",
    "created_at": "2021-03-31T12:41:05Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5573#issuecomment-811036866",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5573",
    "updated_at": "2021-03-31T12:41:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Two bits of behavior here look not quite right to me:\r\n- it's possible for a set of marks to disappear when the value goes behind the labels, but then to come back between the label and the edge of the plot. This can happen with no ticks or outside ticks, just due to the little gap between labels and the edge, but it's more prominent if you put long ticks inside.\r\n\r\nHere the labels for -8 and 9 are hidden, as they should be:\r\n<img width=\"239\" alt=\"hidden labels\" src=\"https://user-images.githubusercontent.com/2678795/113035297-17146580-9161-11eb-914d-4c40cfeb39fc.png\">\r\nBut then they come back (note the labels rarely come back when they're inside, unless you have super long inside ticks, but the ticks and gridlines come back):\r\n<img width=\"240\" alt=\"visible again\" src=\"https://user-images.githubusercontent.com/2678795/113035338-209dcd80-9161-11eb-8c9d-c31bda7021e9.png\">\r\nSeems to me the correct logic should be \"past the beginning of the label bounding box\" rather than \"inside the label bounding box\"\r\n\r\n- While I'm dragging, the gridlines and zerolines disappear at the right time but the ticks and tick labels behave incorrectly. Ticks that were hidden when I started dragging don't appear until I mouse up, whereas all tick labels (on both axes, the dragged and the static) appear when I start dragging, then on mouseup some are removed.\r\n\r\nHere (while dragging) you see a label but no tick because it was hidden pre-drag:\r\n<img width=\"245\" alt=\"no tick on 8\" src=\"https://user-images.githubusercontent.com/2678795/113035452-4034f600-9161-11eb-9c6d-e7fb8032d8f0.png\">\r\nAnd here (still while dragging) you see both 8 and 9 labels on top of each other:\r\n<img width=\"237\" alt=\"8 and 9\" src=\"https://user-images.githubusercontent.com/2678795/113035528-504cd580-9161-11eb-8fd7-8cd5d523c296.png\">\r\nBut then they disappear on mouse up:\r\n<img width=\"238\" alt=\"correct on mouseup\" src=\"https://user-images.githubusercontent.com/2678795/113035580-5ba00100-9161-11eb-8b19-b9c911fa40b4.png\">\r\n",
    "created_at": "2021-03-30T18:10:19Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5550#issuecomment-810470006",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5550",
    "updated_at": "2021-03-30T18:10:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "If you set `paper_bgcolor` you'll see it's not just the black text:\r\n![Screen Shot 2021-03-30 at 12 02 38 PM](https://user-images.githubusercontent.com/2678795/113019712-e415a600-914f-11eb-90b6-cdd7774ca8b9.png)\r\nThe right solution to this is to apply the opacity to a group that contains both the shape and the text. If you apply the opacity to the shape and the text separately, then for partial opacity the shape color will start to bleed through the text color, which is not what we want.",
    "created_at": "2021-03-30T16:04:34Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5568#issuecomment-810386264",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5568",
    "updated_at": "2021-03-30T16:04:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This feels to me like another hovermode, perhaps `\"x loose\"`. In this mode, independently for each trace we find the best point, if there is one within the `hoverdistance` considering only the x coordinate. Then we draw one hover label for each trace that looks like the `\"closest\"` labels, never creating a common axis label and never combining them like in `\"x unified\"`, because these features will just be confusing when we're expecting the x values to differ between points. We would still find an overall best point if spikelines were enabled, but only for that purpose.",
    "created_at": "2021-03-30T13:35:54Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5572#issuecomment-810251195",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5572",
    "updated_at": "2021-03-30T13:35:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I see https://github.com/plotly/plotly.js/pull/5550/commits/769c7b899b360f70853b213f70357769868972cf that indicates at one point we were removing zero lines that intersect these labels, but now we're not anymore... don't we want to? My understanding was that the goal here is that none of the counteraxis marks at a location beyond the beginning of these inside labels should be visible.\r\n\r\nAlso I see some labels (`0` on the y axis in this example from `axes_chain_scaleanchor_matches2_inside-ticklabels.png`) appear on the other side of a removed label (`0.5`) - this seems distinct from the zero line question, as other `0` labels in the same plot are removed.\r\n<img width=\"95\" alt=\"Screen Shot 2021-03-19 at 7 06 03 PM\" src=\"https://user-images.githubusercontent.com/2678795/111850376-80d17b80-88e6-11eb-967a-65d34fc677c2.png\">\r\n",
    "created_at": "2021-03-19T23:09:25Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5550#issuecomment-803183478",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5550",
    "updated_at": "2021-03-19T23:09:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @AndySeymour2904 - confirmed, on my mac Chrome 88.0.4324.192 scroll zoom worked, but after updating to 89.0.4389.90 it began to fail.\r\n",
    "created_at": "2021-03-16T12:57:12Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5551#issuecomment-800235766",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5551",
    "updated_at": "2021-03-16T12:57:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "As described in #5502 we should also be removing the ticks & tick labels at these positions, not just the gridlines. Perhaps that argues for a simpler solution where the range over which ticks are generated is reduced?",
    "created_at": "2021-03-16T02:25:30Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5550#issuecomment-799894074",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5550",
    "updated_at": "2021-03-16T02:25:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ah, got it - thanks. Here's one where I managed to get a 29-day `dtick` by including Feb and Mar of a leap year only. https://codepen.io/alexcjohnson/pen/MWbRKEK?editors=0010\r\n\r\nWe appear to have some logic specifically for grouped bars, that we don't allow an automatic dtick less than the minimum bar spacing. We're going to have to figure out how to distinguish a real 28- or 29-day minimum spacing from a one-month minimum spacing. Same in principle may apply to n-month spacing (including yearly), though I bet it's going to be hard to find cases where this is obviously problematic. I guess it would cover 99% of cases if we simply took any such result that's at least 28 days and rounded up to the nearest number of months?",
    "created_at": "2021-03-15T20:59:49Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5541#issuecomment-799748211",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5541",
    "updated_at": "2021-03-15T20:59:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@OmriAroesti I'm not able to reproduce the 28-day `dtick` via automated logic on zoom, in my tests it goes from 1 month directly to 14 days. Can you reproduce this effect in a codepen so we can see it?\r\n\r\nThat said there's a potentially interesting feature here, to set a minimum `dtick`, either explicitly or automatically based on the data. When the data traces all have 1-month resolution there's really no benefit to finer ticks, and it's particularly confusing for grouped bars where horizontal position within the group doesn't encode anything about the time.",
    "created_at": "2021-03-15T18:29:25Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5541#issuecomment-799650577",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5541",
    "updated_at": "2021-03-15T18:29:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Related: https://github.com/plotly/plotly.js/issues/3292 (nudge the first and last tick labels inward to fit within the axis span - though in this case removing these labels is better)\r\n\r\nI'm a little worried about a blanket \"remove tick labels that get clipped by the graph div boundaries\" - that might catch too many things, like long category labels with automargin disabled. We would only remove those that get clipped in the axis direction, so for an x axis category labels going off the bottom would remain visible, just those that go off the right (or left) edge, most likely when the `tickangle` chooses 30º.\r\n\r\nWhat about a new attribute `axis.ticklabeloverflow` with values `'allow'` (default on `category` axes), `'remove'` (default on all other axes), and perhaps eventually something like `'push'` to support #3292. Though there's still a question of whether overflow refers to the subplot area or the graph div - with a single subplot and no margins the two are the same. By default I think we should only remove those that overflow the div, but there are cases like closely-spaced facets where labels can overlap each other and it may be nice to avoid this.\r\n\r\nSo perhaps an enum with _five_ values: `allow` (default for `category`), `'remove past div'` (default for others), `'remove past domain'`, and someday `'push to div'` and `'push to domain'`. Something like that would solve this particular issue as a bug, while still allowing flexibility for the user to choose other behaviors and for us to add new behaviors later. ",
    "created_at": "2021-03-11T14:56:32Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5404#issuecomment-796796255",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5404",
    "updated_at": "2021-03-11T14:56:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This is intentional - when you fill to zero, the implication is that the absolute size of the data is important to represent visually. This is the same reason we always extend the axis to zero on bar charts.\r\n\r\nYou're right though that it could be useful to be able to disable this. So while not a bug, we'd be open to adding a feature to control it.",
    "created_at": "2021-03-09T18:14:02Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5540#issuecomment-794255937",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5540",
    "updated_at": "2021-03-09T18:14:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "If there's a hover label, the spikeline should get its position from something within that label. In this case the bar is setting the spikeline position, but only the scatter point is in the hover label.",
    "created_at": "2021-03-09T18:07:35Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4716#issuecomment-794248199",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4716",
    "updated_at": "2021-03-09T18:07:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This is a good idea, thanks @jenrol! For reference, the rationale for `tonexty` falling back on filling to zero is so you can build up a stacked area chart using only `tonexty` fill. But you're right, for non-stacked data this doesn't make much sense.\r\n\r\nOne workaround you can use until there's a built-in solution is to create a dummy first trace that's hidden from the legend, so whatever trace is next tries to fill to that and gives up:\r\n`{x: [null], y: [null], showlegend: false}` https://codepen.io/alexcjohnson/pen/ZEBmYqq?editors=0010\r\n![Screen Shot 2021-03-09 at 8 46 53 AM](https://user-images.githubusercontent.com/2678795/110482097-47169e80-80b6-11eb-9b5f-6ef11fd9f521.png)\r\n![Screen Shot 2021-03-09 at 9 03 27 AM](https://user-images.githubusercontent.com/2678795/110482144-55fd5100-80b6-11eb-91db-f35b00dbdd2a.png)\r\n",
    "created_at": "2021-03-09T14:04:02Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5538#issuecomment-793940352",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5538",
    "updated_at": "2021-03-09T14:04:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Pretty cool, doesn't seem like it was that hard to make this work 😎 \r\n\r\nWe'll need to do something about the [default trace type](https://github.com/plotly/plotly.js/blob/3f338292575425242bdd6f0e0b3548c80d039028/src/plots/attributes.js#L9) - the two options that occur to me are (1) use the first trace type registered, or (2) if `scatter` isn't registered and you give no (valid) type, throw an error.\r\n\r\nIn addition to the bundle tests verifying behavior without `scatter` present, we should test components (shapes, annotations, images) and make sure something reasonable happens when the cartesian framework is missing. Perhaps that can be a silent failure, though maybe better if we could log a warning of some sort.",
    "created_at": "2021-03-08T19:36:22Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5535#issuecomment-793018624",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5535",
    "updated_at": "2021-03-08T19:36:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Dash rejects any nested properties\r\n\r\nFYI that's [here](https://github.com/plotly/dash-core-components/blob/8f241853d71b1a0c3b840a80303aedacb37c5a2e/src/fragments/Graph.react.js#L75) - if a flat object is too cumbersome to work with we can certainly carve out an exception in `dcc.Graph` to handle the preferred nested structure. I think the purpose of that rejection is so we don't try to include the whole x/y axis objects in the event data that gets serialized and sent to the server, but small nested objects would be fine.",
    "created_at": "2021-03-05T20:11:10Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5512#issuecomment-791654518",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5512",
    "updated_at": "2021-03-05T20:11:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks great - as discussed let's just prevent MathJax in Sankey with `data-notex` and this should be good to go!",
    "created_at": "2021-03-04T21:34:24Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5531#issuecomment-790959999",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5531",
    "updated_at": "2021-03-04T21:34:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Closed by #5275 ",
    "created_at": "2021-03-03T16:16:26Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/877#issuecomment-789833629",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/877",
    "updated_at": "2021-03-03T16:16:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "If we can get the source map in a separate file, then yes minified with source map should be the default. At that point I don't see a reason you'd want to invert either of those options (for dash and dash components that's all we provide), but I also don't see much harm keeping them.",
    "created_at": "2021-02-27T14:01:13Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5527#issuecomment-787077394",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5527",
    "updated_at": "2021-02-27T14:01:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I don't know if this is what you mean by \"complicate our build process even more\" - at least on the command line it seems straightforward\r\n\r\nhttps://github.com/browserify/browserify-handbook#exorcist",
    "created_at": "2021-02-27T13:34:08Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5527#issuecomment-787073505",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5527",
    "updated_at": "2021-02-27T13:34:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@s417-lama very nice work! I've made a few comments but I think you're off to a great start, and this will be a popular feature!",
    "created_at": "2021-02-24T00:14:05Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5520#issuecomment-784625691",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5520",
    "updated_at": "2021-02-24T00:14:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @to-mg - hover effects were never implemented for table traces, so they should add the `'noHover'` category here:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/d0ddf03850ccfc5e625da0735b6dcea8e1d61a05/src/traces/table/index.js#L12\r\n\r\nAnd that should flow through to the schema and docs.\r\n\r\nIt would be an interesting feature to add - but we should mark it correctly as missing until then.",
    "created_at": "2021-02-23T22:01:06Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5523#issuecomment-784543280",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5523",
    "updated_at": "2021-02-23T22:01:06Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Right - until we manage to upgrade `d3-format`, the docs should really be pointing to the d3v3 version of the package, as we do in some of the attribute docstrings:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/cfa7720cafb61ff71b8991e37e5b248230624091/src/constants/docs.js#L4",
    "created_at": "2021-02-18T17:45:27Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5511#issuecomment-781521063",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5511",
    "updated_at": "2021-02-18T17:45:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This is certainly an interesting one - The ArcGIS JavaScript library sets `window.define`, which confuses our UMD header. If you delete that in between loading ArcGIS and loading Plotly, with something like:\r\n```\r\n<script>delete window.define;</script>\r\n```\r\nThen Plotly loads just fine. https://codepen.io/alexcjohnson/pen/wvoeJRY?editors=1000\r\n\r\nI've never seen another library that leaks `define` onto the global scope like that. It's not clear to me whether that's intentional or not, but I believe our header is pretty standard so this must be a problem with a lot of JS packages (when used in conjunction with ArcGIS).",
    "created_at": "2021-02-18T14:23:44Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5509#issuecomment-781378791",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5509",
    "updated_at": "2021-02-18T14:26:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> By having the shadow always match the paper color, the internal parcats/parcoords/sankey labels have the same color contrast characteristics as any other text that ends up being drawn on the paper (titles, tick labels, etc.).\r\n\r\nSold. Those examples with similar text & paper colors look hideous using my proposed logic.\r\n\r\n> Unless our long-term goals is to go all in here and add shadows to all text when we determine there is poor contrast.\r\n\r\nProbably not automatically, but I am starting to think we should add shadow support to all fonts at some point, and then this can just be used as the default shadow for the relevant fonts.",
    "created_at": "2021-02-18T13:53:49Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5506#issuecomment-781358938",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5506",
    "updated_at": "2021-02-18T13:53:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> it's not the background color you would want to consider to determine contrast, it's the path color that the text is on top of.\r\n\r\nThe point is just to create contrast with the text color. If it looks like the paper color will do that we would use it because we know this will fit with the overall style of the plot, otherwise use black or white. There can be lots of path colors, and your labels can bleed off the paths and onto the background, so I don't think we should involve path color at all.",
    "created_at": "2021-02-17T17:28:24Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5506#issuecomment-780719543",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5506",
    "updated_at": "2021-02-17T17:28:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "For now we could probably just use that logic without adding a new outline color attribute.",
    "created_at": "2021-02-17T15:53:59Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5506#issuecomment-780654731",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5506",
    "updated_at": "2021-02-17T15:53:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Discussing this PR with @alexcjohnson, we thought we need a `layout` attribute to control the color of (text) shadows depending on light/dark backgrounds.\r\n> @alexcjohnson could you please spec that out?\r\n\r\nI was thinking a trace attribute actually, named to correspond with whatever trace attribute sets the color of the text we're outlining. I wonder actually whether we could put this attribute into that font container, or if that would cause problems given that font containers have a standardized structure?\r\n\r\nAnyway, the logic for the default outline color, as @archmoj and I discussed:\r\n- If the font color is light and the paper color is dark or vice versa, default to the paper color.\r\n- If both are light, default to black\r\n- If both are dark, default to white\r\nLooks to me as though this can be implemented using just [`Color.contrast`](https://github.com/plotly/plotly.js/blob/f125c2482737ea37ac0b0ccdd294ce99804e3dc2/src/components/color/index.js#L63) (which gives `#444` rather than `#000` for dark but I think that may be what we want?):\r\n\r\n```js\r\nvar fontContrast = Color.contrast(fontColor);\r\nvar paperContrast = Color.contrast(paperColor);\r\nvar dfltOutlineColor = (fontContrast === paperContrast) ? fontContrast : paperColor;\r\n```",
    "created_at": "2021-02-17T15:52:46Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5506#issuecomment-780653900",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5506",
    "updated_at": "2021-02-17T15:52:46Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "That's a good point @nicolaskruchten - I suppose we could keep them around but not use them ourselves, and deprecate them so they can be removed in v3?\r\n\r\nI guess perhaps the purpose of having this extra layer was to make it clear to folks where the entry points are for `Plotly.register`. But we never actually said that's what we were doing AFAICT and the pattern isn't that complicated, we can just document it: `src/traces/<anything>`, `src/transforms/<anything>`, and `src/components/calendars`. Would be interesting to see if we can take other stuff from `components` out of `core` and into the bundle index files but that's for another time.",
    "created_at": "2021-02-17T15:03:28Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5508#issuecomment-780617033",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5508",
    "updated_at": "2021-02-17T15:03:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@jonmmease this looks beautiful! Huge improvement in render quality.\r\n\r\nI see one bug: The `splom_large` baseline changed to move some of the axis zero lines and possibly gridlines too far down. If I load that mock in the test dashboard, switch to pan mode, and pan the upper left subplot you can see the zero lines and the horizontal gridlines move half as much as they should. This works correctly athttps://rreusser.github.io/plotly-mock-viewer/#splom_large\r\n\r\nVery specific, AFAICT all of the other splom mocks we have work correctly.",
    "created_at": "2021-02-16T22:39:21Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5500#issuecomment-780163397",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5500",
    "updated_at": "2021-02-16T22:39:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "If a bundle without scatter works, then yes. But I think it was put in core originally because otherwise something or other would break. ",
    "created_at": "2021-02-12T21:41:47Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5484#issuecomment-778470496",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5484",
    "updated_at": "2021-02-12T21:41:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Good call @justin-sleep - the negative exclusion predates automatic aggregation, and was never updated to be done after the sums are complete.",
    "created_at": "2021-02-09T03:22:34Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5481#issuecomment-775631046",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5481",
    "updated_at": "2021-02-09T03:22:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "From @TonyBonen asking for this feature in #5480:\r\n\r\n---\r\n\r\nI want to have a plot with scatter points overtop of bars. The problem is that the locations (on the x axis in my case) of the bars cannot be passed to the scatter points - they always sit directly above the x-axis values rather than being spread out across the bars within a grouped category.\r\n\r\nIts the same issue as being asked here: https://stackoverflow.com/questions/54591377/overlay-a-grouped-bar-chart-with-scatter-in-plotly\r\n\r\nI'm working in R plotly but seems this problem appears also in the Python implementation. This example should produce the error:\r\n\r\n    example <- data.frame(country = rep(c(\"Canada\", \"France\", \"UK\"), 2),\r\n                        sex =  rep(c('men', 'women'), 3),\r\n                        value1 = 1:6 + 7,\r\n                        value2 = rep(14:12, 2))\r\n\r\n     plot_ly(example) %>% \r\n           add_trace(type = 'bar',\r\n               x = ~sex, \r\n               color=  ~country, \r\n                y=  ~value1)   %>%\r\n  \r\n        add_trace(type = 'scatter', mode=\"markers\",\r\n                x = ~sex, \r\n                marker = list(size = 8, color = \"#000000\"),\r\n                 y=  ~value2)  \r\n\r\nThe result is something like the screen shot below where in the 2 groups (men and women) the 3 scatter points are lined up in the middle of the group. The desired behaviour is to have those points appear above their respective colour/country groups.\r\n\r\n![image](https://user-images.githubusercontent.com/13091204/107292201-71cdf280-6a37-11eb-8172-33735a323061.png)",
    "created_at": "2021-02-09T03:18:37Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4913#issuecomment-775629603",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4913",
    "updated_at": "2021-02-09T03:18:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Duplicate of #4913 - I'll copy your comment over there because of the nice example & picture.",
    "created_at": "2021-02-09T03:16:52Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5480#issuecomment-775628874",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5480",
    "updated_at": "2021-02-09T03:16:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Wow, interesting, I would not have thought changing something like that in the build job would affect later jobs. I also had never heard of the word \"swappiness\" before. So many new things to learn!\r\n\r\n💃 ",
    "created_at": "2021-02-08T19:38:01Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5478#issuecomment-775392747",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5478",
    "updated_at": "2021-02-08T19:38:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Sounds good, let's just leave this issue open (perhaps with an updated title) until we add cardinal directions.",
    "created_at": "2021-02-05T15:11:32Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5472#issuecomment-774091853",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5472",
    "updated_at": "2021-02-05T15:11:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Note this applies to both mapbox and geo subplots",
    "created_at": "2021-02-05T14:48:13Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5472#issuecomment-774077368",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5472",
    "updated_at": "2021-02-05T14:48:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Makes sense to me - we probably just copied over the (x, y) convention from 2D cartesian but maps do seem consistent in putting lat first. In fact, why don't we do away with the signs and use cardinal directions - that seems like the clearest of all. So instead of:\r\n> (-73.57º, 45.5º)\r\n\r\nwe would have:\r\n> 45.5ºN 73.57ºW\r\n\r\nI notice that the [Representation_at_the_human_interface](https://en.wikipedia.org/wiki/ISO_6709#Representation_at_the_human_interface_(Annex_D)) section (along with preferring cardinals) suggests sexagesimal (degrees, minutes, seconds) is preferred. But for our purposes I think decimal is better, if for no other reason than the source data is in decimal and it's important to be able to look at a data point and go back and find it in the source.\r\n\r\nWe may have a challenge extending N/S/E/W to `hovertemplate`, where numbers are formatted by the [d3 mini-language](https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format) eg `Latitude: {lat:.3f}` - this has no option to display the number unsigned and certainly doesn't know about the degree symbol or cardinal directions, so we may need four new fields, something like `latunsigned`, `latcardinal`, `lonunsigned`, `loncardinal`. Then if you wanted to recreate the default as part of a template, it would look like `{latunsigned:.3f}º{latcardinal} {lonunsigned:.3f}º{loncardinal}`",
    "created_at": "2021-02-05T14:43:48Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5472#issuecomment-774074661",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5472",
    "updated_at": "2021-02-05T14:43:48Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> > It looks useful especially on the forks of plotly.js.\r\n> \r\n> why? the #numbers don't work in this repo either :)\r\n\r\nI think @archmoj was just agreeing with what you're doing here :)",
    "created_at": "2021-02-04T14:48:40Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5469#issuecomment-773365174",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5469",
    "updated_at": "2021-02-04T14:48:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "That's half of it, still needs `pulls` -> `pull` 😁 ",
    "created_at": "2021-02-04T14:39:17Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5469#issuecomment-773358604",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5469",
    "updated_at": "2021-02-04T14:39:17Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "We can certainly upgrade to 2.7.9 and drop 2.3, especially if we can get this into our v2 release. In fact in a perfect world we'd upgrade to MathJax v3 in plotly.js v2, but I assume that'll be more than a one-afternoon change, so not something we can do right now.",
    "created_at": "2021-01-29T19:25:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5374#issuecomment-770001225",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5374",
    "updated_at": "2021-01-29T19:25:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Does look like this is the text that you see at the top of the docs for these traces. I wonder though, do we want to also include a console warning (once when you first create one of these traces) about the deprecation? I don't feel like people already using these traces will notice the deprecation in the docs, but they would (at least if they're using js directly) notice a console warning. @nicolaskruchten thoughts? How do you want to alert Python users?",
    "created_at": "2021-01-28T18:30:32Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5447#issuecomment-769286958",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5447",
    "updated_at": "2021-01-28T18:30:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Seems reasonable. Three questions:\r\n1. We're still running enough tests against the minified bundles that we'd catch a recurrence of #2787 right?\r\n2. What's the impact of this on bundle sizes? Presumably it increases the unminified size a bunch, but is the minified the same?\r\n3. What about build time, hopefully this doesn't slow things down much?",
    "created_at": "2021-01-28T14:03:34Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5449#issuecomment-769074514",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5449",
    "updated_at": "2021-01-28T14:03:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "That's not expected to work. The [basic bundle](https://github.com/plotly/plotly.js/blob/master/dist/README.md#plotlyjs-basic) is only supposed to contain `scatter`, `bar`, and `pie` trace types. I think what's happening is the basic version is falling back to the very old (and about to be removed in v2) legacy polar charts, because `type: 'scatterpolar'` isn't recognized, so you end up with `type: 'scatter'` but then the `r` attribute invokes legacy polar.",
    "created_at": "2021-01-28T13:37:51Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5450#issuecomment-769057714",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5450",
    "updated_at": "2021-01-28T13:37:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "`licenseSrc` is still used in \r\n\r\nhttps://github.com/plotly/plotly.js/blob/ccdd29ab291e0ae8f75bdaf9790cd5932cbb9c53/tasks/sync_packages.js#L242\r\n\r\nIs this desired? Looks like this is creating a file to be published so `licenseDist` may be more appropriate here?",
    "created_at": "2021-01-27T16:42:54Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5446#issuecomment-768414914",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5446",
    "updated_at": "2021-01-27T16:42:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Seems reasonable, accept either form and switch based on the type of the first array element?",
    "created_at": "2021-01-26T03:28:17Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5445#issuecomment-767264868",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5445",
    "updated_at": "2021-01-26T03:28:17Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "If we were to depend on this behavior in order to enable a simplified transform, we'd have to write a test for it somewhere otherwise someone will add another comment like this later and have no idea why the code fails. That's sounding like more trouble than just getting the transform right in the first place.",
    "created_at": "2021-01-25T23:36:48Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5433#issuecomment-767181891",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5433",
    "updated_at": "2021-01-25T23:36:48Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "When you use `relayout` that way you're replacing the entire `yaxis` object with the new one that only contains `{autorange: false, range: [0, 300]}`, deleting all the other values you started with. What you want instead is:\r\n\r\n```js\r\nPlotly.relayout('myDiv',{'yaxis.range': [0, 300]})\r\n``` \r\nThe `autorange: false` will be inferred from this, but if you prefer you can also do:\r\n```js\r\nPlotly.relayout('myDiv',{'yaxis.range': [0, 300], 'yaxis.autorange': false})\r\n```\r\n\r\nThis behavior is described in https://plotly.com/javascript/plotlyjs-function-reference/#plotlyrestyle - specifically the section about \"attribute strings\"",
    "created_at": "2021-01-25T22:56:28Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5442#issuecomment-767166326",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5442",
    "updated_at": "2021-01-25T22:56:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Sounds like [Dash](https://github.com/plotly/dash)",
    "created_at": "2021-01-23T16:42:05Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5441#issuecomment-766136749",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5441",
    "updated_at": "2021-01-23T16:42:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Does this cause problems somewhere? I'd assume any sort of compression would strip out all comments as a first step, wouldn't it? Just seems funny to prohibit what's normally the standard comment syntax.",
    "created_at": "2021-01-22T17:08:24Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5433#issuecomment-765558991",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5433",
    "updated_at": "2021-01-22T17:08:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@nicolaskruchten d3's geo functions are where these weird characters come from, it uses greek letters in its source code for angles in the projections. d3v4 [converts all its source code to ASCII](https://github.com/d3/d3/blob/master/CHANGES.md#other-global-changes):\r\n\r\n> To the consternation of some users, 3.x employed Unicode variable names such as λ, φ, τ and π for a concise representation of mathematical operations. A downside of this approach was that a SyntaxError would occur if you loaded the non-minified D3 using ISO-8859-1 instead of UTF-8. 3.x also used Unicode string literals, such as the SI-prefix µ for 1e-6. 4.0 uses only ASCII variable names and ASCII string literals (see rollup-plugin-ascii), avoiding encoding problems.\r\n\r\nIt seems like this PR, while a very good hypothesis, doesn't solve whatever the underlying problem is. Let me take a look at #5112 again, that seems to me a more promising approach to get rid of this randomly-recurring issue permanently.",
    "created_at": "2021-01-20T17:27:23Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5426#issuecomment-763808925",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5426",
    "updated_at": "2021-01-20T17:27:23Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Not inside `marker` - you're not using markers here at all, only lines and fill. Your trace should look something like:\r\n```\r\n{\r\n  r: [...],\r\n  theta: [...],\r\n  mode: 'lines',\r\n  fill: 'toself',\r\n  line: {color: '#006600'},\r\n  fillcolor: '#006600'}\r\n}\r\n```\r\nhttps://plotly.com/javascript/reference/scatterpolar/#scatterpolar-fillcolor",
    "created_at": "2021-01-20T15:14:28Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5418#issuecomment-763700581",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5418",
    "updated_at": "2021-01-20T15:14:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I also suspect that the issue is caused by https://github.com/plotly/plotly.js/blob/master/tasks/compress_attributes.js\r\n\r\nGreat idea - that's actually plausible! Regardless, it's clear any change could make it reappear until we fix the root cause. So let's see what happens after #5425 is merged, but if and when it pops up again I think we should dig into it rather than working around it.",
    "created_at": "2021-01-20T02:13:38Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5422#issuecomment-763279374",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5422",
    "updated_at": "2021-01-20T02:13:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I'm not quite sure I understand this rule, it looks like it only applies to regular expressions in the code. Can you verify that this command fails prior to the fix in #5382?",
    "created_at": "2021-01-20T00:03:48Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5424#issuecomment-763228228",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5424",
    "updated_at": "2021-01-20T00:03:48Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Did you actually encounter an error? The docs you link say \"Only applies to scoped packages\" which these are not, right?",
    "created_at": "2021-01-19T23:38:41Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5421#issuecomment-763213125",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5421",
    "updated_at": "2021-01-19T23:38:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Here's `hoveron: fills` for `scatter`:\r\nhttps://github.com/plotly/plotly.js/blob/373d4ffbb06952eb9357c38707ba88b7aa3ba3e8/src/traces/scatter/hover.js#L107-L192\r\n\r\nWe'd need to implement similar logic in [`scattergl/hover`](https://github.com/plotly/plotly.js/blob/master/src/traces/scattergl/hover.js) - then since [`scatterpolargl/hover`](https://github.com/plotly/plotly.js/blob/master/src/traces/scatterpolargl/hover.js) reuses `scattergl/hover` it might just work in scatterpolargl, or we might need a little more there.",
    "created_at": "2021-01-19T23:30:20Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2887#issuecomment-763210006",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2887",
    "updated_at": "2021-01-19T23:30:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "You can set an explicit `fillcolor`",
    "created_at": "2021-01-19T13:50:10Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5418#issuecomment-762851026",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5418",
    "updated_at": "2021-01-19T13:50:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@dmt0 looks as though in streambed we re-export `Plotly.Plots` [here](https://github.com/plotly/streambed/blob/1da59c269f9976b0b5ce641c742272b85c65b777/shelly/plotlyjs/static/plotlyjs/src/plotly.js#L16) (and anyway `_supplyDefaults` is created in that file) so AFAICT CS won't be affected.",
    "created_at": "2021-01-19T13:27:51Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5420#issuecomment-762838630",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5420",
    "updated_at": "2021-01-19T13:27:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "We do have an event `e` at that `dragElement.unhover(gd)` call - can we just pass it in? Consumers of this plotly event may want the base browser event.",
    "created_at": "2021-01-15T02:33:16Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5407#issuecomment-760604640",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5407",
    "updated_at": "2021-01-15T02:33:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Presumably, having all four axes (x and y) have `matches=x, matchlength=true` would also do it.\r\n\r\n`xaxis: {matches: 'x'}` would be ignored during `supplyDefaults` so yes that would work. Redundant and would be flagged by `Plotly.validate`, but if that makes upstream logic simpler then go for it.",
    "created_at": "2021-01-14T15:32:33Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5405#issuecomment-760272223",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5405",
    "updated_at": "2021-01-14T15:32:33Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This one we should explicitly test (manually, once, I don't see it as requiring a CI test) before closing.",
    "created_at": "2021-01-14T15:27:26Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1032#issuecomment-760268901",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1032",
    "updated_at": "2021-01-14T15:27:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yes, @archmoj feel free to close this issue.",
    "created_at": "2021-01-14T15:19:35Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2466#issuecomment-760263764",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2466",
    "updated_at": "2021-01-14T15:19:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice find. Certainly this depends on `y2` being anchored to either `x` or another axis that overlays `x`. I don't think it matters what traces exist, we want everything in that subplot to avoid overlapping these labels.\r\n\r\nSo I guess the rule is: a set of y axis inside tick labels should contribute to the autorange for the x axis it's anchored to and any other x axis grouped with it via `overlaying`.\r\n\r\nFor example, suppose we have `x`, `x2`, and `x3`, the latter two both `overlaying: 'x'`, and we have `y2` anchored to `x2`. We need to figure out that all three of these x axes should leave space for the `y2` labels in their autorange, even though that requires following the `overlaying` chain downstream from `x2` to `x` and then back upstream from `x` to `x3`.",
    "created_at": "2021-01-14T14:35:50Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5402#issuecomment-760235589",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5402",
    "updated_at": "2021-01-14T14:35:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yes, strict-d3 still has checks that apply to modern browsers - either things different browsers don't agree on, or usage edge cases like style as a getter on unattached elements.",
    "created_at": "2021-01-14T00:03:16Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5400#issuecomment-759835401",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5400",
    "updated_at": "2021-01-14T00:03:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The reason `strict-d3` was a transform before is that we only wanted to use it in testing and dev environments, not in production code, because it has a performance penalty. I don't know how much, but can we keep it out of prod builds?",
    "created_at": "2021-01-13T23:51:26Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5400#issuecomment-759831301",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5400",
    "updated_at": "2021-01-13T23:51:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "That's happening because by default the margins expand automatically to fit their contents, in this case the colorbar. But you can disable that behavior by turning off `layout.margin.autoexpand` and setting an explicit `layout.margin.r` (assuming your colorbar is on the right) that leaves enough space for all situations.",
    "created_at": "2021-01-11T17:39:40Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5392#issuecomment-758110141",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5392",
    "updated_at": "2021-01-11T17:39:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Duplicate of #5374 (which now has a more obvious title 😅 )\r\nThanks for the details, it seems pretty clear the problem is somewhere in the bounding box calculations.",
    "created_at": "2021-01-11T14:11:54Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5391#issuecomment-757976351",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5391",
    "updated_at": "2021-01-11T14:11:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Curious whether the MathJax power users out there know if v3 avoids the function constructors that v2 has, as noticed by @archmoj in https://github.com/plotly/plotly.js/pull/5383#issuecomment-756146838 - we're trying to improve our compatibility with strict CSP and ATM that means we need to consider MathJax \"not our problem,\" but if the new one avoids that issue we may have more motivation to upgrade.\r\n\r\nOf course if anyone else is interested to make a PR upgrading MathJax in plotly.js we'd be happy to help whether or not it improves our CSP compliance :) In principle it would be nice if we can support both v2 and v3 so as to not require these upgrades to be synchronized, and given that MathJax calls in plotly.js are grouped in just a couple locations (essentially just [fonts/mathjax_config.js](https://github.com/plotly/plotly.js/blob/master/src/fonts/mathjax_config.js) and [lib/svg_text_utils.js](https://github.com/plotly/plotly.js/blob/master/src/lib/svg_text_utils.js)) that shouldn't be too hard.",
    "created_at": "2021-01-07T14:58:35Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4563#issuecomment-756167466",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4563",
    "updated_at": "2021-01-07T14:58:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I don't understand how `image-size` is (most of the time) avoiding looking for `fs` either. `probe-image-size` as discussed in #5243 certainly seems like a better option for us - it's explicitly meant for the browser, and we might even be able to do better on size by just bringing in the sync piece:\r\n```js\r\nvar sizeOf = require('probe-image-size/sync');\r\n```",
    "created_at": "2021-01-07T03:19:13Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5377#issuecomment-755856604",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5377",
    "updated_at": "2021-01-07T03:19:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Can you regenerate `dist/README.md` and post the diff here? Just curious how much size this adds to each bundle, as minified and gzipped.",
    "created_at": "2021-01-06T20:55:09Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5379#issuecomment-755681296",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5379",
    "updated_at": "2021-01-06T20:55:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "And we can include a note:\r\n\r\n> 1.49.5 inadvertently dropped IE9/10 support by upgrading browserify, but if you bundle plotly.js yourself using the previous version or a different bundler you may still be able to support these browsers until plotly.js v2.0 explicitly drops IE9/10 support.",
    "created_at": "2021-01-06T15:14:18Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5373#issuecomment-755357643",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5373",
    "updated_at": "2021-01-06T15:14:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Fair enough. How about we split this PR in two: one we merge right now that just documents what already happened but makes no code changes; and a second that we merge in the upcoming v2 that removes IE9/10 cruft.",
    "created_at": "2021-01-06T15:08:52Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5373#issuecomment-755354182",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5373",
    "updated_at": "2021-01-06T15:08:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @MRScheid - confirmed with FF84 on my Mac, at for example https://plotly.github.io/LaTeX-basics/\r\n\r\nIt looks like the LaTeX renders, but has some sort of bounding box error.",
    "created_at": "2021-01-06T02:51:20Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5374#issuecomment-755042392",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5374",
    "updated_at": "2021-01-06T02:51:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> so we shouldn't unwind these browser-specific bits of code if possible.\r\n\r\nI disagree - I think it's easier to simply say \"we don't support IE<11 anymore,\" otherwise we're going to keep carrying around arcane practices nobody can remember the rationale for... which of course we have plenty of but each instance of this has adds nonzero ongoing cost. And I really don't want to deal with questions like \"OK I know you SAID you don't support these browsers but I found this crazy workaround to still build for them and you broke it with something in version 2.13.0.\"",
    "created_at": "2021-01-05T22:18:37Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5373#issuecomment-754936627",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5373",
    "updated_at": "2021-01-05T22:18:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "After this PR are there any uses of `failTest` left, or can we delete it entirely?",
    "created_at": "2021-01-05T16:23:54Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5372#issuecomment-754742109",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5372",
    "updated_at": "2021-01-05T16:23:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "True, `done.fail` is more explicit. Also possibly `.then(done, done)` would look like a pass if we (or any dep) ever throw a non-error, ie `throw 'whoops!'` rather than `throw new Error('whoops!')`\r\n\r\nSo great, let's keep `done.fail`.\r\n\r\nThat `Plotly.animate` test is certainly confusing in any case, and it makes me wonder whether we're really rejecting the way we want to. Looks like it's this one:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/444be40d01f37be5e18556fd43daefa2b1ef424a/src/plot_api/plot_api.js#L3471-L3474\r\n\r\nMost people seem to [recommend rejecting with an `Error`](https://masteringjs.io/tutorials/fundamentals/promise-reject) which seems like it would be more useful, but if we did that we'd need to change the test to something like:\r\n```js\r\nPlotly.animate(gd, ['foobar'], animOpts).then(done.fail, () => { done() });\r\n```\r\n\r\nAnyway not worth spending time on now, `Plotly.animate` is no longer something we're recommending people use anymore. But if we have a future need to reject a promise I think we should do so with an `Error`.",
    "created_at": "2021-01-05T16:20:32Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5372#issuecomment-754740040",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5372",
    "updated_at": "2021-01-05T16:20:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Have you verified that `done.fail` gives similar feedback to what we got from `failTest` when an exception is thrown? And is there a reason that pattern is preferable to `.then(done, done)` that the [docs imply](https://jasmine.github.io/tutorials/async#failing-with-callbacks) should do the same thing in Jasmine 3?",
    "created_at": "2021-01-05T02:15:15Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5372#issuecomment-754340576",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5372",
    "updated_at": "2021-01-05T02:15:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I'm starting to think it would be OK to just drop the second part of this test - again, the only concern is if someone passes in an object created with `new f()` or `new MyClass()`, which isn't possible for anyone coming in through JSON. It would be possible in Dash using a clientside callback, but you'd really have to work hard to do that! So for the most part this affects JS-only users - whether using plotly.js directly or via some JS framework. And at that point we're trading off a very hypothetical case where we treat an invalid input as valid for several known problems that require tedious debugging and a hacky workaround.\r\n\r\nI did a little digging, and I _did_ find one test that pretty reliably distinguishes a plain object from a more complex constructed object: look for a property that is usually inherited from `Object`, for example:\r\n```js\r\nObject.getPrototypeOf(obj).hasOwnProperty('hasOwnProperty')\r\n```\r\nWhich you can trick by overriding `hasOwnProperty` in your class, but perhaps at that point you're on your own 😏 \r\n\r\nAnyway either removing the second condition or replacing it with something like the test above could be the way to go.",
    "created_at": "2021-01-04T23:56:54Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5151#issuecomment-754297169",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5151",
    "updated_at": "2021-01-04T23:56:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "We've discussed this - and the currently available workaround of creating a `window.process = {versions: 1};` in the environment where this will be executed - in #5151. And in #1405 (the same issue from a few years back) someone else mentioned the iframe case. Closing this one, but I'll add a comment to #5151 as I'm starting to think my earlier stance is a bit overly conservative.",
    "created_at": "2021-01-04T23:08:54Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5367#issuecomment-754276952",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5367",
    "updated_at": "2021-01-04T23:08:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Closing as #5151 is a more up-to-date duplicate",
    "created_at": "2021-01-04T23:01:42Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1405#issuecomment-754274337",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1405",
    "updated_at": "2021-01-04T23:01:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "That's right, by default the legend will only show if more than one trace would appear in it, because most of the time people don't want a legend for only one trace, they'll use the chart or y axis title for this instead. But you can override this default with `layout: {showlegend: true}`",
    "created_at": "2020-12-30T22:17:47Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5364#issuecomment-752775183",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5364",
    "updated_at": "2020-12-30T22:17:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Confirmed, thanks for the very simple, clear report @rtwfroody!\r\nA couple of observations while playing with this: The problem appears when a text entry is `null` or an empty string `\"\"` and then the point at the same index in the same trace is changed to have non-empty text. If instead you set the blank text entries to whitespace `\" \"` there's no problem. Also if the marker wasn't present in the first case (ie a `null` in the `y` array, or the second trace has more points than the first) there's no problem.\r\n\r\nSo as a workaround you may be able to use a whitespace string instead of `null` or completely blank, but this is definitely a bug we need to fix.",
    "created_at": "2020-12-28T15:59:33Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5360#issuecomment-751763121",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5360",
    "updated_at": "2020-12-28T15:59:33Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I'm sorry, I still can't tell what functionality you're referring to with this description. Is this modal something that plotly.js created? Or is it something you made in some other way inside the handler for a plotly.js event? We'll need some sort of reproducible code example - doesn't need to be your code, in fact it's better if it's pared down to the bare minimum required to demonstrate your issue.",
    "created_at": "2020-12-23T01:40:58Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5352#issuecomment-749872183",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5352",
    "updated_at": "2020-12-23T01:40:58Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "It's fine to implement this only in a subset of situations for now, as long as we won't have to change the existing behavior if and when we extend it to more situations, and as long as we document the limitations.",
    "created_at": "2020-12-18T22:25:24Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5354#issuecomment-748349117",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5354",
    "updated_at": "2020-12-18T22:25:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This seems awfully similar to `zsmooth='fast'` for heatmaps:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/d45eef58214379010894e1515f0240e2c24765cc/src/traces/heatmap/attributes.js#L80-L89\r\n\r\nwould it be too awkward to use the same attribute name & values?\r\n\r\nAlso, what happens if `fastImage` is `false`? In that case it looks like we're filling rectangles that are larger than 1px with constant color. Doing manual bilinear interpolation in that case is what `zsmooth='best'` does for heatmaps.",
    "created_at": "2020-12-18T16:53:30Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5354#issuecomment-748201926",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5354",
    "updated_at": "2020-12-18T16:53:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @bhosaleanagha - but I'm not quite sure what modal you're referring to. Can you post a screenshot and relevant code example? (ideally online like https://codepen.io/fkE3/pen/eYZOoPg?editors=0010)",
    "created_at": "2020-12-18T15:59:51Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5352#issuecomment-748173715",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5352",
    "updated_at": "2020-12-18T15:59:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Confirmed - thanks for the clear report @bzh2610 🎉 ",
    "created_at": "2020-12-15T14:16:18Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5344#issuecomment-745312276",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5344",
    "updated_at": "2020-12-15T14:16:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Whew, there's a lot here! I don't mind us updating these tests to support the possibility that these operations may become async in the future, it *is* the usage we want to promote for our users. But I don't see it as particularly high priority, and for the vast majority of these tests if the operation _did_ become async the test would simply fail and could be addressed at that time.\r\n\r\nThe cases I'd be worried about are when we're testing that something _didn't_ happen, like:\r\n```js\r\nPlotly.newPlot(gd, someFigureThatPreviouslyHadABug);\r\nexpect(Loggers.error).not.toHaveBeenCalled();\r\n```\r\nIn that case, if the bug were to return but the plot became async, the test would still pass because the error would be thrown after we checked. But as long as we're also testing that something _did_ change as a result of the operation, the test will fail as soon as the operation becomes async and we'll be alerted to fix it then.",
    "created_at": "2020-12-12T00:26:19Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5340#issuecomment-743504842",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5340",
    "updated_at": "2020-12-12T00:26:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ah yeah, I've noticed that before - it's toggling between a range that includes the extra for the inside ticks and a range that doesn't. Thanks for noticing and recording this.",
    "created_at": "2020-12-10T21:21:29Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5338#issuecomment-742807174",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5338",
    "updated_at": "2020-12-10T21:21:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "That's as intended - the label has precision of 1 month so the offset is 1/2 month. dtick is 3 months, so the offset is 1/6 of the tick spacing.",
    "created_at": "2020-12-10T21:18:10Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5337#issuecomment-742805371",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5337",
    "updated_at": "2020-12-10T21:18:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks good, can we add a test for this?",
    "created_at": "2020-12-10T20:28:32Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5336#issuecomment-742778758",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5336",
    "updated_at": "2020-12-10T20:28:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@sandro-sikic I'm afraid I also don't see any errors when panning any of the codepens you've posted above, using the latest Chrome, FF, and Safari on Mac. What browser and OS version do you have?",
    "created_at": "2020-12-09T16:14:16Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5319#issuecomment-741877665",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5319",
    "updated_at": "2020-12-09T16:14:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Good find!\r\n\r\nI don't think we're getting the constraints quite right though - and unfortunately I'm worried that we may need to bake the label adjustment in at a deeper level, as constrained autorange now happens inside `concatExtremes`:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/0dd54673a89e26fdb758e5c11c5cefc4cc25fca8/src/plots/cartesian/autorange.js#L349\r\n\r\nThat's probably only part of the solution though, as that's just for `matches` constraints. `scaleanchor` constraints are handled in `constraints.enforce`:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/0dd54673a89e26fdb758e5c11c5cefc4cc25fca8/src/plots/cartesian/constraints.js#L547-L549\r\n\r\n`axes_chain_scaleanchor_matches2_inside-ticklabels.png` perhaps shows the issue most clearly: one of the features of `axes_chain_scaleanchor_matches2.png` that's really useful is comparing successive rows, green vs red, and black vs blue. The left-most red & green subplots should be identical, as should the right-most blue and black, and in both cases the domain-constrained subplots should still fill the available space (dotted rectangle), because within the subplot there's only a `matches` constraint, which cannot reduce a domain. Yet both the left-most green and right-most black in the inside version have constrained domains, and in the green one this even clips one of the data points.\r\n\r\nFrom one subplot to the next there's a `scaleanchor` constraint, so subsequent green subplots (and earlier black subplots) should end up with smaller domains, which we do see in the new one. But in `axes_chain_scaleanchor_matches2.png` the data points in each green subplot are positioned exactly where the red data points are, and same blue vs black, which I believe should still be the case for the inside case, which mostly looks borne out in the inside case, but not for the first green subplot.\r\n\r\n`ticklabelposition3.png` and `axes_chain_scaleanchor_matches_inside-ticklabels.png` have their x labels overlapping the image / heatmaps a bit, which I suspect is a manifestation of the same issue.",
    "created_at": "2020-12-08T21:13:53Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5329#issuecomment-741041727",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5329",
    "updated_at": "2020-12-08T21:13:53Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This flips the date upside down - so whatever is normally the second line is the first line in these cases where the labels are bottom-aligned. I don't think that's what we want - we want the order to remain as it was, just move the single-line labels up one line worth.\r\n\r\nPerhaps we can do that by, instead of deleting the second line, replacing it (just in these bottom-aligned cases) with a blank line? The logic for whether or not to include the second line is here:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/4e001962d9b9d98fc7ff1d62df105c6a2e45d52a/src/plots/cartesian/axes.js#L1448-L1451",
    "created_at": "2020-12-08T02:52:48Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5326#issuecomment-740327922",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5326",
    "updated_at": "2020-12-08T02:52:48Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj this looks great for including padding in the cases it was previously ignored. Do you want to sort out why the line case is getting such huge padding in the y direction in this PR, or do that in a separate PR?",
    "created_at": "2020-12-07T18:10:04Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5325#issuecomment-740087154",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5325",
    "updated_at": "2020-12-07T18:10:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Perhaps the cleanest way to do this would be with a new modebar icon and a new `dragmode`, that when chosen disables all zooming / panning / selecting and removes the `user-select: none` CSS - effectively making the plot temporarily static so you can select text, then when you're done you can go back to one of the other dragmodes.",
    "created_at": "2020-12-07T16:55:24Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5320#issuecomment-740044539",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5320",
    "updated_at": "2020-12-07T16:55:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Only on the x-axis when `side` is bottom?\r\n\r\nGood point - same thing happens when `ticklabelposition` is the default `outside` and `side` is `'top'`. I'd consider it a bug in both cases.\r\n![Screen Shot 2020-12-07 at 11 21 21 AM](https://user-images.githubusercontent.com/2678795/101376252-5a7b5900-387e-11eb-8bed-b307d81196e1.png)\r\n",
    "created_at": "2020-12-07T16:21:35Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5321#issuecomment-740022620",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5321",
    "updated_at": "2020-12-07T16:21:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj @jonmmease this is looking good! I made some comments, but the overall approach I think is sound. I see `arrayOk` mentioned above, we definitely want to support that - I suspect that will dredge up more cases where we're coercing from a sub-container. Also need to make sure this new syntax passes validation.",
    "created_at": "2020-12-04T05:31:28Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5230#issuecomment-738574699",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5230",
    "updated_at": "2020-12-04T05:31:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yes, we've also now seen this in a react environment. We still need to figure out how to reproduce it with no framework (ie a codepen) in order to pin down what's causing it, so if anyone has any insights there please share!",
    "created_at": "2020-12-03T18:23:08Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4459#issuecomment-738194235",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4459",
    "updated_at": "2020-12-03T18:23:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "A few more observations: in that stackblitz the \"common\" hover label (the black one on the x axis) is broken - just shows an empty box that looks like an arrow, rather than the category name (`giraffes`) it's supposed to have:\r\n\r\n<img width=\"149\" alt=\"Screen Shot 2020-12-03 at 11 49 15 AM\" src=\"https://user-images.githubusercontent.com/2678795/101061007-090d5a00-355e-11eb-8040-1c9dc52e6775.png\">\r\n\r\nAnd in fact if you switch to \"closest\" hovermode, this label is missing from the main hover label (should say `(giraffes, 20)`:\r\n\r\n<img width=\"171\" alt=\"Screen Shot 2020-12-03 at 11 54 03 AM\" src=\"https://user-images.githubusercontent.com/2678795/101061289-5689c700-355e-11eb-9301-3a48773549ce.png\">\r\n\r\nAlso you don't need to resize the window, even double-clicking the graph (invoking a redraw by autoranging the axes) will makes the labels disappear. Digging into the graph structure a bit, `$0._fullLayout.xaxis._categories` is an empty array, even at first draw when the labels do appear.\r\n\r\nThis is a really puzzling circumstance. If we can't reproduce it in a codepen, I'd look for something funny going on in the `angular-plotly.js` wrapper, though I have no idea what that might be.",
    "created_at": "2020-12-03T17:15:23Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4459#issuecomment-738149785",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4459",
    "updated_at": "2020-12-03T17:15:23Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Good call @nicolaskruchten - This is indeed resolved by #5287 🎉 I can reproduce the issue on the latest release (eg at https://rreusser.github.io/plotly-mock-viewer/) but if I build off master the autorange is done correctly.\r\n\r\n@kricka91 we expect make a new release this week including this fix.",
    "created_at": "2020-11-30T22:08:33Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5095#issuecomment-736085658",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5095",
    "updated_at": "2020-11-30T22:08:33Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looking great! Nice job with the extra autorange, and with removing labels that extend outside the plot. A few things I notice playing with the demo:\r\n- If I zoom/pan the y axis and change the label length while the x axis is still autoranged, I would have expected the x axis range to recalculate to fit the new labels but it doesn't. Somehow if I double-click TWICE on the x axis at that point it will recalculate, but I'd have wanted it to happen automatically. Here for example is starting with short labels (eg 8k) and making them longer by zooming (8000):\r\n<img width=\"308\" alt=\"Screen Shot 2020-11-22 at 8 36 56 AM\" src=\"https://user-images.githubusercontent.com/2678795/99905356-53f5ba80-2c9e-11eb-921d-f4e36029e1a9.png\">\r\n\r\n- Sometimes as I'm interacting with the plot, the x axis _data_ will appear to lose the extra range for the y labels, but the x axis _ticks and gridlines_ will be correct. I can't detect a clear pattern for when this happens, and sometimes I see just a small shift, not all the way to where the data would have been without the inside labels. This looks similar to a bug I encountered in #5287 and fixed with an extra `ax.setScale` at the [right place in the process](https://github.com/plotly/plotly.js/pull/5287/files#diff-091de2c0f84c090af5b656d3aeeca4acb530b82e5f99afb367be575da138455eR26)\r\n<img width=\"368\" alt=\"Screen Shot 2020-11-22 at 8 34 11 AM\" src=\"https://user-images.githubusercontent.com/2678795/99905504-29583180-2c9f-11eb-8291-bb1f19bf9fa3.png\">\r\n",
    "created_at": "2020-11-22T14:01:50Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5275#issuecomment-731752977",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5275",
    "updated_at": "2020-11-22T14:01:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Superseded by #5287 ",
    "created_at": "2020-11-20T22:42:43Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5196#issuecomment-731444531",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5196",
    "updated_at": "2020-11-20T22:42:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> How would we handle situations where we have two adjacent bars A and B, with scatter points Q (close to left edge of A) and R (close to left edge of B) and the cursor is close to the right edge of A... In that case we'd get a hoverlabel with A and R, which seems wrong. It almost seems like we need to do some cross-trace work here?\r\n\r\nThis will be a good test case. But hover already uses a multi-step process, that I think will do the right thing here: first we figure out which point is the \"best\", then we look at the other traces and see which ones have a compatible point with the \"best\" one. One weird thing with this case is if you set a large enough hover distance, scatter point R will win even if the cursor is over the right edge of bar A, which will then lead to bar B getting included in the hover label. But in that case I think that's basically what you asked for with the large hover distance, so it's OK, just kind of weird.\r\n\r\n> If in effect we can set the hoverdistance to be half the minimum inter-point distance, we're essentially saying \"this trace always has an active hoverlabel\" right?\r\n\r\nTo be clear I don't think \"auto\" should be the default for this setting. But yes, assuming the trace has a consistent point spacing, no null points, spans the full range that other traces on the plot do, and you're in compare / unified hover mode (not closest), then it will always have an active hover label.",
    "created_at": "2020-11-20T14:48:28Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5292#issuecomment-731213133",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5292",
    "updated_at": "2020-11-20T14:48:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Offhand it seems to me we need:\r\n\r\n(1) A way for the scatter trace to always win the hover label when there is a scatter trace. This is tricky because we probably want the bar to still produce a hover label when there’s no scatter trace at all - ie in years other than 2017 in their example. But we probably also want to NOT revert to hovering on the bar when you’ve zoomed in and your pointer is halfway between two scatter points. So I’m thinking what we need is some sort of a per-trace per-axis data-referenced hoverdistance - ie rather than a pixel distance (which isn't even really pixels but it sort of approximates pixels) we set a data distance - in this case two months, in milliseconds - that the cursor can be offset from the point and still trigger the label. This could also be useful even without multiple traces, to prevent gaps in hovering as the mouse moves across the data. And as an extension, we could imagine an \"auto\" mode where this value gets set to half the minimum delta between points (`Lib.distinctVals().minDiff`)\r\n\r\n(2) Let the bar participate in unified hover whenever the hover label is anchored to any point within the bar’s period. I suspect we can treat the current behavior as a bug rather than a feature you need to enable. We’d have to look into whether there are any cases this becomes problematic but I don’t see any offhand.\r\n\r\n(3) Why does the spike line stay anchored to the bar and not the point when the points are actually on top of the bar, even when only the point is listed in the label? That seems also like simply a bug. If you have a hover label and a spikeline, the spikeline should be anchored to one of the points that generated the label. This may get a little bit complicated when we fix (2), as we'll need to distinguish between \"points that generated the label\" and \"other points that are close enough to include.\" For example if there are multiple scatter traces with points of matching x values, all of them should be considered equivalent for this purpose, and you anchor the spikeline to the closest one in y - doesn't matter when there's only a full-height vertical spikeline but if it ends at the point or if there's also a horizontal spikeline it matters which point you're anchored to. But the bar, which has a different x value but is (will be 😏 ) still included in the hover label because its period spans the x value you're hovering on, should not be eligible to become the spikeline anchor.\r\n",
    "created_at": "2020-11-20T14:10:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5292#issuecomment-731191929",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5292",
    "updated_at": "2020-11-20T14:10:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @alexhartstone \r\n\r\nWhat about this as a strategy: the thing we want to avoid is walking the tree and recreating the transformation matrix on every hover. But at the beginning of a hover event we're already making `getBoundingClientRect` calls so another such call should be cheap. So how about we not even calculate the transformation during the initial draw, but when we're ready to ask for the transformation, check whether we have one already and whether the bounding box of the entire `gd` is the same as it was when that was calculated - and recalculate the transformation if either of those is not the case.\r\n\r\nSeem reasonable? This way there's nothing active the user needs to do, it'll just work. If the graph is zooming during the hover event the hover won't catch up to this until the mouse moves, but that may actually be for the best.\r\n\r\n@alexhartstone would you be interested in trying this out and kicking off another PR?",
    "created_at": "2020-11-19T21:30:16Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5291#issuecomment-730648561",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5291",
    "updated_at": "2020-11-19T21:30:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@aykutkilic that's a good point - I think we're going to leave #5193 as it is just addressing `transform`, since it's tricky to handle both attributes within the architecture of that PR. But there is another approach of determining the scaling empirically via `getBoundingClientRect` on test elements in the corners of the graph that should handle `zoom` just as well as `transform`. If anyone is interested in switching to that (and that \"anyone\" may be us eventually, but not right now) we'd certainly be open to it as a follow-up PR.",
    "created_at": "2020-11-18T19:09:49Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5288#issuecomment-729893345",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5288",
    "updated_at": "2020-11-18T19:09:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj FYI I also see this bug in Safari 14, on Mac OS 11.0.1 Big Sur. No messages show up in the console.",
    "created_at": "2020-11-17T19:22:53Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5158#issuecomment-729147953",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5158",
    "updated_at": "2020-11-17T19:22:53Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "`zoom` isn't currently included in the PR fixing this, though it could be - see https://github.com/plotly/plotly.js/pull/5193#issuecomment-728998108",
    "created_at": "2020-11-17T15:22:22Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5288#issuecomment-728999932",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5288",
    "updated_at": "2020-11-17T15:22:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> A similar issue is encountered if the css property zoom is used.\r\n\r\n`zoom` could certainly be included, though it [doesn't seem to be fully supported by browsers](https://developer.mozilla.org/en-US/docs/Web/CSS/zoom) so we'll need to ensure we're reacting to what the browser is _actually_ rendering, not just the attribute the user provided. And it may take a bit of experimentation to figure out exactly how this combines with `transform` (whether on the same element or another in the hierarchy).",
    "created_at": "2020-11-17T15:19:40Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5193#issuecomment-728998108",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5193",
    "updated_at": "2020-11-17T15:19:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@nitramwin can you open a new issue with a codepen showing the problem you've encountered?",
    "created_at": "2020-11-16T15:44:27Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1289#issuecomment-728144232",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1289",
    "updated_at": "2020-11-16T15:44:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for the report @COLLINETTEBastien - to be clear, here's a picture of the misalignment in your codepen:\r\n<img width=\"116\" alt=\"Screen Shot 2020-11-16 at 9 11 46 AM\" src=\"https://user-images.githubusercontent.com/2678795/99262370-e48a5180-27eb-11eb-93ea-0daca3281f67.png\">\r\nIt looks like \"786\" and \"Primary\" are aligned correctly, but \"783\" and \"Tertiary\" are too high and \"789\" and \"Secondary\" are too low.\r\n\r\nThis is happening when the overall plot height is low enough that we can't fit the hover labels either completely above or completely below the objects (bars) being hovered on, so we display the hover labels centered on the bars. That's why we don't see this issue for the top bars (there's enough room for the hover labels below these bars) or the bottom bars (there's enough room for the hover labels above these bars).",
    "created_at": "2020-11-16T14:18:26Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5281#issuecomment-728090650",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5281",
    "updated_at": "2020-11-16T14:18:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I'm glad plotly.js has helped you!\r\n\r\nThese differences are intentional - line charts get no padding in the x direction, whereas with markers you get padding in both directions. Exactly why x and y are treated differently is a bit subtle, but I'd say the main thing is different expectations around independent vs dependent variables. Also with markers we need to leave extra room in both directions for the markers themselves, in addition to the padding.\r\n\r\nThere is however a longstanding open issue to provide more control over this behavior #1876. It has a lot of pieces and for whatever reason none of them have bubbled up to the top of our list, but we'd happily accept a PR or sponsorship to make them a reality.",
    "created_at": "2020-11-16T14:06:32Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5280#issuecomment-728075423",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5280",
    "updated_at": "2020-11-16T14:06:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@ciuliene OK great, glad that worked! There's still a bug here though, so I'll leave the issue open until we address it.",
    "created_at": "2020-11-15T02:18:37Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5274#issuecomment-727296798",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5274",
    "updated_at": "2020-11-15T02:18:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "It would be a bit unfortunate if we needed to require users to explicitly specify these, just to make the downloaded image match what's already in their graph; I was hoping we'd be able to just read out the`@font-face` rules that were active in the document, and add them automatically. And it seems like we can do that for locally-defined rules (by hunting through `document.styleSheets`) but it's forbidden for imported stylesheets... we can see the URLs and could just `@import` all of them?\r\n\r\nThat sounds like a pain though, and might cause problems in some contexts, so yeah perhaps in the short term we could just accept an option to specify these fonts explicitly.",
    "created_at": "2020-11-13T23:20:28Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4885#issuecomment-727081379",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4885",
    "updated_at": "2020-11-13T23:20:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "You can use a category axis. Might just work exactly as you have it but with `yaxis.type='category'`, but then you don't need to encode the values as numbers, any unique values will do. Here I just used strings to get a category axis automatically:\r\n```js\r\nPlotly.newPlot(gd,\r\n    [{y: ['a','b']},{y:['c','d']},{y:['e','f']}],\r\n    {yaxis:{tickvals:['a','b','c','d','e','f'],ticktext:['OFF','ON     ','OFF','ON     ','OFF','ON     ']}}\r\n)\r\n```\r\n![Screen Shot 2020-11-13 at 5 11 18 PM](https://user-images.githubusercontent.com/2678795/99126080-73705180-25d3-11eb-9396-ad553fb43bd9.png)\r\n\r\nThat said @archmoj I think there's a bug here when I try to include `categoryorder`, which is necessary to ensure the Off values always come before the On values: Then when I hide a trace via the legend, its categories are still there:\r\n```js\r\nPlotly.newPlot(gd,\r\n    [{y: ['b','a']},{y:['c','d'], visible: 'legendonly'},{y:['e','f']}],\r\n    {yaxis:{\r\n        tickvals:['a','b','c','d','e','f'],\r\n        ticktext:['OFF','ON     ','OFF','ON     ','OFF','ON     '],\r\n        categoryorder: 'category ascending'\r\n    }}\r\n)\r\n```\r\n![Screen Shot 2020-11-13 at 5 20 08 PM](https://user-images.githubusercontent.com/2678795/99126601-80417500-25d4-11eb-82e2-24c14938cbe4.png)\r\nAnd worse, if I set a trace to `visible: false` instead of `'legendonly'` an error is thrown. Doesn't seem to be directly related to #5267 / #5268 as I see the problem both before and after that fix...",
    "created_at": "2020-11-13T22:24:25Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5274#issuecomment-727065507",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5274",
    "updated_at": "2020-11-13T22:26:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "That new codepen still fails for me (Chrome 86 or any other browser, Mac OS 11.0.1)",
    "created_at": "2020-11-13T19:36:33Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4885#issuecomment-726992841",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4885",
    "updated_at": "2020-11-13T19:36:33Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Feels like there are at least three layers we might want the grid to be in:\r\n- behind all data (where it is today)\r\n- in front of all data\r\n- above heatmaps and contour maps, but below scatter. Actually maybe also above bars too, so you could do the \"minimal ink\" gridlines matching the background and [only visible on the bars](https://www.visualisingdata.com/2019/07/five-ways-to-present-bar-charts/) but still put scatter points on top without the gridlines chopping them up.\r\n\r\n![invisible gridlines](https://visualisingdata.com/wp-content/uploads/2019/07/Invisible.png)",
    "created_at": "2020-11-11T22:25:54Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5265#issuecomment-725695617",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5265",
    "updated_at": "2020-11-11T22:25:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I don't see that as a conflict - labels should by default not overlap the data, so when those are inside the padding should increase enough for the labels and any space between the labels and the axis (ie where the ticks are). But if you've asked for inside ticks without inside labels, there are plenty of cases where the ticks overlapping the data is what you want - heatmaps, lines going to the edge, etc.",
    "created_at": "2020-11-11T20:07:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5264#issuecomment-725634616",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5264",
    "updated_at": "2020-11-11T20:07:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I don't think this should be the default behavior. When we give folks the ability to customize the padding they can do it manually. cc #1876 ",
    "created_at": "2020-11-11T19:31:03Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5264#issuecomment-725617370",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5264",
    "updated_at": "2020-11-11T19:31:03Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I don't consider this a bug. Yes in extreme cases like this the overflowing tick looks odd, but in more realistic cases you want the tick to either be entirely visible (when the label is visible) or entirely gone along with the label. A partially-visible tick would look wrong.",
    "created_at": "2020-11-11T19:28:51Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5263#issuecomment-725616349",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5263",
    "updated_at": "2020-11-11T19:28:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I'm guessing the variable fillcolor would be like https://stackoverflow.com/a/59950664/9188800\r\n![Q6kC7gQ](https://user-images.githubusercontent.com/2678795/98740173-a2d75200-2378-11eb-9947-dd8d683320d9.png)\r\n\r\nThe line case is covered in https://github.com/plotly/plotly.js/issues/581 - short answer: big pain in SVG, more manageable in `scattergl`. I'd say the same goes for variable `fillcolor`\r\n\r\n@nicolaskruchten I guess it could either be 1 element shorter or the same length, depending on exactly what you want the color to mean, and whether you want a smooth variation or a single color per segment. There may be use cases for both, and neither is particularly easy in SVG.\r\n",
    "created_at": "2020-11-10T22:25:32Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5259#issuecomment-725004513",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5259",
    "updated_at": "2020-11-10T22:25:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@inselbuch that should just be `hoverinfo: 'none'` https://plotly.com/javascript/reference/scatter/#scatter-hoverinfo",
    "created_at": "2020-11-06T15:13:37Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1847#issuecomment-723132672",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1847",
    "updated_at": "2020-11-06T15:13:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I'd have to check exactly, but I believe it's at least all 4-digit integers, possibly also 2-digit integers.",
    "created_at": "2020-11-03T19:16:14Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5240#issuecomment-721324716",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5240",
    "updated_at": "2020-11-03T19:16:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj pointed out just now that while we're at it here we could stop treating the number `2000` as a date for autotype purposes. Basically: as far as autotype is considered, in strict mode dates must be strings, numbers must be numbers, and categories must not be numbers.\r\n\r\nI like this idea, and I think `'strict'` is still a good value, but I think then we should change `'accept strings'` to `'convert types'` or `'cast types'`.",
    "created_at": "2020-11-03T17:05:24Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5240#issuecomment-721258357",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5240",
    "updated_at": "2020-11-03T17:05:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yes, we're watching, just haven't had a chance to look into this issue yet. Sounds like we may need to copy some of this internal state from the old context when there is one. The challenging part will be figuring out what tests to write to ensure this behaves correctly in all relevant cases, but @nantunes if you'd like to speed this along by opening a PR we can certainly help with that part!",
    "created_at": "2020-11-03T14:03:58Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4856#issuecomment-721135176",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4856",
    "updated_at": "2020-11-03T14:03:58Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Here's a fun one: In Chrome, panning on a `geo` subplot works correctly, but Firefox gets the scaling wrong, like in 2D cartesian. (edit: Safari matches FF)",
    "created_at": "2020-11-02T20:38:15Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5193#issuecomment-720711101",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5193",
    "updated_at": "2020-11-02T20:48:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj thanks for the codepen. I added a few more subplot types: https://codepen.io/alexcjohnson/pen/JjKvQWK?editors=0010\r\n\r\nHover looks good in all of them that I've tried so far! :tada:\r\n\r\nBut there are still some issues with drag interactions:\r\n- 2D cartesian panning is incorrectly scaled - ie with that 50% scaling the plot moves half as much as the mouse moves. Applies to 2D panning on the plot itself as well as single axis panning by dragging the middle of the axis area and single-axis or corner zoom by dragging the ends of the axis area or the corners of the plot.\r\n- Also clicking the end of an axis in 2D cartesian to type a new number: the text entry box shows up in the wrong place.\r\n- Ternary & polar: all the zoom and pan interactions are misaligned and mis-scaled. In polar you can also grab the outer ring to rotate the whole graph, or grab the end of the radial axis to rotate where it's displayed, and for these the center point you're rotating about is incorrect.",
    "created_at": "2020-11-02T20:16:53Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5193#issuecomment-720700701",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5193",
    "updated_at": "2020-11-02T20:16:53Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for the demo @archmoj \r\n\r\nAFAICT this generally works OK for `constrain: 'domain'` if you specify every possible constraint you can - which is generally quite overconstrained so it's clearly going to be easy to specify impossible constraints. It's also clearly broken for `constrain: 'range'` and strange things happen if you try to remove some of the redundant constraints.\r\n\r\n`fixedrange` currently seems to have no effect on the ranges we determine at render time, but if users zoom or pan afterward the constraints are sometimes violated as the `fixedrange` axis does not change its range, and sometimes this axis doesn't change while the mouse is down but it does after the mouse is released. The constraint violation doesn't bother me except that if you tried to take the resulting figure and recreate the plot in a new container it would want to change *something* to satisfy the constraint.\r\n\r\nHaving played with this a bit and tried to figure out as a user how I'd construct a plot like this, I really think we should keep the original condition that setting `matches` precludes `scaleanchor` and `scaleratio`, ie there's only one constraint defined per axis, and just allow mixed `matches` and `scaleanchor` constraints. Then to make a plot with many matching aspect-ratio-constrained subplots, you'd set a single `scaleanchor` constraint (eg `yaxis.scaleanchor = 'x'`) and many `matches` constraints (`xaxisN.matches = 'x'`, `yaxisN.matches = 'y'`). For this to mean that the aspect ratios of all of these subplots are identical, the user needs to ensure that the `matches` axes all have the same size domain; But to me that feels like it would be intuitive to users (and mostly hidden by px anyway 😄 )\r\n\r\nOne important observation from my testing just now: if you have a domain-constrained axis, and others match it, we need to set them all to have the same fractional domain reduction - ie `matches` implies not just the same range, but also inheriting the `constrain` attribute (I suppose `constraintoward` could be different though) and during rendering reducing the range of one of these axes reduces the domain of all of them.",
    "created_at": "2020-10-29T21:06:33Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5196#issuecomment-719022214",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5196",
    "updated_at": "2020-10-29T21:06:33Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj is there a codepen around where I can test this out? It looks like this approach will not support rotation, though I'm not sure there's any way around that given our heavy use of `getBoundingClientRect`. But I'm wondering if we need to apply this to all the uses of `getBoundingClientRect`...",
    "created_at": "2020-10-28T23:10:41Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5193#issuecomment-718259965",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5193",
    "updated_at": "2020-10-28T23:10:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "related: #1918",
    "created_at": "2020-10-28T15:49:46Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5238#issuecomment-718026127",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5238",
    "updated_at": "2020-10-28T15:49:46Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@handeer note the issue closed when the PR that fixed it was merged, but this fix hasn't yet been released in a published version.",
    "created_at": "2020-10-27T21:04:16Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5222#issuecomment-717538301",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5222",
    "updated_at": "2020-10-27T21:04:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj I think everything looks fine except the KDE hover label and effect. Here's what hover looks like on this plot with no range slider:\r\n<img width=\"288\" alt=\"Screen Shot 2020-10-26 at 5 35 16 PM\" src=\"https://user-images.githubusercontent.com/2678795/97231370-c06dbe80-17b1-11eb-984b-e15d72349d45.png\">\r\nBut even without zooming, when you include a range slider the mouse-following crossbar disappears and the KDE label jumps to the middle:\r\n<img width=\"253\" alt=\"Screen Shot 2020-10-26 at 5 36 00 PM\" src=\"https://user-images.githubusercontent.com/2678795/97231520-f14df380-17b1-11eb-98fa-e6d98bc0ce14.png\">\r\nAnd then when you zoom in, it looks like the KDE point aligns itself with the middle of the same violin on the range slider, rather than the box in the main plot. The effect is particularly pronounced if you zoom toward one end but then hover on a violin near the other side of the plot.\r\n<img width=\"837\" alt=\"Screen Shot 2020-10-26 at 5 38 22 PM\" src=\"https://user-images.githubusercontent.com/2678795/97231667-340fcb80-17b2-11eb-86ea-8c67cdd861ae.png\">\r\n",
    "created_at": "2020-10-26T21:42:49Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5146#issuecomment-716840391",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5146",
    "updated_at": "2020-10-26T21:42:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj I wouldn't call it a bug, but there may be room to improve the behavior here. The issue is that all the data values are identical, so we don't have a clear idea what range to give the data; so we just use that one value ±1. In this case that one value is very close to zero, so it looks like the range is just -1 to 1 with all the data at 0.\r\n\r\nYou can get something useful out of this data if you set `yaxis.rangemode = 'tozero'` - then the range you end up with is from 0 to that single value + 5%, which makes it clear that the value is a little below 1e-9. Ideally `yaxis.rangemode = 'nonnegative'` would do something similar, but it doesn't, it ends up giving 0 to 1. But I think even `yaxis.rangemode = 'normal'` (default) could do better by saying that when there's a single value between -1 and 1 (but not 0) the autorange goes from 0 to twice that value.",
    "created_at": "2020-10-26T18:59:02Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5197#issuecomment-716757508",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5197",
    "updated_at": "2020-10-26T18:59:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "One way to achieve left alignment would be `anchor: 'free', side: 'right'` and then move the labels off the edge of the plot area with something like `position: -0.1` or shrinking the domain of the x axis to something like `[0.1, 1]`. There wouldn't be any automatic sizing this way, you'd need to manually choose the offset that leaves the right amount of space for the labels.",
    "created_at": "2020-10-26T14:41:36Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/883#issuecomment-716591910",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/883",
    "updated_at": "2020-10-26T14:41:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "FYI we cannot use `.html` - this presents a security risk in some contexts, notably Chart Studio. One way or another it needs to go through `svgTextUtils.convertToTspans`.",
    "created_at": "2020-10-19T21:45:08Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3742#issuecomment-712460028",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3742",
    "updated_at": "2020-10-19T21:45:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Also [hoverformat](https://plotly.com/javascript/reference/layout/yaxis/#layout-yaxis-hoverformat)",
    "created_at": "2020-10-16T16:21:57Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5214#issuecomment-710170318",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5214",
    "updated_at": "2020-10-16T16:21:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Much cleaner! But there's still one issue here, because the auto `dtick` prior to considering `tickformat` is weeks, the auto `tick0` is `'2000-01-02'`, hence the tick you see is on Jan 2. But then when you zoom out so the auto `dtick` is months, `tick0` and the ticks you see jump back to the first of the month.\r\n\r\nSeems to me like either `adjustPeriodDelta` needs to also adjust `tick0`, or perhaps even cleaner, the whole `adjustPeriodDelta` logic could be pushed into `axes.autoTicks`?",
    "created_at": "2020-10-15T17:47:54Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5208#issuecomment-709488135",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5208",
    "updated_at": "2020-10-15T17:47:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Given that the issue already exists in `fullLayout._size` I'd be happy to consider that an independent bug and merge this PR as is, for its own part this PR looks great. But @nicolaskruchten I'd understand if you want to delay merging this until we solve that, since the bug isn't currently exposed to users.",
    "created_at": "2020-10-14T16:29:31Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5203#issuecomment-708516471",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5203",
    "updated_at": "2020-10-14T16:29:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I don't really understand what's going on here, but strange things happen when I start interacting with this graph - a tiny drag and the ticks jump back to the incorrect \"before\" position. I think we need to resolve this at an earlier stage in the process.",
    "created_at": "2020-10-14T15:03:24Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5208#issuecomment-708463163",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5208",
    "updated_at": "2020-10-14T15:03:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Closed by @LoganWlv in #5211 ",
    "created_at": "2020-10-13T19:59:25Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5200#issuecomment-707974672",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5200",
    "updated_at": "2020-10-13T19:59:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Great, I'll take a look at your PR!\r\n\r\nDon't worry about the local test failures - some of those interaction tests are tricky to get working right, and the `@flaky` ones sometimes fail anyway.",
    "created_at": "2020-10-13T14:56:48Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5200#issuecomment-707797932",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5200",
    "updated_at": "2020-10-13T14:56:48Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The issue is in converting from \"range values\" to \"calcdata\" or \"linearized\" values, ie the functions `ax.r2c` or `ax.r2l` here:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/8b76d46c058dedea34bd693daf962e4b8f1135eb/src/plots/cartesian/set_convert.js#L318-L324\r\n\r\nboth of which call out to `getCategoryPosition`:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/8b76d46c058dedea34bd693daf962e4b8f1135eb/src/plots/cartesian/set_convert.js#L180-L186\r\n\r\nI don't think we want to muck with `getCategoryPosition`, because it's also used by `ax.d2r` and `ax.d2l_noadd` and the \"d\" (\"data\") values are expected to be category names. Also \"range values\" are also used by annotations, so in case anyone depends on being able to position an annotation based on the category name I don't think we want to completely drop this ability. So I think we need a new function here that just swaps the precedence, something like:\r\n\r\n```js\r\nfunction getRangePosition(v) {\r\n    return isNumeric(v) ? +v : getCategoryIndex(v);\r\n}\r\n```\r\n\r\nIn order to complete the fix, in addition to ensuring this doesn't break any existing tests we'll need a few new ones:\r\n- Test the case you care about - can be exactly the graph in your codepen, just draw it and check that `gd._fullLayout.xaxis._rl` is `[-0.5, 7.5]` rather than `[-0.5, 4]` - This test should looks similar to (and can be placed next to):\r\n\r\nhttps://github.com/plotly/plotly.js/blob/8b76d46c058dedea34bd693daf962e4b8f1135eb/test/jasmine/tests/axes_test.js#L1658\r\n\r\n- Test that if you add an annotation to a graph that has some numeric categories and some non-numeric categories, providing a non-numeric category as the annotation position will attach it to that category, but providing a numeric category will attach it to the serial number position instead. There actually is a basic test of the latter case:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/8b76d46c058dedea34bd693daf962e4b8f1135eb/test/jasmine/tests/annotations_test.js#L1000\r\n\r\nBut that's in the context of testing `clicktoshow` and doesn't really test where it's positioned. For that purpose we may need to test the bounding box, though those tests are a bit tricky to get working well across platforms. Alternatively we could add a new image test covering these cases - similar to [simple_annotation](https://github.com/plotly/plotly.js/blob/8b76d46c058dedea34bd693daf962e4b8f1135eb/test/image/baselines/simple_annotation.png) but with a category axis and a few more annotations.",
    "created_at": "2020-10-12T13:54:58Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5200#issuecomment-707135365",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5200",
    "updated_at": "2020-10-12T13:54:58Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@s1dsq that's currently the expected behavior - notice for example that your x axis shows the same thing on both sides, data points beyond the extremal ticks. If we were to implement configurable padding on the autorange (see eg #1876) then you could change the current 5% padding to something like 20%, which would ensure there's always room for another tick.\r\n\r\n(You're probably aware of this at least in general terms, but `nticks=10` in fact means \"no more than 10\" ticks. So based on the largest automatic step in `dtick`, a factor of 2.5 from 2x10^n to 5x10^n, there are occasional cases you may have as few as 4 ticks. Since you have `rangemode='nonnegative'` here though, there's always a tick right at the start so this worst case actually happens when the top of the range is just below 2.5x10^n, where the highest tick shown is 2x10^n, ie 20% below the top. Kind of interesting that it's not quite as bad as `2.5/nticks`, which would be 25%... Pretty sure `2.5/nticks` would work for any `nticks`, and it's possible that `2/nticks` is sufficient but that I'm less confident of.)\r\n\r\nI suppose another route would be to add a boolean option \"extend autorange to exactly the next tick\" although I'm less enthusiastic about this idea, as it would make odd jumpy behavior as new points are added gradually extending the range.\r\n\r\nA workaround in the meantime would be to add a phantom trace (transparent with no legend or hover info) duplicating ~15% larger either all the data or some subset that includes the largest point.",
    "created_at": "2020-10-11T23:07:18Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5194#issuecomment-706782197",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5194",
    "updated_at": "2020-10-11T23:07:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for the report @LoganWlv - this is indeed a bug, the problem is that the range of a category axis is normally expressed in units of the category serial numbers, and as you have 8 categories (0 to 7) and you want to see the whole of each bar (±0.5) the autorange value is [-0.5, 7.5].\r\n\r\nThe bug is that apparently when we then re-interpret that range to draw the graph, because you have a category of the same name we take 7.5 to mean \"the serial number of category 7.5.\" I imagine we're trying to be flexible and allow you to specify like `range: ['apples', 'oranges']` but honestly that's rarely useful because of the ±0.5, or related padding on scatter and other trace types.",
    "created_at": "2020-10-11T13:21:13Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5200#issuecomment-706704088",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5200",
    "updated_at": "2020-10-11T13:21:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "LGTM - is there a useful test we can make of this new behavior?",
    "created_at": "2020-10-10T01:51:18Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5206#issuecomment-706466466",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5206",
    "updated_at": "2020-10-10T01:51:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> @alexcjohnson this is one of the things I would consider changing immediately and not waiting for a v2 ... Is there really any case where the current behaviour is better than the one where we force width/height to match?\r\n\r\nAgreed - as long as we honor explicit width & height provided with the download config, I'd be happy to set the default to match the displayed plot, no need to consider that a breaking change.",
    "created_at": "2020-10-09T14:06:43Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5202#issuecomment-706203156",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5202",
    "updated_at": "2020-10-09T14:06:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@nicholas-esterer this is looking great, nice work! Just one blocking comment (`endsWith`) and a few style points, then it should be good to go from my standpoint.",
    "created_at": "2020-10-05T21:35:47Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5014#issuecomment-703902229",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5014",
    "updated_at": "2020-10-05T21:35:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I'm still seeing some funny behavior. If I take your codepen https://codepen.io/MojtabaSamimi/pen/jOqjzga and comment out `tickformat` and `dtick`, the ticks look good as autoranged, we get `dtick` of 2 months but it looks like 4 months because half of them have been dropped because they overlap:\r\n<img width=\"888\" alt=\"Screen Shot 2020-10-02 at 4 27 49 PM\" src=\"https://user-images.githubusercontent.com/2678795/94966990-3b51fb00-04cc-11eb-923f-df673b17c22f.png\">\r\nBut then as I zoom out a bit some funny things happen. `dtick` increases to 3 months, but this has the paradoxical effect of looking like an increase since it looked like 4 months immediately before this. That's funny but fine. The problem is the labels are positioned at the center of the period, rather than 1/6 where they should be:\r\n<img width=\"914\" alt=\"Screen Shot 2020-10-02 at 4 28 34 PM\" src=\"https://user-images.githubusercontent.com/2678795/94967345-dea31000-04cc-11eb-85dd-234156fe41ab.png\">\r\nThen as I zoom out more we start losing ticks, while still keeping the label at the center of the original 3-month period, rather than 1/6 where they belong:\r\n<img width=\"874\" alt=\"Screen Shot 2020-10-02 at 4 33 17 PM\" src=\"https://user-images.githubusercontent.com/2678795/94967546-45282e00-04cd-11eb-9c33-c4b679aedc13.png\">\r\n<img width=\"882\" alt=\"Screen Shot 2020-10-02 at 4 33 37 PM\" src=\"https://user-images.githubusercontent.com/2678795/94967550-48231e80-04cd-11eb-9479-f030827a5a70.png\">\r\nUntil eventually we have what looks like 6-month `dtick` with labels at 1/4 (but it's still actually 3-month `dtick` just half of them have been discarded):\r\n<img width=\"887\" alt=\"Screen Shot 2020-10-02 at 4 34 39 PM\" src=\"https://user-images.githubusercontent.com/2678795/94967673-87ea0600-04cd-11eb-94f2-6343e90be15c.png\">\r\nZoom out a little bit more and we switch to a real 6-month `dtick`, with the labels where they belong at 1/12 of the period:\r\n<img width=\"902\" alt=\"Screen Shot 2020-10-02 at 4 37 59 PM\" src=\"https://user-images.githubusercontent.com/2678795/94967765-bb2c9500-04cd-11eb-8a56-8b21a6432a82.png\">\r\nA little farther zoomed out and we start dropping ticks again, but this time some of the labels move to the wrong locations:\r\n<img width=\"896\" alt=\"Screen Shot 2020-10-02 at 4 41 58 PM\" src=\"https://user-images.githubusercontent.com/2678795/94968113-5160bb00-04ce-11eb-878a-e8432b1719d4.png\">\r\nAnd a tiny bit further still half the ticks have been dropped, so it looks like yearly ticks but it's really still 6 months (and we still label the months). And again some of the ticks are in weird places:\r\n<img width=\"882\" alt=\"Screen Shot 2020-10-02 at 4 40 34 PM\" src=\"https://user-images.githubusercontent.com/2678795/94968188-7a814b80-04ce-11eb-9c59-c11f8fa46e36.png\">\r\n<img width=\"862\" alt=\"Screen Shot 2020-10-02 at 4 45 27 PM\" src=\"https://user-images.githubusercontent.com/2678795/94968325-b3212500-04ce-11eb-9b51-cac70534fdf1.png\">\r\nFinally we get to actual year ticks and things look good again:\r\n<img width=\"865\" alt=\"Screen Shot 2020-10-02 at 4 46 13 PM\" src=\"https://user-images.githubusercontent.com/2678795/94968465-f24f7600-04ce-11eb-8525-c799d4732b49.png\">\r\nThereafter everything looks fine - I never seem to see year labels in the wrong locations.\r\n\r\nI'm not worried about the random tick dropping, that's a compromise we need to make when there are range breaks and can't always tell if the labels will overlap. But it's important that we position the labels correctly in all of these situations. All of these situations I got to just by slowly dragging the right side of the x axis. I didn't investigate zooming in, only zooming out, so there may be other funny cases when you zoom in.\r\n\r\nPlease make sure that the labels are positioned correctly with automatic ticks and tick labels at all zoom levels.",
    "created_at": "2020-10-02T20:59:58Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5187#issuecomment-702955262",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5187",
    "updated_at": "2020-10-02T20:59:58Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Glad this works! But let's let #5189 close it on merge.",
    "created_at": "2020-10-02T12:52:56Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5182#issuecomment-702716812",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5182",
    "updated_at": "2020-10-02T12:52:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Though... the color modules [reference each other](https://github.com/colorjs/color-normalize/blob/98242752e448fb96492877e3af599e5ae9f42cf4/index.js#L5) so I guess even if this would fix the reference in the plotly.js source we'd also need to change those internal references.",
    "created_at": "2020-10-01T20:55:41Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5182#issuecomment-702392630",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5182",
    "updated_at": "2020-10-01T20:55:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "What if in the plotly.js source we simply change\r\n`var rgba = require('color-normalize');`\r\ninto\r\n`var rgba = require('color-normalize/index.js');`\r\nWould that force the previous behavior?",
    "created_at": "2020-10-01T20:52:44Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5182#issuecomment-702391093",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5182",
    "updated_at": "2020-10-01T20:52:44Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @Yook74! this indeed looks like exactly the right fix 🎉 \r\n\r\nThe only thing we need now is a test - ideally this would be something like the [modebar styling tests](https://github.com/plotly/plotly.js/blob/3a7f28e6e891429aa75d0d2b4d376c2d2f0bd531/test/jasmine/tests/modebar_test.js#L1453) - `createGraphDiv` before, `destroyGraphDiv` after, and the test itself would be\r\n```js\r\nPlotly.plot(gd, data, layout).then(function() {\r\n    // test that the initial modebar is present\r\n    var modeBar = gd._fullLayout._modeBar;\r\n    expect(countGroups(modeBar)).toEqual(6); // whatever buttons should be there\r\n\r\n    // some modification that would have broken the modebar before your fix:\r\n    // react, restyle, click a button... whatever's easiest\r\n    return Plotly.react(gd, newData, newLayout);\r\n}).then(function() {\r\n    // test that the new modebar is present\r\n    var modeBar = gd._fullLayout._modeBar;\r\n    expect(countGroups(modeBar)).toEqual(12); // different (nonzero) number of buttons\r\n})\r\n.catch(failTest)\r\n.then(done)\r\n```",
    "created_at": "2020-10-01T00:59:18Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5181#issuecomment-701725196",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5181",
    "updated_at": "2020-10-01T00:59:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Very nice. Can we include a test of this? A Jasmine test should suffice, covering both the Sunday and the Monday cases.",
    "created_at": "2020-09-30T17:44:03Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5180#issuecomment-701541728",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5180",
    "updated_at": "2020-09-30T17:44:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @COLLINETTEBastien - this is definitely a bug, `staticPlot` should disable all interactions of any kind. Thanks for the clear codepen.",
    "created_at": "2020-09-30T15:52:14Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5177#issuecomment-701479946",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5177",
    "updated_at": "2020-09-30T15:52:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@thierryVergult this is a nice feature! In addition to the above comments, let's just take one of the existing sunburst mocks and add a rotation to it, then update the baseline image. That should suffice for testing the rotation.",
    "created_at": "2020-09-30T14:22:17Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5171#issuecomment-701423691",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5171",
    "updated_at": "2020-09-30T14:22:17Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Something funny in [period_positioning2](https://github.com/plotly/plotly.js/pull/5074/files?short_path=41b8de1#diff-41b8de174d01b539a0e0f88555498364)\r\n<img width=\"181\" alt=\"Screen Shot 2020-09-28 at 9 24 59 PM\" src=\"https://user-images.githubusercontent.com/2678795/94502061-46a5dd80-01d1-11eb-9ff1-d7cbb3fc573f.png\">\r\nWhy doesn't a label appear for 2001? In `period_positioning` (which has `contour` instead of `histogram2dcontour`) the 2001 label does appear.",
    "created_at": "2020-09-29T01:29:24Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5074#issuecomment-700370385",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5074",
    "updated_at": "2020-09-29T01:29:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@VictorBezak that's great! The preferred way to do this is:\r\n- Keep the `master` branch of your fork synchronized with the `master` branch of the main repo\r\n- Make a PR from another branch on your fork into the master branch of your fork.\r\n- Don't merge this PR: just @ mention a couple of the plotly.js maintainers - You can mention me and @archmoj - telling us it's ready for a review. Just including our handles in a PR comment is enough that we'll see your PR and know to look at it. You can also reply to this issue including a link to your PR.\r\n- Once we've looked at that PR to ensure the overall structure and concept is sound, we'll ask you to make a PR into the main repo, and we'll finish the review there.",
    "created_at": "2020-09-28T13:59:12Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1962#issuecomment-700025278",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1962",
    "updated_at": "2020-09-28T13:59:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> @alexcjohnson\r\n> Seems we cannot remove `user-select` calls is `sankey` and `parcoords` as tried in [89e1342](https://github.com/plotly/plotly.js/commit/89e1342af0b2288652e97b8bd3fe4e96aafe4461).\r\n> So I reverted that commit.\r\n\r\nThat commit also removes the `user-select-none` class from the main div",
    "created_at": "2020-09-25T18:48:13Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5165#issuecomment-699094156",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5165",
    "updated_at": "2020-09-25T18:48:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@nicolaskruchten mentioned leaving annotations and scatter text selectable, but ATM these elements already can't be selected normally, due to the way we capture pointer events.\r\n\r\nThat in mind, would it cause any problems to just put `user-select: none` at the [top level](https://github.com/plotly/plotly.js/blob/86f5e2d02d56a94fcf2c26b30d3539fd54211c40/src/css/_base.scss#L1-L6) and drop it everywhere else?\r\n\r\nNote that ATM we specifically prevent selection on several specific elements, though a few of them (sankey and parcoords) use the simple version without vendor prefixes, which should be fixed if we don't switch to the top level.\r\n```\r\n ~/plotly/plotly.js/src> ag user-select\r\ntraces/sankey/render.js\r\n1029:        .style('user-select', 'none')\r\n\r\ntraces/parcoords/parcoords.js\r\n354:        .style('user-select', 'none');\r\n659:        .style('user-select', 'none');\r\n676:        .style('user-select', 'none')\r\n\r\ntraces/carpet/plot.js\r\n242:            .classed('user-select-none', true)\r\n\r\ncss/_base.scss\r\n26:.user-select-none {\r\n27:    @include vendor('user-select', none);\r\n\r\ncomponents/legend/draw.js\r\n92:            .classed('user-select-none', true)\r\n413:        .classed('user-select-none', true)\r\n\r\ncomponents/updatemenus/draw.js\r\n198:        s.classed('user-select-none', true)\r\n438:        s.classed('user-select-none', true)\r\n\r\ncomponents/rangeselector/draw.js\r\n147:        s.classed('user-select-none', true)\r\n\r\ncomponents/sliders/draw.js\r\n305:        s.classed('user-select-none', true)\r\n360:        s.classed('user-select-none', true)\r\n\r\nplots/gl2d/scene2d.js\r\n151:    canvas.className += ' user-select-none';\r\n```",
    "created_at": "2020-09-25T13:07:00Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5165#issuecomment-698917605",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5165",
    "updated_at": "2020-09-25T13:07:00Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> changes in `src/plots/cartesian/axis_ids.js` may slow down the interactions.\r\n\r\nAh, I see. Thanks for clarifying. Yes, these functions are called a lot, though I notice they already have regex tests in them so they can't be THAT hot. we could certainly simplify them, for example by making `AX_ID_PATTERN` capture the relevant info so no further processing is needed after the `match`\r\n```\r\nAX_ID_PATTERN: /^([xyz])([0-9]*)( domain)?$/\r\n\r\nexports.id2name = function id2name(id) {\r\n    if (typeof id !== 'string') return;\r\n    var match = id.match(constants.AX_ID_PATTERN);\r\n    if (!match) return;\r\n\r\n    var axNum = match[2];\r\n    if (axNum === '1') axNum = '';\r\n    return match[1] + 'axis' + axNum;\r\n};",
    "created_at": "2020-09-23T16:43:04Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5014#issuecomment-697670203",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5014",
    "updated_at": "2020-09-23T16:43:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj I guess you're concerned about running `/( domain)$/.test(ar)` in `axes.getRefType` multiple times per reference while plotting? In general I feel like these objects are few enough that this isn't going to be a problem. You certainly shouldn't use as many of these as data points.\r\n\r\nI do like the look of `xref: 'x2 domain'` - it's compact and intuitive, to my eye anyway. But we could certainly work on performance, and regex tests are definitely the key concern here. By the time we get to `axes.getRefType` we will only have a well-defined set of possibilities for what the reference can be, because we're always looking at the output of `supplyDefaults` rather than direct user input. Maybe the way it's being used it can also be `undefined`, but aside from that `axes.coerceRef` will only give us `paper`, `pixel`, `(x|y)\\d+`, or `(x|y)\\d+ domain`, right? So something like:\r\n```\r\naxes.getRefType = function(ar) {\r\n    if (!ar || ar === 'paper' || ar === 'pixel') {\r\n        return ar;\r\n    }\r\n    if (ar.charAt(ar.length - 1) === 'n') { // '... domain'\r\n        return 'domain';\r\n    }\r\n    return 'range';\r\n}\r\n```\r\n\r\nI see in your comments some concerns about `if` blocks and multiple `return` paths, suggesting converting these to ternary expressions. I'm not aware of a big performance benefit to be had from that kind of optimization but if you have references for this I'm happy to learn more.\r\n\r\nThe last option I'll mention is that we could run `getRefType` just once during `supplyDefaults`, and store the results in `obj._xrefType` and `obj._xrefId`. That gives us the two separate values to look at, like you're suggesting, without forcing us to give up the combined API we have now. But I'd suggest at least for now leaving this out and just optimizing `axes.getRefType`, I suspect performance that way will be plenty good.",
    "created_at": "2020-09-23T15:32:41Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5014#issuecomment-697550979",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5014",
    "updated_at": "2020-09-23T15:32:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Whew, that's a lot of trace types! Great image tests, then it seems to me we need a hover test with a very detailed `hoverformat` for each type to show that we get the original date info in hover, rather than the shifted dates.",
    "created_at": "2020-09-17T15:50:11Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5074#issuecomment-694325910",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5074",
    "updated_at": "2020-09-17T15:50:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Great, I'm glad that worked for you @bartbutenaers 🎉 But let's leave this issue open until we either (1) find a more robust way to test for objects so this isn't needed, (2) create and document a more pleasant way to use the looser test, or (3) add this opaque workaround to the official docs.",
    "created_at": "2020-09-16T22:37:52Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5151#issuecomment-693702530",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5151",
    "updated_at": "2020-09-16T22:37:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Check out https://github.com/plotly/plotly.js/blob/master/test/jasmine/tests/click_test.js - it gives a lot of relevant example tests, and you can add new tests for this behavior there too. As to running the tests, see https://github.com/plotly/plotly.js/blob/master/CONTRIBUTING.md#jasmine-tests",
    "created_at": "2020-09-16T22:28:10Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5138#issuecomment-693699014",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5138",
    "updated_at": "2020-09-16T22:28:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "For `date` axes I think we should NOT report `c` values (milliseconds), only `d` (date strings). We have very confusing behavior around providing date values as milliseconds, and offsetting by the local time zone or not. With date strings the behavior is much clearer. And for numeric axes there's no distinction. So this only applies to `category` axes. And I don't think it needs to be configurable, we should just report both values on `category` axes and the user can take whichever they want.",
    "created_at": "2020-09-16T16:00:59Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5138#issuecomment-693503428",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5138",
    "updated_at": "2020-09-16T16:00:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj I'm a little wary of that test for node, as anyone can set their window name to whatever they want. And anyway it's not node per se, but the jsDom VM that's causing issues. But anyway if we do find a reasonable test we can put it up above in the special imagetest block:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/783de52d27188f0f56de11cc8469a07be498893a/src/lib/is_plain_object.js#L19-L22\r\n\r\nThat comment alludes to the reason for the second part of the test: that we don't want to accept more complex objects\r\n```js\r\nfunction f() {}\r\nvar a = new f();\r\nObject.prototype.toString.call(a)\r\n> \"[object Object]\"\r\n```\r\n\r\nThis isn't a real huge worry, since the majority of our users are coming in via JSON one way or another (plotly.py, dash, etc) but I still don't think we want to completely drop that condition.\r\n\r\n@bartbutenaers TBH I don't know anymore what the condition `if(window && window.process && window.process.versions)` is supposed to accomplish, but if we can't find a simple solution to this you could hijack that:\r\n```js\r\nplotlyServerDom.window.process = {versions: 1};\r\n```\r\n\r\nAlternatively you might be able to go through JSON as well:\r\n```js\r\nvar data2 = plotlyServerDom.window.JSON.parse(JSON.stringify(data));\r\nvar layout2 = plotlyServerDom.window.JSON.parse(JSON.stringify(layout));\r\n```",
    "created_at": "2020-09-16T01:29:48Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5151#issuecomment-693115954",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5151",
    "updated_at": "2020-09-16T01:33:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Offset has already been fixed as can be seen in the gif\r\n\r\nI think what you have will still have problems if (a) something increases the margins beyond what's in `layout.margins` - tick labels, legend, colorbar... (b) the axes don't have the default `domain: [0, 1]`. Also if the graph in the gif is precisely in the top left corner of the page, there may be problems when it's positioned somewhere else. The target bounding box and `_length` solution is known to deal with all of these issues, but it's also important to figure out whether the axes we're looking at are actually `xaxis` and `yaxis` or if there are others.\r\n\r\n> so I have to switch between p2c and p2d depending on axes type?\r\n\r\n`c` (\"calculated\") and `d` (\"data\") mean the same thing for numeric (linear and log) axes, and `d` is better for date axes. The only question is category axes, where `d` is the category itself and `c` is the numeric axis position in which the first category is 0, the second is 1, etc. I feel like there are use cases for both of these: if you want to be able to label a data position (or extract data related to the click) then the category (`d`) is most useful, but if you want to be able to precisely position a click between categories or off the end of the available categories (basically anywhere not exactly on a known category value) you'll need the numeric (`c`) value. So perhaps we should always report the `p2d` values as `x` and `y`, but for category axes also report the `p2c` value as perhaps `xCalc` or `yCalc`?",
    "created_at": "2020-09-15T22:40:20Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5138#issuecomment-693016855",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5138",
    "updated_at": "2020-09-15T22:40:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "re subplots: the code `fx/click` that you're working in here already gives you one subplot in the function args. That already indicates that we're looking just at clicks that are actually over a subplot and not in the margins or gaps between subplots. That might be OK, and in fact could be nice in as far as it avoids us having to figure out whether we're over a subplot or not, even if eventually we extend this functionality to include the margins and gaps.\r\n\r\nThe `subplot` arg is a string (or `undefined` for certain subplot types). If it's a 2D cartesian subplot the string will be like `'xy'` or `'x3y5'`. You can then look in `gd._fullLayout._plots[subplot]` and get a whole bunch of useful info about this subplot. Included in that information are the `xaxis` and `yaxis` objects for this subplot (so for example `gd._fullLayout._plots.x2y2.xaxis === gd._fullLayout.yaxis2`) as well as `overlays`, which is a list of other subplot info objects that are overlaid upon this one (each with its own `xaxis` and `yaxis` objects). From this info you should be able to calculate the data positions of the click point with respect to each subplot / axis.\r\n\r\nI'm all in favor of starting by ignoring non-cartesian subplots for now, and coming back to these later.\r\n\r\n@sleighsoft you commented in #2696:\r\n> There is a small offset when getting the coordinates. Any ideas why this happens?\r\n\r\nYou should use the bounding box of `evt.target` and the `_length` and `_offset` of the relevant `gd._fullLayout` axes to calculate the data values, like we do here:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/94b31a8bbb8980ccafa23171d43732b386a88b20/src/components/fx/hover.js#L334-L343\r\n\r\nThat will deal with positioning on the page as well as automargins.\r\n\r\nAlso I notice you're using `p2c` to convert to data values. Better to use `p2d` at least for `date` axes - `p2c` will give you a number (milliseconds from 1970) whereas `p2d` will give a date string. `category` axes may still need `p2c` because category values are discrete so information is lost (though maybe that's the behavior we want in this case? perhaps not so clear cut.)",
    "created_at": "2020-09-14T19:53:35Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5138#issuecomment-692277888",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5138",
    "updated_at": "2020-09-14T19:53:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@elben10 thanks for the PR, it looks really useful! But let's take a step back before going further with it - does this really need to be a separate trace type? It seems to me as though, in terms of the attributes involved, it's just a few extra options on top of `scattermapbox` to control the clustering, and the attributes regarding lines are not allowed. I'd suggest adding a `cluster.enabled` attribute, which defaults to `true` whenever any of the other `cluster` attributes is set explicitly; then when `cluster.enabled===true` the only `mode` we will allow is `markers` and the `line` attributes will automatically not be used. Then in the following steps we can just look at the `cluster.enabled` attribute to determine which pathway to take.\r\n\r\nDoes that seem like a reasonable way to include this feature?",
    "created_at": "2020-09-14T17:38:05Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5147#issuecomment-692206298",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5147",
    "updated_at": "2020-09-14T17:38:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Good or bad design, you're correct in your interpretation and this is as designed: if you just want to modify a small part, make an attribute path `'xaxis.type': 'log'` rather than a nested object `xaxis: {type: 'log'}`. If we had made nested objects append, it would be very difficult to delete items from a container.\r\n\r\nI'd encourage you to explore `Plotly.react` instead of `Plotly.relayout` - this form requires passing in the entire graph spec again - which you can get by pulling out `g.data` and `g.layout` and then modifying them to your liking. This avoids a lot of the confusion generated by `Plotly.relayout` and `Plotly.restyle` all while enabling much more flexible modifications to the graph.",
    "created_at": "2020-09-11T18:44:13Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5130#issuecomment-691254746",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5130",
    "updated_at": "2020-09-11T18:44:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj looks good - just a test as you mention, then this should be ready!",
    "created_at": "2020-09-03T21:39:53Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4867#issuecomment-686778270",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4867",
    "updated_at": "2020-09-03T21:39:53Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice catch @chiehrosswang! Looks to me as though we're stripping trailing zeros - on the assumption that they're coming after a decimal point, but in this case the zero is in the exponent instead 🤦 ",
    "created_at": "2020-09-03T17:59:38Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5122#issuecomment-686656632",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5122",
    "updated_at": "2020-09-03T17:59:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "We add some padding around scatter markers, and in this case that padding extends the x axis range past zero. You can fix this with `rangemode: 'nonnegative'` or `rangemode: 'tozero'` (which are only different if you ever add *data values* that go past zero)\r\n\r\nhttps://codepen.io/alexcjohnson/pen/eYZeJQK?editors=0010\r\n\r\nThis kind of question is a better fit for https://community.plotly.com/ - we try to reserve github for bug reports and feature requests.",
    "created_at": "2020-09-03T16:58:07Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5120#issuecomment-686624611",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5120",
    "updated_at": "2020-09-03T16:58:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@ccssmnn can you hold onto the range from the previous call, and abort the request for new data if the range hasn't actually changed? Something like this is what's typically done.",
    "created_at": "2020-09-03T16:07:08Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/145#issuecomment-686595593",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/145",
    "updated_at": "2020-09-03T16:07:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj this looks good - just a couple of comments to keep performance high (`axes.tickIncrement` is called during interactive pan/zoom) and some possibly problematic edge cases.",
    "created_at": "2020-09-02T06:06:50Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5114#issuecomment-685323268",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5114",
    "updated_at": "2020-09-02T06:06:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "yes, the cursor changes - but that's pretty subtle, might be nice to find something slightly more obvious we can do.",
    "created_at": "2020-09-02T01:30:42Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5116#issuecomment-685227255",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5116",
    "updated_at": "2020-09-02T01:30:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I wonder if we could have these regions glow a little when you hover over them? Just enough to let folks know there's something active there. Note that it's not just the axis endpoints, it's the whole middle of each axis too, and distinct behavior in the corners.",
    "created_at": "2020-09-01T22:33:39Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5116#issuecomment-685169402",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5116",
    "updated_at": "2020-09-01T22:33:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Interesting, I certainly see the appeal of this, but I feel like it should at least be scoped to legends that *have* a scrollbar (the difference becomes important if the legend has a background or border), and possibly (as @archmoj mentioned) be turned into an opt-in attribute like `legend.width`",
    "created_at": "2020-09-01T22:31:30Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5108#issuecomment-685168533",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5108",
    "updated_at": "2020-09-01T22:31:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@ignamv looks good! Feel free to make a PR to the main repo. It'll need a test or two before it's ready to merge, probably one setting `minexponent` to zero (the case you care most about) and another setting it large like in https://github.com/ignamv/plotly.js/pull/1#issuecomment-684779096\r\n\r\nThis is a good model to start with:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/c437cdf46b775df09d1157087f31d4d5d0a5276e/test/jasmine/tests/axes_test.js#L2811-L2833",
    "created_at": "2020-09-01T22:16:36Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5111#issuecomment-685162551",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5111",
    "updated_at": "2020-09-01T22:16:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This looks like a good idea, but I think we need to be more careful about each projection we add: (1) does it work well in the simple case? In your demo codepen a number of them fall look pretty bad either immediately or easily as you zoom / pan around so should probably not be included without some adjustment. (2) maybe you've already done this, do they support all the same parameters as the existing ones? `isConic`? `lonaxisSpan` / `lataxisSpan`? Any other special cases? (3) each one we add needs to be included in at least one mock, maybe more so we can ensure their parameters work right. `geo_fitbounds-locations` says it includes \"all projection types\", let's ensure that stays true.",
    "created_at": "2020-09-01T21:56:36Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5112#issuecomment-685155065",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5112",
    "updated_at": "2020-09-01T21:56:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Addressed in c080bc5.\r\n\r\nThat's good for the case when `dtick` matches the period, but it doesn't work right when `dtick` is a multiple of the period - ie if I zoom out that pen to 1-day ticks - then `2015-12-18 AM` is shifted TOO far.\r\nhttps://codepen.io/alexcjohnson/pen/MWyEYXX?editors=0010\r\n<img width=\"857\" alt=\"Screen Shot 2020-09-01 at 5 17 55 PM\" src=\"https://user-images.githubusercontent.com/2678795/91907265-8a133780-ec77-11ea-9ce9-c2cb35b1fa10.png\">\r\n",
    "created_at": "2020-09-01T21:23:09Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5089#issuecomment-685140420",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5089",
    "updated_at": "2020-09-01T21:23:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Good progress here! You're right, I like the use of hours as periods rather than instants - and I'd totally forgotten about AM/PM, that's also pretty cool!\r\n\r\nI'm still seeing a couple of oddities. First, sometimes the tick label right before a rangebreak seems to not get the appropriate half-period shift (in this case 2015-12-18 PM, but I've seen this with day and hour tickformats too):\r\nhttps://codepen.io/alexcjohnson/pen/yLOzLbO?editors=0010\r\n<img width=\"891\" alt=\"Screen Shot 2020-09-01 at 3 43 51 PM\" src=\"https://user-images.githubusercontent.com/2678795/91898629-04d55600-ec6a-11ea-9393-8dac7679c470.png\">\r\n\r\nSecond, when I zoom out a bit on your original codepen, at some point just the week-53 tick disappears even though `dtick` didn't change.\r\nhttps://codepen.io/alexcjohnson/pen/KKzXKXV?editors=0010\r\n<img width=\"828\" alt=\"Screen Shot 2020-09-01 at 3 48 43 PM\" src=\"https://user-images.githubusercontent.com/2678795/91899221-d5731900-ec6a-11ea-8dd1-c3064a4c9450.png\">\r\n\r\nThe first one I'd call a blocker; the second would be nice to fix but could be deferred for a later bugfix.",
    "created_at": "2020-09-01T19:51:52Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5089#issuecomment-685095794",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5089",
    "updated_at": "2020-09-01T19:51:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "FYI the default tick0 behavior already shifts to Sunday when using week ticks:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/2737bf26019e059f3da63c70545364bc3593474b/src/lib/dates.js#L45-L58",
    "created_at": "2020-08-31T17:47:14Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4912#issuecomment-683929414",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4912",
    "updated_at": "2020-08-31T17:47:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The existing SI mode is working as intended. Not using the `m` prefix - but using all the others - is pretty typical on log axes because the `m` is too often confusing (vs `M`) and doesn't shorten the labels much (`100m` is _longer_ than `0.1`). For `k` it's a little more subtle, we don't use it for `1k` but we do for `10k`. This I don't feel that strongly about, we could consider it a bug, but I do think there's a logic to the current behavior: the longest pure-power labels you have otherwise are `100k` and `100M` etc, which are exactly as many characters as `1000`, so we defer to readability and use unmodified numbers for just one more power of 10.\r\n\r\nAll that is to say I think the current behavior makes sense as a default for `SI`. But I can see wanting to change that and always use a prefix - or, for that matter, keeping the numbers unmodified longer (or using prefixes more extreme than `f` and `T`, beyond which we currently switch to `power` notation - because I didn't deem those prefixes sufficiently well known when this feature was originally written - but that probably would need to be a totally separate attribute).\r\n\r\nSo what if we make a new attribute to substitute in for the `3` here:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/2737bf26019e059f3da63c70545364bc3593474b/src/plots/cartesian/axes.js#L1045\r\n\r\nsomething like `ax.minexponent`? For your use case @ignamv you'd set it to `0`, but someone who doesn't even want to use `k` or `µ` might set it to `6`, or something between even.",
    "created_at": "2020-08-31T16:11:28Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5111#issuecomment-683877379",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5111",
    "updated_at": "2020-08-31T16:11:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Include any packages you want for testing purposes - but if they're used in tests only, not in `src`, put them in `package.json` in `devDependencies` rather than `dependencies`.\r\n\r\nIf you add new packages to `src` (and thus to `dependencies`) we'll scrutinize those a bit more carefully, as they make their way into the final bundles and thus security and file size concerns come into play.",
    "created_at": "2020-08-25T22:16:02Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5014#issuecomment-680296624",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5014",
    "updated_at": "2020-08-25T22:16:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> But to make this pass I'd have to change an already existing test.\r\n\r\nIt's normal for low-level tests like this to need changes from time to time. As long as the updated test serves the same purpose with respect to the external API (in this case the output of `PlotSchema.get()`) it doesn't matter where it gets the other side of the equation.",
    "created_at": "2020-08-24T14:51:14Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5014#issuecomment-679173828",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5014",
    "updated_at": "2020-08-24T14:51:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks great! Also, and perhaps this is the key test, the `scattergl` markers match `scatter` markers in size for any `plotGlPixelRatio`, as you can see from changing the type of one or more of the traces in your codepen to `scatter`.\r\n\r\nCan we 🔒 this by increasing `plotGlPixelRatio` in one of our gl2d mocks?",
    "created_at": "2020-08-21T14:03:43Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5093#issuecomment-678307314",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5093",
    "updated_at": "2020-08-21T14:03:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "That all sounds reasonable. The one piece I'd change is: just set the plot size, axis domains, and margins to convenient values, then you should be able to calculate the shape positions precisely without having to reference a scatter trace. For example you can set all the margins to 100, width and height each 700, and axis domains `[0, 0.4]` and `[0.6, 1]`, then each axis has a length exactly 200px, starting at 100 or 400 px from the edge.",
    "created_at": "2020-08-21T01:30:11Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5014#issuecomment-677988042",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5014",
    "updated_at": "2020-08-21T01:30:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Jasmine does a very nice job with async tests in fact - and given that in general our plotting functions can be async, this is used a lot in our tests. A good encapsulated use of this (and close to the area you're working in) is the test below. We use this pattern a lot: we create the `gd` container in `beforeEach` and destroy it in `afterEach`, then to make the test itself async, the test function takes an arg which we call `done`, then the test body looks like:\r\n```js\r\nPlotly.newPlot(gd, fig)\r\n.then(<assertions>)\r\n.then(<modify the plot eg with Plotly.react>)\r\n.then(<more assertions>)\r\n.then(<repeat as needed>)\r\n.catch(failTest)\r\n.then(done)\r\n```\r\n\r\nhttps://github.com/plotly/plotly.js/blob/3781f482455e7623d1a0368b6e74427df549550b/test/jasmine/tests/shapes_test.js#L527-L564",
    "created_at": "2020-08-19T02:24:34Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5014#issuecomment-675813564",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5014",
    "updated_at": "2020-08-19T02:24:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> pin one axis' 0 to a level on the other ... without scaleratio\r\n\r\nWhile still allowing independent scaling (via zoom interactions)? This would be interesting, but my gut reaction is much more complicated than a fixed mapping (just a more generic linear mapping than the identity of `matches`), as it would imply various weird behavior when panning or zooming one of the axes.",
    "created_at": "2020-08-17T23:02:33Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5076#issuecomment-675156885",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5076",
    "updated_at": "2020-08-17T23:02:33Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "That system is working as intended - when you zoom or pan via the plot area, there's nothing to tell you which specific axes on that area you wanted to alter, so it alters them all. But when you zoom or pan via one of the individual axes, we only change that one. This can be quite useful if, for example, you have several traces measuring different quantities entirely but you want to see if their features match up, you can slide and scale one of them over top of the other.\r\n\r\n@kricka91 you make a good argument for why one might want `matches` and `scaleratio` together - though the word \"matches\" is a bit... stretched... if we continue to use that. But there's more to it in the general case, you may want an offset as well, like Celsius / Fahrenheit.",
    "created_at": "2020-08-17T22:28:56Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5076#issuecomment-675146605",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5076",
    "updated_at": "2020-08-17T22:28:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@mherrmann3 Can you elaborate about which lines show this effect? Data traces? (which trace types?) Shapes? Axis lines? Grid lines? Something else? I worry about a modification as general as `dashLine` deleting fills that we DO want, in which case we may need more selective fixes.",
    "created_at": "2020-08-17T21:57:01Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5081#issuecomment-675135336",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5081",
    "updated_at": "2020-08-17T21:57:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Sounds like @aanchalvazir is asking for the opposite of `'nonnegative'`: ONLY negative values.",
    "created_at": "2020-08-14T14:04:28Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/400#issuecomment-674091125",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/400",
    "updated_at": "2020-08-14T14:04:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "LGTM - just need the test and my one comment.",
    "created_at": "2020-08-14T02:09:59Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5073#issuecomment-673843862",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5073",
    "updated_at": "2020-08-14T02:09:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This is fine as a narrow fix for #5058; but I think considering #1181 (and boxes #4510) it may be both simpler and more general to always use an automatic spacing of one unit for bars or boxes on category axes. Maybe this is as simple as replacing the `minDiff` calculated in [sieve.js](https://github.com/plotly/plotly.js/blob/29b456eafdfb9bc3b949918df557b200d9790486/src/traces/bar/sieve.js#L53-L56) with 1? (This is I believe the value we start with to determine widths, then we apply the grouping and gaps)",
    "created_at": "2020-08-13T20:57:37Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5072#issuecomment-673706563",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5072",
    "updated_at": "2020-08-13T20:57:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I suspect this line:\r\nhttps://github.com/plotly/plotly.js/blob/29b456eafdfb9bc3b949918df557b200d9790486/src/components/drawing/index.js#L253\r\n\r\nJust needs to be changed to `if (!isNumeric(v)) {`",
    "created_at": "2020-08-13T15:20:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4460#issuecomment-673541150",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4460",
    "updated_at": "2020-08-13T15:20:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "My reasoning for suggesting the tight scope is that when the range breaks aren't phase locked with periods, keeping the label at the central data value of the period is likely to be more accurate - and I suspect it'll make more sense to the user if there's one smaller (or larger) gap between labels where there's a rangebreak, rather than three altered gaps - one at the rangebreak and one on either side. At that point it may be impossible to see what the \"real\" spacing is anymore.\r\n\r\nWhereas when the range breaks and periods ARE phase locked, you've effectively used the range breaks to modify the meaning of the period, and every label is going to move the same amount (except when further modified by holidays) so things will still look consistent.",
    "created_at": "2020-08-12T13:48:18Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5062#issuecomment-672881630",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5062",
    "updated_at": "2020-08-12T13:48:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice catch @nicolaskruchten - seems to me this is a tightly-scoped case:\r\n- `dtick` of an integer number of weeks\r\n- and weekly rangebreaks\r\n- and week number as the period-defining component of `tickformat`\r\n\r\nThen for the label position, rather than half a period away from the preceding tick, we use the midpoint between two rangebreak edges containing successive weekends - accounting for additional nightly or holiday breaks.\r\n\r\nSo if you have weekly (removing weekends) and nightly breaks (for example 9am to 9pm), you'll ignore the weeknight breaks and go halfway between Monday 9am and Friday 9pm, which is Wednesday 3pm. And if Monday is a holiday, you'll go halfway between Tuesday 9am and Friday 9pm, which is Thursday 3am - we'll have to ensure this still gets drawn despite being in a nightly break, but that's OK, there's no tick there.\r\n\r\nThings get weird if there's a Tuesday or Thursday holiday and the Monday or Friday is not a holiday - that might put one label in a weird place with this scheme. Could presumably fix that by calculating the label position in screen space rather than data space but that may be more complicated than it's worth. I'm not even going to talk about what would happen if you put weekend breaks on Tuesday and Wednesday...",
    "created_at": "2020-08-12T02:52:20Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5062#issuecomment-672519126",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5062",
    "updated_at": "2020-08-12T02:52:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice, good catch!\r\n[testing this out](https://codepen.io/alexcjohnson/pen/dyMYeXy?editors=1010) this seems to introduce a (much more minor) bug with regular non-reversed axes when the tick corresponding to the first ~tick~ label is just out-of-range, we get the full 2-line label twice:\r\n\r\n<img width=\"482\" alt=\"Screen Shot 2020-08-11 at 5 56 06 PM\" src=\"https://user-images.githubusercontent.com/2678795/89953038-5e62db80-dbfc-11ea-8587-1fe0402a75ce.png\">\r\n\r\nIt'd be nice to include jasmine tests for ^^ both forward and reversed, with the original range shifted in something like 6-hour increments - so ranges:\r\n```\r\n['2019-12-29', '2020-01-04']\r\n['2019-12-29 06', '2020-01-04 06']\r\n['2019-12-29 12', '2020-01-04 12']\r\n['2019-12-29 18', '2020-01-04 18']\r\n['2020-01-04 18', '2019-12-29 18']\r\n['2020-01-04 12', '2019-12-29 12']\r\n['2020-01-04 06', '2019-12-29 06']\r\n['2020-01-04', '2019-12-29']\r\n```\r\nAnd just check that the tick text we get in each case is as expected. Something like that should cover all the related cases, I'd think.",
    "created_at": "2020-08-11T22:06:36Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5060#issuecomment-672307059",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5060",
    "updated_at": "2020-08-11T22:07:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Related: #1181 ",
    "created_at": "2020-08-10T18:19:31Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5058#issuecomment-671511479",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5058",
    "updated_at": "2020-08-10T18:19:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @madpoptart \r\n\r\nIs the x axis categorical? Instead of download, can you screenshot your app (or at least the plot)? The only relevant PR I see in v1.54.6 is https://github.com/plotly/plotly.js/pull/4977 but we'll need more info on exactly what kind of plots this happens on before we can find the right fix.",
    "created_at": "2020-08-06T21:24:45Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5053#issuecomment-670199658",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5053",
    "updated_at": "2020-08-06T21:24:45Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice fix @ManelBH ! In fact looking around our code, we have a number of places that only `'wheel'` is used, and at least one place we have a similar fallback to this:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/a54c5028e814760b95e6243b07d7c21151166b82/src/plots/cartesian/dragbox.js#L1228-L1232\r\n\r\n`dragbox` is about our oldest interactive component, and looking at the compatibility table in https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event it seems Chrome didn't get `'wheel'` until v61 (late 2017) so until then it was crucial to support both flavors. However at this point we could in principle 🔪 `'mousewheel'` entirely.\r\n\r\nBut we don't need to clean all of that up now. It should be fine to change the test to use `'wheel'`.",
    "created_at": "2020-08-06T21:09:45Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5051#issuecomment-670193459",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5051",
    "updated_at": "2020-08-06T21:09:45Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "That’s a weird one indeed! The key question, I would say, is how can the state possibly be different immediately prior to the rotation in case 2 vs case 3? Ideally, (newPlot 1) and (newPlot 0 -> react 1) should be identical in both visible and internal state.\r\n\r\nOne observation - that doesn't directly get at this \"key question\" but could be important in finding a solution, and in fact may represent another bug: `camera.eye` has some pieces the same and some different between states 0 and 1. But we should treat any change to any component of `camera.eye` as invalidating user edits to all of `camera.eye`. See https://codepen.io/alexcjohnson/pen/wvGvREO?editors=0010 where I've set `uirevision` to a constant for all three figures, and do:\r\n1. newPlot 0\r\n2. rotate the scene\r\n3. react 1\r\n\r\nIdeally (based on my argument above), this would be the same as just newPlot 1, but you can see that it's different if you then click newPlot 1.\r\n\r\nWe may need to look into how attributes are recorded in `_preGUI`, and have this and possibly other attributes recorded together rather than separately.",
    "created_at": "2020-08-06T02:29:11Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5050#issuecomment-669646097",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5050",
    "updated_at": "2020-08-06T02:29:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "\"t\" doesn't appear in the first one only because it's excluded by autorange. If you zoom out or pan right on the x axes you'll see it's there. If your data had no \"q\" in it, that would be excluded as well, by the same logic.\r\n\r\nI doubt that was a conscious decision, and I think your implication that when `categoryorder='array'` all categories in `categoryarray` should appear regardless of what's in the axis data is probably the right answer - in which case we can simply consider this a bug and include `categoryarray` in the autorange calculation.",
    "created_at": "2020-08-03T15:52:25Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5038#issuecomment-668099316",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5038",
    "updated_at": "2020-08-03T15:52:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The fix looks great. But for low-level non-graphical items like this I'd like us to get away from using image tests. This one should just add a few more test cases to this test:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/6b6b475acbc3ff28a0d5603b16583d2444021730/test/jasmine/tests/lib_date_test.js#L551\r\n\r\nThat's both faster (in terms of our overall test suite time going forward) and more complete: we can easily add arbitrarily many cases, and it'll also tell us how the new fields play with world calendars - no need to *fix* anything that might come up there, I just want to know what we do and do not support, like:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/6b6b475acbc3ff28a0d5603b16583d2444021730/test/jasmine/tests/lib_date_test.js#L575",
    "created_at": "2020-07-29T00:01:23Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5026#issuecomment-665354288",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5026",
    "updated_at": "2020-07-29T00:01:23Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Certain formats e.g. 0.f are no longer supported by d3 and throw an error.\r\n\r\nThere are two issues with this:\r\n- We shouldn't ever throw an error, we should fall back on some default formatting and *log* an error (probably just once, otherwise this could easily dump thousands of logs)\r\n- If possible we shouldn't lose any behavior that it's possible to keep.\r\n\r\nDate formatting all goes through `lib.formatDate` - if there are cases where date formatting throws an error, we should be able to catch these there and convert them to errors. (@archmoj is that true? Any date formatting that we DON'T pass through `lib.formatDate`? If so, can we?)\r\n\r\nPerhaps then we need a similar wrapper for number formatting to catch errors, and then we can use this wrapper to backfill removed functionality? It's not actually clear to me from the D3 changelog whether this is actually removed functionality, or perhaps it was previously falling back on a default but now throws an error instead?\r\n\r\nIf it's going to take a long time to be confident we're not breaking important behavior then sure, @nicolaskruchten's suggestion to upgrade only time is reasonable. But if it can be done quickly seems worth pressing ahead.",
    "created_at": "2020-07-27T19:33:06Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5023#issuecomment-664594965",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5023",
    "updated_at": "2020-07-27T19:33:06Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @angieto - transferred to the plotly.js repo, I suspect we just didn't implement the doubleclick in 3D because it doesn't already do anything (unlike 2D where doubleclicking resets the axis ranges). But you're right that it would be nicer if we had that. In the meantime you can have your `plotly_click` handler listen for multiple events within a short time period and treat these as a doubleclick.",
    "created_at": "2020-07-24T02:29:02Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5019#issuecomment-663320841",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5019",
    "updated_at": "2020-07-24T02:29:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Per our discussion just now: In the short term this leaves too many open questions for us to feel confident about the solution. So the steps @archmoj is going to take are:\r\n- Revert #4904 and close this PR\r\n- Release a new patch version\r\n- Open a new PR that combines #4904 and this PR, to be used as a basis for discussion about how to make a coherent and complete fix for the original `Lib.coerce2` issues that we identified and support all relevant use cases.",
    "created_at": "2020-07-23T15:28:31Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5011#issuecomment-663072769",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5011",
    "updated_at": "2020-07-23T15:28:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Very nice! Just two comments:\r\n- These should have `noDot: true`, and the bar variants should have `needLine: true` (now, whether we're actually doing what we should with those flags is another matter...)\r\n- Instead of `arrow-to-bar-up` can we shorten to just `arrow-bar-up`?",
    "created_at": "2020-07-22T16:56:11Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/5010#issuecomment-662568700",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5010",
    "updated_at": "2020-07-22T16:56:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I agree - let's revert #4904 and reopen the issues it closed, then we can come back to this when we have more time to develop a full solution for both flavors. I still consider those issues bugs, in as far as there are certain things you can't do with templates and other things that do not behave the same way in the template as they do in layout, but in the short term this fix - that turns out to be incomplete - causes more problems than it solves.",
    "created_at": "2020-07-21T22:33:47Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4980#issuecomment-662141009",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4980",
    "updated_at": "2020-07-21T22:33:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "(moved to the plotly.js repo and renamed - thanks for the report @pfbuxton!)\r\n\r\nThe new `shapes[].editable` attribute is independent of the old `config.edits.shapePosition`, and for backward-compatibility the `config` one still applies to all shapes regardless of `shapes[].editable`. If you remove `config`, only the red shape is editable. @nicolaskruchten we should clarify this in the docs for `config.edits`.\r\n\r\nThe two modes work rather differently as well - with `config` the shapes are immediately edited by dragging them. But with `shapes[].editable` you need to click a shape to select it first, then you see its anchor points and you can drag them or the whole shape. However two issues to highlight @archmoj:\r\n- With the settings you have here I find it quite difficult to select the shape - the region you have to click is tiny. Can we make both the anchor point selection region and the line selection region bigger?\r\n- If I just try to drag the shape without first selecting it, I instead select all the tick label text. Not a useful behavior. Can we have a drag function as selecting the shape?",
    "created_at": "2020-07-21T22:20:28Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5006#issuecomment-662136259",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5006",
    "updated_at": "2020-07-21T22:20:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looking much better! The day and month label offsets look perfect. The only issue I see there is that sometimes there should be an extra label at the beginning (when the tick is off-plot but the label position is on-plot), and sometimes there should NOT be a label at the end (when the tick is on-plot and the label position is off-plot). See the top row in the below image.\r\n\r\nYear tick labels have this same issue, but sometimes it looks like some of the labels get offset by half a year while others get offset by half a month? See the bottom row in the below image. When you drag this axis around sometimes a single tick will shift back and forth between half-month and half-year offsets, when it's near the end of the range.\r\n\r\nAnd when minutes or smaller are shown, the labels still offset. This shift should not happen at all in that case. That's the middle three rows.\r\n\r\n<img width=\"551\" alt=\"Screen Shot 2020-07-20 at 4 27 20 PM\" src=\"https://user-images.githubusercontent.com/2678795/87984558-20b0de00-caa8-11ea-8bef-90403c715d12.png\">\r\n\r\nFinally, if you set an explicit `tickformat`, the smallest field included in the format should determine the offset, NOT `dtick`. See the image below where I set `tickformat: \"%Y %b %d\"` so the offset should be half a day, despite `dtick` being one month.\r\n\r\n<img width=\"539\" alt=\"Screen Shot 2020-07-20 at 4 42 02 PM\" src=\"https://user-images.githubusercontent.com/2678795/87984874-a9c81500-caa8-11ea-9562-10be71119d2d.png\">\r\n",
    "created_at": "2020-07-20T20:55:55Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4993#issuecomment-661328557",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4993",
    "updated_at": "2020-07-20T20:55:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Two more tidbits:\r\n- If you cause the margins to autorange via MathJax in an axis tick label, the problem goes away, even if the legend still has MathJax. So it seems like the issue is specific to the legend (maybe also colorbars with mathjax in the title? I haven't tested that.) https://codepen.io/alexcjohnson/pen/zYrJVVB?editors=0011\r\n- \"subplots whose left edge moved\" is the correct category: if the first x axis is moved so its domain does not start at 0, then this subplot has shifted data too, because its left edge moves farther left when the right margin expands. But I bet \"subplots whose top edge moved\" also have a problem - for example if the legend is drawn on the bottom (also not tested.)",
    "created_at": "2020-07-15T18:35:03Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5000#issuecomment-658933277",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5000",
    "updated_at": "2020-07-15T18:35:03Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @kndidox - confirmed, here is a simplified reproduction: https://codepen.io/alexcjohnson/pen/bGExyLW?editors=1001\r\n\r\nSome observations:\r\n- It only seems to affect subplots whose left edge moved, due to automargin involving MathJax - but it need not be the MathJax element itself that set the final margin.\r\n- The data *scale* looks correct (not the larger scale it had prior to the margin change) - it's just offset. This bodes well for fixing the bug as it implies the plotting process itself was done correctly, it's probably just that the container we're plotting into hasn't had its position updated properly.\r\n- The bug appears between v1.42.5 and v1.43.0 of plotly.js - ie 18 months old. I'm guessing it comes from https://github.com/plotly/plotly.js/pull/3323\r\n- Anything that causes a full redraw (for example, click trace \"xyz$\" in the legend to hide it) will fix the issue (though I bet it would recur if you cause an update that changes the automargin calculation)",
    "created_at": "2020-07-15T17:32:11Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/5000#issuecomment-658901928",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/5000",
    "updated_at": "2020-07-15T17:32:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "You just need to tell us to draw `xaxis3` at the end of `yaxis3` (or of `yaxis2`, since the two are overlaying) with `xaxis3.anchor=\"y3\"` https://codepen.io/alexcjohnson/pen/wvMxEaV\r\n\r\nWe could potentially have deduced that you want `xaxis3` to be drawn on the lower subplot since x3/y3 is the only one you added a trace to, but because of the possibility that a single axis is shared by multiple subplots, and use cases involving adding and removing traces, I think this would have unintended consequences and may not be possible to do robustly.",
    "created_at": "2020-07-13T17:18:54Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4998#issuecomment-657685766",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4998",
    "updated_at": "2020-07-13T17:18:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I said I was going to comment on #4911 with some more details, and I never did that, my apologies. But now that there's a PR, let me comment here in the context of your new mock. Here's the original - that has the same data and ranges as your new mock - thanks for using the same data, this makes it very clear what's going on!\r\n<img width=\"489\" alt=\"Screen Shot 2020-07-10 at 9 08 51 AM\" src=\"https://user-images.githubusercontent.com/2678795/87158351-9b4e5200-c28d-11ea-9c67-569904241958.png\">\r\nAnd here it is modified with `ticklabelmode: 'period'`:\r\n<img width=\"507\" alt=\"Screen Shot 2020-07-10 at 9 10 23 AM\" src=\"https://user-images.githubusercontent.com/2678795/87158396-ac975e80-c28d-11ea-80bb-0ee010adbab8.png\">\r\n\r\nFirst, it looks like the labels moved the wrong direction - ie right now the \"1950\" label appears between the 1900 and 1950 tick marks, it should be between 1950 and 2000.\r\n\r\nSecond, as @nicolaskruchten [noted](https://github.com/plotly/plotly.js/pull/4993#discussion_r452836768) we don't want the labels in the middle of the range, but in the middle of the period DENOTED BY THAT LABEL. So the label \"2000\" doesn't go halfway between the ticks for 2000 and 2050, it goes halfway between the beginning of 2000 and the beginning of 2001. The important thing here is what's the smallest increment of time included in the label? If it's years, the label shifts half a year into the future. If it's months, the label shifts half a month. If it's days, the label shifts half a day. It doesn't matter if `dtick` is 2 or 3 or 6 months, or even 10 years - if the label specifies months and nothing smaller, it shifts by half a month.\r\n\r\nThis needs to work whether the tick format is automatic, specified by `tickformat`, or pulled out of `tickformatstops`, which likely means we're going to have to parse the relevant format string and find the smallest time unit specifier it includes. There's an edge case here that @nicolaskruchten brought up in conversation with me: what if `dtick` is smaller than this smallest date part? Like someone specifies `tickformat='%b'` (months) and then zooms in to days? It'll look weird, as we'll have repeated \"Jan\" tick labels, but I think the thing to do here is fall back on half of `dtick` - ie the label shift is half the SMALLER of: the smallest unit displayed or `dtick`.\r\n\r\nThird, and this is the part I've discussed now separately with both @archmoj and @nicolaskruchten but never written down, I think `'period'` should cease to apply once you get to minutes precision, and we treat such times as always instants. I think this has practical benefits, in that we display minutes very often when one minute is a quite small fraction of the range, so shifting by half a minute would end up just looking like we misaligned the label; and conceptually once you start displaying times like \"12:00\" my feeling is people naturally read these as instants and not periods.\r\n\r\nWhat about hour precision? It's not part of our default formatting, that goes straight from days to minutes, so you won't get it by zooming in on a graph with automatic labels. You'll only see this if you explicitly specify a `tickformat` or `tickformatstop` with hours as the smallest unit. My feeling is people do think of \"the 12 o'clock hour\" as a period so if they've gone to the trouble of specifying this AND `ticklabelmode='period'` we should honor it.",
    "created_at": "2020-07-10T15:01:09Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4993#issuecomment-656721567",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4993",
    "updated_at": "2020-07-10T15:01:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Wondering if we should wait until lodash/lodash#4844 is resolved?\r\n\r\nSeems like if our builds and tests run, that issue isn't a problem for us, right? And anyway it's not clear yet that they're in any rush to fix it.",
    "created_at": "2020-07-08T21:33:16Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4988#issuecomment-655769497",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4988",
    "updated_at": "2020-07-08T21:33:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Seems reasonable. This probably won't be worked on by Plotly folks in the foreseeable future, but we'd happily accept a PR to support this syntax.",
    "created_at": "2020-07-08T21:27:15Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4991#issuecomment-655766927",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4991",
    "updated_at": "2020-07-08T21:27:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> is there a list of specs that the shapes / annotations / images need to fulfill?\r\n\r\nThat's a good question - no, I don't think there is. But for shapes I can't think of anything besides the `editable: true` behavior that isn't visible in the original [shapes mock](https://github.com/plotly/plotly.js/blob/master/test/image/baselines/shapes.png) or in the [attributes](https://github.com/plotly/plotly.js/blob/master/src/components/shapes/attributes.js) for shapes. The same should be true of annotations and images, as long as each of the attributes they support do the expected thing (and annotations have `editable: true` dragging too) then we should be good.",
    "created_at": "2020-07-08T21:16:28Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4958#issuecomment-655761974",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4958",
    "updated_at": "2020-07-08T21:16:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Confirmed - nice catch!",
    "created_at": "2020-07-06T21:04:21Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4979#issuecomment-654464654",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4979",
    "updated_at": "2020-07-06T21:04:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "OK thanks @wandri - seems like there still may be something funny going on here, so if this comes back and anyone can pin down exactly the conditions when it's happening, please reopen.",
    "created_at": "2020-07-02T14:28:40Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4968#issuecomment-653039325",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4968",
    "updated_at": "2020-07-02T14:28:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "These gaps correspond to 5% of the total plot width. That's currently built into our autorange algorithm and invoked whenever there are scatter markers as well as a few other situations, and at the moment it's not configurable. This is one of the items we're discussing in #1876, which has been around a long time but hasn't made it to the top of the pile yet. We'd gladly accept a PR or [sponsorship](https://plotly.com/consulting-and-oem/) to add the pieces you need.\r\n\r\nFor now you can set the axis range manually to match the data range, and set [`cliponaxis: false`](https://plotly.com/javascript/reference/#scatter-cliponaxis) in your trace to get the effect where the markers overlap the tick labels.",
    "created_at": "2020-07-01T21:20:51Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4976#issuecomment-652652589",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4976",
    "updated_at": "2020-07-01T21:20:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks fine to me too - Chrome 83 or FF 77 on Mac. Interestingly enough we had (and fixed) a similar problem last year https://github.com/plotly/plotly.js/pull/4316",
    "created_at": "2020-06-30T21:26:35Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4968#issuecomment-652054676",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4968",
    "updated_at": "2020-06-30T21:26:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Heh we’re probably falling into the trap of assuming the default sort function is numeric, but it’s actually string-based. I never did understand that choice...",
    "created_at": "2020-06-30T13:06:36Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4966#issuecomment-651778234",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4966",
    "updated_at": "2020-06-30T13:06:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I'm afraid that's right - `contourgl` is known to be buggy and we haven't seen enough interest in it to justify improving it. If you're interested in helping out we'd happily accept a PR, or [we would accept sponsorship](https://plot.ly/products/consulting-and-oem/) to accelerate it.",
    "created_at": "2020-06-27T02:04:55Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4962#issuecomment-650473378",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4962",
    "updated_at": "2020-06-27T02:04:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @kozoria - this is an issue with a plotly.js table (rendered in SVG), and I can confirm the bug, so I transferred it to the plotly.js repo. Note that Dash has its own (HTML) table https://dash.plotly.com/datatable which has a lot more functionality specifically useful to displaying and editing data in Dash.",
    "created_at": "2020-06-26T20:32:34Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4961#issuecomment-650386943",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4961",
    "updated_at": "2020-06-26T20:32:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "There is some subtlety about tooltip positioning: if you don't use `zsmooth`, each data point is drawn as a brick of constant color, and the tooltip should be drawn at the edge of the brick - normally the right edge, but when hovering on a point on the far right, when the tooltip moves to the left, its anchor jumps to the left edge of the brick. But with smoothing enabled the tooltip should be drawn at the exact data point. I haven't tested `heatmapgl` but `heatmap` does this correctly, so we should aim for `heatmapgl` to match this behavior.",
    "created_at": "2020-06-26T01:46:06Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4953#issuecomment-649902291",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4953",
    "updated_at": "2020-06-26T01:46:06Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "`text` needs the same shape as `z` https://codepen.io/alexcjohnson/pen/MWKoXOq?editors=0010",
    "created_at": "2020-06-25T13:58:01Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4956#issuecomment-649558520",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4956",
    "updated_at": "2020-06-25T13:58:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice detective work @mddr - I see the same on my Mac. It's only `about:config -> privacy.resistFingerprinting` that does this, if I go to `about:preferences#privacy` and set `strict` (which also claims to block fingerprinting) I still see the markers.\r\n\r\nI somewhat doubt this is going to be something we can fix - and anyway keeping up with \"advanced\" experimental features like this seems like a bit of an arms race. If it becomes part of standard FF behavior though we would definitely want to take a closer look.",
    "created_at": "2020-06-24T16:19:59Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4943#issuecomment-648921832",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4943",
    "updated_at": "2020-06-24T16:19:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@fazola see https://plotly.com/python/configuration-options/#customizing-download-plot-options",
    "created_at": "2020-06-24T15:30:46Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2444#issuecomment-648893442",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2444",
    "updated_at": "2020-06-24T15:30:46Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Seems to me we've seen issues like this that are also dependent on specific graphics hardware - @mddr what can you tell us about your physical system?",
    "created_at": "2020-06-23T20:22:47Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4943#issuecomment-648397398",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4943",
    "updated_at": "2020-06-23T20:22:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "ooh Ricky's demo has some nice features for single-surface presentation - I really like his \"cartoon edges\" and an option to let the wireframe show through an otherwise opaque surface could be cool. But I don't think this helps us with multiple traces - or a single trace that makes multiple surfaces.\r\n\r\nI like the [dual depth peeling](https://tsherif.github.io/webgl2examples/oit-dual-depth-peeling.html) demo he pointed out - not sure quite what's going on there but it looks promising.",
    "created_at": "2020-06-19T19:40:58Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4643#issuecomment-646832820",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4643",
    "updated_at": "2020-06-19T19:40:58Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> this will fail due to exogenous reasons all the time and block unrelated PRs unfortunately I think.\r\n\r\nI guess. Can we put it in [`noci_test.sh`](https://github.com/plotly/plotly.js/blob/master/tasks/noci_test.sh) then, so we at least catch any new issues before making a release? It would be a shame to go through all this work and not be able to say future releases are all clean as of their release date. That would still give us the option to release with a known vulnerability if fixing it is more than a small task, but it would be a conscious decision at least.",
    "created_at": "2020-06-19T01:39:58Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4930#issuecomment-646387875",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4930",
    "updated_at": "2020-06-19T01:39:58Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Fantastic work! Can we add a test to 🔒 the \"`found 0 vulnerabilities`\" audit result?",
    "created_at": "2020-06-18T21:29:09Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4930#issuecomment-646315353",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4930",
    "updated_at": "2020-06-18T21:29:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Your application likely does use blended or calculated colors even if you didn't ask for them explicitly - they show up a lot in hover labels, among other places.\r\n\r\nThere was discussion in https://github.com/plotly/plotly.js/issues/2355 about potentially switching to presentation attributes rather than styles, and AFAIK these have lower precedence so may avoid the need for `!important`. That option is certainly still up for discussion, though I'm a bit worried about that causing plots to pick up unwanted CSS overly-broadly targeted elsewhere on the site.\r\n\r\nThus far we haven't considered classes within the plot to be part of the public API - so in principle they (and the element structure) could change at any time. We could imagine changing that stance, and documenting and committing to these classes. But this still comes with all the pitfalls I mentioned above, as would an additional CSS or custom class API.",
    "created_at": "2020-06-12T02:05:30Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4915#issuecomment-643023758",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4915",
    "updated_at": "2020-06-12T02:05:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @nicholasdgoodman - I moved this request to the plotly.js repo, as that's where this color sanitizing happens (as well as everything else internal to the `figure` prop of `dcc.Graph`). If you find that this request applies to any other Dash components please open a new issue in the relevant component repo - although my hunch is that in as far as styles like this are used in other components they likely already behave as you would like.\r\n\r\nAs to plotly.js and its color handling, there are a few reasons for us to sanitize colors here:\r\n- Portability: able to be rerendered on its own or within a different page. Right now perhaps the most obvious consequence of this is exporting the graph in formats not supported natively by the browser, which we have to do by passing the graph spec to another process to render and then convert.\r\n- Blended or calculated colors: there are times we need to manually blend two or more colors together, or pick a high-contrast color automatically based on a user-supplied. It's possible there's a way to do this with css colors, ie figure out how the browser would interpret the variables and use that in our calculations, but then we'd also need to know to redo that part of the render if you change those variables...\r\n- Multiple renderers: some trace types have both SVG and WebGL variants, that look nearly identical but are drawn completely differently behind the scenes. Again, the WebGL version would need to materialize any css variables and respond if they change.\r\n\r\nThese issues may have solutions (or may not, I don't actually know) but I hope this makes clear that it's not as easy as \"stop converting to rgba\"\r\n\r\nPlotly does have some functionality in Dash Enterprise that serves a similar purpose to what you're  describing; it's largely based on `layout.template` https://plotly.com/python/templates/",
    "created_at": "2020-06-11T13:59:43Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4915#issuecomment-642673280",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4915",
    "updated_at": "2020-06-11T13:59:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Here's the key logic:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/fbb5742241dcc46b84f508bad812c975d7f06b16/src/plots/cartesian/axis_autotype.js#L17-L25\r\n\r\nWith the specific tests later in that file.\r\n\r\nPutting this logic into words:\r\n- We only test the data from the first trace on the axis.\r\n- First check for multicategory, then date, then category, then number\r\n- multicategory is just a shape test (do we have a nested array)\r\n- dates and categories: require **more than twice as many distinct date or category strings** as distinct numbers or numeric strings in order to choose that axis type.\r\n  - Both of these test an evenly-spaced sample of at most 1000 values\r\n  - Small detail: the category test sorts every value into either number or category, whereas for dates, 2- and 4-digit integers count as both dates and numbers.\r\n- If those tests failed and we have at least one number in the data, choose numeric (linear)\r\n- But if there are no numbers either, leave the axis untyped - will display as linear but when more data comes in we'll run this test again.",
    "created_at": "2020-06-10T16:11:33Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4889#issuecomment-642110905",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4889",
    "updated_at": "2020-06-10T16:11:33Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This is not a high priority, unless it's blocking someone specific.\r\n\r\nThe \"working demo\" isn't actually working either - it's displaying the dates using the input data calendar, but should really be displaying them using the axis calendar. It looks as though the current behavior is trying to take the input data and treat it as though it's already a date from the axis calendar. What it should really be doing is taking the calcdata (milliseconds) value, and converting that back to a date according to the axis calendar, and displaying that. If the calcdata value isn't available, it would need to re-create it - ie first convert from input calendar date to milliseconds, then convert back to an axis calendar date.",
    "created_at": "2020-06-09T20:31:18Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4629#issuecomment-641552741",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4629",
    "updated_at": "2020-06-09T20:31:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Dunno, this was filed before we had a habit of including codepens with every bug report. Obviously not a very high priority though 🙃 ",
    "created_at": "2020-06-08T21:09:28Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1248#issuecomment-640888101",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1248",
    "updated_at": "2020-06-08T21:09:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@brubbel the png behavior is not a regression - going back to v1.51.1 or earlier we see this same behavior that the bars disappear in the png output. We might consider it a bug, but this is a little tricky. Normally for a plot downloaded as an image we disable both rounding positions and `shape-rendering: crispEdges`, because the same machinery can produce vector output (eps, pdf, svg) and even for raster output it can scale up to higher resolution. In all of those cases this rounding and disabled antialiasing would degrade the output.\r\n\r\nBut for the default output of the download button - 1:1 scaled raster - it would make sense to carve out an exception and retain the behavior used on interactive plots.",
    "created_at": "2020-06-08T13:30:55Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4567#issuecomment-640604452",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4567",
    "updated_at": "2020-06-08T13:30:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj if we're going to add this we'd better make sure it doesn't say `failing`, and add the circleci check so it stays that way.\r\n\r\nI tried to see what's going on with the `failing` status but it seems someone needs to invite me to fossa?",
    "created_at": "2020-06-03T21:00:12Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3947#issuecomment-638458746",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3947",
    "updated_at": "2020-06-03T21:00:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This is a tricky one - there are also lots of data sets for which interpreting the data as numbers _is_ the desired outcome that are mostly numbers but have some non-numeric values like `\"n/a\"` or similar - and more often than you'd like these aren't clean, there are several varieties of non-numeric entry.\r\n\r\nThe fact that we treat numeric strings identically to numbers is at this point mostly a historical artifact (largely driven by [Chart Studio](https://chart-studio.plotly.com/)) but I don't think that's something we would want to alter without a major version bump.\r\n\r\nSo unless we can come up with a very robust heuristic to identify certain sets of mixed numbers and strings as definitively category data, I don't think we can change this behavior.",
    "created_at": "2020-06-02T20:47:50Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4889#issuecomment-637797274",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4889",
    "updated_at": "2020-06-02T20:47:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Let's keep the discussion here for now. Looking at @jackparmer's comment https://github.com/plotly/plotly.js/issues/170#issuecomment-317063282 the only remaining items are heatmap and line - is that right or is there anything else people would like add selections to? I'm not sure what this would look like for lines so for now I'm just going to talk about heatmaps.\r\n\r\nI think what will be needed is:\r\n- attributes for selection styling - as far as I can see the only thing that really makes sense would be `unselected.opacity`. Or perhaps it wouldn't really be an opacity, if we implement this by overlaying a shape that partially masks the heatmap? Then it could be something like `unselected.fade` and `unselected.bgcolor`?\r\n- figure out what the `selectedpoints` attribute should look like for `heatmap` traces - I guess when the heatmap came from all 1D arrays it can just be an array of indices, but when `z` is a 2D array, the equivalent of an array of point indices would be an array of length-2 arrays, `[row, column]`? This line from hover (that controls hover and click event data) looks like the behavior to match:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/5b8b1db1386b82db747cbad239fed754e624a18f/src/traces/heatmap/hover.js#L115\r\n\r\n- Implement the selection by making a `heatmap/selectedPoints` routine - the PRs linked in https://github.com/plotly/plotly.js/issues/170#issuecomment-317063282 should give a good idea how to implement this and expose it in the trace module.\r\n- Implement drawing the selection within `heatmap/plot` or `heatmap/style`. The two general ways I can imagine doing this are: (1) alter the colors of the image we draw for the heatmap itself, or (2) [mask](http://tutorials.jenkov.com/svg/mask.html) the image element. (1) would be pretty easy to implement, but I don't think it'll do what we need: it would mean redrawing the whole heatmap every time a new element is added to or removed from the selection (`heatmap/plot`), and it would make blurred edges with `zsmooth: fast`. (2) will be trickier to implement but can go in `heatmap/style` and would have crisp edges regardless of `zsmooth`.",
    "created_at": "2020-06-01T17:21:37Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/170#issuecomment-636998145",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/170",
    "updated_at": "2020-06-01T17:21:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Certainly looks like a bug to me - thanks for the report @cjacksudo!\r\n\r\nDid a little poking around - if you ask for an svg download (using `config` option `toImageButtonOptions: {format: 'svg'}`) the font is included correctly, so the problem is at the svg -> raster step.\r\n\r\nMy guess is the problem is with this canvas:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/5b8b1db1386b82db747cbad239fed754e624a18f/src/snapshot/toimage.js#L44\r\n\r\nnot being appended to the DOM, so it doesn't have access to fonts loaded in the document. Possibly just adding it to the DOM (but putting it offscreen somewhere) would fix the issue?",
    "created_at": "2020-06-01T14:59:38Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4885#issuecomment-636908203",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4885",
    "updated_at": "2020-06-01T14:59:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "LGTM - orca test maybe, but perhaps even more useful would be testing in IE11?",
    "created_at": "2020-05-27T21:43:10Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4881#issuecomment-634957988",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4881",
    "updated_at": "2020-05-27T21:43:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for the report @mizeljko - it looks like our overlap avoidance system fails to account for multi-line labels.\r\n\r\nThe logic we use is that the second line is omitted if it's the same as the previous displayed second line. You can see that this happens even with a manual `tickformat` if you reverse the order of the lines in your second codepen: `%Y-%m-%d\\n%H:%M:%S` -> `%H:%M:%S\\n%Y-%m-%d`\r\n\r\nSo it seems to me there's one bug here: multiline labels overlapping when they're rotated (particularly when rotated 30 degrees)\r\n\r\nAnd there's one feature request: disable the matching-second-line removal.",
    "created_at": "2020-05-27T21:30:07Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4880#issuecomment-634952039",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4880",
    "updated_at": "2020-05-27T21:30:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Good catch @MrHejtmar - we should probably just disable brushing entirely on any single-valued dimension.",
    "created_at": "2020-05-27T17:05:56Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4876#issuecomment-634806867",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4876",
    "updated_at": "2020-05-27T17:05:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Moved to the plotly.js repo, as this functionality would need to be added to the `scatter3d` trace type, or be added as a new trace type specifically for 3D networks.",
    "created_at": "2020-05-26T13:19:09Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4869#issuecomment-634019708",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4869",
    "updated_at": "2020-05-26T13:19:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for the investigation and PR @cy6eria!\r\n\r\n@archmoj The tests pass in this PR, do they exercise `preprocess` / `update_version`? If this patch works on both node 12 and node 14, it seems like a good idea to accept it, as it will make things easier once we're ready to bump to 14. If it breaks our workflow on 12 then we can leave this PR open and use it as the base for our eventual upgrade to 14.",
    "created_at": "2020-05-26T03:48:18Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4864#issuecomment-633792854",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4864",
    "updated_at": "2020-05-26T03:48:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I think the problem is a little more subtle than that. We *do* support templating axes, but currently `Lib.coerce2` does not consider a template value to be \"non-default.\"\r\n\r\nConsider: just adding empty containers for the axes also doesn't show the ticks:\r\n```js\r\nPlotly.newPlot(gd, {\r\n  data: data,\r\n  layout: {\r\n    template: {layout: layout},\r\n    yaxis: {},\r\n    xaxis: {}\r\n  }\r\n});\r\n```\r\n\r\nBut if you explicitly turn the ticks on they have the style from the template:\r\n```js\r\nPlotly.newPlot(gd, {\r\n  data: data,\r\n  layout: {\r\n    template: {layout: layout},\r\n    yaxis: {ticks: 'outside'},\r\n    xaxis: {ticks: 'inside'}\r\n  }\r\n});\r\n```\r\n\r\nAnd if you turn ticks on explicitly from the template, that also makes them appear:\r\n```js\r\nvar layout = {\r\n  \"yaxis\": {\r\n    \"type\": \"log\",\r\n    \"tickwidth\": 5,\r\n    \"tickcolor\": \"green\",\r\n    ticks: 'outside'\r\n  },\r\n  \"xaxis\": {\r\n    \"type\": \"date\",\r\n    \"tickwidth\": 50,\r\n    \"tickcolor\": \"red\",\r\n    ticks: 'outside'\r\n  }\r\n};\r\nPlotly.newPlot(gd, {\r\n  data: data,\r\n  layout: {\r\n    template: {layout: layout}\r\n  }\r\n});\r\n```\r\n\r\nWhat's happening is in this block:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/bee245587214ed5f1fcc23fcad8006eb75f7cfe2/src/plots/cartesian/tick_mark_defaults.js#L21-L24\r\n\r\n`Lib.coerce2` returns `false` because no user value was provided, even though the template provided a value. So `ticks` defaults to `''` rather than `'outside'`.\r\n\r\nIn this particular case I think it's clear that we want to consider the template value to be \"non-default\" and to therefore cause ticks to be shown. I _think_ that's a generally true statement, following from the principle that `layout: obj` should produce equivalent output to `layout: {template: {layout: obj}}`, so we should fix that at the level of `Lib.coerce2`, but we should explore some of the other uses of `Lib.coerce2` before deciding that for sure.",
    "created_at": "2020-05-21T21:45:55Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4852#issuecomment-632362959",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4852",
    "updated_at": "2020-05-21T21:45:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ha OK, so we're just removing the restriction on `axType`. Makes me wonder why that was there in the first place but that's probably lost to the mists of time... looks great and it does appear to work! One thing I was worried about is if on log axes `tickvals` would need to be in linearized form (0,1,2), but they're in data form (1,10,100) as they should be 🎉 \r\n\r\nLet's add a mock showing both axis types - here's your codepen modified to include log, that would be sufficient I think: https://codepen.io/alexcjohnson/pen/ExVrYrP - then it would be ready to go!\r\n<img width=\"1086\" alt=\"Screen Shot 2020-05-20 at 10 53 48 PM\" src=\"https://user-images.githubusercontent.com/2678795/82518188-c9fd4700-9aec-11ea-8b27-39d45868bc2a.png\">\r\n",
    "created_at": "2020-05-21T03:02:49Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4851#issuecomment-631850669",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4851",
    "updated_at": "2020-05-21T03:02:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "If we want to be precise about the data we're encoding when we make a bar chart, the `x` values for a horizontal bar chart are intended to be the *size* of each bar, but we conflate this with the *end position* of each bar because of the implicit `base=0`. That's fine on numeric axes where zero is well-defined, so the size is always referenced to zero unless you provide a `base` to move the reference. But on a date axis:\r\n- There's no zero, so in principle bars are meaningless until we define both the base and the size. Internally javascript uses the unix convention of Jan 1 1970, but that's meaningless to users.\r\n- Once you do provide a `base`, the `x` attribute unambiguously means size, and using a date as the bar size is meaningless. Again, we can ascribe it meaning based on js internals but that has no relevance to anyone's data. However using a number as milliseconds is completely well-defined, so if the bar doesn't have the correct size that's a bug.\r\n\r\nSo the only 100% meaningful data users can give us for bars on date axes is `base` as date strings and size as numbers of milliseconds. If we ever implement #4559, an \"end\" parameter, then users could also specify both `base` and `end` as date strings. Anything else is just a workaround users may have used before we had the correct options; we should try to keep these working to the extent we can but not at the expense of these two well-defined cases.",
    "created_at": "2020-05-20T15:07:20Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4558#issuecomment-631534728",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4558",
    "updated_at": "2020-05-20T15:07:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Low priority, but a thrown error preventing rendering is a bug even if it resulted from garbage input. ",
    "created_at": "2020-05-20T12:30:12Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4844#issuecomment-631443280",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4844",
    "updated_at": "2020-05-20T12:30:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@mbkupfer the point is this isn't an HTML `<div>` with text inside it, so you can't style it as though it were; it's an SVG `<path>` with an SVG `<text>` on top. So if we allow arbitrary CSS it'll probably only apply to the `<path>`, and the attributes are quite different from those that apply to a `<div>`. Some are the same, but there's `fill` rather than `background-color` for example, and if we wanted to support `border-radius` we would need to manually build that into the path data, it can't be done through a simple style attribute.",
    "created_at": "2020-05-19T18:39:30Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2342#issuecomment-631006530",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2342",
    "updated_at": "2020-05-19T18:39:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "To be clear about what people want here, it's the ability to add legend items corresponding to certain items in `layout.shapes`, right? Which would presumably allow those shapes to be toggled on or off by clicking the legend. (As opposed to inserting new custom shapes into existing legend entries, which seems to be how @etpinard interpreted this query originally)\r\n\r\nThis isn't on our roadmap, though if a company were interested in sponsoring it we'd be happy to talk https://plotly.com/consulting-and-oem/\r\n\r\nBut absolutely we'd be happy to accept and review a pull request. Before starting we should nail down the attributes to be created. I'm thinking these would be (within `shapes/attributes`):\r\n- `showlegend` (boolean)\r\n- `legendgroup` (string) - so you can toggle multiple shapes together\r\n- `visible` needs to add the option `'legendonly'`\r\n\r\nIf that's all we add, shapes will all show up at the bottom of the legend, unless they're put into the same `legendgroup` as an earlier trace. Hopefully that's OK for the first version, later we can think about some more flexible ordering options.\r\n\r\nAnything I'm missing?",
    "created_at": "2020-05-15T14:24:43Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/98#issuecomment-629264721",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/98",
    "updated_at": "2020-05-15T14:24:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Why do both of the new baselines have an \"18:27\" tick right at the end?\r\n<img width=\"90\" alt=\"Screen Shot 2020-05-14 at 6 55 35 PM\" src=\"https://user-images.githubusercontent.com/2678795/81993858-99ad3880-9614-11ea-8be6-e7e4efcbaee2.png\">\r\n",
    "created_at": "2020-05-14T22:56:41Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4831#issuecomment-628928241",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4831",
    "updated_at": "2020-05-14T22:56:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> One thing that will come up then sometimes is that all your `y` values (in default orientation) would be numbers and all your `base` values would be dates... I think we should auto-detect the `xaxis.type` to `date` in this case... thoughts?\r\n\r\nAssuming you meant `yaxis.type` then yes, that sounds right. Basically, if there's a `base` on `bar` traces, use that for autotype rather than `y` (in default orientation 😉).\r\n\r\n> Let's move this to at least a minor.\r\n\r\nAs a tightly-scoped issue this is unambiguously a bug. Of course it will need careful testing but I think it's fine in a patch.",
    "created_at": "2020-05-14T04:03:17Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4558#issuecomment-628372988",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4558",
    "updated_at": "2020-05-14T04:03:17Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj I think this is to be expected when you provide dates as milliseconds:\r\n```js\r\n    \"xbins\": {\r\n        \"start\": 1578002100000,\r\n        \"end\": 1578063300000,\r\n        \"size\": 600000\r\n    }\r\n```\r\n\r\nPresumably `xbins.start/end` can be strings and then everything is self-consistent?",
    "created_at": "2020-05-12T19:13:14Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4828#issuecomment-627538154",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4828",
    "updated_at": "2020-05-12T19:13:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Possibly related: #4718 ",
    "created_at": "2020-05-11T22:13:33Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4826#issuecomment-626993759",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4826",
    "updated_at": "2020-05-11T22:13:33Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> we basically identify 1970-01-01 as zero in many contexts, so I could see us just reifying that...\r\n\r\nwe could, but I don't really see the point - does that help anyone? We should just push people to choose an explicit `base`.\r\n\r\n> What about when the base is also specified in milliseconds?\r\n\r\nThen it should have the legacy timezone-dependent behavior, matching all other absolute position values on date axes, unless and until we change that behavior for `scatter` etc. Otherwise if you try to align two traces to each other you'd need to know which uses the timezone offset and which doesn't.\r\n\r\nI really think that until we get around to either implementing real time zone support or releasing a v2, we just need to keep the existing meaning of absolute numeric positions on date axes, and make it self-consistent. For new projects (once we fix the bar length bug part of this) the recommendation is straightforward: use strings for absolute dates and milliseconds for relative dates.",
    "created_at": "2020-05-11T17:55:34Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4558#issuecomment-626857689",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4558",
    "updated_at": "2020-05-11T17:55:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Bars on date axes are meaningless with no base - there's no such thing as zero. So while that's indeed funny behavior, I'm not inclined toward any sort of action to define one behavior as \"correct\".\r\n\r\nIn the scatter case we've long held this to be an unfortunate early decision that we're now locked into until we either make a new major or add explicit time zone handling. The issue is folks constructing their data client side as `new Date(...).getTime()` which bakes in the time zone offset, then we just take it back out while plotting - ie `new Date('1970-01-02 00:00')` is expected to behave the same as `'1970-01-02 00:00'`. I suppose we could have a discussion about whether we still view that use case as significant enough that changing it would constitute a breaking change - I'd love to do this in a v2 but I'm hesitant to make that change in v1.\r\n\r\nFor bars _with base_ though I'm 100% on board with considering our interpretation of milliseconds a bug. Using the JS `Date` machinery to construct bar lengths with some arbitrary base would be extremely weird, and \"x milliseconds\" has an obvious meaning that we're not following. We should handle this in such a way that the existing date-string behavior is preserved.",
    "created_at": "2020-05-11T14:21:36Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4558#issuecomment-626731929",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4558",
    "updated_at": "2020-05-11T14:21:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I haven't tried `histogram2d` with `rangebreaks` but I know it shares a lot of code with `heatmap` so seems natural to address them together.",
    "created_at": "2020-05-08T19:41:05Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4821#issuecomment-625984789",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4821",
    "updated_at": "2020-05-08T19:41:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Does this fix also support `histogram2d` with rangebreaks?",
    "created_at": "2020-05-08T16:05:35Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4821#issuecomment-625888224",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4821",
    "updated_at": "2020-05-08T16:05:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj let's split this issue into two pieces, as I describe in my comment, so we can be very clear about the behavior we're targeting:\r\n- If you explicitly specify `tick0` and `dtick`, those should be respected exactly, but if any given tick falls inside a rangebreak, its displayed position should be moved to the very end of the break and only the tick closest to the end of the break should actually be displayed if there are multiple within the break.\r\n- If we're picking `tick0` and `dtick` for you, we should pick values that maximize uniformity of spacing, but after having chosen a `tick0` and `dtick` the behavior should follow the behavior of the first point.\r\n\r\nImage tests may not be the best way to cover this, especially the second part. Certainly one or two images but jasmine tests will let us lock down many more cases. We want many different axes showing all spans of range (leading to any autodtick from 1 to 24 hours, with a focus on the values between 1 and 24 but showing exactly where we transition from 1 or 24 to the next intermediate value) and different spans of hour rangebreaks (removing anything from ~4 hours up to ~20 hours with different starting points. The most common I guess will be removing either 8 hours (eg [0, 8] or [21, 5]), 12 hours (eg [21, 9], [20, 8]), or 16 hours (eg [16, 8] or [17, 9]), maybe 15 too (eg [17, 8] or [18, 9]) so you see 9 hours in a day, showing both ends of an 8-hour workday ie 9am and 5pm or 8am and 4pm.",
    "created_at": "2020-05-06T21:08:15Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4722#issuecomment-624892053",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4722",
    "updated_at": "2020-05-06T21:08:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "What's going on in test/image/baselines/axes_breaks-gridlines.png ? The ticks seem to have moved to the last day of the month, which means \"Mar 2015\" is actually at March 31, ie essentially where an April 1 tick should have been, so it looks like we're labeling April as March.\r\n\r\nThis seems consistent on the autorange view, but if you zoom in a bit to 1-month ticks things get worse: some ticks seem to be on the last day of the month, others on the first, so sometimes you get two identical ticks:\r\n<img width=\"720\" alt=\"Screen Shot 2020-05-06 at 4 19 40 PM\" src=\"https://user-images.githubusercontent.com/2678795/81224246-68e65700-8fb5-11ea-89f1-2df79c1e8fa2.png\">\r\n\r\nI guess I'm nervous about doing this at the level of `tick0` in general - particularly if you have some funny non-periodic breaks, shifting `tick0` could result in other ticks that don't need to move at all getting moved. Seems to me the solution needs to be about moving each individual tick out of a break if it falls within one.\r\n\r\nThis PR also still has the odd spacing issue for automatically-determined `tick0` and `dtick` values. See test/image/baselines/axes_breaks-weekends-weeknights.png - to solve that we'll likely need to adjust this algorithm when there are hourly ticks > 1 h along with hour rangebreaks.\r\n<img width=\"489\" alt=\"Screen Shot 2020-05-06 at 4 38 45 PM\" src=\"https://user-images.githubusercontent.com/2678795/81225987-207c6880-8fb8-11ea-809b-3d3d915bc090.png\">\r\n",
    "created_at": "2020-05-06T20:40:12Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4734#issuecomment-624879144",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4734",
    "updated_at": "2020-05-06T20:40:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "There’s no Cartesian subplot so there should be no red, just white. ",
    "created_at": "2020-05-04T14:46:44Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4807#issuecomment-623508382",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4807",
    "updated_at": "2020-05-04T14:46:44Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Oh definitely a bug",
    "created_at": "2020-05-04T14:42:17Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4807#issuecomment-623505892",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4807",
    "updated_at": "2020-05-04T14:42:17Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "`plot_bgcolor` only applies to cartesian subplots AFAIK. All the other subplot types have their own subplot container objects (in this case `scene`) with their own `bgcolor` attributes. Might have been a good idea for these to inherit from `plot_bgcolor` but I think that ship has sailed.\r\n\r\nIf you add `scene: {bgcolor: \"green\", domain: {x: [0,0.7]}}` to the second `layout` you'll see both green and blue after `react`-ing from 0 to 1",
    "created_at": "2020-05-04T14:06:15Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4807#issuecomment-623484999",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4807",
    "updated_at": "2020-05-04T14:06:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Anyway we don't need to answer every last question about package-lock tonight 😅 This is fantastic, the 💃 above still applies 🥇 ",
    "created_at": "2020-05-02T03:45:49Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4802#issuecomment-622663372",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4802",
    "updated_at": "2020-05-02T03:45:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "If I run `npm i` without removing `node_modules`, I again get `bindings` and `file-uri-to-path` added to `package-lock`. But if I remove `node_modules` first, _then_ run `npm i`, I get no changes to `package-lock` at all 🎉 \r\n```\r\nYour branch is up-to-date with 'origin/rebuild-package-lock-May01-2020'.\r\nnothing to commit, working tree clean\r\n```\r\n\r\nThis looks great, but what does `not allowing any bump by removing ^ before npm i` mean? What command(s) did you run?",
    "created_at": "2020-05-02T03:43:10Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4802#issuecomment-622663182",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4802",
    "updated_at": "2020-05-02T03:43:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Much closer - now if I do the same reinstall vs your latest commit I get:\r\n```\r\n package-lock.json | 18 ++++++++++++++++++\r\n 1 file changed, 18 insertions(+)\r\n```\r\n\r\nSpecifically:\r\n\r\n```\r\ndiff --git a/package-lock.json b/package-lock.json\r\nindex 6e0131d..b447142 100644\r\n--- a/package-lock.json\r\n+++ b/package-lock.json\r\n@@ -875,6 +875,16 @@\r\n       \"resolved\": \"https://registry.npmjs.org/binary-search-bounds/-/binary-search-bounds-2.0.4.tgz\",\r\n       \"integrity\": \"sha512-2hg5kgdKql5ClF2ErBcSx0U5bnl5hgS4v7wMnLFodyR47yMtj2w+UAZB+0CiqyHct2q543i7Bi4/aMIegorCCg==\"\r\n     },\r\n+    \"bindings\": {\r\n+      \"version\": \"1.5.0\",\r\n+      \"resolved\": \"https://registry.npmjs.org/bindings/-/bindings-1.5.0.tgz\",\r\n+      \"integrity\": \"sha512-p2q/t/mhvuOj/UeLlV6566GD/guowlr0hHxClI0W9m7MWYkL1F0hLo+0Aexs9HSPCtR1SXQ0TD3MMKrXZajbiQ==\",\r\n+      \"dev\": true,\r\n+      \"optional\": true,\r\n+      \"requires\": {\r\n+        \"file-uri-to-path\": \"1.0.0\"\r\n+      }\r\n+    },\r\n     \"bit-twiddle\": {\r\n       \"version\": \"1.0.2\",\r\n       \"resolved\": \"https://registry.npmjs.org/bit-twiddle/-/bit-twiddle-1.0.2.tgz\",\r\n@@ -4040,6 +4050,13 @@\r\n       \"integrity\": \"sha512-r70c72ln2YHzQINNfxDp02hAhbGkt1HffZ+Du8oetWDLjDtFja/Lm10lUaSh9e+wD+7VDvPee0b0C9SAy8pWZg==\",\r\n       \"dev\": true\r\n     },\r\n+    \"file-uri-to-path\": {\r\n+      \"version\": \"1.0.0\",\r\n+      \"resolved\": \"https://registry.npmjs.org/file-uri-to-path/-/file-uri-to-path-1.0.0.tgz\",\r\n+      \"integrity\": \"sha512-0Zt+s3L7Vf1biwWZ29aARiVYLx7iMGnEUl9x33fbB/j3jR81u/O2LbqK+Bm1CDSNDKVtJ/YjwY7TUd5SkeLQLw==\",\r\n+      \"dev\": true,\r\n+      \"optional\": true\r\n+    },\r\n     \"filing-cabinet\": {\r\n       \"version\": \"2.5.1\",\r\n       \"resolved\": \"https://registry.npmjs.org/filing-cabinet/-/filing-cabinet-2.5.1.tgz\",\r\n@@ -11795,6 +11812,7 @@\r\n           \"dev\": true,\r\n           \"optional\": true,\r\n           \"requires\": {\r\n+            \"bindings\": \"^1.5.0\",\r\n             \"nan\": \"^2.12.1\",\r\n             \"node-pre-gyp\": \"*\"\r\n           },\r\n```\r\n\r\nMaybe these are Mac-only requirements... doesn't bother me. The test failures do though 🙄 ",
    "created_at": "2020-05-02T01:59:37Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4802#issuecomment-622652654",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4802",
    "updated_at": "2020-05-02T01:59:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "yes, that `1620 insertions(+), 2785 deletions(-)` is vs the tip of this branch.",
    "created_at": "2020-05-02T01:36:57Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4802#issuecomment-622650139",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4802",
    "updated_at": "2020-05-02T01:36:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Mac OS 10.15.4, on this branch, substantial changes:\r\n```\r\n> node --version\r\nv12.13.1\r\n> npm --version\r\n6.13.7\r\n> rm package-lock.json\r\n> rm -rf node_modules\r\n> npm i\r\n> git diff --stat\r\n package-lock.json | 4405 ++++++++++++++++++++---------------------------------\r\n 1 file changed, 1620 insertions(+), 2785 deletions(-)\r\n> npm audit\r\nfound 15 vulnerabilities (7 low, 8 moderate) in 13866 scanned packages\r\n```",
    "created_at": "2020-05-02T01:26:41Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4802#issuecomment-622649050",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4802",
    "updated_at": "2020-05-02T01:26:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> That is a very good idea we could try in another PR.\r\n\r\n🍻 fair enough - added to #4733 so we address it before considering that issue closed.\r\n\r\nThis looks great. You currently have the require statements for the mocks all commented out - can we enable the ones you've fixed already, just comment out the still-failing ones, and call this PR done?",
    "created_at": "2020-05-01T04:26:26Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4762#issuecomment-622241868",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4762",
    "updated_at": "2020-05-01T04:26:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "From #4762: before we consider this issue closed, new mocks must automatically be part of the validation test. IMO that's actually more important than making sure we validate all the existing mocks, though both parts would be useful.\r\n\r\n> > My primary question is about the hard-coded list in `mocks_test` - seems like we should be able to\r\n> > \r\n> > * read in the list of _all_ mocks from the filesystem - perhaps if this step is fast enough we can just have `karma.conf.js` do it before every test run and write the results to a file in `tests/jasmine/assets`?\r\n> > * only list a set of mocks or patterns to ignore - and then over time we can reduce that to an empty list.\r\n> \r\n> @alexcjohnson\r\n> That is a very good idea we could try in another PR.\r\n> At first I did try to adapt our image test for this purpose.\r\n> But it was rather complicated to acess the system files from the jasmine test.",
    "created_at": "2020-05-01T04:13:27Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4733#issuecomment-622239123",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4733",
    "updated_at": "2020-05-01T04:13:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "My concern with `null` is that it won’t set the attribute at all in `fullData`, which is a problem for RCE, it won't know that this attribute should be available. Perhaps we can use `'auto'` as the default, and then strip it out before sending to the underlying mapbox library?",
    "created_at": "2020-04-30T19:07:48Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4794#issuecomment-622045616",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4794",
    "updated_at": "2020-04-30T19:07:48Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "heh OK, that was my instigation :) I'm not sure a simple `null` is exactly what we want but I'll look at your fixup PR now @archmoj ",
    "created_at": "2020-04-30T19:03:56Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4575#issuecomment-622043653",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4575",
    "updated_at": "2020-04-30T19:03:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj I just had a quick look at this - very nice! Let's not touch it until 1.54.0 is released, but as this doesn't impact features at all we can include it in a patch after that.\r\n\r\nMy primary question is about the hard-coded list in `mocks_test` - seems like we should be able to\r\n- read in the list of *all* mocks from the filesystem - perhaps if this step is fast enough we can just have `karma.conf.js` do it before every test run and write the results to a file in `tests/jasmine/assets`?\r\n- only list a set of mocks or patterns to ignore - and then over time we can reduce that to an empty list.",
    "created_at": "2020-04-30T16:01:18Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4762#issuecomment-621946163",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4762",
    "updated_at": "2020-04-30T16:01:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Fixed by #4783 🎉 ",
    "created_at": "2020-04-27T03:24:11Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4784#issuecomment-619690502",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4784",
    "updated_at": "2020-04-27T03:24:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Huh, are you sure the upper segments stayed as one trace? I'm not aware of any situation in which we can return multiple hover values from a single scatter trace. Regardless, if the traces have any mismatch of x values (in this case it looks like Jun 26 2018 is missing from the upper & lower) the problem can in principle still occur.",
    "created_at": "2020-04-24T19:56:27Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4787#issuecomment-619211948",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4787",
    "updated_at": "2020-04-24T19:56:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for bringing this up @lucascibona - I've moved the issue to plotly.js. I don't think we can consider it purely a bug, because there are some cases, primarily when two traces have mismatched x values throughout, where you *need* this behavior or you'll never see hover data for one of them. But it did come up when we were implementing unified hover that this would be very useful in many situations.\r\n\r\nIn your particular case, you may be able to solve it by concatenating all your `upper` traces into one trace with `null` values separating the segments so the appearance is unchanged, and the same for `lower`. But even if that solves it for you, I'd like to leave this issue open to discuss a more general solution.",
    "created_at": "2020-04-23T18:53:38Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4787#issuecomment-618590393",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4787",
    "updated_at": "2020-04-23T18:53:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @jcunhafonte - moved to a new issue https://github.com/plotly/plotly.js/issues/4786",
    "created_at": "2020-04-23T17:52:42Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4620#issuecomment-618548953",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4620",
    "updated_at": "2020-04-23T17:52:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice detective work @oshikryu - that part is definitely a bug, we should probably do something like we do in `dash-table` and always sort null / invalid values at the end, regardless of sort order. I think though that your original use case can be solved without transforms, using `categoryorder: 'total descending'` https://plotly.com/javascript/reference/#layout-xaxis-categoryorder",
    "created_at": "2020-04-22T15:37:27Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4749#issuecomment-617855429",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4749",
    "updated_at": "2020-04-22T15:37:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Hi @disberd! Yes, we'd be happy to accept a PR to include this projection. I think you've covered all or nearly all the changes that will be required, but from the looks of it `projections.js` is a code-generation output:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/22dd9c1d5711575ba34c3d9f42ccf8be12398350/src/plots/geo/projections.js#L10-L12\r\n\r\nWhich makes it look as though all that should be needed for _that_ part of the update is to run `d3-geo-projection-picker` with the correct arguments. @etpinard can correct me if I'm wrong, but it seems like that would be\r\n```\r\nd3-geo-projection-picker <all the existing projections plus satellite> -o projections.js\r\n```\r\n\r\nThen as a final step the new projection would want to be included in one or two test images - but we can help once it gets to that point.",
    "created_at": "2020-04-22T14:59:29Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4781#issuecomment-617832370",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4781",
    "updated_at": "2020-04-22T14:59:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@zouhairm this PR is looking great! Just a few small comments above and we should be ready to go. Apologies again for the delay getting this looked at.",
    "created_at": "2020-04-21T17:04:23Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4575#issuecomment-617289198",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4575",
    "updated_at": "2020-04-21T17:04:23Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> New `dragmode` options are `linedraw`, `rectdraw`, `ellipsedraw`, `closedfreedraw` and `openfreedraw`.\r\n\r\nThoughts on naming? I might vote for:\r\n`drawline`\r\n`drawrect`\r\n`drawcircle` (because even though it doesn't need to be 1:1, the shape you make is `type: 'circle'`),\r\n`drawfreeclosed`, `drawfreeopen` (or maybe `drawclosedpath` and `drawopenpath`?)",
    "created_at": "2020-04-20T17:38:19Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4775#issuecomment-616706451",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4775",
    "updated_at": "2020-04-20T17:38:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The \"circularity\" was intentional - it's just trying to say that whichever of those colors you set, it provides the default for the other one. But you're right that in a world with templates this kind of logic may not be manageable - we may need to pick one direction for the defaults to flow.",
    "created_at": "2020-04-13T18:33:58Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4758#issuecomment-613031498",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4758",
    "updated_at": "2020-04-13T18:33:58Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yes, this definitely deserves a minor, not a patch.\r\n\r\nDoes this impact any of the mapbox baselines? Those are in the `@noCI` tests, right?\r\n\r\nCurious whether this would have addressed https://github.com/plotly/dash-core-components/issues/756 and friends - hopefully we won't find out, and the underlying bug will never bubble up in this repo!",
    "created_at": "2020-04-10T00:34:32Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4752#issuecomment-611817670",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4752",
    "updated_at": "2020-04-10T00:34:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The `plotly_relayout` event data mirrors the `Plotly.relayout` input arguments - so nested objects are not an option, as this would overwrite far more than you want changed if passed back to `Plotly.relayout` - any other settings inside `xaxis` or `yaxis` would be cleared.\r\n\r\nAnd for reference, the reason we tended to use `{'xaxis.range[0]': x0, 'xaxis.range[1]': x1}` rather than `{'xaxis.range': [x0, x1]}` is that you can drag or edit a single end an axis, by clicking or dragging near the end of one of the axes - then it would be incorrect to say the user changed both items in `xaxis.range`, and there's no way to represent that with the `{'xaxis.range': [x0, x1]}` form.\r\n\r\nYou can access the full `gd.layout` object from inside the `plotly_relayout` event handler, it will have been updated by the time the event is emitted.",
    "created_at": "2020-04-08T15:50:09Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1877#issuecomment-611038173",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1877",
    "updated_at": "2020-04-08T15:50:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Hi @rikuliku! This kind of question is out of scope for the plotly.js repo - this library doesn't directly interact with data files at all. But it would be a great question to ask on our community forum https://community.plotly.com/c/api/plotly-js/ - particularly if you can show the code you're executing along with the exact error message you see.",
    "created_at": "2020-04-06T16:16:43Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4732#issuecomment-609892678",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4732",
    "updated_at": "2020-04-06T16:16:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "We can't do `newPlot` - both for performance reasons and for `uirevision`\r\n\r\nNormally it looks like we clear `_categories` in `ax.clearCalc`, and there's even logic in there that looks like it's supposed to apply to linked axes... why isn't that working?",
    "created_at": "2020-04-02T23:37:57Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4718#issuecomment-608147999",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4718",
    "updated_at": "2020-04-02T23:37:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "There are 2 pieces of this: first, both hour and day ticks have positioning bugs if you use `dtick` explicitly:\r\n- the day tick labels are in the wrong places even for what they say they are (if you look at the “April 7 2020” tick, it’s actually at 16:00 on that day - why? That makes no sense, `tick0` on that axis is an exact day (in `fullLayout`) so the tick should be at midnight, ie mid-break, so it should appear at the end of the break, or 09:00. And the April 6 tick is missing entirely.\r\n- in hour mode two or more overlapping tick labels at the same location?\r\n\r\nSecond is the question about how to display nice evenly-spaced ticks. I don't think this will be a problem with day ticks, once the bug part is solved those will be fine. But hour ticks are an interesting case. 1-hour dtick should be fine, unless users start specifying nightly breaks in increments of fractional hours... at that level of generality there's probably nothing we can do to ensure even tick spacing, we'll just need to live with funny spacing near the break. The multi-hour dtick values we have in our auto-dtick output are 2, 3, 6, and 12 hours, and none of those will make sense in all conditions, but going straight from 1 hour to 1 day won't be a great experience (even for 8-hour workdays that's a factor of 8 jump) so we need something in the middle. A proposal:\r\n- use a rounded form of `bounds` using the `floor` of the first item and the `ceil` of the second, to get a `firstHour` and `numHours`\r\n- shift `tick0` to `firstHour` on some date, when using `dtick` more than 1 and less than 24 hours\r\n- try to find a reasonable algorithm for intermediate hours based on `numHours`. Maybe we always include \"half the range\" as `Math.ceil(numHours / 2)` - even though that will already be nonuniform for odd `numHours` - and continue halving until we get to <=3? Or first try to factor `numHours` and use all the factors, switching to this halving thing only if `numHours` is prime?",
    "created_at": "2020-04-02T18:53:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4722#issuecomment-608041894",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4722",
    "updated_at": "2020-04-02T18:53:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for checking the markup @RoadrunnerWMC - so the issue is definitely on the SVG rendering side, not on our data processing side.\r\n\r\nI'd probably vote for the \"switch to a line\" solution, perhaps when the angle is <0.001 radian or something, that's negligibly nonlinear anyway. But also most places in plotly.js we round our path definitions to 0.01px, this is apparently an exception to that... at some point it may be worth hunting around all our trace types to do that everywhere.",
    "created_at": "2020-04-01T01:27:13Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4717#issuecomment-606972546",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4717",
    "updated_at": "2020-04-01T01:27:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "OK on Chrome on a Mac. Here's the markup I see for that slice:\r\n```\r\n<path\r\n    class=\"surface\"\r\n    d=\"M144,150l-142.9672172205876,-17.21553949782922a144,144 0 0 1 1.3864902825844183e-7,-0.0000011514169706572375Z\"\r\n    style=\"pointer-events: all; stroke-width: 0; fill: rgb(95, 211, 95); fill-opacity: 1; stroke: rgb(68, 68, 68); stroke-opacity: 1;\"\r\n></path>\r\n```\r\nI'm curious if you see the same on Linux - particularly the `d` (path data) attribute.\r\n\r\nIf it's the same, that implies maybe exponential notation is broken in the SVG engine for Chrome on Linux?.\r\n\r\nTwo possible solutions:\r\n1. ensure we're always using fixed-point decimal notation in constructing SVG attributes, see if that fixes it\r\n2. maybe more robust: when the arc gets too small, switch to a line.",
    "created_at": "2020-03-31T17:50:43Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4717#issuecomment-606777938",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4717",
    "updated_at": "2020-03-31T17:50:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Let's not mess with the bar positioning; there may be certain conditions in which that's the \"right place\" but that's up to the user to decide (with our help 😁)\r\n\r\nI bet there's a solution to this where we find the left and right edges of the bar as we do now, but then turn it into pixels (which apparently works correctly today because we draw the bar across the break) and then *back* into data coordinates.",
    "created_at": "2020-03-30T20:26:22Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4713#issuecomment-606229467",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4713",
    "updated_at": "2020-03-30T20:26:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "For historical context, I think before we had a `base` attribute we didn't even put the bottoms of the bars into the autorange calculations - and I think we still do that when there's no base at all, for performance purpose. So in that case the \"extend to include zero\" part of `tozero` is required or you wouldn't see the full bars at all.\r\n\r\nBut yeah, when there are no bars with a `base` at zero, there's nothing special about the value zero anymore and `tozero` is inappropriate.",
    "created_at": "2020-03-30T20:14:50Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4701#issuecomment-606222787",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4701",
    "updated_at": "2020-03-30T20:14:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "To my mind the primary purpose of `tozero` for bar charts is the second piece, NOT adding padding past zero for one-sided data. I don't think we really *ever* want the first part, extending the axis to zero if the data are far from zero.",
    "created_at": "2020-03-30T19:30:03Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4701#issuecomment-606199376",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4701",
    "updated_at": "2020-03-30T19:30:03Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I think we still want to display the zero line when the values are negative.\r\n> So this codepen is OK.\r\n\r\nWhy? What makes that case different from its positive twin?",
    "created_at": "2020-03-30T19:17:34Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4701#issuecomment-606189800",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4701",
    "updated_at": "2020-03-30T19:17:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ah, nice sleuthing @archmoj! In fact, to dive into the details of `tozero` a bit: if an axis is autoranged `tozero` it means two things: (1) zero is always included in the autorange, and (2) if the lowest (or highest) point on the axis is *exactly* zero, no padding is added past zero. This is an interesting effect: it says that for a normal bar chart or filled area chart, the size axis starts exactly at zero, but we get the normal 5% padding at the other end.\r\n\r\nI wonder if the correct `tozero` logic  is as simple as \"true if *any* bar has zero base\"? I don't think it matters whether the base is positive or negative, or anything about the bar size.",
    "created_at": "2020-03-30T16:42:20Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4701#issuecomment-606110937",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4701",
    "updated_at": "2020-03-30T16:42:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ah I had forgotten that we labeled `xref` and `yref` as `enumerated`. We don't actually use that schema definition in coercing these values, for that purpose we [create a list](https://github.com/plotly/plotly.js/blob/b8a452c1bd63aac05afbca1bf74baba6b4ac4066/src/plots/cartesian/axes.js#L70) of all the available x or y axes and use that to validate the input.\r\n\r\nI suppose in principle we could do the same thing for `dash`, add a regex to the `values` array and use a dedicated validator just for `dash` attributes. That sounds a bit tricky to get right but it would be doable. I wouldn't see that as a real high priority, but if you're motivated to do it feel free to submit a PR 😉 ",
    "created_at": "2020-03-30T16:28:59Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4712#issuecomment-606104094",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4712",
    "updated_at": "2020-03-30T16:28:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Also that mock has `marker.line.dash` which is not supported, we should remove that from the mock. So this is just about `connector.line.dash`.\r\n\r\nThe key part of the attribute description is \"`or a dash length list in px (eg *5px,10px,2px,2px*)`\" - That's a freeform string - following a pattern, but not enumerable. But we list `values` in the schema because these are special values that are interpreted dynamically. Aside from `solid`, these do not have a fixed representation as dash length lists, as we scale the dash lengths with line width.\r\n\r\nSide note: according to the docs you actually should not use \"px\" in the attribute as we suggest in the description, though AFAIK browsers universally accept it that way.\r\n\r\n`10` is coerced to `\"10\"` and then interpreted by [`stroke-dasharray`](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) as \"10px on, 10px off.\"\r\n`0` ends up solid, but only because the browser doesn't know what to do with \"0px on, 0px off\", not because we assign values to the special strings.",
    "created_at": "2020-03-30T15:17:06Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4712#issuecomment-606062655",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4712",
    "updated_at": "2020-03-30T15:17:06Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "`bar_attrs_relative.json` is included in that PR https://github.com/plotly/plotly.js/pull/4708/files#diff-d04eaf77addda33da276b8baa5db23b8 - the link you posted now says:\r\nhttps://github.com/plotly/plotly.js/blob/b8a452c1bd63aac05afbca1bf74baba6b4ac4066/test/image/mocks/bar_attrs_relative.json#L39",
    "created_at": "2020-03-30T12:19:56Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4710#issuecomment-605965804",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4710",
    "updated_at": "2020-03-30T12:19:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Solved already by @archmoj in #4708 - thanks for bringing this up in #4704 🎉 ",
    "created_at": "2020-03-30T11:00:30Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4710#issuecomment-605932594",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4710",
    "updated_at": "2020-03-30T11:00:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Definitely a bug - and we have logic that appears intended to address exactly this, but somehow isn't working.\r\n\r\nhttps://github.com/plotly/plotly.js/blob/b8a452c1bd63aac05afbca1bf74baba6b4ac4066/src/traces/bar/cross_trace_calc.js#L521",
    "created_at": "2020-03-30T01:42:52Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4701#issuecomment-605739463",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4701",
    "updated_at": "2020-03-30T01:42:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "What's going on with autorange in axes_breaks-night_autorange-reversed.png ? Both the orange and red subplots prior to this PR have tight clipping on one side, and after this PR the tight clipping is on the other side. Neither side should have tight clipping, they should both get 5% padding. Also what's with the label `23:22` that's in the same place both before and after this PR, despite the axis range changing?\r\n\r\n<img width=\"433\" alt=\"Screen Shot 2020-03-29 at 2 13 28 PM\" src=\"https://user-images.githubusercontent.com/2678795/77856814-c376e100-71c7-11ea-90c8-b2a61006b4ac.png\">\r\n",
    "created_at": "2020-03-29T18:16:08Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4699#issuecomment-605677494",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4699",
    "updated_at": "2020-03-29T18:16:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Hmm that does seem confusing... @nicolaskruchten @jonmmease care to comment on how plotly.py identifies container arrays in the schema?",
    "created_at": "2020-03-29T14:53:18Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4707#issuecomment-605648936",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4707",
    "updated_at": "2020-03-29T14:53:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "In general we accept numbers in string fields. I wouldn't exactly recommend it, but it is officially supported and they get cast to strings. The only exception is attributes labeled `strict: true` in the schema - these will reject numbers as input and only accept values that are already strings.",
    "created_at": "2020-03-29T14:38:53Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4705#issuecomment-605646769",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4705",
    "updated_at": "2020-03-29T14:38:53Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "That's an error, good catch! In fact, `layout.barnorm` isn't even used in that mock, because it has `barmode: 'overlay'`\r\n\r\nhttps://github.com/plotly/plotly.js/blob/0e01a5ad0dc4ace99d02a9fbd21d72428be87537/src/traces/bar/layout_defaults.js#L54\r\n\r\nSo we should just remove that line from the mock.",
    "created_at": "2020-03-29T14:08:23Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4704#issuecomment-605641860",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4704",
    "updated_at": "2020-03-29T14:08:23Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Oh interesting - yes, the way we construct the schema (separately for each trace type), this particular attribute's default value gets lost. But as @archmoj says, its default is in fact `'scatter'`.",
    "created_at": "2020-03-29T13:59:41Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4703#issuecomment-605640403",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4703",
    "updated_at": "2020-03-29T13:59:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Out of the mocks here, the only one that bothers me is axes_breaks-night_autorange-reversed.png\r\n\r\n<img width=\"402\" alt=\"Screen Shot 2020-03-27 at 2 58 17 PM\" src=\"https://user-images.githubusercontent.com/2678795/77790627-87af1080-703b-11ea-9cf8-4a4733c8eda1.png\">\r\n\r\nThe \"05:59\" labels are weird, why don't they say \"06:00\"? But everything else is great, and even this one is more correct than before, just uglier. It's an obscure enough edge case that I'd be happy merging and releasing like this, and flagging this for follow-up later.",
    "created_at": "2020-03-27T19:01:25Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4696#issuecomment-605214827",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4696",
    "updated_at": "2020-03-27T19:01:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "`d3_document` would be in the `d3` source, not the plotly.js source at all. Presumably this has been addressed in more recent `d3` versions? Could be another bit of motivation to upgrade https://github.com/plotly/plotly.js/issues/424 although unfortunately this is a substantial project",
    "created_at": "2020-03-27T11:11:16Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3518#issuecomment-604943275",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3518",
    "updated_at": "2020-03-27T11:11:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> It is working OK with reversed y-axis\r\n\r\nDoes that mean it's also _broken_ for a reversed _x_ axis?",
    "created_at": "2020-03-27T11:06:13Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4693#issuecomment-604941392",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4693",
    "updated_at": "2020-03-27T11:06:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "OK, we can try it. Maybe it'll just generally work out? It'll certainly be simpler code, with apologies to @archmoj for the extra complexity (specifically the `_realV` stuff) that will just need to be reverted to do it this way.",
    "created_at": "2020-03-27T10:59:38Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4692#issuecomment-604938962",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4692",
    "updated_at": "2020-03-27T10:59:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I was suggesting weekend-specific. I feel like any attempt to generalize beyond that will create other confusion... maybe not, maybe if you also remove a specific Monday we could make the tick say Tuesday somehow. That seems tougher to implement though. We could try and just use the end of the break as the tick value (ie reverting the special logic I had @archmoj figure out to position the tick at the end of the break but label it with the label it would have gotten in the absence of breaks) and see if the label comes out right. I just worry about edge cases like if you remove until 1pm Monday, will the tick say Tuesday even though there are 11 hours of Monday left after the tick? The reason for my concern is that we aggressively set the tick label rounding based on `dtick` and `tick0`, so if we start moving the ticks off of even multiples of `dtick` it's unclear what will happen.\r\n\r\n> Also, we should make sure this works well with bars and `tickson = \"boundaries\"`!\r\n\r\nin that future where breaks apply to category axes, or tickson applies to dates 😁 ",
    "created_at": "2020-03-27T01:54:00Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4692#issuecomment-604774366",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4692",
    "updated_at": "2020-03-27T01:54:00Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yeah, nice! I think I agree with @nicolaskruchten that tying to a trace UID would be cleaner. That way you can still group traces using `legendgroup` without needing to keep track of that on the annotations; and if we ever get around to [highlighting the hovered trace](https://github.com/plotly/plotly.js/issues/1847#issuecomment-312926089) that could also flow through to the annotation independent of `legendgroup`.\r\n\r\nAlso would be cool to do the same thing for shapes!\r\n\r\nNow, what attribute name? Perhaps `showwithtrace`? `linkedtrace`? The attribute value would be a string, and the annotation would only be visible if a trace with matching `uid` attribute is also visible.",
    "created_at": "2020-03-26T22:34:16Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4680#issuecomment-604722058",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4680",
    "updated_at": "2020-03-26T22:34:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Oh actually ignore line 542, I'm not sure when that happens but I suspect it's largely for pseudo-axis fallbacks.",
    "created_at": "2020-03-26T22:05:22Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4692#issuecomment-604711224",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4692",
    "updated_at": "2020-03-26T22:05:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "It's not drawing the gridline on the wrong point; it's drawing a gridline inside the break, but due to the way the breaks work (removing from the first instant of Saturday until the last instant of Sunday), the break is *at* Monday.\r\n\r\nSimplest fix I can think of here is to shift the auto `tick0` to a Monday when we remove the weekend - more precisely, take the first `day of week` break and shift `tick0` to the day in its `bounds[1]`\r\n\r\nThat happens here:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/5b6abbb94f06eae9e93d68ac6ec74ae1ee3ebb50/src/plots/cartesian/axes.js#L542\r\n\r\nbut mostly here (you can see we explicitly chose Sunday):\r\n\r\nhttps://github.com/plotly/plotly.js/blob/5b6abbb94f06eae9e93d68ac6ec74ae1ee3ebb50/src/plots/cartesian/axes.js#L816-L819",
    "created_at": "2020-03-26T22:04:10Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4692#issuecomment-604710648",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4692",
    "updated_at": "2020-03-26T22:04:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I wonder if we should use `layout.paper_bgcolor` instead of `layout.plot_bgcolor`.\r\n\r\nYes, looking at it again I think you're right. Also because the default for `legend.bgcolor` is `layout.paper_bgcolor`. Either way there will be unpleasant cases but `paper_bgcolor` probably has fewer of them.",
    "created_at": "2020-03-26T17:38:52Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4687#issuecomment-604573573",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4687",
    "updated_at": "2020-03-26T17:38:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Re: transparent legend bgcolor - there are two interesting cases: legend over the margin, and legend over the plot. Both of these will happen from time to time, but I'd say we should fall back on `plot_bgcolor` because we know that trace symbols will be visible against that. Specifically, what if we do `color.combine(legend.bgcolor, layout.plot_bgcolor)`, so we always get 100% opaque?",
    "created_at": "2020-03-26T01:39:49Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4687#issuecomment-604178675",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4687",
    "updated_at": "2020-03-26T01:39:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ah yeah, that's in a lot of really old mocks... my recollection is these came from the predecessor to chart studio, which at one point had a bug that it was saving effectively `fullData` and `fullLayout` instead of `data` and `layout`. Nobody would create things like that today, and aside from unified hover they have no effect, right? So I'd say we can safely remove them from these mocks.",
    "created_at": "2020-03-25T22:29:18Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4687#issuecomment-604120844",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4687",
    "updated_at": "2020-03-25T22:29:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The issue is with our automatic `dtick` algorithm, which in certain conditions can return either 2 days or 3 days, in addition to 1 day, 1 week, and other values.\r\n\r\nhttps://github.com/plotly/plotly.js/blob/60425d2d3c8f00f20e786bae906e22c9f1b236ca/src/plots/cartesian/axes.js#L760\r\n\r\nhttps://github.com/plotly/plotly.js/blob/60425d2d3c8f00f20e786bae906e22c9f1b236ca/src/plots/cartesian/axes.js#L809\r\n\r\nWhen you remove weekends with `rangebreaks`, 2 or 3 day ticks look bizarre.\r\n\r\nSuggestion: if we have `day of week` breaks, run that algorithm but if the result was 2 days reduce it to 1 day, and if the result was 3 days increase it to 1 week.",
    "created_at": "2020-03-25T20:47:55Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4686#issuecomment-604079115",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4686",
    "updated_at": "2020-03-25T20:47:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Just be careful re: all the `template` confusion, ideally we can just use the `legend` settings as the defaults for the `hoverlabel` settings at the coerce level, rather than interrogating the input layout directly.\r\n\r\nNow what do you suppose will happen if you provide:\r\n```js\r\nlayout: {\r\n    template: { layout: { hoverlabel: { bgcolor: 'blue' } } },\r\n    legend: { bgcolor: 'red' }\r\n}\r\n```\r\nI'm not sure what this *should* do, but we have similar inheritance scattered all around - and we I do recall we discussed this during the templates push - so it should be handled at the `coerce` level rather than special logic for this case.",
    "created_at": "2020-03-25T17:15:35Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4683#issuecomment-603970397",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4683",
    "updated_at": "2020-03-25T17:15:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "marker.opacity = 1 ?",
    "created_at": "2020-03-25T14:52:01Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4681#issuecomment-603884670",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4681",
    "updated_at": "2020-03-25T14:52:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "For regular scatter this is intentional - bubble charts, which we define to be any chart with marker size set to an array - get some default transparency because overlap is common with large markers. I imagine we simply inherited that same behavior in scatter3d, so I might consider this a documentation issue rather than a bug.",
    "created_at": "2020-03-25T14:05:09Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4681#issuecomment-603858119",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4681",
    "updated_at": "2020-03-25T14:05:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Our contour seems to have a similar feature.\r\n\r\nTrue, contour automatically moves labels around on the contour lines in order to keep them as far apart as possible (with adjustments to bias them toward horizontal and away from the edges). Might be something we could borrow from that...\r\n\r\n> Might be nice if there were a modebar button in scatter plots where you could toggle these labels.\r\n\r\nOr a legend feature, so you could toggle text on each trace independently.",
    "created_at": "2020-03-25T00:19:14Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4674#issuecomment-603571483",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4674",
    "updated_at": "2020-03-25T00:19:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj huge improvement! I'm just seeing one problem in a few of the mocks: the second line (date part) of the tick label is missing on all but the first label; it should be present whenever the date changes. Somewhere we have code that compares adjacent tick labels and removes the second line when it matches the previous tick label, that's perhaps running too early, before the ticks and their text are fully defined?\r\n\r\n<img width=\"416\" alt=\"Screen Shot 2020-03-24 at 7 56 56 PM\" src=\"https://user-images.githubusercontent.com/2678795/77487776-b180f100-6e09-11ea-8522-b6052aef139a.png\">\r\n\r\naxes_breaks-night_autorange-reversed is in this screenshot, axes_breaks-weekends-weeknights also shows this.\r\n\r\nInterestingly, axes_breaks-weekends_autorange-reversed shows a change but I think I prefer the new behavior: the \"first\" tick of each new day is not the left-most or bottom-most, it's the earliest date. I could see arguments either way, but I think earliest date is better, as it labels the day (or month, or year, whatever) on the closest tick to when that period starts.",
    "created_at": "2020-03-25T00:13:06Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4677#issuecomment-603569743",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4677",
    "updated_at": "2020-03-25T00:13:06Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ah, thanks for figuring that out - I guess I should have tested on a date axis before posting 😅 \r\nFor completeness, yes, it's epoch time, milliseconds since 1970, but be careful to use UTC. That would be another nice add, supporting date strings in `xval` / `yval` for `Fx.hover` - might even consider that a bug to be fixed.",
    "created_at": "2020-03-24T13:12:25Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4676#issuecomment-603230096",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4676",
    "updated_at": "2020-03-24T13:12:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks. That form - where you're providing each desired curve number and point number - in general need not have matching x values. So I think we opted for the current behavior because we didn't want it to flip back and forth between labeling each point with (x, y) and a common x label at the bottom.\r\n\r\nSo as I said before we'd like to add an option that forces the common x label, but I wonder if prior to that you can get the effect you want by changing to one of the other accepted forms, like:\r\n`Plotly.Fx.hover(chartID, {xval: '2020-03-23 14:30'})`\r\n\r\nI'm not sure if we have documentation about this other than comments in the source code, but here are said comments:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/6de4c751a3d702ea13f20214349460840cfab6af/src/components/fx/hover.js#L50-L74\r\n\r\nBTW, this is likely not going to be a high-priority item for us to add, unless someone would like to sponsor it, but we would happily accept a PR!",
    "created_at": "2020-03-23T22:49:47Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4676#issuecomment-602898902",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4676",
    "updated_at": "2020-03-23T22:49:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @bishonen - we should definitely make it possible to achieve this. Can you show the form of `Fx.hover` you're using in your code?",
    "created_at": "2020-03-23T21:37:21Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4676#issuecomment-602870015",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4676",
    "updated_at": "2020-03-23T21:37:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "`textposition` can only push until one of the corners is just touching the point, it can't push farther out (which would require adding a line or something, like we have for annotations), so you can still connect the text back to the point. Would you be comfortable with a v1 of this feature that simply starts removing some text when we can't accommodate it all touching the points, or do we need to keep pushing farther away and draw lines (and ensuring the lines don't cross each other or other text labels...)?",
    "created_at": "2020-03-23T16:20:31Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4674#issuecomment-602705733",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4674",
    "updated_at": "2020-03-23T16:20:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj the way templates interact with container arrays is a bit subtle as it contains features for both defaults for all array items and overrides for specific items (which may not be at the same index in the array), but in general it works. Take a look at the original templates PR https://github.com/plotly/plotly.js/pull/2761, esp. [this test](https://github.com/plotly/plotly.js/pull/2761/files#diff-10fdc9e067ffc2e976a05e6d98cebbf1R57) and the [`arrayTemplater` function](https://github.com/plotly/plotly.js/pull/2761/files#diff-44b7021288b6b3409a7d11ef712b75eeR144)\r\n\r\nPlease use those for context before deciding what's a bug.",
    "created_at": "2020-03-23T15:07:40Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4670#issuecomment-602658514",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4670",
    "updated_at": "2020-03-23T15:07:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "When we enable non-date axes, the default should be 1 for those cases; but on date axes we should keep numbers referring to milliseconds for consistency, until such time as we enable some sort of date interval units and we can explicitly specify this as \"one day\".",
    "created_at": "2020-03-19T16:50:00Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4655#issuecomment-601292441",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4655",
    "updated_at": "2020-03-19T16:50:00Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "There's a hover issue in that [codepen](https://codepen.io/MojtabaSamimi/pen/OJVwPBx?editors=0010) though - the first bar after the break only gets hover on its right half. I suspect this is because the left half of this bar is actually on the other side of the break, as far as the axis itself is concerned. I guess this is an early manifestation of the problems I was describing above when we get around to drawing the break on the axis and/or on the plot.\r\n\r\nSwitching to `bounds` instead of `values` this issue is still present.\r\n\r\nMy guess is this one will be fairly tough to fix...",
    "created_at": "2020-03-19T13:22:46Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4655#issuecomment-601174871",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4655",
    "updated_at": "2020-03-19T13:22:46Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I think that's correct actually, because of `dvalue` which defaults to one day.",
    "created_at": "2020-03-19T13:14:17Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4655#issuecomment-601170556",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4655",
    "updated_at": "2020-03-19T13:14:17Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks good, nice find! This is for when the connector enters or exits the break, what if the connector completely crosses the break? Does that already work?",
    "created_at": "2020-03-19T13:04:30Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4663#issuecomment-601165935",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4663",
    "updated_at": "2020-03-19T13:04:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> two points above a bar, one at a slightly different x-coordinate\r\n\r\nThere's a reason the title of this issue says \"should include all points at same coordinate\" 😏 ",
    "created_at": "2020-03-19T01:50:34Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4656#issuecomment-600944755",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4656",
    "updated_at": "2020-03-19T01:50:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "That'll work! I believe the index is simply offset between traces, so it might be more efficient just to store  it once, something like `cd[0].t.i0` but that's not a big deal.",
    "created_at": "2020-03-18T13:11:50Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4648#issuecomment-600614116",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4648",
    "updated_at": "2020-03-18T13:11:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@antoinerg the approach in `fix-4648-cross` looks great, though somehow it's getting a mismatch of bin positions - looks like maybe `fullTrace._binEdges` is for all traces but each trace may start at a different bin? Only Africa, which has the left-most bin, looks correct. Not sure why that would cause problems for getting all the other items but perhaps fixing that will resolve both?\r\nHere the box says 40-something but the cursor is at 50-something... and if you switch to `closest` mode you can look at all the traces.\r\n<img width=\"159\" alt=\"Screen Shot 2020-03-17 at 9 42 29 PM\" src=\"https://user-images.githubusercontent.com/2678795/76916917-5d6d8e00-6898-11ea-98da-0323d8b93362.png\">\r\n",
    "created_at": "2020-03-18T01:44:42Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4648#issuecomment-600382171",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4648",
    "updated_at": "2020-03-18T01:44:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yes, for `'hour'` and `'values'` modes @nicolaskruchten has, I believe, described the status quo accurately, and we can keep that.\r\n\r\nRight now in `'day of week'`, after we use `operation` to determine which days to remove (which I think we can all agree at this point we're no longer going to do, but keep reading because I have some concerns about what we should do instead), the boundary behavior is what in the other modes would have been `operation='[)'` - that is, the left edge of the break range, ie Saturday at 00:00:00.000, is \"within the break\" so a data point there will not be drawn, but the right edge of the break range, Monday at 00:00:00.000 *will* be drawn. So if you give this data:\r\nFriday 23:59:59.998, Friday 23:59:59.999, Monday 00:00:00.000, Monday 00:00:00.001\r\nThe result will be four equally spaced points, no values between that last Friday and the first Monday point would be allowed, and no two points with different data values would ever share the same screen position.\r\n\r\nThis seems to me like it will work well in the short term for the two main cases I can think of:\r\n- Timestamped data, with or without additional (overnight) hour breaks. If we make the breaks visible, either via a gap in the axis line or a line across the plot at the break position, they're located in the correct location with no additional tweaking needed.\r\n- Whole-day data, ie data points located at 00:00:00 - you will see evenly spaced marks & ticks for M,T,W,Th,F,M,T,W... But this may become a problem when we insert of visible gap at the weekend: that mark will occur exactly at the Monday data point, whereas it should really be halfway between Friday and Monday. Two solutions I can see to this:\r\n  1. Allow shifting the display of points and tick labels to the middle of the day, while leaving the break at midday as we have it. We've already been discussing this elsewhere anyway, though I don't see an issue...\r\n  2. Allow shifting the break itself to halfway (or some other fraction) between days. This could probably be added easily as an option to the break definition, but it can't be the default (due to the timestamped case) This feels like a messy hack compared to (1), though maybe there's a case where someone wants a break from 4AM Saturday to 8AM Monday or some similar? Factory monitoring with graveyard shifts but not working through the weekend?\r\n\r\nThen is there still a use case for doing something with `operation` when `pattern='day of week'`? For whole-day data I don't see it. For timestamped data possibly, but that would be a small subset of cases where you want the break not exactly midnight to midnight. I guess I don't see a harm in enabling it to work as it does with `hours` and `values`, as long as the default becomes `[)`, at least for `day of week` and perhaps for all of them... but I feel like to get something out quickly we should just disable `operation` with `day of week` and come back to it if someone complains.\r\n\r\nRe: `['Sat', 'Sun']` vs `[6, 0]` - I do like the clarity of the text version, and I see in an off-repo chat you've discussed allowing a case-insensitive first-three-letters, and defaulting to `pattern='day of week'` when `bounds` has text. That's quite nice. If we also keep the number format, we can imagine extending the number format to support fractions. That gets weird if you look at it too closely though - `[6, 0]` in fact means \"remove from the first instant of Saturday to the last instant of Sunday,\" which is a period of 2 days even though the range you've specified - the difference between the two numbers, modulo 7 - is only 1 day. I recognize that it would look weird, but to be more precise about what we're doing it might be better actually to use `['Sat', 'Mon']` or `[6, 1]` to denote removing the weekend. Then if you wanted to have a break like I described above (4AM Saturday to 8AM Monday) you could specify it as `[6.1667, 1.3333]` or we could support a syntax like `['Sat 04:00', 'Mon 08:00']` and `['Sat', 'Mon']` would be equivalent to `['Sat 00:00', 'Mon 00:00']`\r\n\r\nAs an aside: `operation='()'` feel sketchy to me, as you get two points with exactly the same position but different data values: https://codepen.io/alexcjohnson/pen/ZEGRQoZ\r\n<img width=\"607\" alt=\"Screen Shot 2020-03-17 at 1 03 01 PM\" src=\"https://user-images.githubusercontent.com/2678795/76881662-dd233a80-684f-11ea-908e-50496daed3ed.png\">\r\nI might argue for removing this option entirely.\r\n\r\nAlso there's a bug if you cross a break with `operation='()'` but have no further range https://codepen.io/alexcjohnson/pen/ExjRPea - seems like removing `()` would fix this, though if you use `(]` the range is weird, the one visible point is squished against the right edge of the plot, whereas `[)` for the same data puts the point in the middle where it belongs.",
    "created_at": "2020-03-17T17:34:33Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4655#issuecomment-600202839",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4655",
    "updated_at": "2020-03-17T17:34:33Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ideally things like this belong in `crossTraceCalc`, though that could also be hacky since `histogram` shares that with `bar`. Your solution looks good, it's just better to minimize the work in `hover` when possible.",
    "created_at": "2020-03-16T22:50:08Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4648#issuecomment-599792780",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4648",
    "updated_at": "2020-03-16T22:50:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> we could potentially accept shorter versions\r\n\r\nLet's leave the values as you have them here - I don't want to accept two values that do the same thing just because we can't agree which one is best 😄 ",
    "created_at": "2020-03-16T20:47:50Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4653#issuecomment-599751374",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4653",
    "updated_at": "2020-03-16T20:47:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yes, bug. I forget how that calculation works but whatever it does should be shared by all traces in a group or stack. ",
    "created_at": "2020-03-16T14:28:55Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4648#issuecomment-599567624",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4648",
    "updated_at": "2020-03-16T14:28:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "we are just doing the calculation of number of digits to show in these labels independently for each trace even when they're stacked or grouped so the coordinates should match.\r\n<img width=\"376\" alt=\"Screen Shot 2020-03-16 at 10 04 17 AM\" src=\"https://user-images.githubusercontent.com/2678795/76765885-847b7100-676d-11ea-8576-8dcad67d19ce.png\">\r\n",
    "created_at": "2020-03-16T14:04:34Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4648#issuecomment-599554159",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4648",
    "updated_at": "2020-03-16T14:04:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "FWIW this happens with regular split hover as well - \r\n<img width=\"747\" alt=\"Screen Shot 2020-03-16 at 9 56 51 AM\" src=\"https://user-images.githubusercontent.com/2678795/76765335-9ad4fd00-676c-11ea-9103-19ba45567505.png\">\r\n",
    "created_at": "2020-03-16T14:00:27Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4648#issuecomment-599552077",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4648",
    "updated_at": "2020-03-16T14:00:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@jzamalloa1 you mean the sankey trace type in the `plotly` package? Yes, the next release of the package - due out within the next week I would expect - will include this feature.",
    "created_at": "2020-03-15T02:31:38Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4621#issuecomment-599159506",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4621",
    "updated_at": "2020-03-15T02:31:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I'd be OK with, as a short-term measure, removing the hover mode buttons in one of the unified modes. Perhaps down the line this is just one more reason to put some menus into the mode bar - one for hovermode, another for drag mode...",
    "created_at": "2020-03-13T19:49:26Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4620#issuecomment-598885868",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4620",
    "updated_at": "2020-03-13T19:49:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> We don't want to add a new attribute because there's no real meaning to unified + closest.\r\n\r\nBy itself that's true, but it serves the purpose of saving the fact that you when you enable compare mode you want it to have unified hover.",
    "created_at": "2020-03-13T18:51:58Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4620#issuecomment-598865970",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4620",
    "updated_at": "2020-03-13T18:51:58Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Just watching @nicolaskruchten demo this and saying \"I have to reload because there’s no button for unified hover\" - makes me think perhaps unified vs separate hover should be a new layout attribute (`unifiedhover: true`?) rather than part of `hovermode`. That way the modebar buttons would still function to toggle compare vs closest without losing your preference of what compare mode looks like.",
    "created_at": "2020-03-13T15:16:38Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4620#issuecomment-598773430",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4620",
    "updated_at": "2020-03-13T15:16:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "You're so close! Right now you get a spike to the last bar when you're off the stack, not the closest one (in the gif below see behavior when the mouse is below, spike goes to the green bar). fixing that would require tweaking `sizefn` to include some large-but-not-infinite value when off the bar, that grows larger as you get farther away.\r\n![Kapture 2020-03-13 at 8 46 42](https://user-images.githubusercontent.com/2678795/76622512-09fde780-6508-11ea-900a-1c23e0c5e79f.gif)\r\n\r\nThis is not a super important case, so if you want to move on that's fine, but if you do please make a new issue for this.",
    "created_at": "2020-03-13T12:56:17Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4627#issuecomment-598706293",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4627",
    "updated_at": "2020-03-13T12:56:17Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> @alexcjohnson can you have a look at branch fix-spikedistance. It contains new tests...\r\n\r\nLooks great, my only question about it is the test \"correctly select the closest bar even when setting spikedistance to -1\" - you do `_hover({xpx: 600, ypx: 400});` and `_hover({xpx: 580, ypx: 200});`, which look like they're within the bounds of the blue and green bars at E? That's important (though it would be clearer with exactly the same `xpx`), but I would have expected to also see `ypx` corresponding to positions not *on* any bars, but above and below the entire stack - which would probably require increasing the range to create space above and below. I'm not sure if that works right now but I think the goal of #3805 would be that if you get a hover point from a bar, and you set `spikedistance=-1`, you should get a spike line to the closest one.",
    "created_at": "2020-03-12T23:34:16Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4627#issuecomment-598477606",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4627",
    "updated_at": "2020-03-12T23:34:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj is right that we sometimes have a default of a different type - basically in cases where omitting a value disables that feature. And I imagine it could be useful to have client libraries explicitly allow that default to be set without flagging it as an incorrect type, for example if you've enabled the feature previously and later want to remove it. @nicolaskruchten @jonmmease how is that case handled on the Python side?",
    "created_at": "2020-03-11T22:22:30Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4625#issuecomment-597909510",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4625",
    "updated_at": "2020-03-11T22:22:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Oy yes restyle... in principle yes, we should include the new values in the `orientationaxes` block. I don't know if even chart studio uses that anymore, and I highly doubt anyone else does, but better safe than sorry I guess.",
    "created_at": "2020-03-11T20:22:44Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4620#issuecomment-597852298",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4620",
    "updated_at": "2020-03-11T20:22:44Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Ok so would 81b8813 be satisfactory?\r\n\r\nLooks great to me - I wouldn't worry about `for` vs `forEach` there, these are not looping over data arrays, and are not being called often.\r\n\r\nNo other comments from me, let's do it!",
    "created_at": "2020-03-11T20:18:59Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4593#issuecomment-597847842",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4593",
    "updated_at": "2020-03-11T20:18:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> > Should we warn the user in that case?\r\n> Could we `visible: false` scattergl on date axes with breaks?\r\n\r\nYes, let's leave gl out of this PR. Hide them - and log a warning - in that case. But @archmoj please make an issue to come back to this soon, I can see this being important for some users.",
    "created_at": "2020-03-11T20:02:14Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4614#issuecomment-597839456",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4614",
    "updated_at": "2020-03-11T20:02:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Let's leave any sort of extra axis flip logic out of this PR. If we want to add logic to set `legend.traceorder` explicitly based on reversing the y axis, we could consider that in a separate issue (@archmoj feel free to open an issue to discuss) - and then the hover label order would follow from that. Both of the demos pointed to by @archmoj would benefit from flipping the legend as well as flipping the hover labels.",
    "created_at": "2020-03-11T15:39:02Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4620#issuecomment-597705864",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4620",
    "updated_at": "2020-03-11T15:39:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Sorting isn’t a hard requirement, could be omitted for now, but I do think it could be useful. @archmoj pointed out diffing, though I guess `_full*` will have a consistent order anyway due to the `coerce` process. But regardless, some objects will be pretty big, sorting will make it easier to find things. ",
    "created_at": "2020-03-11T11:36:08Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4593#issuecomment-597583107",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4593",
    "updated_at": "2020-03-11T11:36:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Could we reverse the order when they are stacked on the x-axis?\r\n\r\nGood catch @archmoj - I think it's probably a good idea to keep the order consistent from point to point, but perhaps we should honor `legend.traceorder` in unified hover labels?",
    "created_at": "2020-03-10T22:59:31Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4620#issuecomment-597360965",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4620",
    "updated_at": "2020-03-10T22:59:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for reporting @mmebsout - closing, will be addressed by https://github.com/plotly/graphing-library-docs/issues/14",
    "created_at": "2020-03-04T15:53:15Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4613#issuecomment-594620598",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4613",
    "updated_at": "2020-03-04T15:53:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "We at one point had this typo in the colorscales, and there's a \"cleaning\" step that ensures the wrong spellings get fixed when a new figure is supplied, but that cleaning doesn't happen on `restyle` or `relayout`",
    "created_at": "2020-03-03T17:04:51Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4613#issuecomment-594059397",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4613",
    "updated_at": "2020-03-03T17:04:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ah I see, our docs have the uppercase `I` as well! Will get this fixed...",
    "created_at": "2020-03-03T17:01:37Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4613#issuecomment-594057653",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4613",
    "updated_at": "2020-03-03T17:01:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "You have an uppercase `I` in `\"YIOrRd\" or \"YIGnBu\"` - should be a lowercase L for yellow: `\"YlOrRd\" or \"YlGnBu\"`",
    "created_at": "2020-03-03T16:59:26Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4613#issuecomment-594056504",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4613",
    "updated_at": "2020-03-03T16:59:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "As shown in #4612 we also have some *incorrect* keys - that's something we can include a CI test for, since we'll generally either be able to figure out the right key or we can just delete it. Missing keys though we won't generally be able to fix without a native speaker to help, so that's probably not a good idea to run on CI.",
    "created_at": "2020-03-03T15:01:23Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2269#issuecomment-593995134",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2269",
    "updated_at": "2020-03-03T15:01:23Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @njake - looks like we just have the wrong translation key:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/80262b5194d625d750260b1dc64cb952cd1fb1cd/lib/locales/fi.js#L29\r\n\r\nshould be `Download plot as a png` (missing `a`)\r\n\r\nhttps://github.com/plotly/plotly.js/issues/2269 talked about adding a check for missing keys in translations - this issue brings up the need for a check of *wrong* keys, which is something we can fix without knowing the language in question, either by adjusting the key if it's obvious like this case, or by deleting the key and waiting for a native speaker to provide the right thing.",
    "created_at": "2020-03-03T14:39:38Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4612#issuecomment-593984088",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4612",
    "updated_at": "2020-03-03T14:39:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "We could certainly do that, curious though what your use case for it is?",
    "created_at": "2020-02-25T14:05:32Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4602#issuecomment-590882818",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4602",
    "updated_at": "2020-02-25T14:05:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "`config` could certainly be omitted at least to start - could always add it in later, perhaps if and when we convert it to using the same `coerce` machinery as `data` and `layout`.",
    "created_at": "2020-02-20T03:35:27Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4593#issuecomment-588592686",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4593",
    "updated_at": "2020-02-20T03:35:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "`plots.graphJson` already removes attributes with leading underscores and values that are functions. That covers everything outside the schema that's in `data` and `layout`. `config` converting to `gd._context` is handled differently and as @etpinard points out has some functions in the actual user-provided values, so sending it back will need special handling as well.",
    "created_at": "2020-02-20T02:40:35Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4593#issuecomment-588580208",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4593",
    "updated_at": "2020-02-20T02:40:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yes, I'd include `config` using @etpinard's suggestion for functions. And very nice idea @archmoj re: version. I'd say it goes at the top level, to make it clear it's not actually an attribute.",
    "created_at": "2020-02-19T21:57:57Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4593#issuecomment-588492627",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4593",
    "updated_at": "2020-02-19T21:57:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "FWIW I don't think it would be unreasonable to explore making an eval-free version of `cwise` - it's not the `eval` that gives it its speed, it's just using that to do codegen and reduce its own size. But at the end of the day I'd expect gzip means this codegen isn't even saving that many bytes over the wire... not a guarantee, but if someone wants to explore that we would certainly entertain it.",
    "created_at": "2020-02-12T20:36:33Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/897#issuecomment-585405782",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/897",
    "updated_at": "2020-02-12T20:36:33Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "As discussed in https://github.com/plotly/dash-core-components/issues/752 - it's apparently not the case that *all* inline styles are disallowed with strict CSP; just those set by providing the entire style attribute as a string. I don't know what D3 does, but if it accesses the style as an object as React apparently does, we may not need to convert everything to presentation attributes after all. We'd still need to get rid of `Lib.addStyleRule` and require the CSS to be loaded separately.\r\n\r\nThis could potentially be a build variant so that you'd only need the separate CSS with the CSP build, other users could continue using the single JS bundle.",
    "created_at": "2020-02-10T16:15:36Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2355#issuecomment-584202372",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2355",
    "updated_at": "2020-02-10T16:15:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "duplicate of https://github.com/plotly/plotly.py/issues/740",
    "created_at": "2020-02-10T14:16:14Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4564#issuecomment-584142801",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4564",
    "updated_at": "2020-02-10T14:16:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "You can make a shape - and an annotation - with one dimension referenced to the axis, the other referenced to \"paper\" which means it doesn't move when you zoom or pan the plot - I assume that's functionally what you mean by \"infinite.\" The first example on https://plot.ly/javascript/shapes/ does this with a rectangle, lines and annotations work the same way.\r\n\r\nI don't really see us combining the line and annotation into a single element, since there are a million ways to annotate a shape and AFAICT they're well accounted-for by the annotation options, we'd just be duplicating that API.",
    "created_at": "2020-02-07T01:21:18Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4560#issuecomment-583190173",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4560",
    "updated_at": "2020-02-07T01:21:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks great! My only code comment is it may be possible to 🌴 the missing & real axis coercion code a bit, but OTOH that could make it less readable... so definitely non-⛔️\r\n\r\n> Just to confirm: this does or could work with other attributes than `range` like `categoryarray` and `alignmentgroup` and so on?\r\n\r\nIt certainly looks like that should work, it does a fairly complete coercion of attributes on these missing axes, making no explicit mention of `range` in the process. But yeah, may be nice to include tests of these other attributes.",
    "created_at": "2020-01-30T00:06:33Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4529#issuecomment-580022279",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4529",
    "updated_at": "2020-01-30T00:06:33Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "ha ok, I thought we had solved that but I guess it's still open for bars too",
    "created_at": "2020-01-27T20:25:48Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4510#issuecomment-578936319",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4510",
    "updated_at": "2020-01-27T20:25:48Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I believe we already have special logic for this case already for bar traces - specifically, on a category axis to disallow automatic widths greater than 1.",
    "created_at": "2020-01-27T20:05:10Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4510#issuecomment-578927629",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4510",
    "updated_at": "2020-01-27T20:05:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> should x.range override x2.range if both specified?\r\n\r\nThe answer to that is \"exactly whatever would have happened if there was data on the xy subplot\" - I don't know how we handle that though I'd guess that `xaxis.range` wins.",
    "created_at": "2020-01-23T16:20:20Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4506#issuecomment-577755253",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4506",
    "updated_at": "2020-01-23T16:20:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "One thing this approach misses is if the lost axis sets an explicit `range` or `rangemode` https://codepen.io/alexcjohnson/pen/wvBNXgY?editors=0010\r\nThat seems like something we want to support, right?",
    "created_at": "2020-01-23T14:20:22Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4506#issuecomment-577701392",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4506",
    "updated_at": "2020-01-23T14:20:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yeah sorry, I muddied the waters with my \"related question\" about showing subplots with no traces. There may be another variant of the bug here too though: if you anchor an axis that *is* shown to another axis that *isn't* shown, will the one that *is* shown end up drawing its ticks etc in the wrong place? But let's keep that separate and just look at `matches` for now. I suspect this `anchor` variant could be more contentious, as it might have to convert the visible axis to free since it has no subplot to be drawn on.",
    "created_at": "2020-01-21T14:14:30Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4501#issuecomment-576700160",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4501",
    "updated_at": "2020-01-21T14:14:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The issue is that `xaxis` and `yaxis` are included in `layout` but don't make it into `fullLayout` here, so they're not currently eligible to be used as `matches='x' or 'y'`. After some discussion, it seems that propagating them to `fullLayout` based on the fact that they're referenced by other _axes_ - despite having no _traces_ using them - is the preferred solution.\r\n\r\nWe also discussed `matches='whatever'` making a \"match group,\" but this is problematic in that there may be settings in the lost axes (explicit range, for example) that would be lost using a match group solution.\r\n\r\nA related question - though this part would clearly need to be a new feature, whereas the above may be considered a bug - is whether the trace-less subplots should show up in this case. One could argue that since `xaxis.anchor = 'y'` (and `yaxis.anchor = 'x'` but one seems like it should suffice) you should be able to at least opt in to showing the blank `xy` subplot.",
    "created_at": "2020-01-21T03:08:08Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4501#issuecomment-576498852",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4501",
    "updated_at": "2020-01-21T03:08:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "https://github.com/plotly/plotly.js/blob/216b58760aefdf8dd92c770f8ee7f62f38c03e95/src/components/legend/attributes.js#L52-L73",
    "created_at": "2020-01-16T17:03:11Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4494#issuecomment-575248486",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4494",
    "updated_at": "2020-01-16T17:03:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Hmm this is a bit of a tricky case but I think you're right to consider it a bug.  We have two inheritance pathways: the more-specific value from the template and the more-general value set explicitly, and normally the template wins but here we want the explicit-but-general value to win. I'm wondering if there are other cases like this - for example, should `layout.xaxis.color` beat out `layout.template.layout.xaxis.linecolor` to determine final `fullLayout.xaxis.linecolor`?\r\n\r\nAn additional wrinkle though: what if you set BOTH in the template and NEITHER in the main layout? ie `layout.template.layout.geo.showland=true` and `layout.template.layout.geo.visible=false` and you don't set `layout.geo.visible` or `layout.geo.showland`? We need to ensure that in this case `showland` will end up `true`, so we can't even trust the coerced value of `fullLayout.geo.visible`",
    "created_at": "2020-01-10T14:57:30Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4482#issuecomment-573068025",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4482",
    "updated_at": "2020-01-10T14:57:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "So we're reverting the drag, then redrawing with the new view... and it seems like even if we do this synchronously, some browsers will do two repaints (if that's it, there will be async edge cases in other browsers too). I wonder if we can just not revert the drag, and tweak the redraw process if necessary so it still works right. I think it's this call that's doing it:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/4ab3b49c12e3e8be3800f7e4aacd4dddcf497357/src/plots/cartesian/dragbox.js#L770-L774\r\n\r\n`updateSubplots` seems to modify some internal state as well as adjusting viewboxes, we still may need the internal state even if we don't change anything visible.",
    "created_at": "2020-01-08T18:18:23Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4377#issuecomment-572192691",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4377",
    "updated_at": "2020-01-08T18:18:23Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I also see the labels disappear. Looks like something changed a little bit with positioning in 1.45.0 such that for some of us the labels are over half the plot size so they get removed. If I bump the height up to 300px they come back. @etpinard I guess your font is a little smaller than mine?",
    "created_at": "2020-01-07T19:18:20Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4459#issuecomment-571730706",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4459",
    "updated_at": "2020-01-07T19:18:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yeah, I know that can be confusing - it's a decision we made early on to silently ignore unrecognized attributes and attribute values of all kinds, mainly because when you're editing a graph interactively it's easy to end up with leftovers from a previous state (like if you had edited line style but then decide to only display points) and it can even be convenient to get those settings back later if you change your mind.\r\n\r\nYou can use [`Plotly.validate`](https://plot.ly/javascript/plotlyjs-function-reference/#plotlyvalidate) to ensure all the settings you passed in are used. We've talked about making a debug mode to validate automatically https://github.com/plotly/plotly.js/issues/1741 but this has never quite bubbled up to the top of the queue.",
    "created_at": "2020-01-02T20:10:14Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4458#issuecomment-570328625",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4458",
    "updated_at": "2020-01-02T20:10:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I'm OK with `window.PlotlyLocales`, unless anyone feels strongly about the underscore.",
    "created_at": "2020-01-02T19:59:44Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4453#issuecomment-570324932",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4453",
    "updated_at": "2020-01-02T19:59:44Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Only issue with using `PlotlyConfig` is if a user includes `window.PlotlyConfig = {MathJaxConfig: 'local'}` - which is the documented way to support parallel MathJax usage - we'll still have some order-dependent behavior because that will wipe out the locales if they're loaded before the `PlotlyConfig` script and that script is loaded before plotly.js. I think it'd be better to keep `PlotlyConfig` reserved for explicitly user-provided behavior. I think `window.PlotlyLocales` is fine. That said, if we want to be really clever (and hard to debug...) we might even be able to use `window.Plotly`, as this won't exist yet during the execution of the plotly.js script, right?",
    "created_at": "2020-01-02T19:43:37Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4453#issuecomment-570320081",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4453",
    "updated_at": "2020-01-02T19:43:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The basic module doesn't include `scattergl`, so that codepen will fall back to regular `scatter`.\r\nhttps://github.com/plotly/plotly.js/tree/master/dist#plotlyjs-basic",
    "created_at": "2020-01-02T17:42:00Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4458#issuecomment-570282964",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4458",
    "updated_at": "2020-01-02T17:42:00Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Huh OK, maybe that's a result of https://github.com/plotly/plotly.js/pull/2994? At this point I've lost track of why in #2994 we couldn't just *always* configure MathJax immediately before using it... if we could do that, and get rid of the [attempt to configure it during initial script execution](https://github.com/plotly/plotly.js/blob/187ffd01314c3995cbf652439d3175fdae7a6b02/src/core.js#L21) it would be more obvious that order is irrelevant. But it doesn't look as though anyone actually tried flipping MathJax to after plotly.js in the course of https://github.com/plotly/dash/issues/880, so if we can simply convince ourselves that this is OK, and remove the comment about script ordering in the plotly.js docs, then I'm happy with the MathJax part.",
    "created_at": "2019-12-30T18:13:13Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4146#issuecomment-569752807",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4146",
    "updated_at": "2019-12-30T18:13:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "That sounds great, except that Lib.notifier goes away by itself fairly quickly. These errors should stick around until the user clears them. Hopefully a small tweak to make notifier support that mode. ",
    "created_at": "2019-12-27T02:15:45Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4098#issuecomment-569167685",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4098",
    "updated_at": "2019-12-27T02:15:45Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@danieljblinick I believe we're planning the next release in early January. Can you just use the built files from this PR? You can grab whichever flavor you need from here: \r\nhttps://circleci.com/gh/plotly/plotly.js/61067#artifacts/containers/0\r\nie the full minified bundle is:\r\nhttps://61067-45646037-gh.circle-artifacts.com/0/dist/plotly.min.js",
    "created_at": "2019-12-19T16:50:25Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4410#issuecomment-567570569",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4410",
    "updated_at": "2019-12-19T16:50:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "BTW whenever this gets addressed, looks like contour labels sometimes use the regular hyphen \"-\", not minus sign \"−\" like we do for all other negatives\r\n\r\nhttps://github.com/plotly/plotly.js/blob/162afe491bccda9284e7c3b903a45bd9ac5cf836/src/constants/numerical.js#L62\r\n\r\nLooking at https://rreusser.github.io/plotly-mock-viewer/#contour_edge_cases - perhaps when `contours.labelformat` is specified we don't fix this character, but we do when auto-formatting? Compare the \"-1.0e-6\" to \"−1µ\"\r\n<img width=\"266\" alt=\"Screen Shot 2019-12-09 at 12 03 11 PM\" src=\"https://user-images.githubusercontent.com/2678795/70456373-fad84b00-1a7b-11ea-91f0-811693ecd656.png\">\r\n\r\n@poldz123 does your example use `contours.labelformat`? Or is there another case we're missing? We *do* use the correct minus sign for axis ticks with `axis.tickformat`, so seems this issue is just with contour labels.",
    "created_at": "2019-12-09T17:09:22Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4415#issuecomment-563337141",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4415",
    "updated_at": "2019-12-09T17:09:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Let's use 1ppm difference. We have a constant for this - only used one other place ATM but at least it's a precedent:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/fb8b28a552a5f83456d44be7dc1ff390146edaee/src/constants/numerical.js#L47-L50",
    "created_at": "2019-12-03T21:51:09Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4405#issuecomment-561373067",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4405",
    "updated_at": "2019-12-03T21:51:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "For now though `plotly_relayout` event data maps exactly to `Plotly.relayout` arguments, so in principle folks may be using this to accumulate changes that get fed back to the same or another plot later. If we add in other things that *look* like attributes, this would lead to invalid figures - mostly silently so, but confusing and potentially painful in case there's any chance we'd add attributes with these names later.\r\n\r\nBut perhaps we could add something that is clearly NOT an attribute? Like:\r\n`_derived: {coordinates: ...}`",
    "created_at": "2019-12-03T15:20:18Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4399#issuecomment-561215028",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4399",
    "updated_at": "2019-12-03T15:20:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I can see nice uses of both of those variants (though they could both certainly be later additions), and to me this kind of polymorphism doesn't feel particularly out of character. So if the choices are (a) add a new trace type that's a little easier to document or (b) put all this in the existing trace and allow for future expansion along these lines, I'd choose (b).\r\n\r\nNote the first one (full `y` alongside explicit stats) could also be useful with *all* stats provided, and would allow things like including your own jitter in the `y` direction - perhaps `y` has low precision so just `x` jitter obscures the density - without affecting the stats. Or perhaps you have a requirement to use a certain rounding for the stats but you still want the raw data displayed.",
    "created_at": "2019-12-02T02:55:20Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1059#issuecomment-560206192",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1059",
    "updated_at": "2019-12-02T02:55:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> the new one would accept the q1/q2 etc options and the old one wouldn't\r\n\r\nSo the new one would also accept `y` (for all points) if you just want to override the quartile calculations but leave everything else calculated? Or we won't allow that option? Moreover the idea of extending the 2D option to the original full-sample case (`x` is just one value per box, and `y` is a 2D array) seems to further blur the lines.\r\n\r\n> what's an example of a trace where the expected dimensionality of attrA is the same as attrB unless attrC is set, in which case it's expected to be something else?\r\n\r\nNot sure if we have exactly that situation... we certainly have attributes where the allowed *values* depend on other attributes. And we have one that I'd argue *should* have dimensionality interdependencies though it doesn't right now: `surface` currently accepts 1D or 2D `x`/`y` arrays, and a 2D `z` array. But I'd argue it should also allow all 3 arrays to be 1D so that you could always take a `heatmap` or `contour` and convert it to `surface`. Currently you can pass all 1D arrays to `mesh3d`, but it behaves rather differently than `surface` (and different from `heatmap` and `contour`) and anyway it breaks the very simple idea of \"show me this heatmap as 3D\" by just converting to `surface`. And if we were to support that, then you could only tell whether 2D `x` & `y` are valid by looking at `z`.\r\n\r\nRegardless, I don't think the criterion of coupled dimensionality requirements is enough to warrant calling this a new trace type. Most of the attributes are the same, the result is the same, it's just a few additional attributes and a few with a different dimensionality.\r\n\r\n----\r\n\r\n> At the moment, I think enforcing (data) arrays for q1, median, q3 and friends is a better idea\r\n> ...\r\n> a visible trace with no set valType: 'data_array' attributes. I guess that wouldn't be a first (indicator comes to mind), but that looks a little odd to me.\r\n\r\nI see your point, and I guess it's nice from the standpoint of making it obvious you can include multiple boxes in the same trace - if you first learn the scalar form you might never realize the array form exists. Sure, we can do that.",
    "created_at": "2019-11-30T02:04:46Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1059#issuecomment-559904503",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1059",
    "updated_at": "2019-11-30T02:04:46Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Not high priority bug, but it definitely is a bug, and since we're operating our own fork of `d3-sankey` at this point, we certainly have the control to fix it.\r\n\r\nTo be clear this isn't anything about node positioning - in the example here I'm positioning the nodes 100% manually, and just expecting the best links drawn between them.",
    "created_at": "2019-11-29T16:26:03Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4390#issuecomment-559838067",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4390",
    "updated_at": "2019-11-29T16:26:03Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Given all the variants we've been discussing, it's not entirely clear to me where we would draw the line between the two trace types. Anyway we have plenty of precedent for variable dimensionality and varying degrees of manual control - I'd keep a single trace type.",
    "created_at": "2019-11-29T03:03:13Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1059#issuecomment-559644131",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1059",
    "updated_at": "2019-11-29T03:03:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> it might be best to split the `box` API into two signatures\r\n\r\nThat makes a lot of sense to me - could even extend this to the original full-sample case: `x` is just one value per box, and `y` is a 2D array, with an outer length that matches `x` and the inner arrays - which need not all have the same length - are the samples for each `x`.\r\n\r\nFor precomputed statistics I wouldn’t want to prohibit single values (or force those to be wrapped in an array) when your goal is a single box; so I’d go with `arrayOk`\r\n\r\nDoes this introduce any ambiguities? I don't see any... there would be nonsensical inputs (`q1` is an array but `median` is a scalar, etc) but that's fine, wouldn't need to impose a meaning, we'd just need to not break.\r\n\r\n@nicolaskruchten any concerns about this from the standpoint of RCE?",
    "created_at": "2019-11-27T16:00:55Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1059#issuecomment-559148490",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1059",
    "updated_at": "2019-11-27T16:00:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> * `lf` or `lowerfence` / `uf` or `upperfence` OR `fences` as a 2-item array\r\n\r\nSeparate attrs feels cleaner to me.\r\n\r\n> * `ln` or `lowernotch` / `un` or `uppernotch` OR `notches` as a 2-item array (would make `notched` true by default if set)\r\n\r\nAllowing the notch to be asymmetric? We could go with `notchwidth` or `confidenceinterval` to keep it symmetric.\r\n\r\n> * `outliers` as a data array OR as [#1059 (comment)](https://github.com/plotly/plotly.js/issues/1059#issuecomment-535574204) suggest maybe we can reuse the `y` (`x` for horizontal boxes) for that\r\n\r\nThe only problem I see with reusing `x` or `y` is the partial definition case below. Which do you think would be less confusing for users to work with:\r\n- If you want to provide outliers and not the whole sample set with precomputed stats, you need to provide *all* the stats (which seems like it should be obvious, unless there's a case where you omit one stat because it matches another one - `upperfence` omitted or matching `q3` for example - which can happen if there are no outliers within what would be the fenced range, even if there *are* outliers beyond it)\r\n- When using precomputed stats we \"recommend\" using `outliers` even though 99% of the time using `x` or `y` would work exactly the same. Then we have to answer what we'd do if you provide only `outliers`, or `outliers` with partial stats...\r\n-----\r\n\r\n> `{type: 'box', q1: 1}`\r\n> be allowed? I personally think so\r\n\r\nSeems reasonable at first glance - values above what you provide match the last one below it, and vice versa. But it's a bit confusing to think about what happens if you're missing some in the middle. You provide `q1` and `q3` but not `median` - do you use the average of the two? Seems sketchy. What if you provide only `lowerfence` and `upperfence`? Seems even sketchier. So I might say you need to at least provide `q1`, `q3`, and `median`\r\n\r\n> `{type: 'box', q1: 1, y: [1, 2, 3, 4]}`\r\n> Personally, I think the third option could be interesting as one could want to override Q1 and Q3 (using some other quartile-finding algorithm) and have plotly compute all the other statistics - including those that depend on Q1 and Q3 (i.e. the fences, the outlier bounds and the notches).\r\n\r\nSounds good to me. To be clear, for the values that depend on `q1` and `q3` we would insert the user-provided values, so the derived values would change as well, correct?",
    "created_at": "2019-11-26T02:14:53Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1059#issuecomment-558427237",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1059",
    "updated_at": "2019-11-26T02:14:53Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "FWIW At least matplotlib allows inverted notches too https://stackoverflow.com/questions/38794406/why-is-matplotlibs-notched-boxplot-folding-back-on-itself\r\n\r\nI feel like I’ve seen this elsewhere as well - And to me it seems like the most honest way to display the notches. But I suppose an *option* to bound them to the IQR would be a reasonable feature to add. ",
    "created_at": "2019-11-26T01:21:00Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4088#issuecomment-558415320",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4088",
    "updated_at": "2019-11-26T01:21:00Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> And here is a [demo](https://codepen.io/MojtabaSamimi/pen/JjjzVQZ?editors=1000) illustrating that the results would be identical if `scene.bgcolor` is set to `white` (using the plot on the right).\r\n\r\nYou need to clone `fig` before mutating it, otherwise you get the same actually figure plotted in both cases... but yes, if I do that I see the same thing you do - all screen & downloaded plots look the same except the download with transparent `scene.bgcolor`. But the fix needs to be getting the download to work correctly with transparent background, rather than changing the background to the one that works.\r\n\r\n> Also mentioning this one can be helpful.\r\n> https://rreusser.github.io/plotly-mock-viewer/#gl3d_rgb_dont_accept_alpha_scatter3d\r\n> It appears the live variation is not the correct one since the line with transparency has become completely invisible in the middle!\r\n\r\nTrue, but the downloaded one is also not correct - it looks closer to correct, but (a) the one with white bgcolor downloads the same as on the screen, and (b) if you inspect the transparent-bg-download carefully, it appears to be the combination of the two bugs, which in this particular case seems to partially cancel. See for example the gridlines behind the semitransparent trace line - they're lighter than the trace line, but in a correct rendering they would be darker. So I'd consider this a separate bug.\r\n\r\nAlso perhaps a third bug: giving this plot a white bgcolor makes the semitransparent markers look somewhat more opaque - which I'm not sure I see in the download but you can clearly see it if you create this plot and then toggle the bgcolor in place with `Plotly.relayout(gd, {'scene.bgcolor':'white'})` vs `Plotly.relayout(gd, {'scene.bgcolor':'transparent'})`\r\n\r\nQuite a minefield 😅",
    "created_at": "2019-11-21T18:12:58Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4378#issuecomment-557207345",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4378",
    "updated_at": "2019-11-21T18:12:58Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yes, most definitely a bug. Perhaps something amiss about how we convert the canvas to an image in order to slot it in with the svg pieces? I think that's part of the image generation process in this case anyway...",
    "created_at": "2019-11-21T16:56:56Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4378#issuecomment-557176523",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4378",
    "updated_at": "2019-11-21T16:56:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Great, thanks for clarifying. Updated the title to reflect this.",
    "created_at": "2019-11-21T05:47:29Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4368#issuecomment-556930835",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4368",
    "updated_at": "2019-11-21T05:47:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> not necessary IMO\r\n\r\nThat's fine - just include it in https://github.com/plotly/plotly.js/blob/master/test/image/baselines/mathjax.png so we don't forget about it\r\n<img width=\"134\" alt=\"Screen Shot 2019-11-20 at 6 23 18 PM\" src=\"https://user-images.githubusercontent.com/2678795/69287037-ced75180-0bc2-11ea-8dc3-00f463393d19.png\">\r\n",
    "created_at": "2019-11-20T23:23:45Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/276#issuecomment-556543379",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/276",
    "updated_at": "2019-11-20T23:23:45Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I agree `'container'` would be nice - in this case though I'd think `x` would be `'paper'` (because that's the coordinate space used to position axes - the difference is `'paper'` excludes the margins and `'container'` goes all the way to the edges of the div) but `yref` might be `'container'` with `y` from 0 to 1 so you get a line all the way out including the margins.",
    "created_at": "2019-11-20T23:17:15Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4375#issuecomment-556536837",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4375",
    "updated_at": "2019-11-20T23:17:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> create new shapes such as rectangles, lines, freehand lines (paths), by selecting a specific type of drag mode in the modebar\r\n\r\nFor completeness, also circles, and freehand has a couple of distinct variants to consider: polylines where each click is a point; possibly also a curved variant of the same thing, where your clicks are connected by smooth bezier curves; and completely freehand where we try to follow the mouse path pixel-by-pixel - this last one we already do for lasso selection, with very minimal simplification along the way.\r\n\r\n> modify these shapes (moving them, and if possible scaling them and rotating them). Deleting the last shape would be a plus.\r\n\r\nRectangles and circles can already be moved and scaled, but still need rotation. Lines are already fully controllable. Freehand paths can be moved, but need scaling and rotation, and it would be nice to be able to at least optionally drag each individual point making up the path (along with the control points if in the Bezier case, perhaps). If you want to play with this, go to https://rreusser.github.io/plotly-mock-viewer/#shapes and turn on editable mode by opening the js console and typing: `Plotly.newPlot(gd,gd.data,gd.layout,{editable:true})`\r\n\r\nOne problem with this is it's hard to discover, even when you're already in editable mode. You can see what a drag is going to do though by paying close attention to the mouse pointer. Can we have some handles show up, perhaps when you hover over the shape? Along with, in the case of circles at least, maybe a dashed outline of the bounding box?\r\n\r\n> retrieving the geometry of shapes would probably be done thanks to relayoutData events in Dash.\r\n\r\n\"Live figure\" discussion for `dcc.Graph` https://github.com/plotly/dash-core-components/issues/584\r\n\r\n> Also discussed:\r\n>\r\n> having a new_shape_style attribute to set the style of shapes individually.\r\n\r\nno more underscores 😄 so `newshapestyle` perhaps.\r\n\r\n> all the drag modes would not be in the modebar by default but could be added individually\r\n\r\n👍 ",
    "created_at": "2019-11-20T23:12:30Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4374#issuecomment-556531874",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4374",
    "updated_at": "2019-11-20T23:12:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "OK - could we model this then as another mode of `volume` trace? Kind of the equivalent of heatmap's `zsmooth` attribute?",
    "created_at": "2019-11-20T19:54:27Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4371#issuecomment-556313112",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4371",
    "updated_at": "2019-11-20T19:54:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "how is this different from `volume`?",
    "created_at": "2019-11-20T17:25:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4371#issuecomment-556134688",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4371",
    "updated_at": "2019-11-20T17:25:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This problem has gotten worse with the async loading in dash 1.5...",
    "created_at": "2019-11-20T17:16:42Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4146#issuecomment-556124758",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4146",
    "updated_at": "2019-11-20T17:16:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "My first impression is the \"self-organizing\" part involves more analysis / nuance / judgment than we want to include in plotly.js - leaving that part to a data preparation step prior to sending us the form to be displayed. But if your question is about adding a hexagonal heatmap / binning variant, that's definitely something we'd consider adding - I've added a comment to this effect to the master \"new charts wishlist\" issue #2221 ",
    "created_at": "2019-11-20T15:49:18Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4368#issuecomment-556064975",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4368",
    "updated_at": "2019-11-20T15:49:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "hexbin / hexagonal heatmaps - from @mafar in https://github.com/plotly/plotly.js/issues/4368",
    "created_at": "2019-11-20T15:46:10Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2221#issuecomment-556063159",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2221",
    "updated_at": "2019-11-20T15:46:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> 1. user clicks on the root node OR a leaf node:\r\n> \r\n> * current: fires `plotly_click`\r\n> * wanted: same\r\n> \r\n> 2. user clicks on an inner node:\r\n> \r\n> * current: executes `plotly_sunburstclick` handler, triggers transition\r\n> * wanted: executes `plotly_sunburstclick` handler, fires `plotly_click`, triggers transition\r\n> \r\n> 3. user clicks on an inner node AND had set up a `plotly_sunburstclick` handler that returns `false`:\r\n> \r\n> * current: executes `plotly_sunburstclick` handler, fires `plotly_click`\r\n> * wanted (by AJ 😏 ): executes `plotly_sunburstclick` hander\r\n> \r\n> Is that correct?\r\n\r\nyep, that's what I had in mind! 🍻 \r\n\r\n> I can't really imagine placing the transition info inside the `points` array, so maybe the event data could have three subcontainers when a transition is triggered:\r\n> \r\n> ```js\r\n> {\r\n>   event: { /* instanceof MouseEvent */ }\r\n>   points: [{ /* */ }],\r\n>   transition: {\r\n>      duration: /* value from the constant file */,\r\n>      easing: /* value from the constant file */\r\n>   }\r\n> }\r\n> ```\r\n> \r\n> or maybe a just a boolean would suffice 🤔\r\n\r\nAs a user what I would want to know is not the transition parameters, but: did the root node of the view change, and if so to which node?\r\n\r\n> Moreover, theses changes are borderline breaking, so at the very least they would have to be released in a minor.\r\n\r\nFor sure, minor.",
    "created_at": "2019-11-20T02:06:59Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4338#issuecomment-555802001",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4338",
    "updated_at": "2019-11-20T02:06:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I'd say if the dimension with `nan` has any constraint on it at all, this object should be filtered out, but if it's unconstrained then this object should remain selected.",
    "created_at": "2019-11-19T17:18:32Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4341#issuecomment-555613187",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4341",
    "updated_at": "2019-11-19T17:18:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for clarifying, @etpinard - we were missing that context. It does make sense to keep the transition-canceling property only in the `plotly_*click` events, so essentially option 2 sounds great to me as well.\r\n\r\nBut according to the existing logic, you get a `plotly_click` event in sunburst or treemap traces precisely when there's no transition - either because you clicked on a node that doesn't support transitions, OR because the `plotly_*click` handler canceled the transition. That seems weird to me - I'd say if `plotly_*click` canceled the transition, it should cancel the `plotly_click` event too. But otherwise `plotly_click` should alway be triggered, transition or no. It could be useful to know whether there was a transition triggered by the click or not, so perhaps we can find a way to add that to the event handler?",
    "created_at": "2019-11-19T00:09:25Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4338#issuecomment-555269295",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4338",
    "updated_at": "2019-11-19T00:09:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Agreed - the ideal behavior would be to *just* remove the line segments to and from the `nan` value, but continue to show other segments of the same object.",
    "created_at": "2019-11-18T17:17:44Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4341#issuecomment-555117238",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4341",
    "updated_at": "2019-11-18T17:17:44Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Another example, from https://github.com/plotly/dash-core-components/issues/702: https://codepen.io/alexcjohnson/pen/JjjwBKE?editors=0010",
    "created_at": "2019-11-18T14:17:31Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4337#issuecomment-555033875",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4337",
    "updated_at": "2019-11-18T14:17:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "That will attempt to restyle the attribute literally `'str'`\r\nIf you're using es6:\r\n```js\r\nPlotly.restyle(gd, {[str]: 'red'}, null, [0])\r\n```\r\nOr with es5:\r\n```js\r\nvar dynamicallyFoundIndex = 14;\r\nvar str = \"marker.color[\" + dynamicallyFoundIndex + \"]\";\r\nvar editObj = {};\r\neditObj[str] = 'red';\r\nPlotly.restyle(gd, editObj, null, [0]);\r\n```",
    "created_at": "2019-11-14T16:01:27Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4352#issuecomment-553953882",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4352",
    "updated_at": "2019-11-15T03:16:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj @etpinard can we please dredge up a clear answer as to *why* this odd behavior exists with `plotly_click` (for `treemap` as well) and whether it would be feasible to make `plotly_click` behave the way users would expect, before we go to the trouble of documenting these trace-specific variants, adding them to dash, etc etc.",
    "created_at": "2019-11-14T22:34:22Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4338#issuecomment-554112727",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4338",
    "updated_at": "2019-11-14T22:34:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "In general I feel like data should not disappear if some secondary characteristic of it (color in this case, but more generally anything beyond its position) is missing or invalid. For example scatter traces with a short `marker.color` array treat the missing items as black. (that said I see that a short `marker.size` array yields size=0, this argument would say it should yield the default size)\r\n\r\nThis is mostly useful for debugging, so you can see what parts you got right and what parts have issues. If your goal is to make a transparent face, you should specify this explicitly rather than relying on an implicit \"bad data becomes transparent\"",
    "created_at": "2019-11-14T17:28:54Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4353#issuecomment-553993367",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4353",
    "updated_at": "2019-11-14T17:28:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "rename `mising` -> `missing`\r\n\r\nmissing vertex color reverts to white, but missing face color is omitted. Is that intentional / desirable? Offhand I'd think we'd want the faces to be white as well. Or perhaps a light gray in both cases...",
    "created_at": "2019-11-14T17:05:20Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4353#issuecomment-553983340",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4353",
    "updated_at": "2019-11-14T17:05:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The hover label is drawn as an SVG path, not in HTML - so I doubt that particular CSS would have the desired effect, though some of it does transfer.",
    "created_at": "2019-11-14T15:46:29Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2342#issuecomment-553946715",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2342",
    "updated_at": "2019-11-14T15:46:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "For reference, this came in with #3874 - during which we noticed this change and I commented:\r\n\r\n> The only changes I notice are Crimea transferring to Russia (accurate, whatever one thinks of its propriety) and ...\r\n\r\nAs @nicolaskruchten mentioned we don't make any independent judgments here (feel free to take that up with naturalearthdata), but we would certainly be open to some sort of mechanism for special marking of disputed territories. I'd wait for @etpinard to comment before embarking on a contribution, but presumably this would start with a PR to https://github.com/etpinard/sane-topojson",
    "created_at": "2019-11-11T16:43:13Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4345#issuecomment-552520294",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4345",
    "updated_at": "2019-11-11T16:43:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "`flatshading` definitely helps - in fact without it I can't really figure out any physical meaning to the lighting of `mesh3d` traces, but with it there does seem to be, for any given `lightposition`, a light that looks like it's coming from *somewhere* fixed wrt the scene as the scene is rotated. And moreover that fixed somewhere is the same for all traces. So based on that alone I'd probably enable `flatshading` by default. And I'm highly in favor of standardizing all the `lightposition` defaults to something with intelligible consequences, with all traces matching each other. In fact, can we add a `scene.lightposition` that all the traces in a scene inherit from if not provided at the trace level?\r\n\r\nNow, as to where this light appears to be, my description above still seems to hold. I'd add that when both x and y are fairly small (±hundreds or less) or when z is significant (<-10 or >1) it no longer seems possible to assign the light a fixed position as the scene rotates - I can align the cubes or saddle surfaces in what should be symmetric viewpoints (90-degree rotations of the cube, 180-degree rotations of the saddle) and I get different light regions.\r\n\r\nSo I definitely would not close this issue. To me this would be closed when the meaning of `lightposition.x/y/z` can be precisely defined, something like:\r\n> x is the position of the light source left (-) or right (+) in screen-space relative to the center of the scene.\r\n> y is its position below (-) or above(+), and z is its position behind (-) or in front of (+) the screen.\r\n> Only the normalized x, y, z vector matters, the light always behaves as if it is coming from a point source infinitely far away.\r\n\r\nI don't mind waiting on this - doesn't seem like we have anyone who particularly cares about this. But it's definitely still a bug.\r\n\r\n<details>\r\n<summary>Here's the dash app I'm using to play with this, based on your codepen @archmoj, plus sliders for `lightposition.x/y/z`. It's actually quite responsive, even though I'm sending the whole figure up with every mousemove. Go `Plotly.react`!</summary>\r\n\r\n```py\r\nimport dash\r\nimport dash_html_components as html\r\nimport dash_core_components as dcc\r\nfrom dash.dependencies import Input, Output\r\n\r\n\r\napp = dash.Dash(__name__)\r\n\r\n\r\napp.layout = html.Div([\r\n    html.Div([\r\n        html.P(id='xout'),\r\n        dcc.Slider(id='x', value=1000, min=-10000, max=10000, updatemode='drag'),\r\n        html.P(id='yout'),\r\n        dcc.Slider(id='y', value=1000, min=-10000, max=10000, updatemode='drag'),\r\n        html.P(id='zout'),\r\n        dcc.Slider(id='z', value=0, min=-100, max=100, updatemode='drag'),\r\n    ]),\r\n    dcc.Graph(id='fig')\r\n])\r\n\r\n\r\n@app.callback(\r\n    [\r\n        Output('xout', 'children'),\r\n        Output('yout', 'children'),\r\n        Output('zout', 'children'),\r\n        Output('fig', 'figure')\r\n    ],\r\n    [Input('x', 'value'), Input('y', 'value'), Input('z', 'value')]\r\n)\r\ndef fig(x, y, z):\r\n    camera1 = {\"eye\": {\"x\": 1.2, \"y\": 1.2, \"z\": 1.2}}\r\n    camera2 = {\"eye\": {\"x\": 1, \"y\": 2, \"z\": 1}}\r\n\r\n    lightposition = {\"x\": x, \"y\": y, \"z\": z}\r\n    color = \"yellow\"\r\n    return 'x: {}'.format(x), 'y: {}'.format(y), 'z: {}'.format(z), {\r\n      \"data\":  [{\r\n        \"x\": [0, 1, 0, 1, 0, 1, 0, 1],\r\n        \"y\": [0, 0, 1, 1, 0, 0, 1, 1],\r\n        \"z\": [0, 0, 0, 0, 1, 1, 1, 1],\r\n        \"i\": [0, 3, 4, 7, 0, 6, 1, 7, 0, 5, 2, 7],\r\n        \"j\": [1, 2, 5, 6, 2, 4, 3, 5, 4, 1, 6, 3],\r\n        \"k\": [3, 0, 7, 4, 6, 0, 7, 1, 5, 0, 7, 2],\r\n        \"flatshading\": True,\r\n        \"lightposition\": lightposition,\r\n        \"color\": color,\r\n        \"type\": \"mesh3d\",\r\n        \"scene\": \"scene1\"\r\n      }, {\r\n        \"x\": [0, 1, 0, 1, 0, 1, 0, 1],\r\n        \"y\": [0, 0, 1, 1, 0, 0, 1, 1],\r\n        \"z\": [0, 0, 0, 0, 1, 1, 1, 1],\r\n        \"i\": [0, 3, 4, 7, 0, 6, 1, 7, 0, 5, 2, 7],\r\n        \"j\": [1, 2, 5, 6, 2, 4, 3, 5, 4, 1, 6, 3],\r\n        \"k\": [3, 0, 7, 4, 6, 0, 7, 1, 5, 0, 7, 2],\r\n        \"flatshading\": True,\r\n        \"lightposition\": lightposition,\r\n        \"color\": color,\r\n        \"type\": \"mesh3d\",\r\n        \"scene\": \"scene2\"\r\n      }, {\r\n        \"x\": [0, 1],\r\n        \"y\": [0, 1],\r\n        \"z\": [[0, 1], [1, 0]],\r\n        \"lightposition\": lightposition,\r\n        \"colorscale\": [[0, color], [1, color]],\r\n        \"showscale\": False,\r\n        \"type\": \"surface\",\r\n        \"scene\": \"scene3\"\r\n      }, {\r\n        \"x\": [0, 1],\r\n        \"y\": [0, 1],\r\n        \"z\": [[0, 1], [1, 0]],\r\n        \"lightposition\": lightposition,\r\n        \"colorscale\": [[0, color], [1, color]],\r\n        \"showscale\": False,\r\n        \"type\": \"surface\",\r\n        \"scene\": \"scene4\"\r\n      }, {\r\n        \"x\": [0, 0, 1, 1, 0, 0, 1, 1],\r\n        \"y\": [0, 1, 1, 0, 0, 1, 1, 0],\r\n        \"z\": [0, 0, 0, 0, 1, 1, 1, 1],\r\n        \"u\": [0, 0, 1, 1, 0, 0, 1, 1],\r\n        \"v\": [0, 1, 1, 0, 0, 1, 1, 0],\r\n        \"w\": [0, 0, 0, 0, 1, 1, 1, 1],\r\n        \"lightposition\": lightposition,\r\n        \"colorscale\": [[0, color], [1, color]],\r\n        \"showscale\": False,\r\n        \"type\": \"cone\",\r\n        \"scene\": \"scene5\"\r\n      }, {\r\n        \"x\": [0, 0, 1, 1, 0, 0, 1, 1],\r\n        \"y\": [0, 1, 1, 0, 0, 1, 1, 0],\r\n        \"z\": [0, 0, 0, 0, 1, 1, 1, 1],\r\n        \"u\": [0, 0, 1, 1, 0, 0, 1, 1],\r\n        \"v\": [0, 1, 1, 0, 0, 1, 1, 0],\r\n        \"w\": [0, 0, 0, 0, 1, 1, 1, 1],\r\n        \"lightposition\": lightposition,\r\n        \"colorscale\": [[0, color], [1, color]],\r\n        \"showscale\": False,\r\n        \"type\": \"cone\",\r\n        \"scene\": \"scene6\"\r\n      }, {\r\n        \"x\": [0, 0, 1, 1, 0, 0, 1, 1],\r\n        \"y\": [0, 1, 1, 0, 0, 1, 1, 0],\r\n        \"z\": [0, 0, 0, 0, 1, 1, 1, 1],\r\n        \"u\": [0, 0, 1, 1, 0, 0, 1, 1],\r\n        \"v\": [0, 1, 1, 0, 0, 1, 1, 0],\r\n        \"w\": [0, 0, 0, 0, 1, 1, 1, 1],\r\n        \"lightposition\": lightposition,\r\n        \"colorscale\": [[0, color], [1, color]],\r\n        \"showscale\": False,\r\n        \"type\": \"streamtube\",\r\n        \"scene\": \"scene7\"\r\n      }, {\r\n        \"x\": [0, 0, 1, 1, 0, 0, 1, 1],\r\n        \"y\": [0, 1, 1, 0, 0, 1, 1, 0],\r\n        \"z\": [0, 0, 0, 0, 1, 1, 1, 1],\r\n        \"u\": [0, 0, 1, 1, 0, 0, 1, 1],\r\n        \"v\": [0, 1, 1, 0, 0, 1, 1, 0],\r\n        \"w\": [0, 0, 0, 0, 1, 1, 1, 1],\r\n        \"lightposition\": lightposition,\r\n        \"colorscale\": [[0, color], [1, color]],\r\n        \"showscale\": False,\r\n        \"type\": \"streamtube\",\r\n        \"scene\": \"scene8\"\r\n      }],\r\n      \"layout\": {\r\n        \"paper_bgcolor\": \"lightblue\",\r\n        \"uirevision\": True,\r\n        \"width\": 1200,\r\n        \"height\": 600,\r\n        \"scene1\": {\r\n          \"domain\": {\r\n            \"x\": [0, 0.25],\r\n            \"y\": [0, 0.25]\r\n          },\r\n          \"camera\": camera1\r\n        },\r\n        \"scene2\": {\r\n          \"domain\": {\r\n            \"x\": [0, 0.25],\r\n            \"y\": [0.5, 1]\r\n          },\r\n          \"camera\": camera2\r\n        },\r\n        \"scene3\": {\r\n          \"domain\": {\r\n            \"x\": [0.25, 0.5],\r\n            \"y\": [0, 0.5]\r\n          },\r\n          \"camera\": camera1\r\n        },\r\n        \"scene4\": {\r\n          \"domain\": {\r\n            \"x\": [0.25, 0.5],\r\n            \"y\": [0.5, 1]\r\n          },\r\n          \"camera\": camera2\r\n        },\r\n        \"scene5\": {\r\n          \"domain\": {\r\n            \"x\": [0.5, 0.75],\r\n            \"y\": [0, 0.5]\r\n          },\r\n          \"camera\": camera1\r\n        },\r\n        \"scene6\": {\r\n          \"domain\": {\r\n            \"x\": [0.5, 0.75],\r\n            \"y\": [0.5, 1]\r\n          },\r\n          \"camera\": camera2\r\n        },\r\n        \"scene7\": {\r\n          \"domain\": {\r\n            \"x\": [0.75, 1],\r\n            \"y\": [0, 0.5]\r\n          },\r\n          \"camera\": camera1\r\n        },\r\n        \"scene8\": {\r\n          \"domain\": {\r\n            \"x\": [0.75, 1],\r\n            \"y\": [0.5, 1]\r\n          },\r\n          \"camera\": camera2\r\n        }\r\n      }\r\n    }\r\n\r\n\r\nif __name__ == '__main__':\r\n    app.run_server(debug=True)\r\n```\r\n\r\n</details>\r\n",
    "created_at": "2019-11-09T02:16:53Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2477#issuecomment-552056108",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2477",
    "updated_at": "2019-11-09T02:16:53Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Rather than \"disable moving the background\", I think the feature should be additive: enable either axis lines or (unfilled) grids from `(0,0,0)` - or even from a configurable point in 3D space. So for example, in addition to the \"axis lines from the origin\" in that post:\r\n![lines from origin](https://aws1.discourse-cdn.com/standard17/uploads/plot/original/2X/2/212f6f28a9624ca4738b309457f2ee1e1c8cedd8.png)\r\nyou could also have grids through the origin, but without a solid fill (this is only one plane, and not at x=0, but gives the essential idea:\r\n![37626_slicedata_plane](https://user-images.githubusercontent.com/2678795/68500915-d72aa680-022a-11ea-9db2-b6cb79900a8a.png)\r\n\r\nAlso, while we're on the topic: the current behavior of only allowing one \"background\" plane for each dimension is a bit funny when one or more axes is very close to in the plane of the screen. Feels to me as though it would be better to show *any* planes that we're looking at the inside of, even if we only put axis labels on one of them. Like this:\r\n![plot3d-scatter-plot-3d-tick-mark-r-data-visualization-1](https://user-images.githubusercontent.com/2678795/68501115-55874880-022b-11ea-9645-472dad220f24.png)\r\n",
    "created_at": "2019-11-08T18:29:30Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4342#issuecomment-551939543",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4342",
    "updated_at": "2019-11-08T18:29:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @mjordan84 - looks like the limit is 2^14 = 16384. But only in Chrome - Both FF and Safari (on my mac anyway) appear to fail past 2^13 = 8192 - and FF does so in much more dramatic fashion! Also to note: this seems to only be a problem for webgl - convert these to `'scatter'` traces and it looks fine.\r\n\r\nGiven the browser-dependent nature of this, I'm not sure there's anything we can do. Indeed, these numbers line up with what I see described as webgl limits elsewhere, like https://tech.shutterstock.com/2019/04/30/canvas-webgl-filtering-concepts\r\nhttps://webglstats.com/webgl/parameter/MAX_RENDERBUFFER_SIZE (some sizable fraction are still limited to 4096)",
    "created_at": "2019-11-07T03:29:36Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4339#issuecomment-550637950",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4339",
    "updated_at": "2019-11-07T03:29:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "As I said:\r\n\r\n> we should be fine with screen-space transitions\r\n\r\nnot a blocker",
    "created_at": "2019-11-01T19:55:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1687#issuecomment-548928975",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1687",
    "updated_at": "2019-11-01T19:55:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "FWIW `Plotly.react` shows the same problem as `Plotly.restyle`\r\nhttps://codepen.io/alexcjohnson/pen/oNNodGr?editors=0010",
    "created_at": "2019-10-31T18:40:25Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4324#issuecomment-548514598",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4324",
    "updated_at": "2019-10-31T18:40:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @rreusser for the extra context!\r\n\r\nA concrete example of screen-space vs data-space transitions: Let's say you have a transition that both doubles the size of a bar, and halves the span of the axis it's drawn on. And let's further simplify to say the transition is linear. As a result the bar should end up 4x bigger than it started. If we do the entire transition in screen space, the bar will linearly expand, so halfway through it will be 2.5x its original size. But done in data space, the bar would grow linearly *while* the axis is zooming linearly, so there would be a quadratic component to the bar's size trajectory. Halfway through, it would be 1.5x * 1.5x = 2.25x its original size.\r\n\r\nI'm sure there are cases where the distinction is bigger than that; but seems to me in general even if it's not 100% accurate, as long as all the pieces make the same choice we should be fine with screen-space transitions. Bars that are supposed to be connected to each other will be connected to each other throughout the transition; points that are supposed to switch positions will still switch positions, just perhaps not at the same fraction of the overall transition.",
    "created_at": "2019-10-31T17:34:31Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1687#issuecomment-548486994",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1687",
    "updated_at": "2019-10-31T17:34:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @FlorianMaak! But it looks to me as though the unprefixed `fullscreenElement` is not yet available everywhere - [perhaps only 45%](https://caniuse.com/#feat=fullscreen)? In some of our other packages we use [`fscreen`](https://www.npmjs.com/package/fscreen) to normalize this.",
    "created_at": "2019-10-29T19:13:55Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4317#issuecomment-547585357",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4317",
    "updated_at": "2019-10-29T19:13:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "To my mind there's not a whole lot of difference in magicality between turning on `scaleanchor` and that plus `domain`. If that's the right default user experience, let's do it. Honestly if we had implemented `domain` in the first iteration of constraints it would probably be the default anyway.\r\n\r\n(I haven't looked at that other branch @antoinerg but I hope `domain` is set on both axes...)",
    "created_at": "2019-10-29T04:10:20Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4307#issuecomment-547247842",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4307",
    "updated_at": "2019-10-29T04:10:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> the current behaviour is causing a fair number of problems\r\n\r\nLet's address the animation-related pieces of this in #4250, and address the static-display bug on its own per my earlier https://github.com/plotly/plotly.js/issues/4282#issuecomment-543267004",
    "created_at": "2019-10-28T14:42:25Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4282#issuecomment-546978187",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4282",
    "updated_at": "2019-10-28T14:42:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "`layout.transition: {}` is indeed a little odd, do we have any other objects that behave that way? I'm not a fan of accepting `true` though, would make it very confusing as a user to learn how to take the next step and control the transition parameters.\r\n\r\nIn other contexts there's a separate boolean attr (`showlegend: true`) or a boolean inside the object (`enabled` or `visible`) and you need to explicitly provide at least that one. I guess at this point we need to maintain this behavior for backward compatibility, but it may be worthwhile including an `enabled` flag if only so you can set it `false` if desired.\r\n\r\nNow to the question of `line.simplify` - let's use this issue as a more general launching point for object constancy with lines, encompassing https://github.com/plotly/plotly.py/issues/1843 too. Copying the comment I made over there (and, per @nicolaskruchten - saying \"very tricky\" was in no way meant to imply we shouldn't do this; the current behavior is absolutely a bug):\r\n\r\n> There's no per-point object constancy built into the line paths, we're simply asking the path attr to [transition from one value to the next](https://github.com/plotly/plotly.js/blob/990a96050bbab12e1e405d0974985b2fea54d2e6/src/traces/scatter/plot.js#L271), which means transitioning each control point. Working in real object constancy seems like a frankly very tricky problem in the general case. For specific cases like this, where a leading point is dropped and a new point is added at the end, we could imagine a solution in 3 steps:\r\n> \r\n> 1. Before the transition, redraw the path instantaneously with an extra control point at the end (doubling up the last point)\r\n> 2. Create the final path having that extra control point now at the beginning, and execute the transition\r\n> 3. Redraw the path without the extra control point (or, I suppose, this step could be deferred until the next transition comes and we see what points have been added or removed)\r\n> \r\n> That would work, and adding & removing points at the ends seems like a pretty common use case so may be worthwhile coding for. May be tricky to get it to work right on splines, we can't treat these ghost points like regular points that happen to overlap their neighbors as this wouldn't give the same curve to the next point; but it seems like there would be a way to handle it.\r\n> \r\n> The more general case - points being inserted, removed, or reordered mid-group - creates all sorts of complications. Adding and removing points should be manageable, though accounting for all possible line shapes and getting it to look like the new points emerge from the line itself rather than splitting out of one of the existing points may be tricky. Reordering points it's not even clear to me what theoretically you should see. Take the simplest case where x, y, and id don't change, just their relative order. Then the markers wouldn't move at all, but you'd be asking the lines connecting them to change connection order? I don't see a way to do this without the lines disconnecting from the markers. Perhaps that's a sufficiently obscure edge case that this is acceptable?\r\n> \r\n\r\nTo follow on from that, how does this relate to `line.simplify`? Seems like at the very least steps 1 and 2 above need to force `simplify: false`; and step 3 we not even do. We might be able to improve performance in some cases (reducing delay at the start of the transition) by forcing `simplify: false` from the outset if `layout.transition` is defined. But that will only help (removing step 1) if the ids don't change; if they do, we still have to execute step 1. And if we omit step 3 then it's only the first transition that's improved anyway. So I'd probably leave `line.simplify` alone and just handle this behind the scenes. It's supposed to never have a visible effect anyway (never mind #4282 that we need to solve separately)",
    "created_at": "2019-10-28T14:38:24Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4250#issuecomment-546976286",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4250",
    "updated_at": "2019-10-28T14:38:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Maybe @byronz could take a look?",
    "created_at": "2019-10-24T02:40:53Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4276#issuecomment-545716617",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4276",
    "updated_at": "2019-10-24T02:40:53Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yes, it’s a good idea to keep fullLayout in sync with layout, for the sake of Plotly.react",
    "created_at": "2019-10-19T00:45:23Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4274#issuecomment-544027843",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4274",
    "updated_at": "2019-10-19T00:45:23Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I don't think we should be adding more magic numbers. I feel like the solution here is simplification should never remove the first or last point in any contiguous section (ie a sub-array with no nulls). I'm guessing what's happening here is it's adding the first point, skipping the second because it's too close to the first, then realizing it only has a 1-point line and deleting the whole thing.",
    "created_at": "2019-10-17T16:56:15Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4282#issuecomment-543267004",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4282",
    "updated_at": "2019-10-17T16:56:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Here's an example with numeric axes, here the orange trace is just below the threshold and disappears, the green is just above and appears. Seems to happen at any angle and just be related to pixel length as a fraction of line width https://codepen.io/alexcjohnson/pen/GRRjZrW?editors=1010",
    "created_at": "2019-10-17T14:26:38Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4282#issuecomment-543200389",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4282",
    "updated_at": "2019-10-17T14:26:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Presumably, we shouldn't be calling `Plots.rehover` on non-cartesian subplots\r\n\r\nthat's not the implication of these comments... anyway regardless of the eventual *fix*, the *test* is pretty clear, hover on a subplot of each type while it disappears. Seems a bit overkill for a very simple fix though, also I've never seen users complaining about this with anything but cartesian. But it would be nice to have at least manually tested that this works.\r\n\r\nhttps://github.com/plotly/plotly.js/blob/25fe1c929672461e0b915a737134f6a975edf8f8/src/components/fx/hover.js#L227-L241",
    "created_at": "2019-10-10T20:51:26Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4269#issuecomment-540788387",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4269",
    "updated_at": "2019-10-10T20:51:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice 🎉 presumably this works for disappearing non-cartesian subplots as well as cartesian?",
    "created_at": "2019-10-10T20:25:28Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4269#issuecomment-540774372",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4269",
    "updated_at": "2019-10-10T20:25:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "`'inclusive'` and `'exclusive'` seem fine as names - they do seem to be the accepted names, despite the somewhat counterintuitive result that \"inclusive\" has a smaller IQR (ie it includes fewer data points between Q1 and Q3) than \"exclusive\".\r\n\r\nThe third method I'd propose we name `'linear'`.\r\n\r\nAFAICT our method *is* Wikipedia method 3, which is also Langford # 10, `'H&L-2'` - anyway if I replicate the data sets from Langford Table 2 `[1,2,3,4]` through `[1,2,3,4,5,6,7]` in our box plot it matches row 10.\r\n\r\nIf I look at Matlab's [quantile reference page](https://www.mathworks.com/help/stats/quantile.html#btf91zm) I believe that *also* describes exactly our algorithm, generalized to arbitrary fractions:\r\n\r\n> 1. The sorted elements in X are taken as the (0.5/n), (1.5/n), ..., ([n – 0.5]/n) quantiles\r\n> 2. quantile uses Linear Interpolation to compute quantiles for probabilities between (0.5/n) and ([n – 0.5]/n)\r\n\r\nI can't see specifically what they do for boxplot quartiles but I'd tend to assume it should match their quantile function.\r\n\r\nI also see this [Matlab dataviz toolbox quartile function](https://in.mathworks.com/matlabcentral/mlc-downloads/downloads/submissions/53789/versions/5/previews/dataviz_toolbox/dvt/html/quartile.html) showing `[0,10,20,30,40]` having quartiles 10, 20, 30 - which would correspond to Langford methods 1 (inclusive),3,4,5,7 or 12... but that looks like a 3rd-party thing.\r\n\r\nBTW according to Langford \"Excel\" is method 12, which in the language of the Matlab description would be:\r\n\r\n> 1. The sorted elements of X are taken as the 0, 1/(n-1), 2/(n-1), ...(n-1)/(n-1)==1 quantiles\r\n\r\n(which I'll note gives a consistently smaller IQR than any other method) But as Excel apparently [can only fake box plots](https://support.office.com/en-us/article/create-a-box-plot-10204530-8cdf-40fe-a711-2eb9785e510f) I guess Langford is describing obsolete versions of Excel.",
    "created_at": "2019-10-05T01:46:27Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4220#issuecomment-538605965",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4220",
    "updated_at": "2019-10-05T01:46:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "reported again https://community.plot.ly/t/dash-app-with-js-clientside-callback-sometimes-crashes/29599",
    "created_at": "2019-10-04T20:59:45Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4157#issuecomment-538558012",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4157",
    "updated_at": "2019-10-04T20:59:45Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Note: should still accept a data array alongside the precomputed stats, that you can use to pass in either all points or just outliers.",
    "created_at": "2019-09-26T16:05:46Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1059#issuecomment-535574204",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1059",
    "updated_at": "2019-09-26T16:05:46Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Should we try to turn crispEdges every time two bars touch?\r\n\r\nThat would be super tough to figure out\r\n\r\n> Or should we be more selective, and turn on cripsEdges when things look really bad otherwise?\r\n\r\nI might even go the other way: what are the situations when `crispEdges` looks bad and we need to NOT enable it? Frankly the only one that occurs to me is narrow bars/gaps. If bars - OR the gaps between them - are, for example, somewhere between 2 and 3 px wide, crisp will make some of them 2px and others 3px, which looks junky, particularly if there are gaps. Even worse, if the bars or gaps are between 0 and 1 px, they can alternate between visible and completely gone.\r\n\r\n> How much of a (perf) penalty do we pay by setting crispEdges?\r\n\r\nI'd assume the opposite, `crispEdges` disables antialiasing, and the extra blending it entails, so should be faster than leaving it off.\r\n\r\n> Should we try to find alternatives to crispEdges similar to we what currently do here:\r\n\r\nNote that that solution fails with CSS transforms that scale the bars. Of course all hell breaks loose if you have a CSS rotation (that's not a multiple of 90 degrees)...",
    "created_at": "2019-09-25T22:03:41Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4191#issuecomment-535240772",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4191",
    "updated_at": "2019-09-25T22:03:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Oh parcoords... you're quite right:\r\n```\r\nplotly.js@1.49.4 /Users/alex/plotly/plotly.js\r\n├─┬ color-normalize@1.5.0\r\n│ └── color-rgba@2.1.1 \r\n└─┬ regl-scatter2d@3.1.5\r\n  └── color-rgba@2.1.1  deduped\r\n```\r\nNow, add it to `package.json`, or switch the usage to `tinycolor2` like we use everywhere else?",
    "created_at": "2019-09-20T00:49:18Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4207#issuecomment-533360365",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4207",
    "updated_at": "2019-09-20T00:49:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "We could certainly add such an option. It's currently hardcoded here:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/7ec0729b1dd0ff10b6056197d6ddf8552d1f7862/src/traces/contour/plot.js#L632-L636",
    "created_at": "2019-09-18T19:59:12Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4200#issuecomment-532842369",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4200",
    "updated_at": "2019-09-18T19:59:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This is a consequence of the small width we give around valid points, so they're still visible if completely surrounded by nulls. See for example https://rreusser.github.io/plotly-mock-viewer/#connectgaps_2d\r\n\r\n<img width=\"361\" alt=\"Screen Shot 2019-09-18 at 9 47 15 AM\" src=\"https://user-images.githubusercontent.com/2678795/65154463-9025ef00-d9f9-11e9-9a4d-d98d0b443dee.png\">\r\n\r\nWithout this extra width, the lines at the top, bottom, and right would disappear entirely.",
    "created_at": "2019-09-18T13:50:25Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4200#issuecomment-532693446",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4200",
    "updated_at": "2019-09-18T13:50:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ah right, single, non-stacked bars with gaps are better with crisp off. But in this case, even though it's just one trace, there's still self-stacking. Ideal would be if we can figure out when there is self-stacking like this and have that effectively count as `barcount > 1` (line 35 ^^) - I think it'd be worth trying this before closing, esp. since we've recently changed our algorithms to create more self-stacking - and we have px encouraging that use case.\r\n\r\nToo bad browsers don't have separate x/y crisp modes, that would *really* be the ideal. One can sort of do this by precisely rounding the bar edges and disabling crispEdges, but that falls apart if the user zooms their browser.",
    "created_at": "2019-09-16T23:44:13Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4191#issuecomment-531999594",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4191",
    "updated_at": "2019-09-16T23:44:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "huh, why doesn't that example get `crispEdges`? Normal stacked bars DO, eg https://rreusser.github.io/plotly-mock-viewer/#bar_stackto1\r\n![Screen Shot 2019-09-16 at 6 27 25 PM](https://user-images.githubusercontent.com/2678795/64997820-d96a2780-d8af-11e9-985f-c1e03ca9e329.png)\r\n\r\nI seem to recall some cases where we thought it should be avoided, but I don't remember what those were. Anyway even if there are such cases, your example is not one of them, it should be crisp.",
    "created_at": "2019-09-16T22:33:08Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4191#issuecomment-531983894",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4191",
    "updated_at": "2019-09-16T22:33:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Another option occurred to me while responding to @orenbenkiki's suggestion https://github.com/plotly/dash/issues/916#issuecomment-529764218 - we could imagine adding a new axis attribute like `coordinates: 'legacy'|'data'` to opt into the \"v2\" behavior.",
    "created_at": "2019-09-10T11:25:42Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1258#issuecomment-529891466",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1258",
    "updated_at": "2019-09-10T11:25:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> `dflt[0] = 0;`\r\n\r\nsounds right to me. this is somewhat independent of #400 for eg. entirely negative axes with `tozero` or reversed ranges.",
    "created_at": "2019-09-06T20:28:29Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4137#issuecomment-529002961",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4137",
    "updated_at": "2019-09-06T20:28:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Transferred to plotly.js, as it looks like we'll try to fix it here.",
    "created_at": "2019-08-29T13:58:06Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4155#issuecomment-526197660",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4155",
    "updated_at": "2019-08-29T13:58:06Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Possibly... but I feel like we had a discussion at some point about catching this kind of situation much earlier in the process. The issue I believe is that the sum of top and bottom margins is more than the height (or similar l+r>w) - could we detect an all-margin situation before attempting to draw anything, and just display an empty graph?",
    "created_at": "2019-08-28T21:44:51Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4155#issuecomment-525934963",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4155",
    "updated_at": "2019-08-28T21:44:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard @antoinerg this has come up before... can you think of a reasonable way to deal with this kind of undersize condition at the plotly.js level? That seems preferable to trying to handle it on the dash side.",
    "created_at": "2019-08-28T18:25:31Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4155#issuecomment-525865827",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4155",
    "updated_at": "2019-08-28T18:25:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The problem is not with aligning them, it's that antialiasing can produce subpixel artifacts (can look like gaps or overdrawing, depending on the circumstance) even on perfectly-aligned shapes. Normally the solution to this is to disable antialiasing (`shape-rendering=\"crispEdges\"`) but that sometimes fails: it looks ugly if your shapes are not perfectly horizontal or vertical, it can delete tiny elements, and in some exported environments it's not respected anyway.",
    "created_at": "2019-08-27T00:30:30Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4149#issuecomment-525085247",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4149",
    "updated_at": "2019-08-27T00:30:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @zbjornson. I guess you mean rendering each brick as a separate solid-color rectangle? This could be an interesting mode to have available, but we wouldn't want it to *always* turn to SVG when `zsmooth=false` - aside from performance questions when you get to even larger sizes, I seem to recall some situations where it's still tricky to get the stitching right when two shapes are expected to exactly meet - for example stacked or gapless bar charts.\r\n\r\n@etpinard what do you think, another `zsmooth` value (`'rects'`?) or a new attribute (`rendering=('image'|'rects')` where `'rects'` forces `zsmooth=false`)?",
    "created_at": "2019-08-26T23:33:39Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4149#issuecomment-525073247",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4149",
    "updated_at": "2019-08-26T23:33:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj I did a little testing, and I think you may be on to something useful. AFAICT, as long as we add/subtract integers, and then divide by a power of 10 (again, explicitly rounded to be an integer), we're protected from these floating point errors over a quite wide range of values. (I tested `i/10^d`, for `d` in [1,6] and `i` in [1, 3e8], with both numerator and denominator rounded to integers, and never saw any extra digits)\r\n\r\nFor performance purposes I suspect we'd want to calculate up front the power of 10 that makes both `tick0` and `dtick` into integers (which in itself is nontrivial if you want to cover weird cases like `1.001e-6` - but I'm sure you can figure it out 😅) and round it:\r\n`p = Math.round(Math.pow(10, digits))`\r\nthen incrementing is just:\r\n`x1 = Math.round((x + delta) * p) / p`\r\n\r\nNow, the question is what cases that actually fixes? We could use it to fix cases we don't handle correctly right now in our own formatting - for example `{tick0: 0.001, dtick: 1.001}` which currently just rounds to 0, 1, 2... though there may be an easier way to fix that, just by improving the logic in the [numeric case of `autoTickRound`](https://github.com/plotly/plotly.js/blob/6d09846fee9ec3a5f004839fc3122f040afd1460/src/plots/cartesian/axes.js#L836-L848) to work more like the [date case](https://github.com/plotly/plotly.js/blob/6d09846fee9ec3a5f004839fc3122f040afd1460/src/plots/cartesian/axes.js#L824-L833) (this is the tick0/dtick logic I was thinking of earlier - funny that we do this for dates but not numbers currently!)\r\n\r\nBut it won't generally fix `tickformat: 'p'` or `tickformat: 's'` (or `'e'`, `'f'`, or `'g'` for that matter). In both of these d3 internally may multiply a fraction by a power of 10 - and no matter how well we ensure the fraction has the correct string representation, we can't ensure the end product will be free of floating point rounding errors. Honestly I don't think there *is* a good solution for this - it's a problem inherent to floating point numbers, and anything we do to fix it will improperly round some cases where the user really wanted the extra precision.\r\n\r\nReally the only solution I see is to encourage users never to use bare `p` or `s`, always include a length specifier. It's not a great solution, as it means the format can't change with zoom for example... unless we want to monkey with the d3 format language to let us insert an auto precision 😱 ",
    "created_at": "2019-07-30T04:03:10Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/4070#issuecomment-516251672",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4070",
    "updated_at": "2019-07-30T04:03:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "cc @catherinezucker - This came up at gluecon, would be really useful for volume rendering.",
    "created_at": "2019-07-17T18:51:43Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1784#issuecomment-512522382",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1784",
    "updated_at": "2019-07-17T18:51:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "cc @catherinezucker - this would allow us to create trace visibility buttons as well, for traces that don't have this functionality in the legend.",
    "created_at": "2019-07-17T15:54:27Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4042#issuecomment-512341726",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4042",
    "updated_at": "2019-07-17T15:54:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "My gut reaction is if `zeroline` gets coerced true, we should show it in these edge cases too, not just when it’s explicitly set true. Is there a case where that would look wrong?",
    "created_at": "2019-07-12T18:57:13Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4027#issuecomment-510996571",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4027",
    "updated_at": "2019-07-12T18:57:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks interesting! A few things to note about this:\r\n- Those v-shaped ticks are super confusing - I might go so far as to say objectively wrong for the labeled axes, since only one of those directions corresponds to the labels. The ones on the left axis should be horizontal, because lines of constant C are horizontal. And the ones on the bottom axis should be tilted northeast to match lines of constant CR.\r\n- The right axis could stay as is, with v-shaped ticks and no labels, just to mark the other end of the lines started by the ticks on the other two axes.\r\n- But that means this version has no way to show all three components; the third one is just \"whatever's left\" and the right axis *is* the line of the third component absent. I'm guessing for the use case you're showing the third component is just a solvent/filler ie something you don't care about per se, and that's probably a pretty common use case. We may want to use that fact as the way to enable this mode. Something like:\r\n```js\r\nternary.tickorigin = ('a'|'b'|'c'|'')\r\n```\r\nto say \"start the ticks from pure B\" etc - which would prevent showing ticks for B itself.\r\n- In principle there's also a configuration where all three axes are flipped. Right now we have the increasing direction of all axes' labels going clockwise but it would be possible to have them all counterclockwise. That would have to be either a separate attribute (`ternary.tickdirection: ('clockwise'|'counterclockwise'`?) that's only valid if you don't use `tickorigin`, or perhaps we can find an attribute name that would make sense with values like `('a'|'b'|'c'|'clockwise'|'counterclockwise'`.",
    "created_at": "2019-07-12T17:54:37Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/4010#issuecomment-510976445",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/4010",
    "updated_at": "2019-07-12T17:54:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@yellooo all the plotly events are prefixed by `plotly_`, so you would use:\r\n`myPlot.on('plotly_sliderchange', function(){ //Do something});`",
    "created_at": "2017-10-13T12:15:36Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1704#issuecomment-336436187",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1704",
    "updated_at": "2019-07-03T17:56:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yep, much better! 💃\r\n\r\nDoes look a little weird to have the arrows pointing right at the edge of the plot area, but of course this is what we do in other contexts where you're hovering on something off-plot. So maybe at some point we can alter that somehow to make it clearer they're not actually right there. Maybe as simple as getting rid of the arrow altogether, so these ones only have the box?",
    "created_at": "2019-06-25T20:10:27Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3965#issuecomment-505603345",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3965",
    "updated_at": "2019-06-25T20:10:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "That makes sense, thanks for clarifying. I don't think we want to remove zoombox from this event entirely, I can still imagine uses for it. But labeling it so you could choose to ignore zoombox or whichever ones you don't want seems like a good solution. It's a little weird as we only have the relayout object, but can we just add an `interactionType` key to that object? @etpinard @antoinerg does that seem reasonable?",
    "created_at": "2019-06-24T11:53:37Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3977#issuecomment-504977394",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3977",
    "updated_at": "2019-06-24T11:53:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@maun `plotly_relayouting` events are not intended to represent actual changes to the layout - that's what `plotly_relayout` events are for. These events are intended for live updates before the change has actually been applied to the plot. See https://github.com/plotly/plotly.js/pull/3888 and https://github.com/plotly/plotly.js/issues/2082",
    "created_at": "2019-06-21T12:54:16Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3977#issuecomment-504414977",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3977",
    "updated_at": "2019-06-21T12:54:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I am wondering about the root of this warning\r\n\r\nthis is intentional and has been there forever - though it would be nice to silence it! Pretty sure it's this:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/56f3bb7aed1ccb9848c31622b833a25c848d4519/test/jasmine/tests/layout_images_test.js#L324-L327",
    "created_at": "2019-06-18T02:50:47Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3969#issuecomment-502924589",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3969",
    "updated_at": "2019-06-18T02:50:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "🔪 `negateIf` is fine - it's just a convenience. If it becomes cumbersome without it, could always turn it into a plain function... just doesn't read quite as well as the method.\r\n```js\r\nfunction negateIf(expectation, condition) {\r\n   return condition ? expectation.not : expectation\r\n}\r\n```",
    "created_at": "2019-06-12T20:51:01Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3368#issuecomment-501450407",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3368",
    "updated_at": "2019-06-12T20:51:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I'm not sure this is just \"a bug to be fixed\" - the autorange operation never reverses the axis direction, so currently setting `ax.autorange: true` when `ax.range = [bigger, smaller]` will give you a reversed range.\r\n\r\nIn principle it would be nice to have `ax.autorange = 'reversed'` be a real setting, and the on-graph interactions look at the existing range to determine whether to set `true` or `'reversed'`. But that would be a breaking change for anyone currently sending in `autorange: true` with a reversed dummy range - currently the \"official\" way to get a reversed autorange from the beginning.",
    "created_at": "2019-06-12T14:52:03Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3955#issuecomment-501309730",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3955",
    "updated_at": "2019-06-12T14:52:03Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "hmm, we have a bit of an inconsistency already between `constraintrange` and `multiselect` - so we could use either `constraintline` or `selectionline` -> `{color, width}` - making it a container is nice because if later we want to add a [`mode: 'box'`](https://syntagmatic.github.io/parallel-coordinates/) or something, with additional attrs, we can always do that inside the container. That kind of possibility makes `*line` seem a bit funny... `selectionstyle`?\r\n![Screen Shot 2019-06-11 at 3 28 52 PM](https://user-images.githubusercontent.com/2678795/59300633-a7687a00-8c5d-11e9-95c5-78431875ccf8.png)\r\n",
    "created_at": "2019-06-11T19:32:34Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3949#issuecomment-500990157",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3949",
    "updated_at": "2019-06-11T19:32:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Or nested in `dimensions`, with trace-wide options as the default for all dimensions.",
    "created_at": "2019-06-11T19:03:48Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3949#issuecomment-500979742",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3949",
    "updated_at": "2019-06-11T19:03:48Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "FWIW the shape solution doesn't need two overlaid shapes - just take out the extra `M` steps between the `Q` and `L` portions. See for example https://codepen.io/alexcjohnson/pen/dErOaK?editors=0010",
    "created_at": "2019-06-04T02:08:24Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2196#issuecomment-498491286",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2196",
    "updated_at": "2019-06-04T02:08:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "FWIW this would be easy to add for some axis types (linear and category), hard and/or new syntax for the others (log and date). The options we allow right now are the ones that work with a straightforward syntax on all axes.",
    "created_at": "2019-05-31T14:27:49Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3926#issuecomment-497728589",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3926",
    "updated_at": "2019-05-31T14:27:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Right, I don't see any sense in `(probability) density` if you're not binning counts, though `histfunc='sum'` can also represent counts, pre-grouped by position. You might have data like this from something like a CCD - a digital camera, counting photons or electrons per pixel - it has a lot of very fine bins, but you still might want to analyze with coarser bins for noise reduction.\r\n\r\nThe 2D analog of area -- ∫y・dx -- is volume -- ∫z・dx・dy\r\n\r\nSo with that said, The appeal of `probability density` is that bin heights/intensities are independent of both the total sample size and the size of bins you choose to group it into. If you start with a small sample and you can only bin very coarsely, you can keep adding to it and, aside from smoothing out fluctuations, the value at each location won't change, even when you have enough data that you can reduce bin sizes and see more detail. That holds for both 1D and 2D binning.\r\n\r\n`density` has a more limited appeal: in that case bin height/intensity is insensitive to bin size, but it *is* sensitive to the total sample size. My favorite example where this is useful is scattering experiments, like X-ray diffraction to study crystal structure. You know that from run to run the same number of X-rays are fired at your target, but how many you're going to collect in *any* of your detectors depends on the crystallinity of the material. It's very important to know if you see all the same peaks twice as high, or if a new peak showed up, do the first set get bigger, smaller, or stay the same? If you use `probability density` that constrains the integral of all peaks to a volume of 1, you can't answer these questions.",
    "created_at": "2019-05-29T02:28:48Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3913#issuecomment-496759218",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3913",
    "updated_at": "2019-05-29T02:28:48Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ah sorry, I missed the point about 2D reusing this. I guess ideally we'd tailor the description for the different types, but if that's too much to ask then I could live with area/height disappearing for now.\r\n\r\nMaybe a procedural description like you have is enough for users to know which `histnorm` will do what they want... my own thought process goes something like \"I want (a total of 1 | a total of 100 | an integral matching the sample size | an integral of 1)\" and it's a bit tough to connect those desires to (probability | percent | density | probability density) in the proposed docs. But maybe the histnorm values themselves are sufficient if that's your starting point.",
    "created_at": "2019-05-28T20:26:12Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3913#issuecomment-496675839",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3913",
    "updated_at": "2019-05-28T20:26:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "That all sounds good, nice catch and thanks for figuring out more generic alternative descriptions. It would be nice to still include info about the totals, which I think are still clear and easy to state (even if not necessarily useful) for all cases except `density`: `percent`/`probability` the sum of bin *heights* is 100%/1, `probability density` the sum of bin *areas* is 1.\r\n\r\nI don't see much meaning to `density` with any `histfunc` but `count`, so if we want to be maximally explicit we can just say that, something like: \"density, with histfunc='count' (the default), sets the sum of bin areas equal to the total number of sample points\"",
    "created_at": "2019-05-28T16:27:09Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3913#issuecomment-496590066",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3913",
    "updated_at": "2019-05-28T16:27:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I'm for it - I really like the idea of being able to specify 3 (or 2 or 4) 2D arrays and specifying whether they're RGB, HSV, HSL, or whatever. I had some instances in grad school of multiple independent 2D channels of data I wanted to overlay... never did find a mapping that was intelligible for 3 channels but for 2 channels either R+G, R+B, or L+H worked fairly well in my case.",
    "created_at": "2019-05-23T17:21:18Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3898#issuecomment-495308675",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3898",
    "updated_at": "2019-05-23T17:21:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "God I hate mouse-following so much... the hover label is not labeling the mouse pointer, it's labeling the data point! But yes, if we also add hover *styling* so the point being described somehow pops out, I guess in principle it could be allowable.",
    "created_at": "2019-05-23T16:57:52Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3899#issuecomment-495300771",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3899",
    "updated_at": "2019-05-23T16:57:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "There seem to be others that don't support a `1` suffix - `ternary1` fails https://codepen.io/alexcjohnson/pen/KLZjrR, and from the looks of it so will `geo1`, `mapbox1`, `polar1`...\r\n\r\nThe way we're handling this right now - `cleanLayout` and `cleanData` mutating the input figure to strip these 1's - doesn't seem like it has an easy way to enforce that we add this behavior every time a new attribute & container following this counting pattern is added. Nor do we really want to be mutating the input figure.\r\n\r\nWhat if we changed this logic to happen in `supplyDefaults` instead?\r\n- coerce `'<prefix>1'` into `'<prefix>'` for such attributes & containers. Ignore container `'<prefix>1'` if `'<prefix>'` also exists.\r\n- keep track of what the input container was named so that `restyle`/`relayout` calls can target the correct input container.\r\n\r\nWould be a bit of a project, but is there any more complexity to it than that?",
    "created_at": "2019-05-23T02:17:25Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3892#issuecomment-495041645",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3892",
    "updated_at": "2019-05-23T02:17:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I really think we should drop access to `layout.meta` via `meta` in `trace.any_template`.\r\n\r\nConfirmed, I'm happy with this.",
    "created_at": "2019-05-21T17:22:49Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3865#issuecomment-494482384",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3865",
    "updated_at": "2019-05-21T17:22:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@jmmease really interesting, thanks for bringing this up. It's a great point, that `parcoords` doesn't work well with categorical variables, esp. when you have several categorical variables in sequence - you can't tell the difference between 1 link and a million links following the same path, you just get \"everything is connected\":\r\n<img width=\"159\" alt=\"screen shot 2018-01-02 at 11 41 21 am\" src=\"https://user-images.githubusercontent.com/2678795/34491684-63aaad54-efb2-11e7-91a9-02a6c824f8ff.png\">\r\n\r\nI wonder though whether we can solve this within the existing `parcoords` framework? Right now `parcoords` handles categorical data by requiring you to map it to numbers, and then supply the categories as tick labels matching those numbers. That probably has important use cases (where the positioning of these categories relative to each other is meaningful), but I bet we could make a new categorical axis type that lets you enter data as category names, lays out like you've drawn with a box around the bundle of lines for each category and a gap between them, and automatically distributes the lines across that bundle so that their thicknesses (and the thickness of any given selection) represent the weight in that category. That way we can seamlessly combine categorical and continuous variables into a single `parcoords` plot, while taking advantage of the code and considerable performance tuning that went into `parcoords` already.\r\n\r\n@monfera does this seem feasible and desirable? @jmmease does this seem like it would handle your use case?",
    "created_at": "2018-01-02T17:03:23Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2221#issuecomment-354816207",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2221",
    "updated_at": "2019-05-17T21:54:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The only changes I notice are Crimea transferring to Russia (accurate, whatever one thinks of its propriety) and in geo_canadian-cites (quelqu'un a oublié l'accent sur \"cité\"?) it seems Canada has lost a bunch of lakes, including the Quebec Eye. Much as I like lakes I don't think this is a big deal, and I don't think we should support multiple versions.",
    "created_at": "2019-05-17T02:14:27Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3874#issuecomment-493293616",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3874",
    "updated_at": "2019-05-17T02:14:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> The `meta` ref for trace is `extendFlat({}, layout.meta, trace.meta)`.\r\n\r\nI guess if there isn't a `trace.meta` it makes sense to fall back on `layout.meta` - especially for backward compatibility for anyone currently using `layout.meta` in trace contexts. But merging the two seems a bit confusing, esp. since we're allowing - expecting even - that one will be an array and the other an object. I'd vote to just use `trace.meta || layout.meta`.",
    "created_at": "2019-05-15T13:49:27Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3865#issuecomment-492662610",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3865",
    "updated_at": "2019-05-15T13:49:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> any chance there's documentation for these conversions anywhere?\r\n\r\nGood question, @etpinard ? The only place I'm aware of is buried deep in the code:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/e26f8f4c9c75a0381e75dd4a56035f7fbf07fe73/src/plots/cartesian/set_convert.js#L40-L55\r\n\r\nThat describes what the letters `d/c/l/p/r` mean, so you can extrapolate to the `x2y` functions. Perhaps we were trying to keep our options open, thinking if we don't document these functions we can change them without considering it a breaking change? 🙈 But obviously people like yourself have found them and depend on them so at this point we really should document them publicly.",
    "created_at": "2019-05-10T21:48:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3855#issuecomment-491439873",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3855",
    "updated_at": "2019-05-10T21:48:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "`[undefined, undefined]` certainly looks like a bug. Thanks! Presumably we're trying to convert back to `d` \"data value\" format, but that doesn't make sense for categorical axes - for these we should be using `c` \"calcdata\", ie based on the category serial numbers.\r\n\r\n(Note that if we ever get around to the log-range breaking change this will just be the `r` \"range\" format, as that will be defined as \"`d` for all continuous axis types, `c` for discrete axis types.\" Right now it's not the same as `r` because log ranges are specified by their log values.)",
    "created_at": "2019-05-10T20:59:07Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3855#issuecomment-491428329",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3855",
    "updated_at": "2019-05-10T20:59:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Does the current design leave room for a future way of saying \"sort by the values of trace X\" ?\r\n\r\nHow \"future\"? Does the data/traces split count? 😉 ",
    "created_at": "2019-05-06T19:37:28Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3606#issuecomment-489747627",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3606",
    "updated_at": "2019-05-06T19:37:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Right, `scatter.jitter` is related, but not a replacement for `type: 'strip'` - especially grouping & offsets on the position axis, but also it's not clear to me if we can (or even if we want to) adjust scatter jitter for the local density of points like we do for box/violin jitter.",
    "created_at": "2019-05-06T14:46:07Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3836#issuecomment-489647771",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3836",
    "updated_at": "2019-05-06T14:46:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Sure, get a quick legend fix in, but `type: 'strip'` would be nice at some point - feels awfully hacky to do it via box or violin (instructions: make a box with no box, or a violin with no violin. Take your pick!) and there may be some extra functionality that doesn't make sense in the existing types.",
    "created_at": "2019-05-06T14:35:13Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3836#issuecomment-489643745",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3836",
    "updated_at": "2019-05-06T14:35:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "With `alignmentgroup` and `offsetgroup` you can have all of those together - a single histogram overlaying a stack or a group, or multiple stacks... also need to consider multiple subplots, stacked or otherwise, and the desire to share binning across these. So yes, the simple case would be several overlaid histograms but there's a lot more you can imagine doing with bin groups.",
    "created_at": "2019-04-30T20:19:12Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3749#issuecomment-488100040",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3749",
    "updated_at": "2019-04-30T20:19:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "It wouldn't make sense to have incompatible bins within a single stack or group - you need to have matching position values, and we already do force this in the stacking/grouping code. Since that's exactly what we're talking about here, but extending this forcing to other traces that aren't otherwise known to need compatible positions, we might as well make this correspondence explicit: instead of inferring that a set of traces need to be forced into compatible positions based on their stacking or grouping, it becomes a 2-step process. (1) infer that these traces need to have the same `bingroup` (2) use that `bingroup` (along with any other traces we've put into the same group) to force compatible positions.",
    "created_at": "2019-04-30T20:05:34Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3749#issuecomment-488095694",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3749",
    "updated_at": "2019-04-30T20:05:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Next, should we allow `histogram2d` traces to be in different binning groups for their x-bins and their y-bins simultaneously. In other words, should we add `xbingroup` and `ybingroup` instead of just `bingroup`?\r\n\r\nI suppose we could imagine something like a manually-constructed `splom` showing 2D histograms instead of a scatter plot, where neighboring cells share one axis but not the other, so would only want to match bins on the matching axis.\r\n\r\nBut in general it would be nice to only need to specify the group once. Perhaps we make all three attributes, and `xbingroup` defaults `bingroup + '__x'` or something?",
    "created_at": "2019-04-30T19:57:18Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3515#issuecomment-488093013",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3515",
    "updated_at": "2019-04-30T19:57:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "How about we just force `bingroup` to match within a stack/group? ie have it inherit from the first trace in the group that sets a `bingroup`. That way you could choose to have a stack overlaid by another single trace, or another stack/group on a stacked or matching subplot, all sharing bin settings.",
    "created_at": "2019-04-30T19:21:17Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3749#issuecomment-488081358",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3749",
    "updated_at": "2019-04-30T19:21:17Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I feel like there would be uses for `bingroup` across non-matching axes, as long as `ax.type` is the same.",
    "created_at": "2019-04-30T19:15:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3515#issuecomment-488079313",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3515",
    "updated_at": "2019-04-30T19:15:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Heh, there are still places that publish in black and white? I suppose so.\r\n\r\nSure, pattern fills seem like the way to go. We should make our own though, rather than using a package like `patternfills`. They're pretty easy to generate on the fly, similar to how we generate gradients, and AFAICT you need to fully specify colors and everything, so there are going to be far too many possibilities to preload them. Ideally it seems like we'd allow you to specify at least three attributes: shape, orientation, and solidity, and combine these with the fill color to make a pattern.",
    "created_at": "2019-04-29T14:06:22Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3815#issuecomment-487593525",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3815",
    "updated_at": "2019-04-29T14:06:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "essentially duplicate of #1097 and #1117",
    "created_at": "2019-04-26T22:54:30Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3812#issuecomment-487225342",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3812",
    "updated_at": "2019-04-26T22:54:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> add a new field with a standardized name to each trace's calcdata.\r\n\r\nsounds like the winner to me! To be computed & added only when necessary.",
    "created_at": "2019-04-25T22:31:00Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3606#issuecomment-486860990",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3606",
    "updated_at": "2019-04-25T22:31:00Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> should we have the biggest value at the top or the bottom?\r\n\r\nYou could say the same about `category (ascending|descending)` - ascending will put `a` at the bottom and `e` at the top so they're actually in reverse alphabetical order. In fact you could even make that argument about the order based on data in the trace.\r\n\r\nI guess with a categorical Y axis you generally do read the graph from top to bottom, as opposed to numerical axes that you almost always read bottom to top. But making that the default behavior I think has much more extensive consequences than just choosing it for the new feature. So unless we're prepared to alter the rest of that behavior, I think ascending has to put the biggest at the top.",
    "created_at": "2019-04-25T19:05:42Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3606#issuecomment-486799839",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3606",
    "updated_at": "2019-04-25T19:05:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> \"total\" which refers to the first value in data\r\n\r\nor to the sum of all values...",
    "created_at": "2019-04-24T19:53:01Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3504#issuecomment-486400713",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3504",
    "updated_at": "2019-04-24T19:53:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> distinguish between \"percentage of total\" and \"percentage of previous\"\r\n\r\nPerhaps also \"percentage of first\", like [this one](https://exceldashboardschool.com/sales-funnel-chart/)?\r\n![Screen Shot 2019-04-24 at 3 50 14 PM](https://user-images.githubusercontent.com/2678795/56689277-b80e6200-66a8-11e9-91b2-e4f6b66d8fce.png)\r\n",
    "created_at": "2019-04-24T19:52:09Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3504#issuecomment-486400439",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3504",
    "updated_at": "2019-04-24T19:52:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This makes sense to me from a continuity standpoint - tiny positive and tiny negative look identical, but in between at exactly zero there’s a gap? If you’ve added a border to your bars you’re asking users to implicitly remove the border in evaluating bar size, so why should zero be an exception?\r\n\r\nAlso re: hover - makes sense to include the lines, though this gets tricky if there’s overlap like stacking. ",
    "created_at": "2019-04-22T13:14:22Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3797#issuecomment-485415054",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3797",
    "updated_at": "2019-04-22T13:14:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I feel like we do this in a bunch of situations, but one that comes to mind right now is `scaleanchor`, we'll ignore it if the referenced axis is the wrong type.\r\n\r\nIf we reject a `coloraxis` setting, that trace would have no `coloraxis` so it would behave like all traces do right now - the trace defines its own colorscale and colorbar.",
    "created_at": "2019-04-18T01:54:58Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3431#issuecomment-484325636",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3431",
    "updated_at": "2019-04-18T01:54:58Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "it probably looks like rejecting that coloraxis value from the latter trace, and giving it a separate colorscale and bar.",
    "created_at": "2019-04-18T01:05:30Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3431#issuecomment-484316807",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3431",
    "updated_at": "2019-04-18T01:05:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Contours with `coloring: 'heatmap'` would work just fine already - the colorbar would have lines on it for the contours I guess, which wouldn't match the heatmap, but that's probably OK. And contours with `coloring: 'lines'` (or `'none'`) I don't see any sense allowing to share a colorbar with heatmaps. So we're only talking about `coloring: 'fills'`. But since we have to exclude `'lines'` and `'none'` already, I'd argue for excluding `'fills'` too - and only allow contours with `coloring: 'heatmap'` to share a scale with a heatmap - until we manage to do \"discrete\" right.\r\n\r\nFWIW \"discrete\" itself has two variants that we need to be careful about. The version used in contour plots defines data values at the edges of each color - where the contour lines are. Much of the time heatmaps (and choropleths, scatter marker colors...) with discrete colors don't do that kind of mapping, they simply have discrete data and they map a single value to a single color. As far as the colorbar is concerned the main distinction is where the labels go: at the color boundaries vs midpoints. For the boundaries case we will need changes to trace rendering code, for the discrete data case we'll need changes to the colorbar rendering (and *maybe* trace rendering changes, if we want to also collapse multiple values onto one color)",
    "created_at": "2019-04-18T00:38:14Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3431#issuecomment-484311999",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3431",
    "updated_at": "2019-04-18T00:38:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "`#000` should be considered a bug, it should match everything else.",
    "created_at": "2019-04-17T21:32:26Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3788#issuecomment-484269509",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3788",
    "updated_at": "2019-04-17T21:32:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "FWIW `pie` simply ignores negatives, but here the space still has to exist. Shall we simply treat them as zero values?",
    "created_at": "2019-04-15T22:02:45Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3504#issuecomment-483435314",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3504",
    "updated_at": "2019-04-15T22:02:45Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> We should also add the camelcase rule\r\n\r\nthough we do have a few legacy snake_case attributes (`paper_bgcolor`, `error_x`...)",
    "created_at": "2018-10-26T19:43:32Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3162#issuecomment-433522193",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3162",
    "updated_at": "2019-04-11T20:58:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I like double-click, if people think it's discoverable enough. I suppose we could give a notifier when you first create a group, like we do when you first zoom/pan to tell you you can double-click to autoscale... though who knows how much these messages help.",
    "created_at": "2019-04-11T19:07:45Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3760#issuecomment-482257800",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3760",
    "updated_at": "2019-04-11T19:07:45Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> or better yet honor the ordering found in `gd.data`\r\n\r\nNot sure this is a good idea. For one there are cross-trace interactions that sometimes make this impossible (or at least nonsensical) - mostly involving filled `scatter*` but stacked bar would also do weird things in certain cases.\r\n\r\nI also worry people would accidentally lose point-like traces behind area-like traces, and that in some contexts like chart studio it could be hard to get the order you want. \r\n\r\nSo I'd prefer we keep the current behavior but add a way to stack it as desired. Can we just add something like a `zindex` attribute - where any matching values keep the current behavior but different values (within a subplot) stack by index?",
    "created_at": "2019-04-09T01:35:46Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3748#issuecomment-481067633",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3748",
    "updated_at": "2019-04-09T01:35:46Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Would this idea replace #3732 or would we still continue with that?",
    "created_at": "2019-04-05T17:40:22Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3735#issuecomment-480361643",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3735",
    "updated_at": "2019-04-05T17:40:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Oh sure, if legends 2.0 ever happens it would play just fine with this. Great idea 💯 ",
    "created_at": "2019-04-05T17:37:12Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3735#issuecomment-480360358",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3735",
    "updated_at": "2019-04-05T17:37:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Hmm, I was going to argue the opposite - if you template some field into `<extra>`, it could still be useful to limit it with `namelength`. What if we just default to `namelength: -1` when `hovertemplate` is used, but still honor it if provided?",
    "created_at": "2019-04-05T17:20:29Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3734#issuecomment-480354951",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3734",
    "updated_at": "2019-04-05T17:20:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "It would be a complicated algorithm, but I think we could do better than that:\r\n- sequence the outer level (no change there)\r\n- sequence the inner level separately for each outer value (ie separate by outer value and delete duplicates from each sub-list)\r\n- make a combined list for the inner level that does its best to retain the order of each of these sub-lists:\r\n  - search for an item that's first in any sublist *that it appears in*\r\n  - if no such item is found, pick the item whose first conflict (it's not the first sublist item) is in the latest sublist\r\n  - pop this item off the sublists and add it to the combined list.\r\n  - repeat until all items have been consumed\r\n- use this combined list to re-order inner-level categories\r\n\r\nThis would probably still change some of the existing test images, but less so and with any luck we'll be able to deem those changes bugfixes.",
    "created_at": "2019-04-04T18:43:49Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3723#issuecomment-480016965",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3723",
    "updated_at": "2019-04-04T18:43:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I'm guessing `pie` is there because all the other bundles should be \"basic plus something\"\r\n\r\nPerhaps we should have an `svg` bundle, that includes all svg types and omits all gl?",
    "created_at": "2019-04-03T15:18:24Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3718#issuecomment-479534855",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3718",
    "updated_at": "2019-04-03T15:18:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I'm guessing this is about a `<base>` element, and we need to incorporate `context._baseUrl` into `Drawing.gradient`, like we do in `Drawing.setClipUrl`",
    "created_at": "2019-03-31T22:16:12Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3700#issuecomment-478390508",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3700",
    "updated_at": "2019-03-31T22:16:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yeah my example is ridiculous, but that's the point, I really don't think you can do better. There's only one extra degree of freedom so if you make the 100s look better the 50s look worse, and vice versa.\r\n\r\nUsing the max width is visually appealing because the last bar is straight so the overall chart looks like a physical funnel, but interpretation is bizarre, you have to read it as something like \"at this stage we have value Y but then in the next stage it's going to drop to Z.\"\r\n\r\nCould we get away with sloped connectors between rectangular data bars, like the amcharts example? That way the stage values and inter-stage reductions are separate visual elements and it's all very clear what's what.\r\n\r\nI suppose another option that might make more intuitive sense would be to encode the value in the *minimum* width of the trapezoid. That way you can read each stage fairly naturally as \"at this stage we reduced from value X (the previous stage) to value Y (this stage). So looking at that one trapezoid you can see the two key metrics for the stage: the remaining value and what was lost getting there. The disadvantage though is people who are used to the dumb but more common max-width encoding would be disoriented.",
    "created_at": "2019-03-31T19:53:27Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3504#issuecomment-478374787",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3504",
    "updated_at": "2019-03-31T19:53:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "It consolidates `value` just fine, but you're displaying `text` - and that can't be summed since it's arbitrary strings.\r\n\r\nIn this case you're using `text` for formatted numbers, so a better solution might be for us to support something like `valueformat` along the lines of `axis.tickformat`. (then we'd probably need `valueprefix` and `valuesuffix` too).\r\n\r\nI suppose it could be useful in some cases to consolidate `text` by concatenating all of them together, or concatenating distinct values, with commas or some other separators... That would need to be opt-in in any case.",
    "created_at": "2019-03-31T18:58:40Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3698#issuecomment-478369547",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3698",
    "updated_at": "2019-03-31T18:58:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "FYI in whatever program produced that example, the value is encoded in the max width, not the area. Look what happens when you overlay the two sides:\r\n<img width=\"411\" alt=\"Screen Shot 2019-03-26 at 6 10 38 PM\" src=\"https://user-images.githubusercontent.com/2678795/55036996-a7f45b80-4ff2-11e9-8627-d505351013ab.png\">\r\n\r\nIn fact I think if you area-encode with constant thickness, you're forced into strange situations like a boundary line bigger than the one above despite the same or smaller value. Consider a step 100-100-100-50-50-50, there's an extra degree of freedom (you could make the 100's look better if the 50's look worse) but I think you'll always get stuff like this (grey is the midpoint to show value encoding):\r\n<img width=\"257\" alt=\"Screen Shot 2019-03-26 at 6 34 22 PM\" src=\"https://user-images.githubusercontent.com/2678795/55038012-e7707700-4ff5-11e9-9a5c-9b052f622532.png\">\r\n",
    "created_at": "2019-03-26T22:44:06Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3504#issuecomment-476881604",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3504",
    "updated_at": "2019-03-26T22:44:06Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The pie analogy works for the snapshot case but I don’t see how it handles the successive parts of a whole case. Want to elaborate on the API you’re imagining?",
    "created_at": "2019-03-26T18:13:47Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3504#issuecomment-476781112",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3504",
    "updated_at": "2019-03-26T18:13:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Right, I guess that's like \"here's what's in our sales funnel right now\" in which case \"total\" does have a real meaning, it's the sum of all deals the team is working on. But there's also no need that successive stages must decrease in size - averaged over time they would, but that's not necessarily true in one snapshot because they refer to different items.",
    "created_at": "2019-03-22T18:49:07Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3504#issuecomment-475738797",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3504",
    "updated_at": "2019-03-22T18:49:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Yes, it would be off by a couple of pixels, but I think that's ok. We can make it yet another mode if you like. This same effect exists in spanning mode.\r\n\r\nI guess that's OK - we can sacrifice a little fidelity for aesthetics. But in spanning mode the line is a different color, so it's intuitive (and precisely correct) to read the center of that line as the data value.\r\n\r\n> we'd have a matching-green line segment above the first bar and another one below the second bar.\r\n\r\nDo it just by extending the existing rect the right number of pixels, rather than adding a new line. A new line would make a mess with opacity, and may end up looking a subpixel longer due to antialiasing.\r\n\r\n> Now wondering what should happen when using connector with dash lines?\r\n\r\nI don't think this changes anything. In spanning mode the bar will end halfway across the line, and in between mode the bars should still extend by the width of the line.",
    "created_at": "2019-03-22T14:31:07Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3531#issuecomment-475642994",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3531",
    "updated_at": "2019-03-22T14:31:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "from @etpinard above:\r\n> Make geo subplot respect the scrollZoom config option #143\r\n\r\nand from #2041:\r\n> @etpinard - I think in `v2` all subplot types should obey `scrollZoom`. Moreover, I think should add a corresponding `layout` attribute as people might want to turn on/off scroll interactions via a `relayout` call.\r\n\r\n> @rreusser - Agreed. Including gl3d. I actually rather dislike scrollZoom being a config parameter. I find embedplot, for one, suddenly has dramatic scroll interactions I never saw when developing the plot.\r\n\r\nWe definitely need saner management of `scrollZoom`. The current behavior grew accidentally but does have a sort of logic to it:\r\n- `scrollZoom` was originally made a config option because you want to be able to avoid it in scrolling environments. For example a plotly plot in a blog post or news story: you scroll down quickly and suddenly discover that page scrolling has stopped and you're looking at a mostly blank plot, because you've accidentally zoomed way out before even looking at it. This is why plot.ly embeds have `scrollZoom: false` but the same plot displayed in a non-scrolling environment (such as plot.ly shareplot) have it enabled.\r\n- This works OK for some subplot types (2D cartesian, ternary) that have other options for zooming (drag box and dragging axis ends). But 3D and maps only zoom with the scroll wheel, so it's a big hindrance to turn it off. So 3D we explicitly chose to exempt from `scrollZoom: false`, not sure if it was an explicit decision with maps or not but it fits that logic.\r\n\r\nSo what would \"saner management\" look like, given these constraints? One proposal (incorporating some of the above ideas):\r\n- A layout attribute that defaults to `false` unless you have one of the subplot types that can only be zoomed this way, but that lets creators choose, and applies to all subplots of all types (per-subplot control seems confusing and unnecessary).\r\n- A modebar button so viewers can enable/disable it too.\r\n- Some pages (particularly plot.ly embed) will still want to actively suppress scroll zoom, but it's really only the *initial* scrollZoom setting they want to control - if the viewer has explicitly turned scrollzoom on they won't be surprised that it happens as they scroll past. So this wouldn't need to be a config parameter, these pages could just override the layout setting before the initial render.",
    "created_at": "2017-09-29T15:01:46Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/420#issuecomment-333151032",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/420",
    "updated_at": "2019-03-20T15:16:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ah good call on hover, `NaN` labels squished in the corner aren't too useful 😉 \r\nContour treats the interpolated points no differently from real data. Perhaps at some point it would be nice to indicate which are interpolated, but as a first cut matching contour and labeling exactly what was drawn should be fine.",
    "created_at": "2019-03-19T20:23:50Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3638#issuecomment-474566762",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3638",
    "updated_at": "2019-03-19T20:23:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "That's exactly what I had in mind, thx!",
    "created_at": "2019-03-19T20:18:37Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3652#issuecomment-474563849",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3652",
    "updated_at": "2019-03-19T20:18:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks good to me. Whether it's fast... that's another question. It's not slower than heatmap/contour anyway, and it only adds this overhead if you opt in, so I'm happy to add it here. If someone's sufficiently interested in improving performance later we can investigate reimplementing this on the GL side.\r\n\r\nI'm more bothered though by what happens with `connectgaps` turned *off* for this data - the trace disappears entirely, since there are no mesh squares with all corners specified. Compare that to `contour` for the same data without connectgaps:\r\n![Screen Shot 2019-03-19 at 3 36 40 PM](https://user-images.githubusercontent.com/2678795/54636424-d0151500-4a5c-11e9-8c96-0d7d7bfca7fb.png)\r\nThere we give even islands or thin strips some nonzero size, and three corners of a square are enough to fill in half of the square.\r\n\r\nBut that's a more complex issue for another time.",
    "created_at": "2019-03-19T19:42:58Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3638#issuecomment-474548982",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3638",
    "updated_at": "2019-03-19T19:42:58Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "LGTM 💃 \r\n\r\nI noticed two more issues with `heatmapgl` while playing with this though: https://github.com/plotly/plotly.js/issues/2924#issuecomment-474131492 and https://github.com/plotly/plotly.js/issues/3648 - we should investigate the perf claims made in #2924 and see whether we can improve `heatmap` enough to be able to deprecate `heatmapgl` or if we need to continue supporting both.",
    "created_at": "2019-03-18T23:01:36Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3647#issuecomment-474134037",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3647",
    "updated_at": "2019-03-18T23:01:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I notice a strange interpolation effect in heatmapgl, that makes it look as though there's a NW/SE correlation between neighboring data points. If I zoom in on https://codepen.io/etpinard/pen/mojEWY?editors=111 (which has totally random z, no correlation) I see:\r\n![Screen Shot 2019-03-18 at 6 42 43 PM](https://user-images.githubusercontent.com/2678795/54568669-7d7d1f80-49ae-11e9-9c69-fd4df78823b7.png)\r\nBut if I change to `heatmap, zsmooth: 'fast'` it looks appropriately uncorrelated:\r\n![Screen Shot 2019-03-18 at 6 42 22 PM](https://user-images.githubusercontent.com/2678795/54568706-9d144800-49ae-11e9-9cd7-bed8ca79444d.png)\r\n",
    "created_at": "2019-03-18T22:51:14Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2924#issuecomment-474131492",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2924",
    "updated_at": "2019-03-18T22:51:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @LloydLS - I know this can happen on an axis if *elsewhere* on that axis there's a significand between 1 and 10 - we keep the same exponent for all labels on that axis. Is that what you mean? I suppose we could add an option to choose the exponent independently for each tick - although IMO it's harder to read an axis that way.\r\n\r\nYou do get independent exponents using `tickformat`, but that (based on d3 number formatting) only has `e+##` as an option, not `x10^##` - see https://codepen.io/alexcjohnson/pen/zbpBZx\r\n![Screen Shot 2019-03-13 at 10 29 48 AM](https://user-images.githubusercontent.com/2678795/54286838-f3caed80-457a-11e9-8231-dcaf5feb544a.png)\r\n",
    "created_at": "2019-03-13T14:42:29Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3633#issuecomment-472451144",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3633",
    "updated_at": "2019-03-13T14:42:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "duplicate of #1346, feel free to weigh in over there. I doubt we'll change this behavior though - we could pick some other value but it would usually be wrong. I'd recommend setting `width` explicitly (yes, in milliseconds) https://codepen.io/alexcjohnson/pen/YgYqMW",
    "created_at": "2019-03-13T13:42:59Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3632#issuecomment-472426820",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3632",
    "updated_at": "2019-03-13T13:42:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Duplicate of #3035 / #975 where a separate attribute `nancolor` has been proposed",
    "created_at": "2019-03-13T00:54:02Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3631#issuecomment-472237512",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3631",
    "updated_at": "2019-03-13T00:54:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 \r\nThis seems like more than a bugfix, so merge if you're ready for 1.46 features.",
    "created_at": "2019-03-12T20:13:57Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3626#issuecomment-472162830",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3626",
    "updated_at": "2019-03-12T20:13:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Right, I think the *default* behavior with all identical values should be zero width, as you had in #3625. But if someone provides an explicit `bandwidth`, we should honor that as you do here.",
    "created_at": "2019-03-12T17:02:57Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3626#issuecomment-472090787",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3626",
    "updated_at": "2019-03-12T17:02:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Much better 🍻\r\nQuestion though: what if someone *wants* a nonzero bandwidth despite the single-valued data? Ideally they should still be able to provide a `trace.bandwidth` and get that behavior. I might even suggest doing that in the `groups-over-matching-axes` and `violin-offsetgroups` mocks to restore the previous look and make it easier to see what's going on.",
    "created_at": "2019-03-12T02:29:18Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3625#issuecomment-471825833",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3625",
    "updated_at": "2019-03-12T02:29:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I don't think we can do that, whatever size we choose someone will come up with a data set that has a natural size smaller than that. It has to actually have zero size, even if that means a special case with its own drawing code.",
    "created_at": "2019-03-11T20:58:35Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3622#issuecomment-471727185",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3622",
    "updated_at": "2019-03-11T20:58:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I managed to crash the browser tab zooming in on this plot. It got slower and slower as I zoomed in, eventually crashing. But I also see a bug when you zoom out, an increasingly small fraction of the total trace is shown.\r\n![heatmap scroll sm](https://user-images.githubusercontent.com/2678795/54150863-e6ddbb00-440f-11e9-9826-ba63bad29980.gif)\r\nMac OS 10.14, Chrome 72.\r\n",
    "created_at": "2019-03-11T19:12:52Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3615#issuecomment-471681008",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3615",
    "updated_at": "2019-03-11T19:12:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "They’re identical sanity checks: the “correct” entry (zero for total diff or the running total for total/abs_from_axis) is connected to the previous with a flat line, an “incorrect” entry has a sloped line. In fact they have an identical space of possible outcomes: total diff with value x is drawn the same as total/abs_from_axis with value running_total + x",
    "created_at": "2019-03-08T12:38:45Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3531#issuecomment-470914589",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3531",
    "updated_at": "2019-03-08T12:38:45Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "My `total` is the same as your `abs_from_axis`, and my `total difference` has the same effect on the running total as `relative` (rather than resetting the running total as `total`/`abs_from_axis` does), but the bar is drawn down to the axis like `total`.\r\n![img_8779](https://user-images.githubusercontent.com/2678795/54003904-b7823200-4121-11e9-94be-1e0cde0b8880.jpg)\r\n\r\nI still don't like the names though, and I'm hoping we can find a set of three single words to use. Perhaps this new one is actually `total`, as it's totaling up all the values up to and including that point, and `abs_from_axis` just gets called `absolute` since it's giving a completely new value independent of what came before. That's also nice because for efficiency (mostly for users' sake if they're typing by hand) we could just look at the first letter, `r`/`t`/`a`.",
    "created_at": "2019-03-08T02:59:02Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3531#issuecomment-470786482",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3531",
    "updated_at": "2019-03-08T02:59:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "re: legend items - the ones we have for finance data make it intuitive, I think, which color/style is up and which is down:\r\n<img width=\"98\" alt=\"screen shot 2019-03-07 at 5 44 17 pm\" src=\"https://user-images.githubusercontent.com/2678795/53994607-c60c2180-4100-11e9-8507-8e3c3f5b0df9.png\">\r\nWe have a tougher problem here, as we need to distinguish up, down, and total. The first one you gave may do it, but the upper left triangle should be up, the lower right should be down. But I wonder if just drawing a little waterfall would do:\r\n<img width=\"69\" alt=\"screen shot 2019-03-07 at 5 57 13 pm\" src=\"https://user-images.githubusercontent.com/2678795/53995240-81818580-4102-11e9-8b5a-bc6869f68295.png\">\r\n",
    "created_at": "2019-03-07T22:58:56Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3531#issuecomment-470734953",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3531",
    "updated_at": "2019-03-07T22:58:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Oh I see, as you've envisioned it a nonzero `abs_from_prev` would put the *base* of the bar somewhere other than zero but not affect the *end* of the bar, nor the running total. That seems weird, unless we can identify a real use case for it (and even if we can, I kind of feel like a different attribute (`base` probably, to match `bar` traces) would be cleaner.\r\n\r\nI was imagining it would behave identically to `abs_from_axis`, but with the actual calculated running total added on. So with a value of `-75` you would get exactly the bottom right graph, whereas `+75` would yield a ramp up to a total of 225, but the bottom of this bar would always be at 0.\r\n\r\nDoes that change what they should be called? Perhaps `relative`, `total` (for `abs_from_axis`), and `total difference`?\r\n\r\nBTW elsewhere for multi-word attribute *values* we've used lowercase with spaces.",
    "created_at": "2019-03-07T20:53:12Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3531#issuecomment-470689691",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3531",
    "updated_at": "2019-03-07T20:53:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "cc @Marc-Andre-Rivet re: `npm ci` - nice find @etpinard @antoinerg 🏆 ",
    "created_at": "2019-03-07T20:34:21Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3612#issuecomment-470683387",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3612",
    "updated_at": "2019-03-07T20:34:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Just for a little more context here - @Melmoth-the-Wanderer apologies for missing your question last fall - symlog is a piecewise combination of three mappings: a regular log mapping at large positive values, a negated log mapping at large negative values, and a linear mapping connecting the two at small positive/negative values. This allows us to show very large positive *and* negative values while maintaining visibility into small changes in the mid-range. Symlog scales generally have a configurable linearity threshold, and often the ability to offset the zero to account for a baseline value in the data. \r\n\r\nThe problem with this though is it's not a smooth mapping. Matplotlib in fact doesn't seem to worry about anything more than matching values at the breakpoints, leading to kinks like [this](https://stackoverflow.com/questions/3305865/what-is-the-difference-between-log-and-symlog):\r\n![kinked symlog](https://i.stack.imgur.com/jt0W2.png)\r\nIt should be possible to do better than that, and match the first derivative at the breakpoints by stretching the log mappings appropriately, but it would still have higher-order discontinuities.\r\n\r\nThat's where `y=arcsinh(x)` comes in. (ref https://reference.wolfram.com/language/ref/ArcSinh.html)\r\n![arcsinh](https://reference.wolfram.com/language/ref/Files/ArcSinh.en/O_2.png)\r\n\r\nIt's a single smooth function that approximates a log `y=ln(x)` (up to a scaling constant) at large positive x, a negated log `y = -ln(-x)` at large negative x, and a linear `y=x` around zero. We can incorporate a linearity threshold and offset by generalizing to `y=arcsinh((x-x0)/xL)`\r\n\r\n@PavelGolodoniuc applied this transformation to his data and simply plotted that as `y`. That gives the desired curve shapes - detail at small values while keeping both positive and negative large values on scale. The challenge with a plot like this is connecting back to the pre-transformed data. Assuming the mapping he used was a simple `y=arcsinh(x)`, the data span from about -200 to +11000 but the ticks at +/-2 are ~+/-3.6. It's hard to develop an intuition about what these values mean. It's possible to put the original data into tick labels (using `tickvals` and `ticktext`) but it's difficult to choose good values even for one specific plot (here you might do something like 0->0, +/-1.44->2, +/-3.00->10, +/-5.29->100, 7.60->1K, 9.90->10K), more difficult to automatically find good values in the general case. If we were to add this feature to plotly.js that's where the vast majority of the work would be.",
    "created_at": "2019-03-06T18:32:25Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/221#issuecomment-470222056",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/221",
    "updated_at": "2019-03-06T18:32:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Sounds like what you're interested in is a symlog / asinh transform as discussed in #221 \r\nOther arbitrary transformations (as well as symlog unless and until we add it to plotly.js) can be handled with custom tick labels - you can do something like:\r\n- set the `trace.y` values to the transformed data\r\n- provide the original data as part of `trace.hovertext` (or `hovertemplate` with the original data in `customdata` perhaps)\r\n- use `yaxis.tickvals/ticktext` to label the axis according to the transformation",
    "created_at": "2019-03-06T17:52:23Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3608#issuecomment-470208021",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3608",
    "updated_at": "2019-03-06T17:52:23Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "That's a good point @destradafilm - I would assume the default would be to always have the text \"right-side-up\" as referenced to the screen, but that's the behavior you don't want since a biggest slice <50% like your chart 2 would have its text rotated right, but >50% like the other two would have it rotated left. A behavior where you always have the top (for tangential) or right (for radial) edge of the text toward either the inside or outside of the circle would need to be a separate attribute.",
    "created_at": "2019-03-06T03:20:15Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3590#issuecomment-469952514",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3590",
    "updated_at": "2019-03-06T03:20:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Perhaps change `'none'` to `'fixed'` or `'constant'` so it can at some point be modified with another attribute containing an angle - or an array of angles? Other than that, 👍 ",
    "created_at": "2019-03-05T19:31:24Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3590#issuecomment-469826027",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3590",
    "updated_at": "2019-03-05T19:31:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "What would it mean to sort a non-category (ie continuous) axis?",
    "created_at": "2019-03-05T19:16:29Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3606#issuecomment-469820814",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3606",
    "updated_at": "2019-03-05T19:16:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@arshbhatti8 yes, you can use react-plotly.js with different bundles - see this section of its readme:\r\nhttps://github.com/plotly/react-plotly.js#customizing-the-plotlyjs-bundle",
    "created_at": "2019-03-05T02:13:10Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3604#issuecomment-469506830",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3604",
    "updated_at": "2019-03-05T02:13:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "It's also not helpful that the axes and labels get sliced off along with the data in the existing implementation!",
    "created_at": "2019-03-01T03:27:29Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3588#issuecomment-468528988",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3588",
    "updated_at": "2019-03-01T03:27:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "As useful as slicing may be, I think I'm with @emimoun on this one - the zoom interaction should make the scene bigger or smaller, whether we're using perspective or orthographic projection. If we were to design a slicing feature, we would want it to work differently: somehow tied to visual indicators of where you're slicing - at an axis value, for example - and keeping that slice as you rotate. Using zoom to create a slice is unintuitive and limited to slicing orthogonal to the depth direction.",
    "created_at": "2019-03-01T03:23:47Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3588#issuecomment-468528396",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3588",
    "updated_at": "2019-03-01T03:23:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Sunburst is not yet available, but coming soon!",
    "created_at": "2019-03-01T00:03:56Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3590#issuecomment-468489347",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3590",
    "updated_at": "2019-03-01T00:03:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ha good timing, we were just talking about this today regarding the sunburst charts @etpinard is working on right now, but yes, would be great to implement for pie too. ",
    "created_at": "2019-02-28T23:43:33Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3590#issuecomment-468484678",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3590",
    "updated_at": "2019-02-28T23:43:33Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ah OK, I guess I hadn't seen the interaction modes that allow overlaps to persist. In that case those should still be allowed, and should play nice with explicit positioning. But seems to me the default mode should be to respect explicit positioning but then push apart overlaps.",
    "created_at": "2019-02-27T16:51:11Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3583#issuecomment-467940282",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3583",
    "updated_at": "2019-02-27T16:51:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "When you drag nodes around by GUI, the others slide around to avoid overlaps. What if we did the same here? You provide positions but then we slide them around, keeping the ordering fixed, to avoid overlaps. It would still have some weird aspects, like if you're on a column that doesn't span the whole height and you *want* the nodes clustered in certain places you'd have to artificially squish them and trust us to sort it out.\r\n\r\n`node.scale` could still be an interesting idea - though it's not just nodes, it applies to links too. But that seems like a separate feature, and in any case we don't want to allow overlapping nodes so we'll have to reserve the right to modify any positioning the user provides.",
    "created_at": "2019-02-27T14:16:28Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3583#issuecomment-467877572",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3583",
    "updated_at": "2019-02-27T14:16:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@harisbal Have you seen the `parcats` trace type? https://plot.ly/python/parallel-categories-diagram/ It's a fairly new one https://github.com/plotly/plotly.js/pull/2963 that's in some ways a combination of `parcoords` and `sankey`, and does preserve alignment all the way across.",
    "created_at": "2019-02-22T17:31:11Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3568#issuecomment-466478756",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3568",
    "updated_at": "2019-02-22T17:31:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yep, that fixes it for me! Can we 🔒 it with a test?",
    "created_at": "2019-02-21T17:40:26Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3564#issuecomment-466094195",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3564",
    "updated_at": "2019-02-21T17:40:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I first saw this in the codepen you posted this morning https://codepen.io/antoinerg/pen/MLxjmB and then pulled master and `npm i` on my mac to confirm it wasn't just whatever branch that is. I see it on all my browsers - Chrome, FF, Safari.",
    "created_at": "2019-02-21T17:24:17Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3563#issuecomment-466088325",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3563",
    "updated_at": "2019-02-21T17:24:17Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Actually, now that we have matching axes I guess you could overlay two or more axes with different tick & grid properties - no transparency needed, but you probably have to put *something* on the extra axes to get them to show up. An empty invisible trace should suffice. ",
    "created_at": "2019-02-17T02:30:01Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/903#issuecomment-464409453",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/903",
    "updated_at": "2019-02-17T02:30:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "That's a pretty simple diagram, but in more complicated ones like the energy flows example a highlight can really help to see clearly what nodes the link connects.\r\n\r\nI'd be OK with omitting highlighting for now when the link is opaque, but we should keep it in the default case and reserve the right to add something like outlining later on.",
    "created_at": "2019-02-15T20:50:56Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3501#issuecomment-464194538",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3501",
    "updated_at": "2019-02-15T20:50:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I'd vote to leave them as they are. `(min|max)zoom` is doing something very different from our other range-type attributes, and I imagine it's very common to only want to set one of them. `placement` is somewhat analogous to `textposition`, but seems to me it's unique enough that it will help people figure it out if its name matches where they should look in the mapbox docs.",
    "created_at": "2019-02-15T20:17:10Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3399#issuecomment-464185293",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3399",
    "updated_at": "2019-02-15T20:17:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Hovering on links will display the new computed statistics.\r\n\r\nNice - perhaps we can include the concentration in the label by default, for links that have a concentration colorscale?\r\n\r\n> By default in Sankey, when we hover on a link, its opacity is reduced. I think this looks odd in the Codepen above.\r\n\r\nThat's weird, normally opacity is *increased* on hover - is that because normally the opacity is low but here its high, and on hover it gets some set value that's more than the default but less than we have here?\r\n\r\nAnyway it seems like we probably don't want an opacity change at all when the color is displaying quantitative information via a colorscale - especially since scales like you've used, with white at one end, will probably be common, and these scales are equivalent to opacity. But nor do we want to *decrease* opacity on hover even for non-colorscaled links. Perhaps we just need to find a different way to highlight the hovered links if their opacity is above some threshold and/or they have a colorscale. Perhaps adding, thickening, or increasing the contrast of the link outline?\r\n\r\nBy the same token, we probably want the hover label to be fully opaque when it's describing a colorscaled link, so it will have the same color as the link.",
    "created_at": "2019-02-15T01:53:23Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3501#issuecomment-463876228",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3501",
    "updated_at": "2019-02-15T01:53:23Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Unless you want to do something hacky with `tickvals` and `ticktext`, I don't think there's a way to get rid of these labels. Would need to be a new feature to make this happen easily and dynamically.",
    "created_at": "2019-02-13T22:47:05Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2554#issuecomment-463407005",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2554",
    "updated_at": "2019-02-13T22:47:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "LGTM! 💃 ",
    "created_at": "2019-02-12T21:27:49Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3538#issuecomment-462942339",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3538",
    "updated_at": "2019-02-12T21:27:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> > I would prefer reaching parity with the attributes for `contour`, but I could be convinced otherwise.\r\n> \r\n> Would you like me to implement `ncontours`, `contour.start`, `contour.end` and `contour.size` as well?\r\n> That's relatively easy.\r\n\r\nDefinitely - the primary goal should be that you can take anything that works in a `type: 'contour'` trace, change just the `type` attribute to `'surface'`, and it still displays all the same contours.\r\n\r\nThen at some point we can extend BOTH of these to support an array of contour values - perhaps `contour.values` - for the nonuniform case.",
    "created_at": "2019-02-12T20:18:49Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3469#issuecomment-462918103",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3469",
    "updated_at": "2019-02-12T20:18:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Would be a cool effect on `scattergeo` wrapping around the earth too.",
    "created_at": "2019-02-12T01:01:45Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3073#issuecomment-462564429",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3073",
    "updated_at": "2019-02-12T01:01:45Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "In principle you can have both, if you have `constrain: 'domain'` too. Anyway, I'm fine with omitting it from v1 as long as it's clear we can add it later. Let's have `matches` win and drop `scaleanchor` when necessary until they're supported together.",
    "created_at": "2019-02-11T21:37:47Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3506#issuecomment-462504600",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3506",
    "updated_at": "2019-02-11T21:37:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This is something to do with `uirevision` - simply setting all traces `visible: 'legendonly'` in the initial figure does not trigger this bug.",
    "created_at": "2019-02-07T22:36:36Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3525#issuecomment-461621748",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3525",
    "updated_at": "2019-02-07T22:36:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Curiouser and curiouser... I cannot reproduce with the new codepen either. That said on my iPhone no traces are rendered at all in either codepen (iPhone 8, iOS 12.1). That seems like an even bigger problem...",
    "created_at": "2019-02-07T19:32:48Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3522#issuecomment-461565265",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3522",
    "updated_at": "2019-02-07T19:32:48Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I cannot reproduce - Mac OS 10.14.2, latest Chrome or FF, retina or non-retina screen, Intel Iris Graphics 6100, run a few dozen times. Only environment difference I see is Nvidia vs Intel graphics...",
    "created_at": "2019-02-07T17:49:07Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3522#issuecomment-461528965",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3522",
    "updated_at": "2019-02-07T17:49:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "In a codepen: https://codepen.io/alexcjohnson/pen/aXEbOa?editors=1011\r\n\r\nThat particular error is with d3v3 - seems like v4 fixes it so we should get it when we leapfrog to v5. Will be interesting to see if there's anything else in our code that uses `this` to mean the window (or anything else that's incompatible with ES6 modules... I'm not very familiar) but it doesn't seem like there's much point trying before the d3 upgrade.",
    "created_at": "2019-02-07T14:45:01Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3518#issuecomment-461448892",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3518",
    "updated_at": "2019-02-07T14:45:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "FWIW what's happening is we don't know what width to give the boxes, because there are no other boxes on the same subplot to to give a distance to the next box, so they get a width of 1 - which for dates means 1 millisecond, hence on a scale of days it looks like zero width. You can fix this with an explicit width attribute (added recently in #3234, as @etpinard mentioned in #3508)\r\n\r\n@etpinard are you thinking we can have boxes on overlaying subplots consider each other in width calculations? That seems like it would work for the first example, with boxes on each axis, and offhand I don't see any cases you'd *want* the existing behavior. Would you want to do this for stacked subplots as well? ie consider all boxes on the same position axis? That would be useful if @lemurey's \r\nfirst example were converted to stacked subplots, though I can also imagine cases it might constitute a breaking change...\r\n\r\nThe second example (box + scatter) I don't really see any solution for except explicit width; there's really nothing to guide us in scaling the box.",
    "created_at": "2019-02-06T16:51:34Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3516#issuecomment-461097547",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3516",
    "updated_at": "2019-02-06T16:51:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Overlapping would be plausible, but more common I'd think is tiling side-by-side, which is why I want to ensure we support compatible but not identical binning.\r\n\r\nCertainly more marginal than different subplots, but we still don't want to break it!",
    "created_at": "2019-02-05T18:32:21Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3515#issuecomment-460750916",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3515",
    "updated_at": "2019-02-05T18:32:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "a shared object would probably work for `histogram2d` traces on separate subplots, but on the *same* subplot we would want them to be *compatible* (same dx/dy, and x/y start different by an integer number of dx/dy) rather than actually identical, to accommodate tiling.\r\n\r\nSo a grouping attribute seems more appropriate to me.\r\n\r\nThat argument doesn't apply to colorscales/colorbars - there I think \"shared\" is either all or nothing.",
    "created_at": "2019-02-05T16:32:25Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3515#issuecomment-460706202",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3515",
    "updated_at": "2019-02-05T16:32:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@rogerlew you're using categorical data - if you provide the categories as `xaxis.categoryarray` instead of having it inferred from the data, you can control the ordering as you choose.",
    "created_at": "2019-02-05T00:35:52Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3514#issuecomment-460469374",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3514",
    "updated_at": "2019-02-05T00:35:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ha right, all our other examples have each carpet on its own subplot...\r\n💃 ",
    "created_at": "2019-02-04T23:57:47Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3512#issuecomment-460461399",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3512",
    "updated_at": "2019-02-04T23:57:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Definitely one funnel = one trace. I'm not sure it has any practical implications but to my mind it's much more like horizontal bars than pie. Perhaps we don't draw them by default, but I certainly think we want it drawn on cartesian axes, so that you can overlay it with other traces matching at least the category axis, and probably so you can stack funnels like https://stackoverflow.com/questions/45421748/making-a-stacked-funnel-chart-in-excel\r\n![screen shot 2019-02-04 at 10 37 50 am](https://user-images.githubusercontent.com/2678795/52219477-b59b2980-286a-11e9-823d-e3ccffd82858.png)\r\n",
    "created_at": "2019-02-04T15:52:49Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3504#issuecomment-460300028",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3504",
    "updated_at": "2019-02-04T15:52:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for kicking this discussion off @jonmmease! Definitely a great set of features to have, and I think you've covered all the important functionality.\r\n\r\n### Spans\r\n\r\nYour proposal works slightly differently from html tables, which seem to me the closest common analog. The difference is tables don't include entries (`<td>` elements) for the already-occupied cells at all, whereas you show them with `null` or `0`. I think I prefer your version despite the divergence, but I think it's worth mentioning and exploring the implications. Let's take a somewhat more complex case:\r\n```\r\n+---+-+\r\n|   | |\r\n|   +-+\r\n|   | |\r\n+-+-+-+\r\n| |   |\r\n+-+---+\r\n```\r\nIn your version this would look like:\r\n```js\r\ncolspan: [[2, 0, 1],\r\n          [0, 0, 1], // <- last one: row 1, col 2\r\n          [1, 2, 0]]\r\nrowspan: [[2, 0, 1],\r\n          [0, 0, 1],\r\n          [1, 1, 0]]\r\nsubplots: [['xy'  , null  , 'x2y2'],\r\n           [null  , null  , 'x3y3'],\r\n           ['x4y4', 'x5y5', null  ]]\r\n```\r\nwhereas using the table analogy it would be:\r\n```js\r\ncolspan: [[2,    1],\r\n          [      1], // <- last (only) one: row 1, col 0\r\n          [1, 2   ]]\r\nrowspan: [[2,    1],\r\n          [      1],\r\n          [1, 1   ]]\r\nsubplots: [['xy'  ,        'x2y2'],\r\n           [                'x3y3'],\r\n           ['x4y4', 'x5y5'        ]]\r\n```\r\n\r\nIf we're only talking about cartesian subplots, this difference doesn't matter much; these three arrays are all self-consistent either way. The table version is nice because we're not forced to add placeholder entries, we're just enumerating cells in the order we encounter them. On the other hand your version keeps the arrays rectangular, which seems easier to construct - you can make an empty array of the right dimensions, then place cells into it by putting the cell spec in the upper left corner and fill the rest of the cell with `0`/`null`.\r\n\r\nBut seems to me yours has a clear advantage in referencing spanned grid cells in `subplot.domain`, to insert non-cartesian subplots in the grid. With the table version there's ambiguity: do you refer to the column and row number before the cells were merged, or to the indices in the grid spec arrays? With your version the two are identical, and moreover we can give `subplot.domain` its own `colspan` and `rowspan`, which by default inherits from the specified cell in `grid`, but if you prefer you can omit `grid.colspan` etc and just specify `(col|row)span` in `subplot.domain`.\r\n\r\n### Titles\r\n\r\nIf `grid.titles` is a 2D array as you describe, it should at least be an array of objects like `layout.title`. But it could also be a 1D array, of objects like `layout.title` plus attributes `(col|row)[span]` to target a subplot, and `side: ('left'|'right'|'bottom'|'top')` that sets the default position and rotation of the text. This would naturally allow multiple titles on one subplot, and avoid a sparse array in cases like just labeling the edges of a large grid.\r\n\r\nThere may still be edge cases this doesn't cover. The most flexible solution of all would be annotations with `(x|y)ref: 'grid'` and `(col|row)[span]` attrs. Shapes and images could also easily support such positioning.\r\n\r\n### Column/row widths\r\n\r\n`grid.widths` and `grid.heights` sound great, normalization included! `(x|y)gap` becomes a little bit confusing, but we should be able to sort that out.\r\n\r\n### Insets\r\n\r\nI agree, no need to build this into the grid, just make another pair of axes (or non-cartesian subplot) and specify `domain` manually. That covers more edge cases, like partial overlap, the only downside being the need to calculate the edges of the cell you want to reference - but it's pretty unusual to use an inset AND a grid anyway, and by the time you get to that level of refinement (which is likely about the last step before publication) you're probably not going to mind having to tweak this.",
    "created_at": "2019-02-03T02:27:28Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3507#issuecomment-460017205",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3507",
    "updated_at": "2019-02-03T02:27:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This is awesome @etpinard, so much fun to play with!\r\n\r\n> I'll not 100% convinced the `scaleanchor` + `matches` mock (added in [8c09944](https://github.com/plotly/plotly.js/commit/8c09944acfe016dfd3ea0880e734f37e8dc18650)) does the right thing.\r\n\r\nyeah, that one has some problems... looks like after a zoom/pan it manages to satisfy all the constraints (the very shrunken subplots I think are correct), but initially or after an autorange it does not.\r\n![axes_scaleanchor-with-matches](https://user-images.githubusercontent.com/2678795/52164649-ab3e2b80-26c2-11e9-96af-8f4c44c75063.gif)\r\n\r\nHere's a more extreme example. Kind of a pathological case, where each subplot has x&y matching, and the x of each subplot is supposed to scale with the y of the previous... this is the case I think compounds height/width differences, so it should be expected that either the first or last subplot gets its data very compressed if you stretch it to a very non-square size. Right now it appears to apply all the `scaleanchor` constraints, but all the `matches` constraints except the last are lost.\r\n<img width=\"462\" alt=\"screen shot 2019-02-02 at 8 22 00 am\" src=\"https://user-images.githubusercontent.com/2678795/52164706-a332bb80-26c3-11e9-8171-58872d2154e1.png\">\r\n```js\r\nPlotly.newPlot(gd,[\r\n  {y:[1,2]},\r\n  {y:[1,2],xaxis:'x2',yaxis:'y2'},\r\n  {y:[1,2],xaxis:'x3',yaxis:'y3'},\r\n  {y:[1,2],xaxis:'x4',yaxis:'y4'}\r\n], {\r\n  yaxis: {matches: 'x'},\r\n  xaxis2: {scaleanchor: 'y'},\r\n  yaxis2: {matches: 'x2'},\r\n  xaxis3: {scaleanchor: 'y2'},\r\n  yaxis3: {matches: 'x3'},\r\n  xaxis4: {scaleanchor: 'y3'},\r\n  yaxis4: {matches: 'x4'},\r\n  grid: {rows: 2, columns: 2, pattern: 'independent'},\r\n  width: 500,\r\n  height: 400\r\n})\r\n```\r\n\r\nI haven't looked at your code in detail yet, but in order to satisfy this kind of chained constraints seems to me it may be necessary to generate `scaleanchor` constraints based on each `matches` constraint (using `gs._w` and `gs._h`) and use that to run through the `scaleanchor` algorithm, and only after that apply the `matches` constraints explicitly.",
    "created_at": "2019-02-02T13:52:49Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3506#issuecomment-459966778",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3506",
    "updated_at": "2019-02-02T13:52:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Related potential use for a bar trace positioned symmetrically about the origin of the size axis: check out the \"neutral\" trace here https://peltiertech.com/charting-survey-results/:\r\n\r\n![screen shot 2019-02-01 at 2 27 12 pm](https://user-images.githubusercontent.com/2678795/52145204-5cdf4d00-262e-11e9-9ad3-8c33b239cbf0.png)\r\n\r\nThe final piece we'd need to make this plot I guess is an attr to say \"stack this trace on the negative side\" for the \"hate\" and \"dislike\" traces. Or perhaps that would happen automatically if \"neutral\" is the third trace in the stack but it has an attribute saying \"position this trace symmetrically\"?",
    "created_at": "2019-02-01T19:37:45Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3504#issuecomment-459842406",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3504",
    "updated_at": "2019-02-01T19:37:45Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Oh I was thinking of this not as stacked at all, but a single trace of horizontal bars of equal height. That's how the amcharts example does it, and it shows you all the relevant information clearly: the total starting size, the size and amount lost at each stage, and it's intuitive that each stage is a subset of the previous stage.\r\n\r\nThe way that highcharts example shows it, where the vertical size of each segment is different, strikes me as totally inappropriate. Yes, it shows you the size at each stage (at least if you can figure out how to interpret the sloping sides), but the total stack size is completely meaningless and there's no way to visually see what's lost at each stage.",
    "created_at": "2019-02-01T19:20:52Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3504#issuecomment-459837340",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3504",
    "updated_at": "2019-02-01T19:20:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I really dislike the version where the whole side is sloped - I get that this makes the analogy to an actual funnel clearer, but it makes the data value highly ambiguous. But connecting bars with a sloping region in the gap, like the amcharts example does, strikes me as really cool, and would be a nice addition to regular bar charts too. This came up recently, I can't seem to find it now, but it's a great effect for stacked bars with some sort of stack sorting, because it shows you when two series change order in the stack.\r\n\r\nAt that point it would be fairly easy to imagine this just as another attribute to a bar chart to shift it to symmetric about the size-axis origin, but perhaps enough of the default attributes should change that it's worth making a trace type for it (and just use the bar code to render it)",
    "created_at": "2019-02-01T18:59:20Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3504#issuecomment-459830583",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3504",
    "updated_at": "2019-02-01T18:59:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "First we need triplet (Delaunay triangulated) contours (mentioned in #3166), then this would be easy to add.",
    "created_at": "2019-02-01T18:41:11Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3503#issuecomment-459824852",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3503",
    "updated_at": "2019-02-01T18:41:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> How would this proposal be different than having ax.matches and ax.scaleanchor (under constrain: 'domain') set.\r\n\r\nOnly that I didn’t want to allow `scaleanchor` at all when you already have `matches`. I guess it may be clearer that way, as it means “range matches AND scale matches”... just seems weird as the only allowed values of `scaleanchor` would be `’x’` or nothing. \r\n\r\n> I’m not sure who should “win out”\r\n\r\nAgreed, that would be meaningless. ",
    "created_at": "2019-01-28T22:14:22Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1549#issuecomment-458323206",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1549",
    "updated_at": "2019-01-28T22:14:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@drduker apologies for the slow reply. Questions like \"can plotly do this\" are a better fit for community.plot.ly, we like to reserve github for bug reports and feature requests, once it's known that the desired functionality is indeed not supported.\r\n\r\nThere are a number of issues where we're discussing extensions to bar stacking/grouping: #78, #1835, #3402... but it's better to use community.plot.ly to help figure out what's already possible, either directly or via workarounds.",
    "created_at": "2019-01-25T19:08:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3457#issuecomment-457687769",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3457",
    "updated_at": "2019-01-25T19:08:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj this is really interesting, not that I've played with volumetric data very much but I don't think I've ever seen it presented quite like this. It seems like a very smooth and rich display. I'd be curious to get it in the hands of people who DO have real uses for it (@jackparmer is there anyone specific who's been asking for this?) to get some feedback.\r\n\r\nI guess looking at how it's constructed - seems like there is a series of isosurfaces, as well as some sort of surfaces throughout the rest of the volume though I can't quite tell what shapes they're making - I can see why you built this into `isosurface` rather than making a new trace. Kind of like how our `scatter` encompasses line and area charts... a bit unfortunate, might have been better in retrospect to call it `volume` or something, but that's moot at this point.\r\n\r\nI see you can still use `isomin` and `isomax`, which is very cool - but one feature of #2753 that I thought was going to be quite useful is `opacityscale` - so you could choose to give more opacity to high data, or low data, or both extremes... different data sets could be better served by different scales.\r\n\r\nIt doesn't seem like there's any sense of depth order in this rendering, am I understanding that correctly? I can get a sense of where a feature is while rotating it, but if for example I set an orientation with one of the red blobs near the front and the other near the back, they look about the same. I know that's a long-standing issue with our 3D surfaces, but it really becomes prominent here. For all its problems, displaying a set of stacked planes seemed to do that reasonably well. Here's what I see if I set `isomin: 1000` in your demo:\r\n\r\n<img width=\"426\" alt=\"screen shot 2019-01-24 at 10 44 04 pm\" src=\"https://user-images.githubusercontent.com/2678795/51724147-fe144500-2029-11e9-8dd2-44ea8598b2f2.png\">\r\n\r\nIt seems like to first order what you see at any given pixel is the highest value along that ray, despite the fact that there is quite a lot of volume at lower values in the near-horizontal blob that's entirely in front of the more vertical blob. And it's not just because the near-horizontal one is a smaller volume, the same thing happens if I reverse their order. But that brings up another point, that I'm not sure this is accurately depicting how much volume is occupied by a given value; shouldn't the smaller-volume feature appear less opaque? That's true even if I reduce the `opacity` so I can clearly see through each volume. I guess what's going on is each isosurface contributes the same opacity, even if they're layered very closely together and so represent very different volumes?",
    "created_at": "2019-01-25T04:06:36Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3479#issuecomment-457448706",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3479",
    "updated_at": "2019-01-25T04:06:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "If anything that block is what ensures we pass the event on to the subplot rather than the hover label keeping it. But yeah, in principle if the hover labels are created correctly this shouldn't be necessary.",
    "created_at": "2019-01-24T15:32:56Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3471#issuecomment-457239786",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3471",
    "updated_at": "2019-01-24T15:32:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Pretty sure hover labels themselves don't interact with the mouse at all... hovering over the label, whether it's on or off the subplot, does nothing to keep it from disappearing if the mouse isn't in range of the associated data point/object.",
    "created_at": "2019-01-24T14:49:22Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3471#issuecomment-457223385",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3471",
    "updated_at": "2019-01-24T14:49:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> (but then the modebar wouldn't be accessible)\r\n\r\nBut that's only when the mouse is over the data anyway, right? Hover labels will disappear when you mouse off the plot and onto the modebar, won't they?\r\n\r\nSeems like this may require a third top-level `<svg>` element just for hover labels... but I agree that putting them in front of everything else is the ideal behavior.",
    "created_at": "2019-01-24T14:38:44Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3471#issuecomment-457219478",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3471",
    "updated_at": "2019-01-24T14:38:44Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Let's make this a keyed array:\r\n```js\r\nlink.colorscales = [{\r\n  label: 'elementA',\r\n  colorscale: 'Greens',\r\n  cmin: 0.01, cmax: 0.1 // concentration range (default is full range, 0..1)\r\n}, {\r\n  label: 'elementB',\r\n  colorscale: [['0', 'rgb(0, 0, 200)'], [1, 'rgb(200, 0, 0)']]\r\n}]\r\n```\r\nThese names seem a little redundant, also it would be nice if somehow the attributes indicated that this references concentration... perhaps call the container `link.concentrationscales`?",
    "created_at": "2019-01-24T01:40:43Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3318#issuecomment-457033968",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3318",
    "updated_at": "2019-01-24T01:40:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "+1 for immutable mode #2389",
    "created_at": "2019-01-24T01:29:43Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3466#issuecomment-457031755",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3466",
    "updated_at": "2019-01-24T01:29:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "It looks like in your example @OliBravo the gradient specifically fades between the two node colors (plus some opacity). That's a nice effect - not as the default, but perhaps we can have that as an explicit option somewhere, rather than forcing you to explicitly specify both end colors for each link - although explicit colors everywhere should also be supported.",
    "created_at": "2019-01-23T19:48:58Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3261#issuecomment-456941360",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3261",
    "updated_at": "2019-01-23T19:48:58Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Oh I was thinking of concentration not as a fraction of the total of flows into or out of a node, but as a fraction of total parallel flows - ie all links with the same source AND target nodes, or from a physical standpoint the concentration within a specific pipe. In that case it's constant along the link.\r\n\r\nAlso note that the value of a single link as a fraction of total inflow/outflow is not necessarily the concentration of that component coming in or out, as there may be multiple paths containing that component.",
    "created_at": "2019-01-23T17:56:00Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3318#issuecomment-456902431",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3318",
    "updated_at": "2019-01-23T17:56:00Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> matching axes of the same letter (i.e. 'x' or 'y') would suffice for the first iteration\r\n\r\nif that's a lot easier, OK, it won't cause any API problems to enable it later. But I kind of don't think it'll be that much harder to do x/y matching since we already have that for scale constraints. And it would be really nice to use with `splom` - it would mean that if you zoom on one off-diagonal subplot, not only would the whole row & column through that subplot zoom but the symmetric row & column would also zoom to match.",
    "created_at": "2019-01-23T16:00:47Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1549#issuecomment-456858214",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1549",
    "updated_at": "2019-01-23T16:00:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Absolutely, autorange should take into account all data on any of the matched axes. This is going to be a bit more complicated than just throwing all of that data into the autorange calculation though, because two axes should be able to match `range` *without* matching `_length` - particularly useful for x matching y without forcing the plot to be square.\r\n\r\nThat begs the question though, how do you specify that you want `_length` to match too (which seems like it should be the default behavior)? Perhaps you use `yaxis: {matches: 'x', scaleratio: 1}`, and then whichever would be larger gets its domain reduced in order to match `_length`? And then by extension, if `scaleratio` is some other number, that number becomes the ratio of `_length` values... And if you don't want to match `_length` at all, you set `scaleratio: 0`?\r\n\r\nOne more question: What if you want two axes to match but inverted? I'm thinking of things like x/y match but you want the diagonal to go NW-to-SE... or the population pyramid, with male on one side and female on the other, which you *can* do with a single axis and positive/negative data, but that requires fudging the data (negating one set) and with two axes you could put the labels in the middle without overlapping the data... Perhaps we could support this with `scaleratio: -1`?\r\n\r\nAnyway we can start with square non-inverted for the first release, but we should plan it so the API will extend to support non-square and inverted at some point.",
    "created_at": "2019-01-23T15:11:59Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1549#issuecomment-456838212",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1549",
    "updated_at": "2019-01-23T15:11:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The prohibition on `fixedrange` wasn't due to infinite loops, it was just that if you've fixed a range and constrained another range based on that, the second range would be fixed too, at least in span.\r\n\r\nI suppose if *both* axes are `fixedrange` *and* `constrain: 'domain'` (as in your mock) there are no concerns: one of them will get a reduced domain but both will keep the specified ranges. If *one* is `fixedrange` (and `constrain: 'domain'`), the other one could in principle be either `constrain`, and it would need to be restricted to allow pan but not zoom.",
    "created_at": "2019-01-22T20:58:03Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3460#issuecomment-456560646",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3460",
    "updated_at": "2019-01-22T20:58:03Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Probably not very hard, want to give it a try? Plotly folks are a bit busy for the foreseeable future...",
    "created_at": "2019-01-22T14:46:01Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1962#issuecomment-456425083",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1962",
    "updated_at": "2019-01-22T14:46:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Just a quick idea: Isn't all that it takes to have the same amount of ticks and interdistance on both axes?\r\n\r\nThat's enough for `dtick` but `tick0` also needs to be set appropriately. But it occurs to me in the most general case even that wouldn't do it, because the ticks you're matching needn't be linearly spaced - could be log, or array `tickvals`, or nonuniform date ticks (months/years). Anyway it seems like a setting like `tickmode = 'match overlay'` could cover all of these cases: just look at where all the ticks of the main axis got drawn and put ticks in those same places on the matching axis. No need to ever calculate `dtick` or `tick0`.",
    "created_at": "2019-01-22T14:38:14Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1962#issuecomment-456422190",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1962",
    "updated_at": "2019-01-22T14:38:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> @alexcjohnson Is the following what you had in mind? I am not sure what part is the \"back stretch\".\r\n\r\nYep, you got it exactly as I had in mind! https://en.wikipedia.org/wiki/Backstretch",
    "created_at": "2019-01-18T23:05:30Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3406#issuecomment-455716275",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3406",
    "updated_at": "2019-01-18T23:05:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Agreed that the end state should be no `text` attributes that only ever appear on hover. But we should look at the traces that currently have no on-graph text and figure out which ones we can imagine adding it to in the future, before actually removing the `text` attribute (in a major bump).\r\n\r\nBut yes, step 1 can be adding `hovertext` everywhere it's relevant.",
    "created_at": "2019-01-18T21:29:48Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3450#issuecomment-455693468",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3450",
    "updated_at": "2019-01-18T21:29:48Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Currently multiline primary text with a single-line name leaves the name top-aligned with the text box, which makes me think the default with more lines in the name than in the primary text should be the same, top-aligned. But an attribute to switch that to middle-aligned or bottom-aligned would be great to add at some point.",
    "created_at": "2019-01-18T16:21:31Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3442#issuecomment-455603144",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3442",
    "updated_at": "2019-01-18T16:21:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> just to clarify my comment on `alignmentsupergroup`:  I'm trying to say I don't think we need to implement it in the short run, as the current behaviour could be grandfathered in\r\n\r\nI feel like it would be just as easy - possibly even easier - to add the full functionality in one go, with the default values set to match current behavior. Then we don't need to carry around a special algorithm for the grandfathered case, and as a bonus we're done with this feature. Implementation can proceed by first adding a bunch of test cases of the edge cases we've identified in the current behavior (ensuring of course that we don't consider them bugs!) then adding the new behavior and ensuring the new (and existing) test cases all still pass.\r\n\r\n> Secondly, I wonder if the \"one trace above, two below\" case isn't modelable by having them all have the same `alignmentgroup`? Otherwise what does it mean for two traces on the _same_ subplot to have the same `alignmentgroup` ?\r\n\r\nIf two traces (on the same position axis) have the same `alignmentgroup` then their positions are offset identically wrt the data values. I think it's that simple. So if those two traces are on the same subplot, they either stack or overlay depending on `barmode` or its per-trace successor, and if they're on different subplots then they're aligned.\r\n\r\nStill not so happy about the names... what about `alignmentsupergroup` -> `alignmentgroup` and `alignmentgroup` -> `alignmentkey`?",
    "created_at": "2019-01-18T14:36:09Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3402#issuecomment-455566571",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3402",
    "updated_at": "2019-01-18T14:36:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> hovers appear in the center of circular loops.\r\n\r\nGood 👁! For forward links the bounding box center is always on the link, but for circular links it would be great to move the hover box anchor to the center of the back stretch.",
    "created_at": "2019-01-18T01:50:40Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3406#issuecomment-455398402",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3406",
    "updated_at": "2019-01-18T01:50:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "`stackgroup` doesn't make sense for `box` and `violin`, and `alignmentgroup` doesn't make sense for `scatter` - we could probably get `stackgroup` to work for `bar` but it seems to me `alignmentgroup` is the more precise meaning there anyway, so I think we should use that for `bar`, `box`, and `violin` and not try to shoehorn `scatter` into the same attribute, and as I'll describe below I think `bar` can make use of BOTH `alignmentgroup` and `stackgroup`.\r\n\r\n### `alignmentgroup`\r\n\r\nSo how exactly would that work? I'm going to use our internal nomenclature of position axis = `x` for vertical orientation, `y` for horizontal. If I'm understanding your proposal right @nicolaskruchten, any traces with the same `alignmentgroup`, regardless of trace type or what subplot they're on, get the same position shift, and that position shift should be DIFFERENT from any traces with a different `alignmentgroup`.\r\n\r\nOne place I'm not totally clear on the correct behavior is when we're talking about not just a different subplot, but a different position axis. Certainly if the two axes have different types it wouldn't make sense to match alignments between them, but even for the same type I don't think it makes sense, at least not always - let's say you have two date axes, one aggregating data monthly and another daily. Or two numeric axes with grouped histograms on totally different variables, with different bin sizes. I suppose we *could* try to translate alignment between the two as consistent fractions of the position difference between successive items but that feels a bit magical, I think I'd prefer distinct position axes to handle alignment independently of each other. That said, when we add matching axes #1549 I think there's a strong case that these should count as the same axis for alignment purposes.\r\n\r\n### `alignmentsupergroup` or something\r\n\r\nOne other case to consider: what if you *want* independent alignment in different subplots with the same position axis? Say you have two stacked subplots sharing an x axis, with one bar trace on the top, that you want to have fill the entire space, and several traces on the bottom that you want grouped. That particular chart I can see being both realistic and intuitive. If we extend this idea a little, say you have 2 traces on top and 5 on the bottom, again you want to fill the whole space on each subplot rather than making space for all 7 on each subplot. Now it doesn't seem particularly easy to read a chart like that, but it's going to come up and it's what we do today with data like that. The only way I see to support something like that is a second attribute, something like `alignment(batch|collection|supergroup)` that you'd set to the same value within a subplot and a different value for other subplots. That would also be needed if we make `alignmentgroup` apply across trace types (which I think we should do) but you put say one set of boxes on the same subplot as two sets of bars and again you want each trace type to fill the space.\r\n\r\nYou could also use this attribute to make consistent alignment across subplots that we would otherwise treat independently - as long as the position axis has the same type.\r\n\r\n### Stacking\r\n\r\nThen for bars only, how does this relate to stacking? With no more attributes it seems like with `barmode: 'stack|group|relative'` we would stack any traces on the same subplot in the same `alignmentgroup`, but with `barmode: 'overlay'` we stack nothing. Then later we could add a `stackgroup` attribute to bar traces, so that any traces on the same subplot with the same `stackgroup` - REGARDLESS of their `alignmentgroup` - would be stacked. That would let you do per-trace overlay (different `stackgroup` and same `alignmentgroup`) or offset stacking (waterfall-ish - same `stackgroup` and different `alignmentgroup` - then `barmode: 'stack'` with negative bars would actually be useful and mostly not confusing!)\r\n\r\n### Implementation\r\n\r\nI believe the current default behavior can be preserved as we add these options just by appropriately choosing default values for the new attributes as we add them, then ONLY using those attributes during rendering, and ignoring the layout-wide `(bar|box|violin)mode`. We'll still need additional per-trace gap attributes, to be applied across the appropriate group based on the first value we find... but we can leave that for later.",
    "created_at": "2019-01-17T17:56:32Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3402#issuecomment-455267505",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3402",
    "updated_at": "2019-01-17T17:56:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @aaronpries, that’s most definitely not correct, it should show the data value as you say. ",
    "created_at": "2019-01-17T12:47:14Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3440#issuecomment-455160133",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3440",
    "updated_at": "2019-01-17T12:47:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Does it need to be text? Should we just call it `layout.meta`? I'm imagining in the short term templating numbers (potentially with a format spec), and longer term possibly using this as a way to share other settings across multiple traces, axes, etc.",
    "created_at": "2019-01-15T20:30:19Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3439#issuecomment-454539809",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3439",
    "updated_at": "2019-01-15T20:30:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj this is beautiful! Looks absolutely amazing, and AFAICT is putting all the isosurfaces and caps exactly where they should be.\r\n\r\nOne issue I notice though is if I take your demo and decrease the number of points (here I set `dims: [8, 8, 8]`), sometimes some of the cap facets drop out:\r\n<img width=\"549\" alt=\"screen shot 2019-01-15 at 1 02 43 pm\" src=\"https://user-images.githubusercontent.com/2678795/51199924-18ca1980-18c6-11e9-8e89-9c47bac4af00.png\">\r\n",
    "created_at": "2019-01-15T18:07:12Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3438#issuecomment-454492084",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3438",
    "updated_at": "2019-01-15T18:07:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "related: https://github.com/plotly/plotly.js/issues/78",
    "created_at": "2019-01-15T17:13:37Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3402#issuecomment-454473176",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3402",
    "updated_at": "2019-01-15T17:13:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Of course - we can avoid pushing `center` and `zoom` back into the figure, at least with an appropriate stash of the auto results. But the `impliedEdits` complications will still be there... say the user zooms (either via GUI or some other interface like RCE): we'll need to explicitly clear `fitbounds`, then `center` is no longer set automatically so we'll need to explicitly pull into the figure whatever the auto `center` value was. All of this is much simpler if auto, rather than being an attribute in its own right, is just the absence of an explicit value, like in the histogram autobin revamp #3044.",
    "created_at": "2019-01-14T19:27:42Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3434#issuecomment-454130478",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3434",
    "updated_at": "2019-01-14T19:27:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I suspect we hadn't bothered figuring out vertical sizing of the name field, also we're often truncating the name and it could be weird to truncate in the middle of some pseudo-html. Probably wouldn't be too hard to resolve these issues and allow pseudo-html there though. I'm a bit concerned about color there though: it would be pretty easy to have colored text in the legend - either part or all of `name` - that would be ugly or even invisible in the hover label.",
    "created_at": "2019-01-14T17:03:26Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3357#issuecomment-454081020",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3357",
    "updated_at": "2019-01-14T17:03:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This is equivalent to `autorange` for cartesian axes, so has all the same issues with figure mutation and `impliedEdits`. Seems to me the ideal - though this may need to happen in a major bump - would be no new attribute at all, just better defaults. So if you omit both `center` and `zoom` we automatically invoke `fitbounds`. Likewise if you only provide `center` we tell mapbox to pick a `zoom` that still shows all the data (but if you just changed `center` by panning in the GUI, `zoom` should not change!), and if you only provide `zoom` we use the same `center` as `fitbounds` would use.",
    "created_at": "2019-01-14T16:32:51Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3434#issuecomment-454069489",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3434",
    "updated_at": "2019-01-14T16:32:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Agreed. Explicit is better than implicit.",
    "created_at": "2019-01-14T16:11:49Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3424#issuecomment-454061361",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3424",
    "updated_at": "2019-01-14T16:11:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice solution, I like it!",
    "created_at": "2019-01-08T23:32:49Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3422#issuecomment-452490426",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3422",
    "updated_at": "2019-01-08T23:32:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "True, it contains a bit of a change, but mostly I’d call this fixing a bug. To me it’s not such a change that it should be considered breaking but I can understand not calling it just a patch. ",
    "created_at": "2019-01-07T16:40:38Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3408#issuecomment-451997371",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3408",
    "updated_at": "2019-01-07T16:40:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I’ll leave the issue open, as it probably would be good to tighten up this limit. ",
    "created_at": "2019-01-06T00:10:52Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3403#issuecomment-451703514",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3403",
    "updated_at": "2019-01-06T00:10:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Why do you want to avoid \"almost zero\" values?\r\n\r\nI think we wanted to avoid errors if we round some size to zero and end up making invalid svg elements. Perhaps we should take the height or width into account, and refuse any domain smaller than 1px.\r\n\r\n> And I cannot find the 0.01 buffer in the CDN?\r\n\r\nIt's going to be hard to find something like that in minified code, but since you're seeing this effect I'm quite sure it's there somewhere!",
    "created_at": "2019-01-05T23:09:37Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3403#issuecomment-451700061",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3403",
    "updated_at": "2019-01-05T23:09:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "That's because of the `0.01` on this line:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/364cdec83e862e076ab02400b814ed9566777351/src/plots/cartesian/position_defaults.js#L75\r\n\r\nwhich is mainly there to prevent zero- or negative-size domains, but we gave it a small buffer to cover \"almost zero\" or rounding errors. We can certainly decrease that buffer to `0.0001` or something, but I'm curious what use you have for such a small axis?",
    "created_at": "2019-01-05T21:57:40Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3403#issuecomment-451694221",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3403",
    "updated_at": "2019-01-05T21:57:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Sounds UNreasonable to me. Unless error bar color is going to be some other color, like black error bars on bar charts, it should be inherited from an explicit color in the trace. Might be some annoying logic considering all the different possible attributes to inherit from - marker color, line color (especially if there IS no marker), marker line color - but I believe it should be clear what the desired outcome is in any given case. Surprised we didn’t already do it this way, but better late than never!",
    "created_at": "2019-01-04T18:32:50Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3392#issuecomment-451528607",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3392",
    "updated_at": "2019-01-04T18:32:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Beautiful, thanks for cleaning all this up! 💃 ",
    "created_at": "2019-01-04T15:01:04Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3394#issuecomment-451467500",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3394",
    "updated_at": "2019-01-04T15:01:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "no console messages.",
    "created_at": "2019-01-02T21:03:11Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3385#issuecomment-450984123",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3385",
    "updated_at": "2019-01-02T21:03:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Worked for me with FF 63 on mac, but then FF updated to 64 and the colors disappeared",
    "created_at": "2019-01-02T20:52:54Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3385#issuecomment-450981625",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3385",
    "updated_at": "2019-01-02T20:52:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "There seem to be problems with `geo` and `mapbox` as well... with different details but the same result: GUI viewport changes are not persisted by `uirevision`.",
    "created_at": "2018-12-28T23:30:51Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3378#issuecomment-450443044",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3378",
    "updated_at": "2018-12-28T23:30:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Taking advantage of the holiday lull, very nice 👍 ",
    "created_at": "2018-12-27T00:43:06Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3374#issuecomment-450047172",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3374",
    "updated_at": "2018-12-27T00:43:06Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> they both show that they support the showlegend property\r\n\r\nOof, sorry for the confusion! related: https://github.com/plotly/plotly.js/issues/3058",
    "created_at": "2018-12-18T22:07:41Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2642#issuecomment-448388955",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2642",
    "updated_at": "2018-12-18T22:07:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Tick labels also sometimes flicker above/below the data",
    "created_at": "2018-12-18T01:35:11Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3346#issuecomment-448063616",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3346",
    "updated_at": "2018-12-18T01:35:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks good to me! 💃 after merging `gl-surface3d` and updating its ref, and making an issue for https://github.com/plotly/plotly.js/pull/3281#discussion_r242356771",
    "created_at": "2018-12-17T23:39:22Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3281#issuecomment-448040696",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3281",
    "updated_at": "2018-12-17T23:39:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks! 💃 ",
    "created_at": "2018-12-12T22:31:17Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3329#issuecomment-446769103",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3329",
    "updated_at": "2018-12-12T22:31:17Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 ",
    "created_at": "2018-12-12T22:24:53Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3304#issuecomment-446767332",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3304",
    "updated_at": "2018-12-12T22:24:53Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 ",
    "created_at": "2018-12-11T22:28:11Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3303#issuecomment-446386958",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3303",
    "updated_at": "2018-12-11T22:28:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 love it.",
    "created_at": "2018-12-11T22:21:44Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3300#issuecomment-446384955",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3300",
    "updated_at": "2018-12-11T22:21:44Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> note though that in principle both can contribute independently to the margins, if you have a rangeslider (on the bottom) and a top axis with long labels (oh right, I meant to add a test for that case - I'll add that)\r\n\r\nWorking on this has uncovered some more bugs - will address those in a separate bugfix PR.",
    "created_at": "2018-12-11T22:12:21Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3323#issuecomment-446382304",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3323",
    "updated_at": "2018-12-11T22:12:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Regarding our discussion concerning computing the ranges twice ... I could still try using `Lib.aggnums` there.\r\n\r\nThere are two separate issues here: DRY 🌴 and performance 🐎.\r\n\r\n🌴 we could investigate replacing *both* of these implementations with `aggNums` but if it's at all complicated don't worry about it.\r\n\r\n🐎 I would just imagine keeping both copies, but short-circuiting the one in `scene` if it has already been done (and stashed on the trace) in `convert`.",
    "created_at": "2018-12-06T23:20:55Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3281#issuecomment-445066481",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3281",
    "updated_at": "2018-12-06T23:20:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Correct me if I'm wrong (again, we have very little in-house Vue experience) but it looks like Nuxt is largely focused on server-side rendering, and I suspect that's why plotly.js is breaking it - we do a lot of things that require a real DOM, most fundamentally perhaps measuring text since it's on us, not the HTML layout engine, to position it correctly. See https://community.plot.ly/t/how-to-perform-server-side-manipulation-using-plotly-js/1077",
    "created_at": "2018-12-06T22:02:36Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2691#issuecomment-445046114",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2691",
    "updated_at": "2018-12-06T22:02:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj as discussed the improved grid refinement system is a big improvement for a good number of cases, very nice! I still think we'll do better if we don't refine the grid at all, and simply use the coordinates we're given - performance as well as probably some cases it still doesn't draw the surface quite right. But that can wait for later, perhaps the regl refactor whenever we might get to that.",
    "created_at": "2018-12-06T18:21:43Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3281#issuecomment-444976008",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3281",
    "updated_at": "2018-12-06T18:21:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for bringing this up @lmartins - I thought we had an in-depth discussion of this somewhere but I can't find it... @cldougl am I missing it somewhere?\r\n\r\nUnfortunately there isn't one universally accepted standard for exactly how to calculate Q1 and Q3… see eg: http://www.amstat.org/publications/jse/v14n3/langford.html - there are at least 15 different ways you might choose to calculate quartiles!\r\n\r\nThey all generally give quartiles that are close to each other, and I don’t think it’s possible to say that one is right and the others are wrong. The algorithm we chose is based on the idea that often statistics are based on a sample from a much larger theoretical distribution, that we model as smearing each data point evenly over a span halfway to its nearest neighbors on either side. With 9 points like you have, we want Q1 to have 2.25 \"points\" below it. 2 points below would mean halfway between the second and third points, 2.25 means three quarters of the way from the second to the third point, or:\r\n\r\n1.8889 * 1/4 + 2.5556 * 3/4 = 2.388925\r\n\r\nI believe this is method 10 in the Langford paper.\r\n\r\n(also discussed in https://community.plot.ly/t/boxplot-quartile-seems-wrong/2234)",
    "created_at": "2018-12-06T04:56:47Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3309#issuecomment-444748439",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3309",
    "updated_at": "2018-12-06T04:56:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> supporting generic CSS\r\n\r\nSure, we support this already in our pseudo-HTML - ie `<span style=\"...\">styled text</span>` so there's precedent for it. I suspect there will be easy ways to use this to break our fragile sizing and positioning system, but you'll know pretty quickly if that has happened 😅 And I'm sure people would find used for it!",
    "created_at": "2018-12-05T17:14:48Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2342#issuecomment-444566385",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2342",
    "updated_at": "2018-12-05T17:14:48Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> but still doesn't look right.\r\n\r\nWhat would be \"right\"? Is there a use case here or should we just prohibit `base`+`(multi)category` during `supplyDefaults`?",
    "created_at": "2018-12-05T16:27:13Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2391#issuecomment-444548560",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2391",
    "updated_at": "2018-12-05T16:27:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "What we've been insisting on primarily is backward compatibility. This was originally linked to the v2.0 milestone, in recognition that we would like to change it but doing so can be considered a breaking change.\r\n\r\nThat said, in addition to the changes @nicolaskruchten points out above, plotly.js and its ecosystem have evolved in ways that both mitigate some of the original reasons to want this functionality, and strengthen the argument for removing it. So on balance we've become comfortable that the benefits of making this change in a minor release override our concerns about it being a breaking change. Scheduling it for inclusion in 1.43.",
    "created_at": "2018-12-05T15:43:13Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/316#issuecomment-444531235",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/316",
    "updated_at": "2018-12-05T15:43:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Very nice fix! But what's up with the fuzzy line in the test image (between 10&9, 8&7, 3&2)?\r\n![screen shot 2018-12-04 at 4 42 40 pm](https://user-images.githubusercontent.com/2678795/49474896-d8b24a00-f7e3-11e8-9ed4-5a4067b6e94a.png)\r\n",
    "created_at": "2018-12-04T21:45:08Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3304#issuecomment-444270650",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3304",
    "updated_at": "2018-12-04T21:45:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This looks like the relevant handler:\r\nhttps://github.com/plotly/plotly.js/blob/7bb5daaaa118537ca01464d12cdbcef6f9cc764a/src/traces/table/plot.js#L59-L66",
    "created_at": "2018-12-04T16:21:27Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3249#issuecomment-444160808",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3249",
    "updated_at": "2018-12-04T16:21:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard let's try to address this for 1.43 - even `staticPlot` doesn't avoid it.",
    "created_at": "2018-12-03T19:04:39Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3249#issuecomment-443829634",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3249",
    "updated_at": "2018-12-03T19:04:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard a few updates to make this work compatible with camera up #3256 and title alignment #3276, and some looser tests for titles and tickson #3275 to work on my machine. Does this all look OK to merge now that we have the 👍 from @chriddyp ?",
    "created_at": "2018-11-30T16:45:10Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3236#issuecomment-443264172",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3236",
    "updated_at": "2018-11-30T16:45:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Beautiful. As I was giving the code a final look I saw a few extra \"oh wait, what about...\" only to find you'd already addressed and thoroughly tested them all. Love it.\r\n\r\n💃 ",
    "created_at": "2018-11-29T17:56:46Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3276#issuecomment-442931269",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3276",
    "updated_at": "2018-11-29T17:56:46Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "OK, looks great! 💃 ",
    "created_at": "2018-11-28T02:31:21Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3275#issuecomment-442295841",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3275",
    "updated_at": "2018-11-28T02:31:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "`parcoords` traces use WebGL, so if that's not available they will fail. But the manner of failure is different - and worse because it halts rather than just showing the \"WebGL not supported\" message - using the built files than in our development environment. So thanks for bringing this up!\r\n\r\nIt turns out the minified version of regl does different error handling than the development version. Here's the code in the dev version that we relied on to throw an error:\r\nhttps://github.com/regl-project/regl/blob/8c4b9c1bf78ff9a85366bf3441c084a1cd8b1f2c/dist/regl.js#L886-L890\r\n\r\nAnd here's the equivalent in \"regl.unchecked.js\" that seems to be what gets compressed to the minified one (which is used even in the un-minified built files `plotly-latest.js` etc):\r\nhttps://github.com/regl-project/regl/blob/8c4b9c1bf78ff9a85366bf3441c084a1cd8b1f2c/dist/regl.unchecked.js#L233-L237\r\n\r\nBoth of these end up here:\r\nhttps://github.com/plotly/plotly.js/blob/ed9ad69877fa66ff6039ac4063703dea08e9763d/src/lib/prepare_regl.js#L38-L50\r\n\r\n@etpinard do you see any issue with simply adding `if(!d.regl) success = false;` in there? That would fix this particular issue; it's a bit unfortunate though that the error behavior of the built and dev code is different.",
    "created_at": "2018-11-28T02:02:14Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3295#issuecomment-442290131",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3295",
    "updated_at": "2018-11-28T02:02:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Wow that's a hard to grok chart! Compare 2017 across categories :)\r\n\r\nIndeed, I've been pondering if there's a way to improve that. Certainly showing gridlines for the outer category only would help. Trying to think through an analog of `bargap` / `bargroupgap`, ie to give a bigger gap at the outer category boundary... but it seems tough to square that with the ticks & gridlines. Also would probably be a major headache to implement, as the spacing between categories would no longer be constant.",
    "created_at": "2018-11-27T22:34:12Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2799#issuecomment-442243851",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2799",
    "updated_at": "2018-11-27T22:34:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Sure, I was going to suggest deleting the element so we don't need to trust as much that we always set the data, but since it's a singleton element that would be awkward. So, looks good. 💃 ",
    "created_at": "2018-11-27T21:15:09Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3282#issuecomment-442219574",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3282",
    "updated_at": "2018-11-27T21:15:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I don't think 30-degree rotation makes sense for multi-category axes, for the upper OR lower labels. But 90-degree rotation determined separately for each level) is both reasonable and common.\r\n![multilevel](https://i.stack.imgur.com/J9vE6.png)\r\n\r\nI don't think truncation should be used at all by default, but it could be a nice option to expose.",
    "created_at": "2018-11-27T17:06:05Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2799#issuecomment-442137977",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2799",
    "updated_at": "2018-11-27T17:06:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "An extreme example of the problem - spiky data like  `gl3d_surface-lighting` (the data is only 0s and 1s) but very nonuniform x/y data - https://codepen.io/alexcjohnson/pen/XyBReJ?editors=1000\r\n![screen shot 2018-11-26 at 4 02 10 pm](https://user-images.githubusercontent.com/2678795/49041939-aa55be80-f194-11e8-8100-c105d9893bef.png)\r\nnotice that the thinner spikes rarely reach 1.",
    "created_at": "2018-11-26T21:03:41Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2713#issuecomment-441797075",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2713",
    "updated_at": "2018-11-26T21:03:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> > Do we want a longer default `ticklen` when you turn on `tickson: 'boundaries'`?\r\n> \r\n> I'm not opposed. How much longer are you thinking?\r\n\r\nHmm, looking at it in more detail, I think perhaps the current default is fine. Definitely once we get to multi-level axes, ticks for the outer levels will need to by default extend beyond the inner level's labels, but we can leave it as is for now.",
    "created_at": "2018-11-26T18:10:56Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3275#issuecomment-441740025",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3275",
    "updated_at": "2018-11-26T18:10:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I'm happy now, and your update to @Braintelligence's fiddle https://github.com/plotly/plotly.js/issues/3260#issuecomment-440847345 works for me - so 💃 from my side but perhaps we can wait for @Braintelligence to confirm.",
    "created_at": "2018-11-26T17:57:51Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3272#issuecomment-441735582",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3272",
    "updated_at": "2018-11-26T17:57:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice, thanks! 💃 ",
    "created_at": "2018-11-26T17:15:39Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3293#issuecomment-441721082",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3293",
    "updated_at": "2018-11-26T17:15:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Excellent! 💃 \r\n\r\nI like the idea of an `@ie11` tag. That would make it nice and easy (and local) to add new tests to ie.",
    "created_at": "2018-11-26T15:44:59Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3285#issuecomment-441685624",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3285",
    "updated_at": "2018-11-26T15:44:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 \r\n\r\n> might be worth adding a tasks/ script that does that at some point.\r\n\r\nLooks like there are some simple options folks have come up with to automate this, like https://npm.community/t/some-packages-have-dist-tarball-as-http-and-not-https/285/18\r\nIf npm doesn't solve it on their end first...",
    "created_at": "2018-11-26T15:27:13Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3291#issuecomment-441678616",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3291",
    "updated_at": "2018-11-26T15:27:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Should we also change `title` / `titlefont` and other `title*` trace attribute to `title.text` / `title.font` / ... in this PR?\r\n\r\n`carpet.(a|b)axis.title` seems to me like it maps naturally to cartesian axis titles, so I feel like it would be confusing NOT to move this to the new structure. And at that point seems to me we should convert them all - ie any remaining `title` -> `title.text` and `title*` -> `title.*`",
    "created_at": "2018-11-26T15:09:04Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3276#issuecomment-441671873",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3276",
    "updated_at": "2018-11-26T15:09:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This ugly self-crossing outline was mentioned in #3050 - and the solution I proposed there was for the labels that get pushed left to be moved down. But I guess an even more robust solution would be to set the angle at a full 90 degrees - is that the angle you had in mind? Anyway no, it's currently not possible to change this angle, but it's a good idea.",
    "created_at": "2018-11-26T03:29:18Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3283#issuecomment-441508946",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3283",
    "updated_at": "2018-11-26T03:29:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": ":dancer:",
    "created_at": "2018-11-26T03:10:04Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3286#issuecomment-441506463",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3286",
    "updated_at": "2018-11-26T03:10:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard the issue is with `contours.showlabels` https://codepen.io/alexcjohnson/pen/VVxvPN?editors=0010",
    "created_at": "2018-11-23T16:26:28Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3279#issuecomment-441280571",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3279",
    "updated_at": "2018-11-23T16:26:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I am curious to know what is the initial font size used to computed the width of the the text?\r\n\r\nI'm assuming it's whatever fallback font the system uses before the requested font is available.",
    "created_at": "2018-11-22T04:33:27Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3253#issuecomment-440910092",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3253",
    "updated_at": "2018-11-22T04:33:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ooh maybe this will do it: https://github.com/bramstein/fontfaceobserver\r\nI'm thinking the ideal would be to keep track of requested fonts during `supplyDefaults`, then before actually drawing anything wait for all of these fonts to be available. If they're not available in a reasonable amount of time, continue drawing but then redraw when they *are* all available.",
    "created_at": "2018-11-22T04:04:29Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3253#issuecomment-440906524",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3253",
    "updated_at": "2018-11-22T04:04:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Here it is in a codepen: https://codepen.io/alexcjohnson/pen/mQXpKK?editors=1000\r\nOn first load of the page, the alignment is usually - but not always - incorrect. If you then click \"run\" up top to rerun the code *without* reloading the page, it will look correct. Thanks for the report @tim-sauchuk! We will at least be able to solve it for your case; finding a solution when you have a background or border may be a little harder.",
    "created_at": "2018-11-22T03:07:24Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3253#issuecomment-440899350",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3253",
    "updated_at": "2018-11-22T03:07:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Update: we've confirmed the issue in a private dashboard hosted on plot.ly. I'm still working on reproducing on codepen, as the bug depends on using custom fonts that are not already available on the user's system.\r\n\r\nThe problem is that there are two annotations that are supposed to align their left edges, but they don't always do that. And the root cause is that the browser *claims* to know how big the text is that goes in the annotation, but it doesn't *actually* know; once it really loads the font, the text is (in this case) a bit bigger. You can see that if I give the annotations a `bgcolor` which shows the size we were told (by `getBoundingClientRect`) the text would fit into:\r\n![screen shot 2018-11-21 at 5 03 40 pm](https://user-images.githubusercontent.com/2678795/48870582-6ab35f00-edaf-11e8-9679-a3498a7fa210.png)\r\n\r\nI'm not really sure how to fix this for *all* cases; we've encountered this problem before and the only solution that has worked is to wait a little while and do a complete redraw of all text items on the plot (and because of automargins, this really means redrawing the entire plot most of the time).\r\n\r\nHowever, to fix it for this particular dashboard - since these annotations don't affect margins and have no `bgcolor` - we should be able to ensure they're always drawn using the correct `text-anchor=\"start\"`. I'm really not sure why currently some of the annotations are drawn with `text-anchor=\"middle\"`, they're all correctly set with `xanchor: 'left'`, which *should* ensure `text-anchor=\"start\"`. If we fix that part, the size will have no bearing on their relative alignment.",
    "created_at": "2018-11-21T22:28:23Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3253#issuecomment-440830446",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3253",
    "updated_at": "2018-11-21T22:28:23Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I was thinking just “plotly” - as in @jackparmer’s original mock. Semitransparent, like the modebar itself, would be fine. But the real goal here is when the general viewing public sees these plots they associate our name with them, not just when they mouse over the logo. That’s how they’ll know where to come to make their own plots!",
    "created_at": "2018-11-21T03:29:19Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3268#issuecomment-440516588",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3268",
    "updated_at": "2018-11-21T03:29:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "There's also #1663\r\n\r\nBTW I notice pseudo-HTML is currently honored (in its current limited way) in sankey hover labels but not the node labels:\r\n![screen shot 2018-11-20 at 7 04 38 pm](https://user-images.githubusercontent.com/2678795/48810441-688dc980-ecf7-11e8-9c09-94bcf3679e88.png)",
    "created_at": "2018-11-21T00:07:54Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3269#issuecomment-440476025",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3269",
    "updated_at": "2018-11-21T00:07:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Do we want a longer default `ticklen` when you turn on `tickson: 'boundaries'`? And we definitely need to not push the labels away from the axis (ie to be beyond the ticks).\r\n\r\nThere are probably also some unpleasant effects on collision avoidance. Imagine the case:\r\n`'A very long title', 'short', 'Another very long title'`\r\nThey could all avoid touching each other yet overlap the boundaries which would still be unacceptable, at least if we're showing ticks, though it might still be better to rotate in this case even with just grid lines. And perhaps we want to only auto-rotate to 90 degrees, omitting the step at 30 degrees?",
    "created_at": "2018-11-20T23:56:34Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3275#issuecomment-440472841",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3275",
    "updated_at": "2018-11-20T23:56:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Good call, I think we need the company name. I don't think the logo needs to be any bigger than the current one, just have the rest of the modebar fade out and the name fade in in its place (being careful with its color so we know it'll be visible)",
    "created_at": "2018-11-20T18:04:23Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3268#issuecomment-440373865",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3268",
    "updated_at": "2018-11-20T18:04:23Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Presumably this will work the same way as `uirevision` #3236 - if you don't provide `uid`, we assign one that's random at first but stays with traces of the same index. That machinery is nothing new. So internally we only need to key off `uid`, but to the user it looks like \"`uid` if you provide that, index if you don't\"",
    "created_at": "2018-11-20T04:20:01Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3217#issuecomment-440132785",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3217",
    "updated_at": "2018-11-20T04:20:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I agree it's not a great name, but at this point I think it's the least bad. I wouldn't insist on concordance with `datarevision`, since that one at least has a very common monotonic use case (ie real time or as-available data)... but that's at least a vote in its favor, and all the other options we've floated IMO have some sort of equally or more problematic association.",
    "created_at": "2018-11-20T04:15:22Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3236#issuecomment-440132139",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3236",
    "updated_at": "2018-11-20T04:15:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Love it. 💃 ",
    "created_at": "2018-11-20T04:06:56Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3254#issuecomment-440130909",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3254",
    "updated_at": "2018-11-20T04:06:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Maybe it's safe leaving it out in `Plotly.downloadImage` then?\r\n\r\nYes, that's the goal (at least when downloading as SVG, I suspect we still need it to download as PNG etc). The difficulty is the way we currently stash `baseUrl` in the singleton `drawing` module (at least we *do* stash it https://github.com/plotly/plotly.js/commit/5887104139256934bbf554bf62685fbec62585d2 🎉). We could instead stash it with the plot (in `_context` or `_fullLayout` or something), but that would require altering every call to `setClipUrl` to have `gd` as an argument.",
    "created_at": "2018-11-19T16:29:01Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3260#issuecomment-439954689",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3260",
    "updated_at": "2018-11-19T16:29:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I can't of a reason why `window.location.href` should be part of the clip-part URL in SVG exports in the first place.\r\n\r\nFor export it shouldn't. But within the page this is necessary if there's a `<base>`.\r\n\r\nOne possibility: if we're asked to download the plot as SVG, we can temporarily clear `drawing.baseUrl` to `''`, generate the SVG, then put it back when we're done. Only concern with this is when drawing is async, we might draw some normal (not-for-export) plots while `baseUrl` is removed...\r\n\r\n",
    "created_at": "2018-11-19T16:12:00Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3260#issuecomment-439948375",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3260",
    "updated_at": "2018-11-19T16:12:00Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard @archmoj are you able to reproduce this? It looks fine to me on all browsers on my mac, and on browserstack it seems fine on Windows (wonder when they're going to add Ubuntu???)",
    "created_at": "2018-11-18T21:02:44Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3258#issuecomment-439725578",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3258",
    "updated_at": "2018-11-18T21:02:44Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Wow, that's crazy. I should ask what the heck this line (which is resulting in a whole attempted \"re\"plot without any associated `calc`) is doing in `supplyDefaults`:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/3a32ac00cf5e8619932f874960f11b4daf7ceb40/src/plots/plots.js#L482-L483\r\n\r\nBut I'm afraid I'd have to ask myself from 4 years ago 🙄 \r\nHopefully we can just move this (and the `ax.setScale` loop below it) out of `supplyDefaults` and later in the process, and deal with any consequences in a more rational way!\r\n\r\nKind of amazed this is the first we've seen of this bug... oh well, no time like the present!",
    "created_at": "2018-11-17T07:09:54Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3255#issuecomment-439594606",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3255",
    "updated_at": "2018-11-17T07:09:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj I like this solution (subject to the comment above).\r\n\r\nBTW, I notice a related issue: if you've set the plot in `orbit` mode, rotated to some different `up` vector, then you switch back to `turntable` mode; the plot rotates back to a compatible orientation, but `layout.scene.camera.up`, and the copy in `_fullLayout`, still have the `up` and `eye` they had at the end of the orbit interaction. But I think either I should take that in #3236 or we should address this after that merges, as it should use `_guiRelayout` or `_storeDirectGuiEdits`...",
    "created_at": "2018-11-17T06:28:44Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3256#issuecomment-439592672",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3256",
    "updated_at": "2018-11-17T06:28:44Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard this is awesome. Huge step in the right direction!\r\n\r\nIs all of this stuff sufficiently generalized that we could call most of it `components/axes/` and leave in `cartesian/axes.js` only the stuff that's really specific to cartesian? Wouldn't have to do it now, but... is there going to be a better time?\r\n\r\n> commit 5858067 is potentially generous. No tests are failing because of it, but ignoring this comment...\r\n\r\nOther than reading that comment I have no recollection of what's going on there... so I guess we just test what it seems to be worried about, which is dynamic title scoot. Do we have such tests? In the `mathjax` mock I see that both tick labels and axis title support mathjax, I guess in principle we should have 4 test cases: (regular/mathjax tick labels) * (regular/mathjax title), shifting back and forth between collision and no collision and verifying that the title moves to the right place.\r\n\r\n> a lot of things depend on `ax._id.chaAt(0)`, this could made more general by adding a new `opts` flag e.g. `orientation: 'h' | 'v'`\r\n\r\nOr even `ax._orientation` - you're moving away from that pattern in order to make the axis objects passed to the drawing routines require less mocking, but I feel like this one is meaningful enough as part of the axis' identity - does it ever want different values for the same axis in different contexts? Anyway it's used in some other places besides the drawing code - `setConvert`, scattered about the autotick & tick value/text code, and other places.\r\n\r\nAnyway aside from ensuring we have tests for 5858067 I wouldn't consider any of my comments ^^ blocking, just opportunities to push this even farther, if you've got the appetite for it.",
    "created_at": "2018-11-17T05:49:09Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3254#issuecomment-439590802",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3254",
    "updated_at": "2018-11-17T05:49:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@tim-sauchuk can you share an example of a plot where this happens?",
    "created_at": "2018-11-16T20:32:13Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3253#issuecomment-439518444",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3253",
    "updated_at": "2018-11-16T20:32:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "FWIW scrollable legends do not have this issue: when you reach the end of a legend, the page does start scrolling.",
    "created_at": "2018-11-16T18:18:02Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3249#issuecomment-439480757",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3249",
    "updated_at": "2018-11-16T18:18:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @anikets43 - agreed, this is a bug.",
    "created_at": "2018-11-16T15:19:05Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3249#issuecomment-439425689",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3249",
    "updated_at": "2018-11-16T15:19:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I'm confused, is the issue that it's not updating the text labels when you change the y values? Those happen to have matching data at the beginning, but then you update one without updating the other. If you update both explicitly it works: https://codepen.io/alexcjohnson/pen/NEgGmr?editors=0010",
    "created_at": "2018-11-15T20:21:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3247#issuecomment-439176982",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3247",
    "updated_at": "2018-11-15T20:21:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Are we actually using the pixel ratio? I can't detect any difference in antialiasing, in 2D or 3D, which is what I thought this was supposed to accomplish. The only change I notice is this bug.\r\n\r\nOne other thing to note: if I move a 3D from my second screen (`window.devicePixelRatio = 1`) to my laptop screen (`window.devicePixelRatio = 2`) it looks blurry until I `newPlot` - rotating the scene or even edits like turning traces on and off do not cause it to pick up the new screen resolution. But it looks beautiful after a `newPlot`.\r\n\r\n2D plots *never* seem to use the increased resolution of my laptop screen, they're blurry even if that's where they were plotted in the first place.\r\n\r\nSo I'd say we have a number of things to sort out with `config.plotGlPixelRatio`!",
    "created_at": "2018-11-15T20:14:01Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3246#issuecomment-439175019",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3246",
    "updated_at": "2018-11-15T20:14:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Sounds reasonable for `Plotly.react` - so in addition to `{data, layout}` (hmm, should `config` and `frames` be in there too?) the event data could include `changed` - do you see any uses for describing what pieces changed? It would be easy to make this into a `flaglist` like `'data+config+frames'` so you could choose to only care about events where `data` or `layout` changed and ignore `frames` and `config`.\r\n\r\nWhile we're here I notice it doesn't look like `frames` are considered on first plot, ie when we just drop back to `newPlot`.",
    "created_at": "2018-11-15T19:49:45Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3245#issuecomment-439167840",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3245",
    "updated_at": "2018-11-15T19:49:45Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> `gl_PointSize = 2. * size * pixelRatio;`\r\n\r\nOh wow, that's a problem, nice find! But the fix is not to force orca to use the default value. `pixelRatio` should not affect anything about the plot except the quality of antialiasing. We should be able to make a regular in-browser plot using `plotGlPixelRatio: 5` or something and, other than potentially running out of memory, everything should look the same just smoother.\r\n\r\nSo was `pixelRatio` already included in `size` or something? Should we just change that line to `gl_PointSize = 4. * size;` or something like that?",
    "created_at": "2018-11-15T18:22:39Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3237#issuecomment-439140676",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3237",
    "updated_at": "2018-11-15T18:22:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thinking about this in the context of `uirevision` #3236, while a `values` array should definitely be supported, using a reference to the dimension would be preferable when that's what you're doing. That way if the underlying data is updated the colors follow along.",
    "created_at": "2018-11-15T18:13:46Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3061#issuecomment-439137951",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3061",
    "updated_at": "2018-11-15T18:13:46Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@mschilli87 I'm afraid matching axes was not included in the initial SPLOM implementation and has not yet been done on its own, so it's correct for this issue to remain open. In the meantime you may be able to listen to `plotly_relayout` events and issue new `Plotly.relayout` calls to keep the axes in sync - but be careful about avoiding infinite loops!",
    "created_at": "2018-11-14T18:16:52Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1549#issuecomment-438763848",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1549",
    "updated_at": "2018-11-14T18:16:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @Bjodol, there definitely should be an issue open for this. That's right, we had discussed from the beginning that a third option to `stackgaps` making it clearer that a gap is really \"missing\" would be useful. There's also this commented-out portion in the attribute description:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/2ceb5c3e7981cc850727f7406f6677c4d74be044/src/traces/scatter/attributes.js#L138-L143\r\n\r\nwhich, as mentioned when we were [originally discussing this feature](https://github.com/plotly/plotly.js/issues/1217#issuecomment-394826415) would look something like:\r\n\r\n![screen shot 2018-06-04 at 9 43 50 am](https://user-images.githubusercontent.com/2678795/40920890-e8e855d8-67db-11e8-8861-2ad511ee7152.png)\r\n\r\nIs that the kind of behavior you had in mind?\r\n\r\nWe don't have an ETA for this currently, but it's useful to know folks are interested. But the best way to get it to happen quickly would be either to submit a PR or to sponsor the project https://plot.ly/products/consulting-and-oem/",
    "created_at": "2018-11-14T14:57:27Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3244#issuecomment-438690609",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3244",
    "updated_at": "2018-11-14T14:57:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "A branch containing both transitions and uirevision, to be used for dcc `0.39.0rc4`: https://github.com/plotly/plotly.js/compare/transitions-plus-uirevision?expand=1\r\nhttps://18863-45646037-gh.circle-artifacts.com/0/plotly.min.js",
    "created_at": "2018-11-14T02:53:09Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3236#issuecomment-438519042",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3236",
    "updated_at": "2018-11-14T02:53:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@chriddyp do you want to make a parallel release candidate for this feature in dcc, or would you rather have a branch combining both features so that `0.39.0rc4` could be said to strictly build on `0.39.0rc3`? LMK, I can make that branch if you like.",
    "created_at": "2018-11-13T21:20:03Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3236#issuecomment-438441098",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3236",
    "updated_at": "2018-11-13T21:20:03Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Unless you have any more comments about which revision attributes control which edits, after https://github.com/plotly/plotly.js/pull/3236#discussion_r232848810, I think I've addressed all the comments to the code here. After merging I'll make issues for the two open items noted above:\r\n- [x] Finish `columnorder` in `table` and add `dimensionorder` in `parcoords` rather than rearranging the whole `dimensions` array, then support these with `uirevision` as well - see https://github.com/plotly/plotly.js/pull/3236/commits/a11ec44f388741dd21046d08a782e4e76fc8ba22#r232453103\r\n- [x] Test (and probably need to fix) selections with `groupby` https://github.com/plotly/plotly.js/pull/3236#discussion_r232454785 then make this work with `uirevision`",
    "created_at": "2018-11-13T04:21:47Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3236#issuecomment-438130775",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3236",
    "updated_at": "2018-11-13T21:12:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Very nice work @antoinerg! Does the parallelism work locally, based on the number of cores on the local machine? 🙏 \r\n\r\nI see a step pushing artifacts, but I can't actually find them in the test results - are they there and I'm just not finding them?\r\n\r\nThere's a lot to look at in the image outputs, and we want to be extremely careful since it's updating every mock we have!\r\n\r\nIn the SVG mocks, the only substantial change I see is in the fonts: some have very different sizing and some don't seem to be recognized in orca at all. Here's onion skin halfway between the two:\r\n![screen shot 2018-11-13 at 9 35 14 am](https://user-images.githubusercontent.com/2678795/48421157-e830fc80-e729-11e8-85ca-f3067160d3b9.png)\r\nI know fonts have always been a massive pain to get to match, but this seems farther off than is acceptable.\r\n\r\nIn WebGL the biggest thing I see is that all markers got substantially bigger (in both 2D and 3D). Onion skin again:\r\n![screen shot 2018-11-13 at 10 01 52 am](https://user-images.githubusercontent.com/2678795/48421794-31ce1700-e72b-11e8-906f-dd492d42a02a.png)\r\nIf I look at one of the mocks that puts GL2D and SVG side-by-side (for example `gl2d_fill_trace_tozero_order`), the old version seems more correct. Not really sure how to troubleshoot that though... some feature we're using for only marker sizing that behaves oddly in software OpenGL?\r\n\r\nThere's one issue in GL3D that seems to have been *fixed* here though! Some of our baselines don't correctly rotate tick labels. See for example [`gl3d_cone_rossler`](https://github.com/plotly/plotly.js/pull/3237/files?short_path=12de3ac#diff-a933b356ff7650c0fe96f1424d005b6d) - on this branch and on my screen they're rotated, but in the master baseline they are not. Oddly enough *some* of the master baselines do have rotated labels, eg [`gl3d_chrisp-nan-1`](https://github.com/plotly/plotly.js/pull/3237/files?short_path=12de3ac#diff-7fc8c2c7fdfe008b011505a9c7941e21) which makes it even more puzzling, but if we can get the rest of these issues solved at least that one we can ignore 🎉 ",
    "created_at": "2018-11-13T16:51:55Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3237#issuecomment-438346059",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3237",
    "updated_at": "2018-11-13T16:51:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard this looks great! Assuming you've verified that the built files work as described in the README (and they certainly look like they will) 💃 ",
    "created_at": "2018-11-13T14:17:35Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3223#issuecomment-438281295",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3223",
    "updated_at": "2018-11-13T14:17:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ah thanks - definitely a bug that the SVG is malformed, but we don't currently plan to support arbitrary named HTML entities (so I'd say the \"correct result\" here would be to display \"`&ndash;`\" literally. The latest status of that is #2932 in which we added support for all *numbered* HTML entities (simplified example for `&ndash;` = `&#8211;`: https://codepen.io/alexcjohnson/pen/NMdMbE?editors=1010) but in that PR we noted:\r\n\r\n> Note that this would make it feasible, performance-wise, to include ALL named html entities, but the full list is over 2000 items, and there are other options (unicode literals, or numbered entities if you want your code/JSON to be pure ASCII) so I suggest we keep it at just the existing set.\r\n\r\nThe \"existing set\" is a few entities we've supported for a very long time:\r\nhttps://github.com/plotly/plotly.js/blob/427fd14020382f950063b61dc855e4b85d91627a/src/lib/svg_text_utils.js#L339-L348",
    "created_at": "2018-11-13T13:47:44Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3238#issuecomment-438271364",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3238",
    "updated_at": "2018-11-13T13:47:44Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 ",
    "created_at": "2018-11-08T18:57:18Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3231#issuecomment-437115548",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3231",
    "updated_at": "2018-11-08T18:57:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 ",
    "created_at": "2018-11-08T17:39:27Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3228#issuecomment-437090249",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3228",
    "updated_at": "2018-11-08T17:39:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This is an extreme example of what I posted in https://github.com/plotly/plotly.js/issues/3050#issuecomment-424508921 and I said:\r\n\r\n> in this image, we could push min and q1 down so the rotated edge of their boxes align with the rotated edge of the median box perhaps?\r\n\r\nThat would fix the green label here, but I guess the fact that the orange label crosses the blue shows there's more needed - in principle all the labels except the farthest-right would need to be pushed down somewhat, though we should be careful not to push them down any more than we need do or they could easily drop off the bottom of the plot...\r\n\r\nSimply disabling this rotation (which we do if you switch to `hovermode: 'closest'`) isn't a very complete solution though - there are lots of situations then in which one label would overlap either another label, the starting point of another label, or other data you're hovering on.",
    "created_at": "2018-11-07T19:50:33Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2170#issuecomment-436754825",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2170",
    "updated_at": "2018-11-07T19:50:33Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "In fact, flipped labels shouldn't try to avoid each other at all, since they *can't* overlap. Top and bottom labels should go through the avoidance algorithm separately, or even better (in case of hover invoked externally, that needn't produce labels with any particular alignment, and for centered labels, which we use when neither side has enough room) we could make a new algorithm that's aware of the full 2D extent of each label. That applies to regular unrotated labels too, left- and right-side labels need not avoid each other.\r\n\r\nAlso especially labels that get pushed to the left look ugly (self-crossing label outline) and it's hard to tell what's pointing where:\r\n![screen shot 2018-09-25 at 5 26 18 pm](https://user-images.githubusercontent.com/2678795/46044284-56711f80-c0e8-11e8-880b-04feb505fde1.png)\r\nPerhaps we can shift some of the labels vertically - in this image, we could push min and q1 down so the rotated edge of their boxes align with the rotated edge of the median box perhaps?",
    "created_at": "2018-09-25T21:32:17Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3050#issuecomment-424508921",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3050",
    "updated_at": "2018-11-07T19:43:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Or should we do like `bar` traces and ignore `*gap` and `*groupgap` attributes whenever a user sets `width`?\r\n\r\n💯 good 👀 you're absolutely correct.",
    "created_at": "2018-11-06T22:27:54Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3109#issuecomment-436432344",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3109",
    "updated_at": "2018-11-06T22:27:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 ",
    "created_at": "2018-11-06T20:26:32Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3220#issuecomment-436396455",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3220",
    "updated_at": "2018-11-06T20:26:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Great tests! 💃 ",
    "created_at": "2018-11-05T19:31:11Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3214#issuecomment-436004999",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3214",
    "updated_at": "2018-11-05T19:31:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Beautiful. 💃 ",
    "created_at": "2018-11-05T19:12:47Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3213#issuecomment-435998642",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3213",
    "updated_at": "2018-11-05T19:12:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Alright, I think we've gotten to a clear OS difference: I'm now on `node@10.12.0` and `npm@6.4.1` - same as @archmoj on linux - and no matter what I do (even `rm -rf node_modules` and `npm cache clean --force` before `npm i`) these particular optional lines get 🔪 ",
    "created_at": "2018-11-05T17:19:17Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3184#issuecomment-435958178",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3184",
    "updated_at": "2018-11-05T17:19:17Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "haha we've accidentally done this several times already...\r\n- #3184 added these `optional` flags\r\n- then #3180 removed them (but we didn't notice)\r\n- then #3202 replicates #3184 line for line\r\n\r\nAs long as we can get to a stable situation where we can all run `npm i` without changing `package-lock` we should do that - and it seems like we CAN be stable without the `optional` lines but we CANNOT with them. So let's revert.",
    "created_at": "2018-11-05T16:16:21Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3184#issuecomment-435934730",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3184",
    "updated_at": "2018-11-05T16:16:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "At least by line count, that diff is the same as this PR and the same as what I saw in #3211, using `npm@6.2.0`. So I'm in favor of reverting.",
    "created_at": "2018-11-05T16:01:54Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3184#issuecomment-435929229",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3184",
    "updated_at": "2018-11-05T16:01:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Duplicate of #1549",
    "created_at": "2018-11-05T12:19:12Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3212#issuecomment-435854897",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3212",
    "updated_at": "2018-11-05T12:19:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard how do I avoid making this mistake with `package-lock` again? Is there a way to ensure that these `optional` flags don't get wiped out when I `npm i`?",
    "created_at": "2018-11-05T00:13:09Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3211#issuecomment-435722225",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3211",
    "updated_at": "2018-11-05T00:13:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Wow that's weird - thanks @jonmmease ! No errors or anything, just renders incorrectly...\r\n\r\nI'll fix (and test) this specific bug, but @etpinard I'm not sure what would make a good generic test of typed array support - in principle we could rerun the entire image test suite, combing through `data` (and `layout` for numeric arrays and converting them to typed arrays first... that seems pretty heavy but how else could we catch silent bugs like this?",
    "created_at": "2018-11-03T17:31:16Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3210#issuecomment-435606146",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3210",
    "updated_at": "2018-11-03T17:31:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Right, the negative sequential is unusual, we only use it when you have uniformly negative data and you ask for `autocolorscale` (If you don't explicitly ask for `autocolorscale` we default to the diverging blue->gray->red). The idea being that the goal with a sequential colorscale is generally to vary from a \"weak\" color representing small values to a \"strong\" one representing large values, and \"larger\" more often means \"bigger absolute value\" than \">\"\r\n\r\nWe could simply flip the positive sequential scale if all the data are negative, but the original thought was that this would be misleading to users used to seeing that scale the other way, so it would be better to use a separate scale.\r\n\r\n> Could we assume that diverging is the concatenation of increasing and decreasing sequential or do we need all three?\r\n\r\nYou're right that our defaults are *close* to that - negative sequential being blue (most negative) to gray (least negative) and positive being gray (least positive) to red (most positive), vs the diverging blue->gray->red. But if we *actually* used the two concatenated together you'd see that the sequential ones end at a brighter gray than the diverging one, so there's a clear cusp at the boundary - which the diverging one smooths out in the name of perceptual uniformity.\r\n![concat vs rdbu](https://user-images.githubusercontent.com/2678795/47955105-4828e580-df69-11e8-83b2-8ebc31160b36.png)\r\n\r\nPerhaps if you only specify diverging and sequential, the negative sequential scale defaults to the reversed positive sequential?",
    "created_at": "2018-11-03T17:08:43Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2925#issuecomment-435604418",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2925",
    "updated_at": "2018-11-03T17:08:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "OK, if you don't find the Autoscale button sufficient, then per @etpinard's suggestion - \r\n```js\r\ngd.on('plotly_doubleclick', function(e) {\r\n  Plotly.relayout(gd,{'allaxes.autorange':true});\r\n});\r\n```\r\nwill make doubleclick anywhere autorange the whole plot.",
    "created_at": "2018-11-02T23:29:06Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3209#issuecomment-435538063",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3209",
    "updated_at": "2018-11-02T23:29:06Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I guess the confusion here comes from the fact that it's not really subplots that have (auto or explicit) ranges, it's each individual  x or y axis. But double clicking on the subplot is a kind of shorthand for \"autorange all the axes on this subplot.\" So in that example, double clicking on the bottom subplot affects the top subplot, but only because they share the x axis.\r\n\r\nThere's an \"Autoscale\" button in the mode bar, and that will autorange every axis on the plot. I suppose as @etpinard says we *could* make a config option to have double click anywhere do that as well, though that strikes me as trading one potential confusion for another.",
    "created_at": "2018-11-02T22:05:37Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3209#issuecomment-435523052",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3209",
    "updated_at": "2018-11-02T22:05:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Yes, but the base case is that it'll just be specified in `data` I would expect\r\n\r\nThat *might* be sufficient... we just look for `x2` (and eventually `x<n>`) in the data traces, and if that exists we \"autotype\" the axis to 2-level categorical?",
    "created_at": "2018-11-02T18:41:17Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2799#issuecomment-435472253",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2799",
    "updated_at": "2018-11-02T18:41:17Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "It probably has to be both - the `data` trace needs to have multiple `x` arrays, and the `axis` needs style, order, and optional values for each level.\r\n\r\nThe categories in an inner level need not be the same for each instance of an outer level. There could be missing values (q4 2018 hasn't happened yet, for example) and we should honor that, or the inner level values could be be totally different from one outer value to the next - eg https://peltiertech.com/chart-with-a-dual-category-axis/\r\n![subcategories](https://peltiertech.com/wp-content/img200804/DualCategoryAxis.png)\r\n\r\nAn `axis.categorygroups` container array seems reasonable. Re ^^ seems like `values` (if not generated automatically from the data) would need to include duplicates, unless we make an attribute (outside `categorygroups` I guess) to explicitly require/create a cartesian product. So for the example plot up top, we'd have:\r\n```js\r\ncategorygroups: [{\r\n  name: 'Year',\r\n  values: [16, 17, 18, 16, 17, 18, 16, 17, 18, 16, 17, 18, 16, 17, 18, 16, 17, 18],\r\n  order: 'category ascending'\r\n}, {\r\n  name: 'Rating',\r\n  values: ['BB+', 'BB+', 'BB+', 'BB', 'BB', 'BB', 'BB-', 'BB-', 'BB-', 'B+', 'B+', 'B+', 'B', 'B', 'B', 'B-', 'B-', 'B-'],\r\n  order: 'array'\r\n}]\r\n```\r\n`order` (which would be most useful when taking `values` from the data) would then sort all these values arrays together, sorting first on the last array (and requiring matching values in the last array to be grouped together regardless of anything else) and working back up to the first array. (Or do we want to reverse the order here, put the outer category first, the inner last? That actually may make more sense...)\r\n\r\nIs `level` necessary? Isn't it just the index in `categorygroups`?\r\nWhat would `side` do per group? Isn't `axis.side` enough?\r\n`name` I guess is for hover labels?\r\nWhat's `bgcolor` for?\r\nOne set of things that will definitely go in there is tick & grid attributes - people will want to for example draw solid gridlines for the outer categories but dashed or no gridlines for inner categories.",
    "created_at": "2018-11-02T16:01:01Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2799#issuecomment-435428191",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2799",
    "updated_at": "2018-11-02T16:01:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ah, thanks @etpinard - looking at this more closely I think it's not just related but in fact a duplicate of #2165 - nothing to do with single vs multi trace, it's just that `hoveron: 'fills'` was only ever really built for `fill: 'toself'`.",
    "created_at": "2018-11-02T01:47:58Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3203#issuecomment-435244953",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3203",
    "updated_at": "2018-11-02T01:47:58Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "codepens from #3203:\r\nhttps://codepen.io/etpinard/pen/NOQVrq\r\nhttps://codepen.io/nicolaskruchten/pen/eQOJzY?editors=0010",
    "created_at": "2018-11-02T01:47:45Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2165#issuecomment-435244911",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2165",
    "updated_at": "2018-11-02T01:47:45Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I suppose we could restrict `hoveron: 'fills'` to `fill: 'toself'` as a bugfix, then consider hover on other fills as a new feature...",
    "created_at": "2018-11-02T01:43:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2165#issuecomment-435244160",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2165",
    "updated_at": "2018-11-02T01:43:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@cpsievert would you prefer this over at https://github.com/ropensci/plotly ?\r\nPresumably this is https://github.com/plotly/plotly.js/issues/581 - note our (as yet unimplemented) [plan](https://github.com/plotly/plotly.js/issues/581#issuecomment-433927625) to allow line color/width arrays only in `scattergl`",
    "created_at": "2018-11-01T20:26:29Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3205#issuecomment-435175244",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3205",
    "updated_at": "2018-11-01T20:26:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "In principle possible with pseudo-html in `ticktext` - see eg https://rreusser.github.io/plotly-mock-viewer/#axes_enumerated_ticks\r\n\r\nI suppose it would be possible to make `tickfont` components accept arrays when you're using a tick array though, might have some advantages...",
    "created_at": "2018-11-01T19:48:52Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3204#issuecomment-435163923",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3204",
    "updated_at": "2018-11-01T19:48:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> * What happens when template keys don't exist e.g. `show this: %{cow}`. How should this render out? e.g. `show this: undefined` or `show this: ` or something else.\r\n\r\nIs there ever a case where this is not simply a mistake the user will want to know about and fix? If not, I'd say leave it `show this: %{cow}` in the output and maybe `Lib.warn` about it.\r\n\r\n> * As `hovertemplate` overrides `hoverinfo`, we should not coerce `hoverinfo` if one provides a `hovertemplate`.\r\n\r\n👍 I do think there's a possibility of having `hoverinfo` create the default `hovertemplate`, but it's fairly complicated and connected to a bunch of other things like `hovermode` and the existence of other traces. Probably ignore this for now but perhaps explore it later.\r\n\r\n> * What should `%{y}` in a template w/o `:` format mean. Does it mean: print the `y` event data value using the default plotly formatting or print the raw `y` value?\r\n\r\nI like the idea of this being the default plotly formatting. That way we don't need to augment the d3 format spec at all. I don't see a benefit to raw.\r\n\r\n> * At some point, we should implement `hoverinfo` as a `arrayOk` attribute to allow user to set different templates for each point.\r\n\r\n👍 \r\n\r\n> * To close out #3145, maybe we should add `layout.xaxis.hovertemplate` and `layout.yaxis.hovertemplate`\r\n\r\ninteresting... sure, perhaps in conjunction with the effort to have `hoverinfo` create `hovertemplate`?",
    "created_at": "2018-11-01T16:53:59Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3126#issuecomment-435107460",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3126",
    "updated_at": "2018-11-01T16:53:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> * one part of a trace can generate multiple hover labels (e.g. 'boxes' hover) and\r\n\r\nThe box-like case (incl. violin, ohlc, candlestick) seems like the toughest nut to crack. There's also the issue of whether you make one or many labels, ie `hoverlabel.split` https://github.com/plotly/plotly.js/pull/2959. As mentioned this morning I think we should not enable `hovertemplate` for these types in this PR. I can see a variety of ways to go with the API but none of them would be affected by the API for the simple case of a single label for hovering on a single class of objects. Let's make a new issue to discuss this, including enabling/disabling individual labels, independent styling (not just of the font as in `<mean><span style=\"color:blue\">` but also the `bgcolor` etc that wouldn't work with the mega-template idea).\r\n\r\n> * traces with multiple \"parts\" each with their own hover labels (e.g. sankey, but also parcats).\r\n\r\nAgain as I mentioned earlier, I like the plan of describing each class of hover label within its own container. The difficult case for this currently is scatter `hoveron: 'fills'`, which currently seems to be broken for the simple case of just one trace anyway. In the short term we should just fix this to ignore `hoverinfo` and always display the trace `name` since that's the only thing it can display, longer term we should make a new container (`fills`?) and put its config in there, like we do for sankey.",
    "created_at": "2018-11-01T16:29:51Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3126#issuecomment-435099423",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3126",
    "updated_at": "2018-11-01T16:29:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 ",
    "created_at": "2018-10-31T20:46:29Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3199#issuecomment-434841730",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3199",
    "updated_at": "2018-10-31T20:46:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "there's a runaway `while` loop here:\r\n![screen shot 2018-10-31 at 2 27 42 pm](https://user-images.githubusercontent.com/2678795/47810261-423cc580-dd19-11e8-804f-d8225ae668ae.png)\r\nhttps://github.com/plotly/plotly.js/blob/6fda5955d97436534f786f5dbff7f2e121273bb7/src/traces/scattergl/index.js#L401-L407\r\nCame in with #3087 \r\n@archmoj want to take this?",
    "created_at": "2018-10-31T18:30:41Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3197#issuecomment-434798588",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3197",
    "updated_at": "2018-10-31T18:30:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Beautiful. 💃 for my part",
    "created_at": "2018-10-31T17:00:18Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3193#issuecomment-434766891",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3193",
    "updated_at": "2018-10-31T17:00:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice'n'easy. Beautiful test. 💃 ",
    "created_at": "2018-10-31T15:17:45Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3192#issuecomment-434727497",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3192",
    "updated_at": "2018-10-31T15:17:45Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Since you mentioned line width, if we're truly going for parity check out the logic used in SVG-land, in `Drawing.dashLine`: the length scale of the built-in dash patterns `'dot', 'dash', 'longdash', 'dashdot', 'longdashdot'` is based on `max(lineWidth, 3)`\r\n\r\nhttps://github.com/plotly/plotly.js/blob/f0f9a867ef5f3e155adc24dfd8865f3255dd860f/src/components/drawing/index.js#L168-L185",
    "created_at": "2018-10-31T14:10:01Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2946#issuecomment-434701434",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2946",
    "updated_at": "2018-10-31T14:10:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I imagine there's a way to have it both ways, but (2) sounds fine to me.\r\n\r\nBut there's another issue I notice: vertical modebars occupy the whole side of the plot:\r\n![screen shot 2018-10-31 at 9 19 01 am](https://user-images.githubusercontent.com/2678795/47791358-e3af2180-dcef-11e8-88dc-b9221b72bc97.png)\r\nunlike horizontal, which just occupy the required space:\r\n![screen shot 2018-10-31 at 9 19 22 am](https://user-images.githubusercontent.com/2678795/47791384-f4f82e00-dcef-11e8-810c-804f393bfb8a.png)\r\nAside from looking odd when you give the modebar a non-matching color, it means if you put the plot itself all the way out to the edge (ie very small margins) you can't interact with points under there.",
    "created_at": "2018-10-31T13:36:09Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3189#issuecomment-434689278",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3189",
    "updated_at": "2018-10-31T13:36:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I guess though if we want this to be categorized as a bugfix, so it can go in a patch, it should stand as is...",
    "created_at": "2018-10-31T12:59:12Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3191#issuecomment-434676960",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3191",
    "updated_at": "2018-10-31T12:59:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Definitely an improvement! I'm just wondering if we want to go one step further and make a new attribute (`tickshadow`?) that defaults to `paper_bgcolor` but people could set it to whatever they want (including transparent).",
    "created_at": "2018-10-31T12:57:06Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3191#issuecomment-434676329",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3191",
    "updated_at": "2018-10-31T12:57:06Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "`bar` edits these colors correctly, but I notice it does so just by leaving the text font properties as [`calc` edits](https://github.com/plotly/plotly.js/blob/1819584564dcd378df366a8cfa6811ca670c0d4a/src/traces/bar/attributes.js#L19). It's important that family and size be `calc` (or perhaps `plot`?) for both of these types, because whether the text goes inside or outside can depend on its size relative to the bars as drawn... but color should be able to be moved to `style`. The challenge is just figuring out which font to use - it might not be obvious whether the text you're styling is inside or outside.",
    "created_at": "2018-10-30T22:18:21Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3190#issuecomment-434490612",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3190",
    "updated_at": "2018-10-30T22:18:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@Braintelligence my comment was just for our own debugging. Hopefully we'll have a patch release out shortly that fixes this so you won't need to polyfill at all, but as written in that MDN link it's great even without an IE check, since it'll only fill if the method is initially absent.",
    "created_at": "2018-10-30T18:36:54Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3186#issuecomment-434420352",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3186",
    "updated_at": "2018-10-30T18:36:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "(BTW thanks @Braintelligence for tracking down the broken feature)\r\nModify that polyfill to *always* overwrite, and trace its calls, and you can see whenever `node.remove` is called in any browser:\r\n```js\r\n(function (arr) {\r\n  arr.forEach(function (item) {\r\n    Object.defineProperty(item, 'remove', {\r\n      configurable: true,\r\n      enumerable: true,\r\n      writable: true,\r\n      value: function remove() {\r\n        console.trace(this);\r\n        if (this.parentNode !== null)\r\n          this.parentNode.removeChild(this);\r\n      }\r\n    });\r\n  });\r\n})([Element.prototype, CharacterData.prototype, DocumentType.prototype]);\r\n```\r\nPerhaps we can build that into our tests, with a `throw` instead of a `console.trace`, to ensure we never use `node.remove`?",
    "created_at": "2018-10-30T18:31:15Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3186#issuecomment-434418436",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3186",
    "updated_at": "2018-10-30T18:31:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This seems to be the offender:\r\nhttps://github.com/plotly/plotly.js/blob/0124828f061cc1483bf09781c81c12050971bc62/src/lib/index.js#L716",
    "created_at": "2018-10-30T18:19:41Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3186#issuecomment-434414389",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3186",
    "updated_at": "2018-10-30T18:19:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 I'd just merge this now and open a maintenance issue about it for discussion. I'm quite sure there are some types that shouldn't have either, and I'd argue that non-animatable traces EITHER shouldn't have `ids` even if they support `customdata` OR we should amend the docs to say you can use `ids` just like `customdata`... but the consequences of these two attributes still appearing in `_fullData` are extremely minor.",
    "created_at": "2018-10-30T17:24:53Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3158#issuecomment-434394572",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3158",
    "updated_at": "2018-10-30T17:26:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The new cutoff - for this shape data anyway, in Chrome on my mac - seems to be >=75564 we get some gaps, < there are no gaps. That's a number I haven't seen before 🤔 That cutoff holds for date or numeric data, and any size plot, but interestingly if I change `y` to bilevel the cutoff drops to 68379 https://codepen.io/alexcjohnson/pen/MPdLjV\r\n\r\nSo the issue isn't quite the same, but symptoms are similar enough that I'll reopen",
    "created_at": "2018-10-30T17:15:59Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2334#issuecomment-434391207",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2334",
    "updated_at": "2018-10-30T17:15:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "OK great - I'll close it as we don't have a clear action item, but you're right that it has some quirks. If any future readers have a concrete suggestion for improving this feel free to reopen!",
    "created_at": "2018-10-30T16:41:59Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3181#issuecomment-434377733",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3181",
    "updated_at": "2018-10-30T16:41:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> * If `x` is in hoverinfo, shouldn't the x values _always_ be shown in the hover label?\r\n> * The x value is never shown for the blue trace, even when it is shown for the orange trace (as per your comment, both x values should be shown in this situation)\r\n\r\nWhen you're in \"compare\" mode we try to identify a \"common label\" for x (or for y, in case of eg horizontal bars), and this label is drawn on the axis - the black label in your gif. Then any individual label that has `'x'` in its `hoverinfo`, if the label matches the common label we don't show it in the individual label since it's already there in the common label. So for the blue trace, x *is* shown, just not in the blue label.\r\n\r\nIncidentally, https://github.com/plotly/plotly.js/pull/3126 will provide one way around this, since you'll be explicitly specifying the format for each label. I suspect after that PR, if all traces have a `hovertemplate` the common label won't be created at all, only the trace labels.\r\n\r\n> As an aside - is there any way to control the threshold of how close two x values can be before they're identified as nearly identical?\r\n\r\nThe logic is a bit convoluted... in some cases `layout.hoverdistance` may be useful for you, but in the case you posted, since the tolerance you'd want is smaller than the marker size here (and `hoverdistance` only controls how far *outside* the marker you can still hover on a point, it *always* accepts the interior of a marker) it won't help this case. I suppose in your particular case, since there are multiple essentially equivalent points (until you zoom in a lot) it would in principle be possible for us to change how we search, to prioritize matching x values over the precisely closest point in each trace. That sounds awfully complicated though, and thus likely to have unintended consequences, and also would only help in limited cases, where x values either match precisely or are missing from some traces like your example. It wouldn't help when the values are simply misaligned.\r\n\r\n> or even just perform linear interpolation if possible.\r\n\r\nproposed in https://github.com/plotly/plotly.js/issues/1960",
    "created_at": "2018-10-30T15:36:08Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3181#issuecomment-434350520",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3181",
    "updated_at": "2018-10-30T15:36:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@tobiasblasberg it's not a trace property, it's in layout https://plot.ly/r/reference/#layout-legend-traceorder",
    "created_at": "2018-10-30T14:42:02Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1913#issuecomment-434328371",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1913",
    "updated_at": "2018-10-30T14:42:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "OP did post it over there - closing.",
    "created_at": "2018-10-30T14:16:01Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3182#issuecomment-434318124",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3182",
    "updated_at": "2018-10-30T14:16:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This happens when the two traces have nearly but not quite identical x values. They’re close enough that it makes sense to compare them, but we need to show both x values because they are, in fact, different, and we want to make the viewer aware of this. You’re right though that it looks odd, I’m open to suggestions to improve it. ",
    "created_at": "2018-10-30T12:39:32Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3181#issuecomment-434284333",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3181",
    "updated_at": "2018-10-30T12:39:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This is the repository for plotly.js - looks like this issue is with dc.js, perhaps you want to post it at https://github.com/dc-js/dc.js/issues ? We can make scatter plots too, but we can't help with dc.js issues 😄 ",
    "created_at": "2018-10-30T12:30:21Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3182#issuecomment-434281567",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3182",
    "updated_at": "2018-10-30T12:30:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> `customdata` works for heatmaps: https://codepen.io/etpinard/pen/VENNMg and I suspect it works for all trace types.\r\n\r\nAh right, more general than I had realized. But it won't work for *all* trace types - what would it do for `sankey` for example? Or any of the histogram types? Or `carpet` and its contents, that have no hover effects? Anyway again, I wouldn't want to hold up the PR for this but we shouldn't forget about it.\r\n\r\n> `ids` also shows up in the event data (see https://codepen.io/etpinard/pen/MPRRrv) which I'd say is useful for all traces (animatable or not).\r\n\r\nNot sure about that. The docs for `ids` are all about animation, so having it there implies that a type is animatable. Does it provide any functionality you can't get from `customdata`?",
    "created_at": "2018-10-29T20:54:19Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3158#issuecomment-434075902",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3158",
    "updated_at": "2018-10-29T20:54:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I'd rather clean it up in this PR so we can close #3058.\r\n\r\nGreat attitude 💪 \r\n\r\n> Hopefully commit cd0230e gets us there ☺️ !\r\n\r\nLooks like a good framework to do it, but we may need to go through the trace types, figure out which ones actually can do something useful with these attributes and which can't, and set the attributes `undefined` in those that can't.",
    "created_at": "2018-10-29T20:38:30Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3158#issuecomment-434070454",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3158",
    "updated_at": "2018-10-29T20:38:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> It seems that the other ones are already pruned properly 🎉\r\n\r\n`ids`, and  `customdata` are `valType: 'data_array'` - so they'll be ignored unless you provide an array, but if you DO provide an array they still get transferred to `_fullData` even in traces that don't support them. This is much less important than attributes that have default values that *always* get pushed into `_fullData`, but they are still unused and therefore should not be coerced.\r\n\r\n```js\r\n> Plotly.newPlot(gd,[{type:'heatmap',z:[[-1,0],[0,1]],customdata:[1]}])\r\n> gd._fullData[0].customdata\r\n< [1]\r\n```\r\n\r\nnot something I'd hold this PR up for, but I wouldn't consider #3058 closed until it's addressed.\r\n\r\n`selectedpoints` is OK, it's protected by [`if(_module && _module.selectPoints)`](https://github.com/plotly/plotly.js/blob/e03d686d316d520f41c53720736ec3b52d92a382/src/plots/plots.js#L1194)",
    "created_at": "2018-10-29T19:53:55Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3158#issuecomment-434055170",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3158",
    "updated_at": "2018-10-29T19:53:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "How did the npm version do that? Anyway 💃 ",
    "created_at": "2018-10-29T16:35:38Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3177#issuecomment-433981865",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3177",
    "updated_at": "2018-10-29T16:35:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Closing - moved to https://github.com/plotly/documentation/issues/338",
    "created_at": "2018-10-29T15:55:56Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3176#issuecomment-433966035",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3176",
    "updated_at": "2018-10-29T15:55:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks - your guess is right, it's a documentation issue. If you know the range you want, just specify it as `[max, min]` and omit `autorange` entirely https://codepen.io/alexcjohnson/pen/WaWJLj",
    "created_at": "2018-10-29T15:49:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3176#issuecomment-433963225",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3176",
    "updated_at": "2018-10-29T15:49:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Hmm. I think I would prefer using the \"blank-path\" style solution as described in #3115 (comment)\r\n\r\nThat would certainly make the logic easier, no need for a special case on removing a previously-visible bar.",
    "created_at": "2018-10-29T15:44:54Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3164#issuecomment-433961556",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3164",
    "updated_at": "2018-10-29T15:44:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 💪 ",
    "created_at": "2018-10-29T15:01:40Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3169#issuecomment-433944136",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3169",
    "updated_at": "2018-10-29T15:01:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Excellent! 💃 ",
    "created_at": "2018-10-29T14:59:19Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3161#issuecomment-433943161",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3161",
    "updated_at": "2018-10-29T14:59:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@brockelmore as you alluded to above, this *is* an extreme pain with D3 - ie SVG. There are straightforward solutions for a few cases, like a color gradient that's purely a function of x or y coordinate, but of course this doesn't add any new information to the chart, it's purely aesthetic. Beyond these cases we would need to specify lines as filled paths, rather than stroked lines, which is both annoying to compute (at least for splines) and prone to antialiasing problems where separate paths meet. I suspect for the most general case there is actually no solution we'd be completely happy with in SVG.\r\n\r\nBut in WebGL it's manageable, which is why line color gradients were added to `scatter3d` a long time ago. Now that `scattergl` is nearly up to par with (SVG) `scatter`, I would propose adding it there and saying \"if you want line color and width gradients, use `scattergl`.\"",
    "created_at": "2018-10-29T14:20:03Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/581#issuecomment-433927625",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/581",
    "updated_at": "2018-10-29T14:20:03Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@antoinerg any attribute you set to `undefined` to keep it out of the schema, it’ll likely still appear in `fullData` because it’s not coerced by the trace module. ",
    "created_at": "2018-10-26T20:53:10Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3158#issuecomment-433540217",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3158",
    "updated_at": "2018-10-26T20:53:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@antoinerg I read @mwouts comment to mean \"we already have this for histograms, but I want it for scatter.\" Seems reasonable, either as a new mode to histogram or a `cumulative` extension to `scatter`. Seems to me @chriddyp was already asking for this at some point...",
    "created_at": "2018-10-26T19:52:37Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3165#issuecomment-433524456",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3165",
    "updated_at": "2018-10-26T19:52:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Got it, thanks! 💃 ",
    "created_at": "2018-10-26T18:55:23Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3168#issuecomment-433509738",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3168",
    "updated_at": "2018-10-26T18:55:23Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 ",
    "created_at": "2018-10-26T18:53:26Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3163#issuecomment-433509166",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3163",
    "updated_at": "2018-10-26T18:53:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I'd call it a bug if `undefined` (or `null`) *ever* gets drawn as something other than a missing / blank value. No need to hunt around and fix other trace types here, but it's definitely a positive change for `scatter3d`.",
    "created_at": "2018-10-26T17:48:10Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3133#issuecomment-433489873",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3133",
    "updated_at": "2018-10-26T17:48:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Good catch! I noticed those logs but studiously ignored them 🙈 - glad someone is paying more attention!!\r\n\r\n> The first commit fixes and 🔒s the bug\r\n\r\nHow does this 🔒 it?\r\n\r\n> the second commit 🔪s that try-catch ... which is probably a bit more dangerous, but I'm willing to take that chance.\r\n\r\nMe too. We have enough tests at this point, don't worry about removing it. As evidenced here, a `try/catch` like this is more likely to paper over a problem than to provide useful behavior!",
    "created_at": "2018-10-26T17:32:10Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3168#issuecomment-433485034",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3168",
    "updated_at": "2018-10-26T17:32:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Heh @etpinard to our discussion the other day about implementing real triplet contours with Delaunay triangulation. @gygabyte017 the issue is that we currently need to massage this into a rectangular grid, which leaves tons of blank points that we need to then interpolate. So the fix would be either Delaunay triangulation + marching triangles, or a better interpolation algorithm (but we already know we want to do the former at some point)",
    "created_at": "2018-10-26T12:29:38Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3166#issuecomment-433391307",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3166",
    "updated_at": "2018-10-26T12:29:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Would I have to create tests as well?\r\n\r\nSomeone would 😏 Most likely just an image test or two would suffice, and we can help, particularly if you can provide a figure JSON (`{data, layout}`) that shows the use of these shifts to suit your own use case.",
    "created_at": "2018-10-25T16:22:53Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3151#issuecomment-433116401",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3151",
    "updated_at": "2018-10-25T16:22:53Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Closed by #3156 🎉 (correct me and reopen if I missed something)",
    "created_at": "2018-10-25T15:24:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3116#issuecomment-433094889",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3116",
    "updated_at": "2018-10-25T15:24:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for pointing this out! It looks like we have a timezone issue here, where the range over which to draw ticks gets shifted by the UTC time zone offset, yet the ticks we end up drawing have the correct values for where they were drawn.",
    "created_at": "2018-10-25T14:10:56Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3155#issuecomment-433066587",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3155",
    "updated_at": "2018-10-25T14:10:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yes, duplicate of one part of #2391 anyway. @robmass I'm guessing you're 1 hour away from UTC right now? Because I see a 5-hour error in that codepen (wait but I'm in UTC-4... huh, somehow it's getting the non-daylight shift? anyway it's the same problem)",
    "created_at": "2018-10-25T13:43:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3148#issuecomment-433056080",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3148",
    "updated_at": "2018-10-25T13:43:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Makes sense, probably a fairly easy add. Feel like making a PR?? 😁 ",
    "created_at": "2018-10-25T13:28:19Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3151#issuecomment-433050759",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3151",
    "updated_at": "2018-10-25T13:28:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Great idea, thanks for posting! The very small text is definitely useless... we might even make this parameter a fraction, like `mintextscale` - and give it a default of something like 0.5 or even larger, but if you want to disable scaling altogether just set it to 1.",
    "created_at": "2018-10-25T13:16:22Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3153#issuecomment-433046338",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3153",
    "updated_at": "2018-10-25T13:16:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Huh, works fine for me... what hardware & OS are you seeing this on? And is this new in 1.41.3 or do you see it in previous versions? (you can use a codepen like https://codepen.io/alexcjohnson/pen/ePbdbq and change `plotly-latest.min.js` in the HTML section to a specific version like `plotly-1.39.4.min.js`)",
    "created_at": "2018-10-25T13:10:09Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3154#issuecomment-433044069",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3154",
    "updated_at": "2018-10-25T13:10:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "or include `categoryarray` https://codepen.io/alexcjohnson/pen/ePbdbq\r\n\r\nI don't see us automatically keeping all these categories around when you hide all the traces, because there is in fact no data displayed, so the category axis has not seen any categories. Consider the case where two traces have different categories in them. Hide one of them and you wouldn't, in general, want to continue to include its categories in the chart - and anyway we would autorange them out of the viewport unless they were intermingled with the categories from the remaining trace.",
    "created_at": "2018-10-25T12:59:38Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3157#issuecomment-433040656",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3157",
    "updated_at": "2018-10-25T12:59:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I had an idea about 3D opacity... curious if something like this has been tried before:\r\n\r\nWe oversample 3D scenes, right? This idea depends on oversampling, and may work better if we increase it. What if instead of trying to model the opacity independently within each pixel, we fill pixels pseudorandomly - ie at 50% opacity we just fill 50% of the pixels at full opacity. Then a point at a different Z value and still 50% opacity fills some different 50% of the pixels, and the depth buffer sorts out ordering just like it does with fully opaque items normally.\r\n\r\nThe result would be a bit speckled... but averaged over some area (hence the oversampling) it seems like it would look just like real partial opacity. The pseudorandom generator should be a pure function of screen position (x,y,z), but we may want to do something to give it greater uniformity in (x,y) than a real random distribution, to reduce speckle.\r\n\r\n@archmoj do you think this sounds plausible?",
    "created_at": "2018-10-25T02:45:23Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3138#issuecomment-432894923",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3138",
    "updated_at": "2018-10-25T02:45:23Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard they're both behaving the same way - we're displaying the common label at the bottom of the subplot you're hovering on, but what @mojoaxel would prefer is that we display the common label where the tick labels are, which is the bottom of the upper subplot.\r\n\r\nSeems like a reasonable desire, though I can see arguments either way. Our current behavior has the advantage of keeping the common label closer to the data point you're actually hovering on, the proposed way keeps the common label consistent across all subplots and aligned with the tick labels.",
    "created_at": "2018-10-25T01:10:53Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3144#issuecomment-432879053",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3144",
    "updated_at": "2018-10-25T01:10:53Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 ",
    "created_at": "2018-10-24T20:53:12Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3143#issuecomment-432824021",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3143",
    "updated_at": "2018-10-24T20:53:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 I'll let you do the honors @archmoj ",
    "created_at": "2018-10-24T17:25:48Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3141#issuecomment-432752007",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3141",
    "updated_at": "2018-10-24T17:25:48Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks good to me! 💃 ",
    "created_at": "2018-10-24T17:09:57Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3078#issuecomment-432746057",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3078",
    "updated_at": "2018-10-24T17:09:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Beautiful! With the slight exception of https://github.com/plotly/plotly.js/pull/3098#discussion_r227873310 but I won't hold up the 💃 for that.\r\nLove the new trace type test.",
    "created_at": "2018-10-24T17:03:04Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3098#issuecomment-432743388",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3098",
    "updated_at": "2018-10-24T17:03:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "OK great - then lets keep this as is -> 💃 \r\n\r\nI still have [concerns about how stuff like this will interact with templates](https://github.com/plotly/plotly.js/pull/3109#discussion_r227543929) but those should be addressed in a broader context.",
    "created_at": "2018-10-24T14:01:45Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3130#issuecomment-432669799",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3130",
    "updated_at": "2018-10-24T14:01:45Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @jonmmease - This is happening because we prune away one of those far-offscreen points, since it doesn't affect the visible path. But you're right, to support fills we need to always include the very first and last points.",
    "created_at": "2018-10-24T13:25:06Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3147#issuecomment-432654655",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3147",
    "updated_at": "2018-10-24T13:25:06Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "AFAICT this is working correctly. Note that in any `restyle` if you're providing an array you need to wrap it in another array, due to our multi-trace syntax.\r\n```js\r\nPlotly.newPlot(gd,[{type:'contour',x:[1,1,2],y:[1,2,1],z:[1,2,3]}])\r\nPlotly.restyle(gd,{z:[[4,5,6]]})\r\n```",
    "created_at": "2018-10-24T13:17:44Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3146#issuecomment-432651995",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3146",
    "updated_at": "2018-10-24T13:17:44Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Also https://github.com/plotly/plotly.js/pull/3109#discussion_r226720869 was never addressed",
    "created_at": "2018-10-24T13:11:13Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3109#issuecomment-432649652",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3109",
    "updated_at": "2018-10-24T13:11:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> anything else that needs updating/adding\r\n\r\nhttps://github.com/plotly/plotly.js/pull/3109#discussion_r226722187 is still open, right? Only coerce `scalegroup` and `scalemode` if there's no `width`?",
    "created_at": "2018-10-24T13:09:06Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3109#issuecomment-432648798",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3109",
    "updated_at": "2018-10-24T13:09:06Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Great PR @eivindjahren - I'm always happy to see a one-line change in `src` backed up by 60 lines of tests!\r\n\r\n> Another solution is to have 'outside' always mean 'outside', if you want the smart behavior you use 'auto'.\r\n\r\nPossible, though the existing `'auto'` logic depends on the text size relative to the bar height, and ends up meaning \"usually inside, but put it outside if we can and the bar is too small\" - would be nice to clarify this behavior (for both `'auto'` and `'outside'`) in the `textposition` description though!",
    "created_at": "2018-10-24T12:53:08Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3116#issuecomment-432642455",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3116",
    "updated_at": "2018-10-24T12:53:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@rmoestl looks fantastic!\r\n\r\n@etpinard I have one question about how this will play with RCE (cc @nicolaskruchten @VeraZab) - which currently doesn't seem to support `(inside|outside)textfont` at all but presumably at some point it will. I'm assuming because `insidetextfont.color` is [`undefined`](https://github.com/plotly/plotly.js/pull/3130/files?short_path=5a6cbbd#diff-53de192dfcd2487ecdc3dec4d837ede6R165) by default, we wouldn't show the corresponding color picker - so perhaps we should accept and fill in something like `'auto'` instead? (see https://github.com/plotly/plotly.js/pull/3109#discussion_r227543929 for discussion of `null` and other options)",
    "created_at": "2018-10-24T02:58:29Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3130#issuecomment-432494775",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3130",
    "updated_at": "2018-10-24T02:58:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> If I understand correctly, PR #2415 was also the culprit for bug #3099 (fixed in #3123)?\r\n\r\nYes, most likely specifically https://github.com/plotly/plotly.js/pull/2415/commits/fa1a436daa5621e6dd4addca6752724531136a57 `parcoords create/update pattern`\r\nAnother instance of [update performance breaking things](#3057) 🙃 ",
    "created_at": "2018-10-23T21:26:05Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3125#issuecomment-432426091",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3125",
    "updated_at": "2018-10-23T21:26:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@antoinerg this looks great now! https://github.com/plotly/plotly.js/pull/3096#discussion_r227459050 would be lovely but nonblocking - otherwise 💃 ",
    "created_at": "2018-10-23T16:08:24Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3096#issuecomment-432312239",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3096",
    "updated_at": "2018-10-23T16:08:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Mmm yeah, good idea - `Lib.warn` if the actual padding is less than requested. 👍 That's probably better (and certainly easier) than trying to push the calculated value back into `fullData` (in a way that's compatible with `Plotly.react`...)",
    "created_at": "2018-10-23T15:20:03Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3140#issuecomment-432291721",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3140",
    "updated_at": "2018-10-23T15:20:03Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks - that before/after comparison is exactly what I wanted to see. The segment joins definitely look better now 🌟 \r\n#691 also shows an issue of some segments disappearing entirely, or becoming very thin compared to others. Can we include a case like this in the test image too?",
    "created_at": "2018-10-23T13:55:50Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3128#issuecomment-432257130",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3128",
    "updated_at": "2018-10-23T13:55:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Interesting... what's happening is we need to generate a node/link thickness scaling, and we do so by taking the height of a column, subtracting off n-1 paddings (for n nodes in that column), and scaling all nodes so the sum of their thicknesses fills the remaining space.\r\n\r\nThe problem is that the requested padding is more than the available space, so the scaling factor goes negative, and apparently we never considered this possibility before. The way we appear to draw it, negatively scaled nodes get zero height, and negatively scaled links get drawn with the absolute value of the scaling (but misaligned because we weren't expecting this)\r\n\r\nI suppose the solution would be something like limit the padding to at most occupy perhaps half the space in any given column? 2/3?",
    "created_at": "2018-10-23T13:42:11Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3140#issuecomment-432251757",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3140",
    "updated_at": "2018-10-23T13:42:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Oh actually, I forgot, this PR includes the Chrome 51 title rotation fix, right? In that case, lets go ahead and merge the upstream PRs and this, and we can discuss whether to change the default behavior and/or add another config parameter in a separate PR. 💃 ",
    "created_at": "2018-10-23T03:01:16Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3131#issuecomment-432070990",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3131",
    "updated_at": "2018-10-23T03:01:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks great to me! 💃 ",
    "created_at": "2018-10-23T01:53:20Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3136#issuecomment-432056621",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3136",
    "updated_at": "2018-10-23T01:53:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@antoinerg cool feature!\r\n\r\n> I was wondering if I should simply add the whole `dist/` folder instead?\r\n\r\nI don't see what that would gain us... and there's a lot in there, do we even update all of them during the test run? I'd leave it at just these items for now, as long as the naming matches `dist/` (which it does) we can always augment it later.\r\n\r\nWhile you're in this code, does this same feature let us give the image test artifacts a simpler location? I would love it if we could get at these without diving so deep into the directory tree\r\n\r\n![screen shot 2018-10-22 at 8 57 16 pm](https://user-images.githubusercontent.com/2678795/47327980-27918f00-d63d-11e8-9ff0-a4b7f0e58bf1.png)\r\n\r\nCan you change it so it just looks like:\r\n\r\n![screen shot 2018-10-22 at 8 57 16 pm](https://user-images.githubusercontent.com/2678795/47328190-1d23c500-d63e-11e8-84a8-303a0c539a02.png)\r\n\r\n(I would also love it if there were a directory like `test_images_failed/` of just the images that produced diffs - in addition to the existing two directories. But that's a rather different issue)",
    "created_at": "2018-10-23T01:07:59Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3136#issuecomment-432046717",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3136",
    "updated_at": "2018-10-23T01:07:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "OK great - I'm glad this now leaves all the mocks as they were before the PR. Since this doesn't have any immediate effect anymore, let's wait and see if @etpinard's opinion changes the result at all.",
    "created_at": "2018-10-22T23:14:35Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3131#issuecomment-432024201",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3131",
    "updated_at": "2018-10-22T23:14:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "you want [`xaxis.layer: 'below traces'`](https://github.com/plotly/plotly.js/blob/6de004240acfba04987ded259c3511d2526d5240/test/image/mocks/cliponaxis_false.json#L67)\r\nhttps://github.com/plotly/plotly.js/blob/master/test/image/baselines/cliponaxis_false.png\r\n![screen shot 2018-10-22 at 3 03 24 pm](https://user-images.githubusercontent.com/2678795/47312933-a53ca700-d60b-11e8-9893-abbc2d8cb7ff.png)\r\n",
    "created_at": "2018-10-22T19:04:07Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3134#issuecomment-431940025",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3134",
    "updated_at": "2018-10-22T19:04:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "in [bar_attrs_relative](https://github.com/plotly/plotly.js/pull/3130/files?short_path=f2db335#diff-055dc9f6b5ae185a53b5bf0a29766fbc) why does text inside the orange bars end up white?\r\n\r\n<img width=\"343\" alt=\"screen shot 2018-10-22 at 1 30 26 pm\" src=\"https://user-images.githubusercontent.com/2678795/47308146-c77bf800-d5fe-11e8-9eaf-b7b611c0d2fa.png\">\r\n\r\nElsewhere (like hover labels, and pie labels elsewhere in this PR) that orange color keeps black text as a contrast.\r\n\r\n<img width=\"248\" alt=\"screen shot 2018-10-22 at 1 28 30 pm\" src=\"https://user-images.githubusercontent.com/2678795/47308165-d2368d00-d5fe-11e8-8738-7d93e698f912.png\">\r\n\r\nBTW very nice that the text that got pushed out of the small red bar turned to black even though the text *inside* the red bars is white 🎉 ",
    "created_at": "2018-10-22T17:33:32Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3130#issuecomment-431908326",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3130",
    "updated_at": "2018-10-22T17:33:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> This is maybe not the right place to bring this up but why aren't we making the label facing us and always horizontal?\r\n\r\nAbsolutely, a reasonable place to bring it up. I can certainly see cases where horizontal is better, and a lot of simple situations fall into this camp. But there are also cases - particularly when there are lots of ticks (so it can be ambiguous which label goes with which tick) or long labels (so they can overlap each other) - where to my eye it's much better to rotate the labels. So if we only have one behavior I think it should be this one (specifically restricting each label independently to [-90, 90] degrees) but I'd be happy for us to enable fixed angle (normally fixed at 0) and consistently rotated angles in a subsequent PR.",
    "created_at": "2018-10-22T17:16:43Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3131#issuecomment-431903203",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3131",
    "updated_at": "2018-10-22T17:16:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Are the warnings that this PR suppresses accessible to us in a jasmine test? Or is there some other effect of the error that we *can* test?",
    "created_at": "2018-10-22T17:00:47Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3133#issuecomment-431897745",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3133",
    "updated_at": "2018-10-22T17:00:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @archmoj - In the image tests I see a bunch of minor changes but nothing that I can clearly point to and say \"yes, that was a bug and now it's fixed.\" Can you include a new image, like the one posted in #691, to make it obvious what was fixed? Then, since it doesn't generate a diff, post a screenshot in a comment \"here's what this image looks like on the master branch, notice the missing line between the top two points\" or whatever.\r\n\r\nI do think I see something a little odd, the change in [gl3d_set-ranges](https://github.com/plotly/plotly.js/pull/3128/files?short_path=17cbbc9#diff-17cbbc97019f5b261179c860f0dcef28) - the clipped line got a little bit longer, and if I rotate the scene it looks like it's popping out the top just a tiny bit:\r\n![screen shot 2018-10-22 at 9 16 39 am](https://user-images.githubusercontent.com/2678795/47294493-36dff080-d5db-11e8-9eb3-49363df1e984.png)\r\nWas that intentional / expected?",
    "created_at": "2018-10-22T13:19:04Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3128#issuecomment-431833310",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3128",
    "updated_at": "2018-10-22T13:19:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@antoinerg when @archmoj first implemented the rotated labels I said I wished the labels for one axis would all get the same rotation, so you could read them as a series. That’s the consistency argument. Try it on master, as you slowly rotate a scene you’ll see the labels flip one at a time as each grid line passes through vertical. In this PR they all flip together. ",
    "created_at": "2018-10-20T11:22:43Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3131#issuecomment-431571781",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3131",
    "updated_at": "2018-10-20T11:22:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@archmoj interesting - The code looks great and it does exactly what we discussed, can't argue with any of that! But now that I see it and play with it, I'm actually not convinced that this is better than having each label independently restricted to [-90,90] degrees rotation as implemented in https://github.com/plotly/plotly.js/pull/3084. I kind of think the improved consistency from label to label is not worth the reduced legibility of individual labels. What do you think?\r\n\r\n@etpinard @antoinerg thoughts?",
    "created_at": "2018-10-20T04:03:02Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3131#issuecomment-431546401",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3131",
    "updated_at": "2018-10-20T04:03:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@Kully re: tests - I think all we need for this feature is one or two image tests - covering both box and violin, with at least two different explicit widths and one automatic width on the same subplot.",
    "created_at": "2018-10-19T14:36:16Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3109#issuecomment-431384760",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3109",
    "updated_at": "2018-10-19T14:36:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@Braintelligence thanks for the report. Certainly sounds like a bug and related to this PR. But we should discuss in a new issue. Can you open one, include the information you just posted - plus a description of how one ends up running this particular browser version - and link to this PR? Thanks!",
    "created_at": "2018-10-19T11:21:41Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2068#issuecomment-431331048",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2068",
    "updated_at": "2018-10-19T11:21:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Hmm, those tests only really verify the mechanics inside `restyle` and I guess that parcoords doesn't muck something up in `gd.data` during plotting. But I suspect that all of that worked just as well before your fix.\r\n\r\nWe need both of those tests to check what's actually on screen after the change, probably by using `readPixel` - similar to https://github.com/plotly/plotly.js/pull/3123/commits/156a9db6dc7656c46e3e915f70e14cefdc924230 I guess but in this case we care about more than just \"are there visible pixels\", we actually care about the color. Presumably something like the average color over the entire canvas is sufficient.",
    "created_at": "2018-10-19T01:26:41Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3125#issuecomment-431215413",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3125",
    "updated_at": "2018-10-19T01:26:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Closed in #3123 ",
    "created_at": "2018-10-18T20:52:03Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3099#issuecomment-431158526",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3099",
    "updated_at": "2018-10-18T20:52:03Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Do we still need to create a jasmine test?\r\n\r\nYes - especially since at some point we want to improve performance by fixing `update`, we should write a few tests that we can rely on during that work to ensure nothing has changed.",
    "created_at": "2018-10-18T20:18:47Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3125#issuecomment-431147769",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3125",
    "updated_at": "2018-10-18T20:18:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Alright, at some point we should dive in and figure out what it will take to make `lineLayer.update` really handle arbitrary updates so they'll be faster. But in the meantime this looks like a solid fix. Only thing we need now is a test or two showing that this fix does allow us to change line color or colorscale.",
    "created_at": "2018-10-18T19:18:50Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3125#issuecomment-431129875",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3125",
    "updated_at": "2018-10-18T19:18:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks great @archmoj ! Can you add a test to 🔒 this fix? I was going to suggest modeling it after this test:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/3f95f04d53e16b6074b59365d5420a07ef75733e/test/jasmine/tests/parcoords_test.js#L655-L663\r\n\r\n(with the inverse expectation of course, `foundPixel` should be `true`) And while I think the inner part of that test may still be good, the test itself is broken - it doesn't bother to test that `d3.selectAll('.parcoords-lines')` actually yields any elements! (add the line `expect(d3.selectAll('.parcoords-lines').size()).not.toBe(0);` and it fails) So the `.each` never runs. Must have been refactored so the `.parcoords-lines` class is never used.\r\n\r\nDon't spend any time fixing that test now unless it's trivial, but please do come up with a similar test showing that all the layers have some data in them after an edit. No need to simulate clicking the modebar button, some other edit like the one I mentioned in #3099 `Plotly.relayout(gd,'paper_bgcolor','#eff')` will suffice.",
    "created_at": "2018-10-18T11:30:55Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3123#issuecomment-430973918",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3123",
    "updated_at": "2018-10-18T11:30:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Super, thanks! :dancer:",
    "created_at": "2018-10-18T02:34:12Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3122#issuecomment-430854606",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3122",
    "updated_at": "2018-10-18T02:34:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Oh hmm, @antoinerg turns out I *did* impact at least your autosize tests - need to look at whether those failures make sense.",
    "created_at": "2018-10-17T18:57:18Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3120#issuecomment-430748132",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3120",
    "updated_at": "2018-10-17T18:57:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "good idea. Presumably a `textangle` attribute... that at least for outside text could be [anything](https://help.syncfusion.com/dashboard-platform/dashboard-designer/compose-dashboard/configuring-and-formatting-dashboard-widgets/bar-chart):\r\n<img width=\"418\" alt=\"barchart_showlabelrotation\" src=\"https://user-images.githubusercontent.com/2678795/47099140-a4b6a180-d202-11e8-817e-173c1d88322d.png\">\r\ninside text might only support multiples of 90 degrees. Would default to `'auto'` to use the current behavior.\r\n",
    "created_at": "2018-10-17T16:03:36Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3117#issuecomment-430688356",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3117",
    "updated_at": "2018-10-17T16:03:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Interesting, there's at least one clear bug here, that the orange bar always gets its text pushed inside if it has a `base`, even if there are no other bars in that column at all (ie if you hide the blue one).\r\n\r\nBut the logic for the blue trace is a bit more complicated. I guess the simplest option would be if the trace stacked on it has a `base` at all, no matter the value, we don't automatically push text inside. Basically, once you've specified `base` (for the next trace) you're on your own with `textposition` and it's up to you to ensure it doesn't overlap another bar. We could *try* to figure out whether there's room outside a bar for text, based on the other bars around, but I suspect no matter what we'll make the wrong choice sometimes in some users eyes at least, so a better bet would be to make a clear statement: \r\n\r\nIf the trace above has a base -> no auto-inside text, you have to do it yourself.\r\n\r\nThanks @eivindjahren - another very clear and helpful report!",
    "created_at": "2018-10-17T14:53:45Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3116#issuecomment-430661182",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3116",
    "updated_at": "2018-10-17T14:53:45Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Confirmed, thanks for the report @eivindjahren!",
    "created_at": "2018-10-17T13:24:38Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3115#issuecomment-430626680",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3115",
    "updated_at": "2018-10-17T13:24:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Welcome to plotly.js @Kully 🎉  Thanks for the PR!\r\n\r\nLets call this parameter just `width` like we do in `bar` traces, and keep it in the trace, not in `layout`. And we might as well allow it for both `box` and `violin` traces.\r\n\r\n> all traces in the data object have to be set to the same value in order for there to be any update to the plot\r\n\r\nI suspect in fact all that matters as you have it now is the *last* trace (of the right type on the same subplot). That's because you're taking `trace.vwidth`, where `trace` is just the last one in the loop above, and applying it to the whole `boxList` (or `violinList`) of traces. What you should be doing instead is setting this per-trace down [here](https://github.com/plotly/plotly.js/blob/f76ca97902a85e1e27c1ae1d4012676766cfc378/src/traces/box/cross_trace_calc.js#L109) by checking if `calcTrace[0].trace` exists and using it instead of `dPos`. (BTW factor of 2? `dPos` is the *half* width, and in your example there's only one half of the violin, but in general I think we want this to be the full width even if you're only showing half; and definitely full width for `box`)",
    "created_at": "2018-10-16T21:14:55Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3109#issuecomment-430403466",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3109",
    "updated_at": "2018-10-16T22:03:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for the quick fix @antoinerg ! 🚀 Very nice tests.\r\n💃 ",
    "created_at": "2018-10-16T20:07:13Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3114#issuecomment-430381851",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3114",
    "updated_at": "2018-10-16T20:07:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This doesn't seem to me to be *removing* an update, so much as converting an update into a new object creation call. Which does seem to fix the issue, but also slows down updates a good deal (and might lead to a memory leak? That I'm not sure about, depends on what's contained in the `linelayer` object)\r\n\r\nAnyway, I think we had better look a little deeper and see what it would take to fix `linelayer.update` rather than just bypassing it.",
    "created_at": "2018-10-16T18:41:47Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3112#issuecomment-430351677",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3112",
    "updated_at": "2018-10-16T18:41:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @antoinerg - beautiful test. After the indentation fix, 💃 !",
    "created_at": "2018-10-16T16:43:13Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3111#issuecomment-430310051",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3111",
    "updated_at": "2018-10-16T16:43:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@markzolotoy interesting, can you say more about why this becomes more important internationally? I agree that it's a useful feature, but the implication of your comment is that the labels are actually wrong, or unintelligible perhaps, with automatic duplicate pruning in other languages/calendars?",
    "created_at": "2018-10-16T02:42:59Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3108#issuecomment-430081191",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3108",
    "updated_at": "2018-10-16T02:42:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "OK thanks! I'll leave this report open for a while in hopes that we can figure out the root cause, but I don't think it's a good idea to address the symptom directly before that, as there are very likely to be other ways whatever this problem is can manifest itself.",
    "created_at": "2018-10-15T15:00:51Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3106#issuecomment-429889055",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3106",
    "updated_at": "2018-10-15T15:00:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @justnick21 - But I haven't managed to reproduce this error. Here's a try based on one of our existing automargin mocks: https://codepen.io/alexcjohnson/pen/wYPdBN?editors=1010\r\nCan you make a codepen, or modify that one, to show the issue?",
    "created_at": "2018-10-15T14:06:37Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3106#issuecomment-429866041",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3106",
    "updated_at": "2018-10-15T14:06:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "superseded by #3104 ",
    "created_at": "2018-10-13T15:35:01Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3103#issuecomment-429551237",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3103",
    "updated_at": "2018-10-13T15:35:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @archmoj - 💃 ",
    "created_at": "2018-10-13T15:23:25Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3104#issuecomment-429550425",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3104",
    "updated_at": "2018-10-13T15:23:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ah thanks - you're right, `dist/` should only be updated on a new release *here*. But you don't need to revert the whole PR, just revert that one commit and then reapply the parts of it (`package.json` and `package-lock.json`) that belong.",
    "created_at": "2018-10-13T11:19:26Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3103#issuecomment-429533920",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3103",
    "updated_at": "2018-10-13T11:19:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Much better. I can still find occasional cases where it doesn't behave quite as I would like, but I think we should merge this and move on. Thanks @archmoj! Can you work with @etpinard to get these changes published in the gl-* packages and updated back to npm references? Then 💃 !!!",
    "created_at": "2018-10-12T18:30:11Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3084#issuecomment-429418170",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3084",
    "updated_at": "2018-10-12T18:30:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": ">  I was wondering it may be better to use a number less than 4?\r\n\r\nI don't have a strong opinion about this. 1-letter titles should definitely NOT be rotated, as then you don't have enough context to figure out how to read it. Long titles must be rotated (that's how we got into this issue after all!) But I could see an argument for anywhere from 2 to 4 letters being the longest unrotated title.\r\n\r\nAt some point we will make this configurable, for now lets leave it at 4 unless anyone else has strong feelings otherwise.",
    "created_at": "2018-10-12T15:03:10Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3084#issuecomment-429356809",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3084",
    "updated_at": "2018-10-12T15:03:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Whew, late night @archmoj! 😴 \r\n\r\nTick labels on all 3 axes behave the same now, which is great 🎉 and the titles are still fantastic 🏆 \r\nBut the condition for flipping the tick labels between rotated left and rotated right seems weird. Particularly if I point one of the axes close to straight in/out of the screen, I can get labels rotated far past vertical. They're still all determining when to flip independently, and again I wouldn't spend time on that issue right now, but in lieu of a solution like that (which, based on some experimentation like the bottom image below I'm not even sure is a good idea anymore) we should simply restrict their individual angles to [-90, 90]. Some examples of what I see now:\r\n\r\nAll \"moneyness\" tick labels are upside-down:\r\n![screen shot 2018-10-12 at 9 24 47 am](https://user-images.githubusercontent.com/2678795/46872494-43f22800-ce02-11e8-9687-2be189654c4f.png)\r\n\r\n140 and 160 are past vertical but at least consistent with 40-120, yet 180 and 200 flip to right-side-up:\r\n![screen shot 2018-10-12 at 9 31 21 am](https://user-images.githubusercontent.com/2678795/46872500-481e4580-ce02-11e8-938f-393792438c73.png)\r\n",
    "created_at": "2018-10-12T13:42:41Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3084#issuecomment-429329928",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3084",
    "updated_at": "2018-10-12T13:42:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> That makes sense. I guess we could also have the upcoming templates on hover be split into `node.hovertemplate` and `link.hovertemplate` 🤔\r\n\r\nYes, I think those had better be separate too.\r\n\r\n@antoinerg and I had a discussion about how to handle this for other types that support `hoveron` or otherwise have multiple classes of hoverable items - like `scatter`, how would we specify separate point and fill (and eventually line) hover templates (or separate `hoverinfo` and `hoverlabel` style)? Tentative conclusion was that `trace.hover(info|template|label)` should apply only to points, we should make a new container `trace.fills.hover(info|template|label)` for fill hover (and perhaps at least `hoverlabel` would be inherited from `trace.hoverlabel`) and when we get around to line hover we can add those to the existing `line` container, ie `trace.line.hover(info|template|label)`. Any other ideas?",
    "created_at": "2018-10-12T13:22:16Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3097#issuecomment-429323780",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3097",
    "updated_at": "2018-10-12T13:22:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> `Plotly.react(gd, fig, transitionOpts);`\r\n\r\nJust trying to figure out how this will work in practice... if the graph is expected to simply receive a new figure and adapt to it, how will the app know when to provide `transitionOpts` and when not to? One thing that comes to mind is a declarative spec like \"if changes are within this set of attributes, do this transition; if they're in this other set of attributes, do this other transition; anything else, no transition\". That could take a form like (in `layout` or `figure`):\r\n```js\r\ntransitions: [\r\n  {\r\n    // scatter -> any scatter trace? or maybe 'data[0].x'?\r\n    // can't animate name so this would invoke redraw after animating x/y\r\n    attributes: ['scatter.x', 'scatter.y', 'scatter.name'],\r\n    duration: 1000,\r\n    easing: 'bounce'\r\n  },\r\n  {\r\n    // some other set, in this case including the first set and more\r\n    attributes: ['scatter.x', 'scatter.y', 'scatter.name', 'layout.xaxis.range', 'layout.yaxis.range'],\r\n    duration: 1500,\r\n    easing: 'cubic-in-out'\r\n  }\r\n]\r\n```\r\n\r\nThat way if you have an app that has controls like log/linear axes, or changing colors or something, those will just happen with no transition, but when you update the pieces that are expected to transition, they will do so automatically.\r\n\r\nWe could probably start with `transitionOpts` and then add something like this later, but it seems like a declarative version would be a lot easier to manage.\r\n\r\n> with the exception of `frame.redraw`\r\n\r\nAgain, ideally we just determine this from the diff, perhaps by marking each schema attribute that *does* support animation as `animatable: true`, and if any attribute has a diff and does not describe itself as `animatable`, we need to `redraw`.",
    "created_at": "2018-10-11T23:40:18Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1849#issuecomment-429157170",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1849",
    "updated_at": "2018-10-11T23:40:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The deselected lines also disappear if I `relayout` some other simple attribute, like:\r\n```js\r\nPlotly.relayout(gd,'paper_bgcolor','#eff')\r\n```",
    "created_at": "2018-10-11T19:24:09Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3099#issuecomment-429086610",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3099",
    "updated_at": "2018-10-11T19:24:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "alternate proposal, before we create some working `hoverinfo` behavior in `sankey`: https://github.com/plotly/plotly.js/issues/3097#issuecomment-429077334",
    "created_at": "2018-10-11T18:54:35Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3096#issuecomment-429077686",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3096",
    "updated_at": "2018-10-11T18:54:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "In fact it looks like the fact that `sankey` even *has* a `hoverinfo` attribute is accidental, probably the whole attributes file was copied over from `pie` (judging from the flags) and that one never got deleted or addressed.\r\n\r\nIt's a bit of a tricky question how to handle `hoverinfo` here, as there are two independent classes of object you can hover on, links and nodes (speaking of which, we should probably have an attribute `hoveron: 'links+nodes'` here, and this comment applies to any other trace types with a `hoveron` flaglist). Links and nodes have some matching fields (flow value) and some different. What if you want links to show flow values but nodes not to.\r\n\r\nWhat if `hoverinfo` in this case was split into `link.hoverinfo` and `node.hoverinfo`? Then we wouldn't need `hoveron` here, you could just specify the two `hoverinfo` values differently.",
    "created_at": "2018-10-11T18:53:32Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3097#issuecomment-429077334",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3097",
    "updated_at": "2018-10-11T18:53:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "There's a related issue with the way we merge base and module attributes in the schema: sometimes `extendDeepAll` goes too far, as in:\r\n```js\r\n> Plotly.PlotSchema.get().traces.scatterpolar.attributes.hoverinfo.flags\r\n<- [\"r\", \"theta\", \"text\", \"name\", \"name\"]\r\n```\r\nwhere the second `\"name\"` came from the base `[\"x\", \"y\", \"z\", \"text\", \"name\"]` getting added to a length-4 override in the module. We should really do a more manual crawl, only adding base attributes if they haven't been overridden in the module.\r\n\r\nAnyway a lot of modules that have no `\"z\"` inappropriately inherit it as well, this should really perhaps *always* be handled at the module level.",
    "created_at": "2018-10-11T18:30:25Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3058#issuecomment-429069306",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3058",
    "updated_at": "2018-10-11T18:30:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 thanks for cleaning up all my loose ends 😏 ",
    "created_at": "2018-10-11T15:53:30Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3095#issuecomment-429010016",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3095",
    "updated_at": "2018-10-11T15:53:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Love it. Thanks for the quick turnaround @ErwanMAS @etpinard !\r\n💃 ",
    "created_at": "2018-10-11T15:07:14Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3087#issuecomment-428991553",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3087",
    "updated_at": "2018-10-11T15:07:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@ErwanMAS great work here. I'm really impressed by the new mocks, especially putting SVG and GL side-by-side, that helps a lot since it's otherwise not always obvious without poring over the data whether the filling & ordering is really supposed to be as it appears in the baseline image or not.\r\n\r\n@etpinard beautiful simplifications in the last couple of commits. The mocks look fairly complete, so unless my question https://github.com/plotly/plotly.js/pull/3087#discussion_r224286320 points to some otherwise untested case this should be ready to go!",
    "created_at": "2018-10-11T01:34:34Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3087#issuecomment-428787677",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3087",
    "updated_at": "2018-10-11T01:34:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Very nice. Regardless of the answer to my question, 💃 ",
    "created_at": "2018-10-11T00:32:59Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3092#issuecomment-428777584",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3092",
    "updated_at": "2018-10-11T00:32:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Hah good catch! 💃 ",
    "created_at": "2018-10-11T00:22:42Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3093#issuecomment-428775972",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3093",
    "updated_at": "2018-10-11T00:22:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "- Remove ALL `auto*` attributes: if a value is needed and not provided, that's enough to indicate that it should be determined automatically, just like all other defaults. This might be too broad a statement, but I think it's mostly the right goal. There are a few bits of functionality we will need to find a new home for, like `autorange: 'reversed'`\r\n- And related to this but perhaps not exactly congruent, NO mutations to `gd.data` or `gd.layout` during `Plotly.plot`. This requirement has been hinted at elsewhere in this issue but I don't think it was explicitly stated.\r\n\r\n#3044 may serve as a model for this kind of behavior, using `_private` attributes to stash values determined during `calc` rather than `supplyDefaults`",
    "created_at": "2018-10-10T14:08:39Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/420#issuecomment-428586425",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/420",
    "updated_at": "2018-10-10T14:08:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> for now I would just get a flag that works for categorical axes \r\n\r\nHence my comment:\r\n\r\n> which I realize we need not support now, just want to ensure our solution will extend\r\n\r\nAs I was thinking it through, I initially thought a different approach would be needed for dates, in which case for consistency we'd have wanted to change categories too. But in the end I believe ^^ (with whatever terminology we settle on) will work for both cases 🎉 ",
    "created_at": "2018-10-09T20:08:16Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2601#issuecomment-428332948",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2601",
    "updated_at": "2018-10-09T20:08:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yep, a simple switch of some sort, at least for `category` axes. But `ticksbetweenlabels: true` sounds to me as though it could be enabling minor ticks, rather than just moving the existing ticks. How about `boundaryticks: true`? Or `tickson: ('labels'|'boundaries')`?\r\n\r\nI think the desired behavior is unambiguous for `category` axes - the labels always align with the data points, and ticks (and gridlines, and stripes if we do that) always go half a category to the left (NOT necessarily halfway between the ticks, in case `dtick !== 1`, see https://github.com/plotly/plotly.js/issues/2601#issuecomment-386312022). But for `date` axes (which I realize we need not support now, just want to ensure our solution will extend) there are two cases of ticks not aligning with the labels, based on the ambiguity over whether a date/time value represents an instant (eg the timestamp midnight January 1) or an entire time period (eg the month of January - and in fact the period in question could be anything as well - a day, month, quarter, year... I suppose period of < 1 day is also possible but once you have a time in the data it's implied you're describing exact instants):\r\n- Data values are the beginning of the period they represent. You want the labels to line up with the data but the ticks offset by half the period. For example your data is `['2018-01', '2018-02', ...]` but this represents each calendar month, not the instant each month starts, so you want labels `January, February...` but ticks half a month before the labels. If you were to zoom out on this data so you only get year labels, the ticks must still be shifted half a month left, not half a year, but also the year labels should be shifted to the middle of the year.\r\n- Data values represent precise instants. You want the ticks lined up with the data but the labels in the middle of the period. We may need some new formatting for some cases, for example \"Jan-Jun\" or \"Apr 4-10\"\r\n\r\nYou could imagine combining period and timestamp data, or data of different period, on the same date axis; for example you have monthly sales data (period is a month) and you overlay it with daily weather data (period is a day, or precisely timestamped). For this reason it seems to me that for date axes, the right way to do this is very different from category axes:\r\n- ticks/gridlines stay where they are\r\n- our new switch attribute, when enabled, shifts both the tick labels AND any data that has a period associated with it. So for example if there's a `trace.x`, there should also be a `trace.xperiod`, and we might try to automatically determine its default value - if the data is all truncated to months we can infer `xperiod: 'M1'` for example.\r\n\r\nI don't see a reason to extend this behavior to numeric axes; seems to me if someone wants behavior like this for numbers of some sort they can just display those numbers on a category axis. Can anyone think of a situation in which this wouldn't work?",
    "created_at": "2018-10-09T16:26:59Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2601#issuecomment-428259473",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2601",
    "updated_at": "2018-10-09T17:10:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "FYI @archmoj and I agreed that he will extend this so the titles exactly match the axis angles, rather than being restricted to exactly horizontal or vertical.",
    "created_at": "2018-10-09T17:10:05Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3084#issuecomment-428273799",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3084",
    "updated_at": "2018-10-09T17:10:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@cpsievert was talking here about how to align the tick label relative to its anchor point. I see that as a very different feature from whether the ticks and labels even *have* the same anchor point - which is the subject of #2601, lets continue the latter discussion over there.",
    "created_at": "2018-10-09T14:37:51Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1673#issuecomment-428217982",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1673",
    "updated_at": "2018-10-09T14:37:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @thatneat - that's much better!",
    "created_at": "2018-10-05T21:47:43Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3082#issuecomment-427507929",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3082",
    "updated_at": "2018-10-05T21:47:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "If you want to ensure `yaxis` is always drawn, put a dummy invisible trace on it, like `{visible: false}` (which will implicitly be drawn on `xaxis` and `yaxis`). If you don't want to see `yaxis`, just have it there to be overlaid on, you can make it too `visible: false` https://codepen.io/alexcjohnson/pen/oazbvv?editors=0010",
    "created_at": "2018-10-05T20:45:08Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3074#issuecomment-427493608",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3074",
    "updated_at": "2018-10-05T20:45:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Excellent, thanks for testing that out @etpinard - lets do it! 💃 ",
    "created_at": "2018-10-05T20:34:37Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3056#issuecomment-427490998",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3056",
    "updated_at": "2018-10-05T20:34:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Indeed, much improved! I'm a little surprised that the red background counts as dark according to `Color.contrast`, the inactive buttons are a little hard to see there. But... really, who makes a plot with a bright red background? To my eye all the others look good, so I'd say we're ready to go!\r\n💃 ",
    "created_at": "2018-10-05T20:29:34Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3068#issuecomment-427489658",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3068",
    "updated_at": "2018-10-05T20:29:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@antoinerg it's looking very close! I think the default color logic needs a bit of tweaking though - the inactive color is often too saturated and sometimes too close to the active color, and they're often too prominent in general.\r\n\r\nSee if you can use `Color.contrast` without `lightAmount` or `darkAmount`, followed by `Color.addOpacity` (just using different opacity for active and inactive), to make colors that closely match the existing colors when the background is white.\r\n\r\nThat strategy won't be able to exactly match our current grays (`rgba(0,31,95,0.3)` and `rgba(0,22,72,0.5)`), which are tinted a bit blue, unless perhaps you replace `Color.defaultLine` when returned by `Color.contrast` with a different color based off those two...",
    "created_at": "2018-10-05T18:50:02Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3068#issuecomment-427464468",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3068",
    "updated_at": "2018-10-05T18:50:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for taking this @etpinard - and @jonmmease thanks for chiming in.\r\n\r\nLooks great. 💃 ",
    "created_at": "2018-10-05T18:22:24Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3072#issuecomment-427456561",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3072",
    "updated_at": "2018-10-05T18:22:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Lets just insert these values - per trace type - into the same namespace as the regular trace attributes, and deal with combining the two in the respective hover routines. We don't want to use the same clipped names as in `calcdata` and anyway, as @etpinard points out, that's not even complete. We can describe these options in `attributes.hovertemplate.description` for each type, like \"You can refer to any trace attribute, and if that attribute is an array we pick out the value being hovered on. In addition, box traces support calculated attributes *min*, *lowerfence*, *q1*, *median*, *mean*, *stddev*, *q3*, *upperfence*, and *max*\"\r\n\r\nBox and violin have an extra challenge though: this syntax assumes there's only one *kind* of hover label for a trace. When you have separate labels for each level of the box, each one could in principle get its own formatting. What if you think min and max are obvious so you want only the numbers there, and for quartiles you want `%{q1} (25%)` and `%{q3} (75%)`? Do we need to make a separate template attribute for each of these (`hovertemplates: {q1: '...', q3: '...', ...}`?)\r\nAlso an issue for finance types using https://github.com/plotly/plotly.js/pull/2959, and scatter types with `hoveron: 'points+fills'`.\r\n\r\nAnd one more question: currently the hover label formatting can depend on hover mode and occasionally on other traces that also generate hover data. So in \"compare\" mode normally you only get y data in each trace hover label, and x data sits in the \"common label\" on the x axis. But in \"closest\" mode both x and y are in the trace hover label and there is no common label. Occasionally other traces influence this, like if in compare mode if you make two hover labels but they don't quite share the same x, you may get a common label, and only y data in labels for traces that match the common label, but traces that don't match (but are still close enough to generate a hover label) will get both x and y in their labels. So do we just ignore this distinction when there's an explicit `hovertemplate`? Or do we accept two variants of the template somehow? I guess I'm leaning toward ignore but we should be clear about it.",
    "created_at": "2018-10-05T18:12:13Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3007#issuecomment-427453517",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3007",
    "updated_at": "2018-10-05T18:12:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "a `titleangle` attribute would let people (manually) fix the overlap for one particular camera angle, but as soon as the user starts rotating the scene, the overlap returns. The two options I see are (1) the title rotates to align with the axis, or (2) the title stays horizontal but changes to right-aligned on the left side and left-aligned on the right side. (1) is my strong preference as it's more compact (ie less likely to overflow the scene), and also helps guide your eye as to the representation of that variable.",
    "created_at": "2018-10-05T14:41:33Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3077#issuecomment-427389326",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3077",
    "updated_at": "2018-10-05T14:41:33Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Is `type: 'contour', coloring: 'heatmap', showlines: false`\r\ndifferent from `type: 'heatmap', zsmooth: 'best'`?\r\n\r\nAnyway that's the reason we do not allow that combination of settings, because then there are actually no contours, so it's equivalent to a heatmap and therefore best to avoid the extra overhead of generating contours.",
    "created_at": "2018-10-05T13:00:45Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3080#issuecomment-427358030",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3080",
    "updated_at": "2018-10-05T13:00:45Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I also notice we sometimes overwrite `displayindex` during calc - presumably that can cause problems too?\r\n\r\nhttps://github.com/plotly/plotly.js/blob/e43d0f85149570e9d8194bc1383ebd40465fdf9f/src/traces/parcats/calc.js#L463-L470",
    "created_at": "2018-10-04T20:32:20Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3072#issuecomment-427159221",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3072",
    "updated_at": "2018-10-04T20:32:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "merging into #3077",
    "created_at": "2018-10-04T20:19:53Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/511#issuecomment-427155560",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/511",
    "updated_at": "2018-10-04T20:19:53Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "good call. I'll close #511. Referencing http://community.plot.ly/t/axes-labels-overlapping-on-3d-surface-plot/859",
    "created_at": "2018-10-04T20:19:37Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3077#issuecomment-427155498",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3077",
    "updated_at": "2018-10-04T20:19:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Seems to have been fixed in fact in v1.39.3 - presumably by #2831 - 🏆 @etpinard ",
    "created_at": "2018-10-04T20:12:35Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2347#issuecomment-427153481",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2347",
    "updated_at": "2018-10-04T20:12:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice perseverance, excellent additions. Lets do it! 💃 ",
    "created_at": "2018-10-04T18:19:53Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3057#issuecomment-427119923",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3057",
    "updated_at": "2018-10-04T18:19:53Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Next ask: any way to make some of the behaviour automatic?\r\n\r\nI think that would be fine, and I wouldn't consider that a breaking change as long as our solution is legible on any plot.\r\n\r\nIdeal would be to have `modebar.bgcolor` match `paper_bgcolor` but add partial opacity, in case some component or subplot sneaks underneath the modebar. Then we just need to choose a default `iconcolor` (and active color) that is legible and looks good with the resulting (or explicit) `bgcolor`.",
    "created_at": "2018-10-04T12:24:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3063#issuecomment-426998524",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3063",
    "updated_at": "2018-10-04T12:24:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "After we got it plumbed up to the correct code, @nicolaskruchten assures me that RCE *is* in fact happy with these changes - they will not have the bandwidth to add reset to auto values right away, but that's a general feature in the queue to support for *all* fields so it won't be missing for too long.\r\n\r\n@etpinard AFAICT this is now ready to go. Anything else?",
    "created_at": "2018-10-04T02:15:56Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3044#issuecomment-426862898",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3044",
    "updated_at": "2018-10-04T02:15:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Removing from v2, as I think we can solve this in a sufficiently backward-compatible way in #3070 ",
    "created_at": "2018-10-03T18:52:25Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1413#issuecomment-426755154",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1413",
    "updated_at": "2018-10-03T18:52:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @nicolaskruchten, `layout` makes sense. I think we originally put these in `config` as that's where all the other modebar options go, but those are all about altering the functionality of the modebar, which may need to call out to other code on the page or something... whereas the new items are all about appearance and that's not something that depends on the display context so `layout` is better.",
    "created_at": "2018-10-03T17:03:39Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3063#issuecomment-426716586",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3063",
    "updated_at": "2018-10-03T17:03:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I'd vote for making the snapshot button appear at the bottom of the vertical list and the hover buttons at the top under `orientation: 'v'`.\r\n\r\nRight, that's what I meant by flipping groups - ie the order of groups gets reversed, but within each group the order is maintained. But @etpinard don't you think this would make adding/removing icons (using `modeBarButtons(ToAdd|ToRemove)?`) confusing?",
    "created_at": "2018-10-03T14:14:10Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3068#issuecomment-426653279",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3068",
    "updated_at": "2018-10-03T14:14:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "https://github.com/plotly/streambed/pull/11589 adapted the toolpanel for this change. @nicolaskruchten @VeraZab have you gotten a chance to look at integrating it with RCE, per https://github.com/plotly/plotly.js/pull/3044#issuecomment-425208181?",
    "created_at": "2018-10-03T13:09:24Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3044#issuecomment-426631230",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3044",
    "updated_at": "2018-10-03T13:09:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Good call on the ➕ / ➖ order. I suppose we could flip *groups* but... then it gets confusing if people want to set their own icons. OK, lets leave it as you have it now.\r\n\r\nAgreed on making them all square in vertical mode. In horizontal mode I do think it looks a bit better with the original sizes, if it's not too difficult to maintain both behaviors.",
    "created_at": "2018-10-03T12:59:15Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3068#issuecomment-426628161",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3068",
    "updated_at": "2018-10-03T12:59:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "If we think people will really change the logo color, then it would be worth using the monochrome version. But I suspect anyone who cares that much what the modebar looks like is going to drop the plotly logo entirely, so we should optimize the look of the existing logo, which is the current multicolor version - so I'd vote to keep the color.\r\n\r\nDo we want to reverse the order of the vertical modebar? We should at least move the logo to the top corner, but I think it might work better - at least for people already used to the horizontal one - to have the whole thing flipped as if we had just rotated the existing modebar around the logo.",
    "created_at": "2018-10-03T02:32:11Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3068#issuecomment-426492632",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3068",
    "updated_at": "2018-10-03T02:32:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Beautiful. 💃 ",
    "created_at": "2018-10-02T19:32:45Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3057#issuecomment-426401679",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3057",
    "updated_at": "2018-10-02T19:32:45Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Beautiful cleanup @etpinard - dunno if you want someone better versed in the regl code to weigh in, but from my standpoint this is ready to 💃 !",
    "created_at": "2018-10-02T19:00:24Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3067#issuecomment-426392106",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3067",
    "updated_at": "2018-10-02T19:00:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @EsdrasXavier - FWIW that code is here in the source: \r\n\r\nhttps://github.com/plotly/plotly.js/blob/9772ef6dd5ec5417ab50dd378aaa536a8c845336/src/components/fx/calc.js#L37-L44",
    "created_at": "2018-10-02T16:33:55Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3060#issuecomment-426342137",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3060",
    "updated_at": "2018-10-02T16:33:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ok great. What you're showing here is my solution 1 - which I think we could support by adding an attribute like `zrangemode: 'symmetric'` that would force `zmin = -zmax` like you've done manually. Other values there could be `'normal'` (current behavior), `'tozero'` (like axis `rangemode: 'tozero'` - would ensure zero is included even if the range is all positive or all negative) and perhaps `'autosymmetric'` which, along with `autocolorscale: true`, would choose `'tozero'` if the data are all the same sign (so we pick a sequential red or blue colorscale) or `'symmetric'` if the data cross zero.\r\n\r\n> There are no negative values that come close to to what the colorbar shows (but, perhaps this could be fixed by altering the colorbar)\r\n\r\nThat's my solution 2, which could be nice as well, but it's a bit more involved (and, as I think about it, probably confusing to use...) as we would need to clip the colorscale itself, which seems like it would require something like a fixed point on the color mapping - like `z0: 0, c0: 0.5` to say \"make sure z=0 gets put at 0.5, the middle, on the colorscale.\" Then we'd stretch the colorscale so instead of `zmin->0` and `zmax->1`, `zmin` (and the bottom of the displayed colorbar) would map to, in this case, something like 0.47 on the colorscale. You could even imagine two fixed points, like you want 0 to always be blue and 1 to be red, but you want the colorbar to only show the actual range of data.\r\n\r\n> Non-extreme values are harder to tell apart\r\n\r\nThat you're going to have to solve by changing the colorscale. The default `RdBu` tries to be perceptually uniform, but you actually want something that varies more near zero. We don't have anything built-in that fits that description, but perhaps something like matplotlib's `seismic` https://matplotlib.org/tutorials/colors/colormaps.html would be useful for you. I wouldn't mind adding that as a named scale in plotly.js to support cases like this, but unless/until we do, translating [their source](https://github.com/matplotlib/matplotlib/blob/master/lib/matplotlib/_cm.py#L192-L195) to our format gives:\r\n```js\r\n[[0, 'rgb(0,0,76)'], [0.25, 'rgb(0,0,255)'],\r\n [0.5, 'rgb(255,255,255)'], [0.75, 'rgb(255,0,0)'],\r\n [1, 'rgb(127,0,0)']]\r\n```",
    "created_at": "2018-10-02T16:27:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3064#issuecomment-426339553",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3064",
    "updated_at": "2018-10-02T16:27:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for your interest in helping fix this bug @EsdrasXavier - but we need changes to be in the source files (in `src/`), not in the built files in `dist/`. Per the pull request template:\r\n\r\n> - make sure to **not** `git add` the `dist/` folder (the `dist/` is updated only on version bumps)\r\n\r\nIt would be very difficult for us to reverse-engineer your solution back into `src/` - would you either make a new PR, or simply make a comment to #3060 describing the changes you made?",
    "created_at": "2018-10-02T13:56:59Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3066#issuecomment-426283499",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3066",
    "updated_at": "2018-10-02T13:56:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "When you say \"the colorscale makes many of the states appear negative\" I guess you mean that zero should be grey, positive should be shades of red, and negative should be shades of blue, right? Because as it is the colors seem to match up correctly with the colorbar, it's just that zero isn't any particular color.\r\n\r\nSo it seems clear what you want from the color *scale*, and this seems completely reasonable. But as far as the color *bar* I can think of two possible outcomes, both of which might be useful in different cases but I'm curious what you had in mind:\r\n1. the colorbar range is symmetric. The full range of colors is displayed, from strong blue to bright red, but its values go beyond the data (in this case, -728k to +728k).\r\n2. the colorscale itself gets clipped, so that grey is near the bottom and the colors in the colorbar range from very light blue to bright red.",
    "created_at": "2018-10-02T02:55:12Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3064#issuecomment-426130719",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3064",
    "updated_at": "2018-10-02T02:55:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> ```js\r\n>     modeBarStyle: {\r\n>         orientation: 'h',\r\n>         backgroundColor: 'rgba(255 ,255 ,255 ,0.7)',\r\n>         iconColor: 'rgba(0, 31, 95, 0.3);'\r\n>     },\r\n> ```\r\n\r\nI like it. I'd probably go for `bgcolor` just to match our usage in the regular schema. And there are two colors to consider: the logo and all other icons. So `logoColor` and `iconColor`? Also perhaps `position: (top|middle|bottom) (left|center|right)` like `textposition`, though that can be omitted for at least the first round, and added in later if someone is interested in it.\r\n\r\n> We should probably turn the icons into a font: it'll then be straightforward to change their color and opacity with CSS.\r\n\r\nThey *were* a font a long time ago... and in fact that's still how they're given to us when someone designs a new one. but we ditched that and instead just draw them as straight SVG (with a [script](https://github.com/plotly/plotly.js/blob/master/tasks/util/pull_font_svg.js) to pull that out into js) so we have everything encapsulated in the one js bundle. Anyway this is still styled by [css](https://github.com/plotly/plotly.js/blob/master/src/css/_modebar.scss), we'll just need to make some pieces of that dynamic.",
    "created_at": "2018-10-02T02:34:14Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3063#issuecomment-426127008",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3063",
    "updated_at": "2018-10-02T02:34:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Fantastic work @etpinard - very impressive results!\r\n\r\nJust two questions of safety https://github.com/plotly/plotly.js/pull/3057#discussion_r221407615 https://github.com/plotly/plotly.js/pull/3057#discussion_r221413342 and a couple of potential small improvements https://github.com/plotly/plotly.js/pull/3057#discussion_r221406493 https://github.com/plotly/plotly.js/pull/3057#discussion_r221411382\r\n\r\nThe single drag element is already mentioned in #2555 and obviously should not be done here, that should be its own PR.",
    "created_at": "2018-09-29T03:18:09Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3057#issuecomment-425611462",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3057",
    "updated_at": "2018-09-29T03:18:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> - `initInteractions` (where the drag layers are added to the DOM): \r\n>    + ~100-150 ms (with `showAxisDragHandles` and `showAxisRangeEntryBoxes` false)\r\n>    + ~1000 ms (default),\r\n\r\nWow - time to experiment with a single drag element that registers many separate regions?",
    "created_at": "2018-09-29T03:02:37Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3057#issuecomment-425610594",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3057",
    "updated_at": "2018-09-29T03:02:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Beautiful! Yeah, to my eye a consistent blue (when that's the head of the colorway) is definitely better.\r\n\r\nDunno if @etpinard wanted to take a last look at this, but from my side it's ready to go! 💃 ",
    "created_at": "2018-09-28T23:27:46Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2963#issuecomment-425593121",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2963",
    "updated_at": "2018-09-28T23:27:46Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> What would be the best way to get at colorway from inside supplyDefaults?\r\n\r\n`layout` is there already as an arg to `handleLineDefaults` - you should be able to just grab `layout.colorway[0]`.",
    "created_at": "2018-09-28T21:03:42Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2963#issuecomment-425565510",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2963",
    "updated_at": "2018-09-28T21:03:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> The grey felt like a pretty boring default and I thought our default blue was a nicer starting point.\r\n\r\nThat makes sense, why don't we just use `layout.colorway[0]` though, so all `parcats` traces get the same default color. I think that's the last item, then we'll be ready to merge!\r\n\r\nLooking at the examples you showed in the head of this PR, they include a feature we don't, which is categorical coloring based on the first dimension. Not needed for this PR though - I'll make another new issue.",
    "created_at": "2018-09-28T20:47:48Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2963#issuecomment-425561353",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2963",
    "updated_at": "2018-09-28T20:47:48Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Fantastic grid mock @jonmmease! Good idea to include pseudo-html. And I'm glad that it *just worked* ™️ 🎉  Having multiple traces also shows off that the default coloring behavior, which I hadn't noticed before, is to pull from the trace color sequence - hence the orange and green coloration when you don't specify a color. Is that really what we want, or would it be better to use `'lightgray'` as you had in the old code (that wasn't being used anyway because you had coerced `line.color`)? `parcats` traces don't share subplots, which is normally the reason to pull trace colors from a sequence.",
    "created_at": "2018-09-28T18:50:42Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2963#issuecomment-425531897",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2963",
    "updated_at": "2018-09-28T18:50:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks great @antoinerg! The new and updated tests are very good, but I think it's still a good idea to test this manually in streambed before we merge - check that the 3 key plot environments we have there work as they do now: create, shareplot, and embedplot.",
    "created_at": "2018-09-28T17:15:29Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3056#issuecomment-425505202",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3056",
    "updated_at": "2018-09-28T17:15:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 🏆 🎉 ",
    "created_at": "2018-09-28T17:02:52Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2994#issuecomment-425501478",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2994",
    "updated_at": "2018-09-28T17:02:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@jonmmease this is looking great! Aside from the comments above (all minor and straightforward, I think) the only thing I'd like to see is a mock that puts two `parcats` traces side-by-side, to verify that this works. Can you just replace two of the existing mocks with one combined mock? Maybe even using `layout.grid`, looks as though that's plumbed up correctly but would be nice to 🔒 it down!",
    "created_at": "2018-09-28T16:01:12Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2963#issuecomment-425483337",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2963",
    "updated_at": "2018-09-28T16:01:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> We should test this in the old toolpanel\r\n\r\nI assume we have an autobin toggle there, it's going to need to change to something like what I described in https://github.com/plotly/plotly.js/pull/3044#issuecomment-425208181 (probably the simpler option is better for toolpanel)\r\n\r\n> We should append the `(x|y)bins*` attribute descriptions. Mainly, `histogram` and `histogram2d` should not longer use the same description (as `histogram` has cross-trace coupling). Moreover, we should make sure `_deprecated` attributes still show up on https://plot.ly/javascript/reference/\r\n\r\nimproved the attribute descriptions - and moved them out of `_deprecated` - in https://github.com/plotly/plotly.js/pull/3044/commits/76eee4b992eacbebff1f00ee025c7696eeb7f5d3\r\nfiled issue for reference docs https://github.com/plotly/documentation/issues/1104\r\n\r\n> Jasmine test coverage looks solid, but we should add at least one image mock\r\n\r\ngood call, I also used that to ensure the subplot logic works right -> https://github.com/plotly/plotly.js/pull/3044/commits/7909f53274f20997104193e136d5f2e939184c00\r\n\r\n> Get `Plotly.validate` to work with `(x|y)bins*` attributes\r\n\r\npart of https://github.com/plotly/plotly.js/pull/3044/commits/76eee4b992eacbebff1f00ee025c7696eeb7f5d3",
    "created_at": "2018-09-28T02:26:20Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3044#issuecomment-425300571",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3044",
    "updated_at": "2018-09-28T02:26:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@nicolaskruchten pre-dancer might be nice, as it's going to need some changes in RCE - ie in order to re-enable autobin after this PR we either need a special button to delete the `(x|y)bins` container or (maybe even better) the \"clear this field\" option we've been discussing wanting to add to *all* fields - that way the user could use the full new functionality of auto-determining `start`, `end`, and `size` all separately.\r\n\r\nNote that even if (as @etpinard suggested above) I put `autobin(x|y)` back into the schema, it still won't show up in `fullData` (if you went in and inserted it in the trace anyway or used it in `restyle` we *do* preserve the previous behavior... but it's just a compatibility shim, we immediately delete it from the trace)",
    "created_at": "2018-09-27T19:06:34Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3044#issuecomment-425208181",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3044",
    "updated_at": "2018-09-27T19:06:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Everyone's favorite super-hacky API syntax 😅 thanks for fixing this!\r\n💃 ",
    "created_at": "2018-09-26T16:11:49Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3053#issuecomment-424776338",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3053",
    "updated_at": "2018-09-26T16:11:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "For completeness, the items d3v3 is missing that v5 has are:\r\n\r\n`%Q` - milliseconds since UNIX epoch.\r\n\r\n`%s` - seconds since UNIX epoch.\r\n\r\n`%u` - Monday-based (ISO 8601) weekday as a decimal number [1,7].\r\n\r\n`%V` - ISO 8601 week of the year as a decimal number [01, 53].\r\n\r\n`%f` - microseconds as a decimal number [000000, 999999]. Frustratingly, d3 did something different than we did with `%f`, which we added (before it was part of d3) to support more digits and increased flexibility over `%L`. They added it as a fixed 6 digits of precision, whereas we support any precision up to 6 digits (using `%{n}f`) and we truncate trailing zeros. The fixed precision of only 3 (`%L`) or 6 digits is, IMO, a significant limitation (though I can see wanting to keep trailing zeros, we could easily add that) so I guess we'll be keeping this particular difference from D3 long-term...\r\n\r\nPerhaps not worth it until we upgrade our d3, but it would be possible for us to add `Q,s,u,V` similarly to how we added `f`.",
    "created_at": "2018-09-26T14:48:39Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3052#issuecomment-424744313",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3052",
    "updated_at": "2018-09-26T14:48:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The misalignment in the original multi-plot codepen https://codepen.io/kotwgarnku/pen/gdxaPN when you set the first plot to `closest` is still there (and yes, the codepen is now using 1.41.3). To be clear, I'm talking about how eg the \"min\" label is not pointing to the \"min\" value, but to where that value would be according to the bottom plot. There also seems to be a problem with the overlap avoidance algorithm when one of the labels is too long and gets flipped to the top - it's putting them out of order and then stretching them across each other.\r\n![screen shot 2018-09-25 at 4 52 23 pm](https://user-images.githubusercontent.com/2678795/46042585-c0d39100-c0e3-11e8-94e2-17769f507abb.png)\r\n",
    "created_at": "2018-09-25T21:00:12Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2970#issuecomment-424499773",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2970",
    "updated_at": "2018-09-25T21:00:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Beautiful - much clearer this way! 💃 ",
    "created_at": "2018-09-25T17:20:43Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3048#issuecomment-424428930",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3048",
    "updated_at": "2018-09-25T17:20:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 \r\nLets leave #2970 open though, I'm not convinced we can't still do better in a backward compatible way. Does this PR fix the multi-plot misalignment issue there though?",
    "created_at": "2018-09-25T17:01:30Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3043#issuecomment-424422968",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3043",
    "updated_at": "2018-09-25T17:01:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "That said it might be nice for polar (and ternary) to inherit `plot_bgcolor` as the default `bgcolor`. Could be nice when you're making a lot of subplots that all want the same background.",
    "created_at": "2018-09-25T13:53:39Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3047#issuecomment-424352284",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3047",
    "updated_at": "2018-09-25T13:53:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Good point, we allow changing the thickness of the spike line but there's always a  1px border around it matching the plot background\r\n\r\nhttps://github.com/plotly/plotly.js/blob/7714aa6f6bb9421c1cc0f94245a10b58475d86f8/src/components/fx/hover.js#L1335\r\n\r\nThe reason for this is to make sure the spike is always visible no matter what data or background it crosses. But we could certainly add a way to control this; as your example shows, it's not necessary in all cases.\r\n\r\nWould make a great first PR if you're looking to get involved 🙏 ",
    "created_at": "2018-09-24T13:38:36Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3042#issuecomment-423977507",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3042",
    "updated_at": "2018-09-24T13:38:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "related: #975 - we could implement something like `marker.nancolor`",
    "created_at": "2018-09-24T13:26:16Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3035#issuecomment-423973592",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3035",
    "updated_at": "2018-09-24T13:26:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Duplicate of #1940 ",
    "created_at": "2018-09-22T18:33:25Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3041#issuecomment-423764194",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3041",
    "updated_at": "2018-09-22T18:33:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "That was quick! Looks fantastic. 💃 ",
    "created_at": "2018-09-21T20:52:26Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3040#issuecomment-423667221",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3040",
    "updated_at": "2018-09-21T20:52:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ah sorry, I hadn't noticed that `data-notex` was already in there, I thought it was still a \"should I do this\" question. Nothing further is needed. Fantastic work @codrut3, thanks for the quick updates! 💃 \r\n\r\n@etpinard whenever you're ready to start merging 1.42 features go for it!",
    "created_at": "2018-09-21T19:54:49Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2987#issuecomment-423653291",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2987",
    "updated_at": "2018-09-21T19:54:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Love it. :dancer:",
    "created_at": "2018-09-21T18:13:18Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3023#issuecomment-423626361",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3023",
    "updated_at": "2018-09-21T18:13:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> the way they encode separators and precision\r\n\r\nRight, that's essentially the same `sprintf` model that python uses, and that we pulled from d3 and already use for various other contexts\r\n\r\nhttps://github.com/plotly/plotly.js/blob/2a3dc2656d3c832ceb24b3c22c9155aa02fd7c7a/src/plots/cartesian/layout_attributes.js#L510-L517",
    "created_at": "2018-09-21T17:07:31Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3007#issuecomment-423607591",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3007",
    "updated_at": "2018-09-21T17:07:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I just noticed that the generated schema for this trace includes several top-level trace properties that aren't supported.\r\n\r\nThere's a module `categories: ['noOpacity']` which prevents *coercing* `opacity` (so it's not in `fullData`, which is important for the editor) but does not take it out of the schema (and anyway only handles `opacity`). @etpinard 's solution would fix the schema but not `fullData`. Sounds like what we really want is something like:\r\n```js\r\nmodule.omitGlobalAttrs: ['selectedpoints', 'hoverlabel', 'opacity', 'ids', 'customdata']\r\n```\r\nthat would do both.\r\n\r\nThere are probably quite a few other traces that omit some of these - in fact, probably everything that sets `traceOut._length = null` has no use for `selectedpoints`, `ids`, and `customdata`...",
    "created_at": "2018-09-21T15:29:42Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2963#issuecomment-423574232",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2963",
    "updated_at": "2018-09-21T15:29:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@codrut3 thanks for the changes, they look fantastic! Lovely tests and very thorough test images 🏆 \r\n\r\n> Also, note that placing the title to the left (or right) means placing it on the left (or right) margin of the pie (`x = center.x - radius`). So not the left edge of the subplot, which would be further away. Is this good? What do you think?\r\n\r\nAgreed 💯 - thanks for pointing this out.\r\n\r\n> If this is fine, next I will try to do something about titles intersecting outside labels.\r\n\r\nYou're certainly welcome to do that here, but that can also be a separate PR (ideally addressing #75 too).\r\n\r\nSo the only things I'd still like to see before merging are `_verifyTitle` https://github.com/plotly/plotly.js/pull/2987#discussion_r219370769, `data-notex` https://github.com/plotly/plotly.js/pull/2987#discussion_r219372847 and finalizing the default `titleposition` https://github.com/plotly/plotly.js/pull/2987#discussion_r219372162",
    "created_at": "2018-09-21T03:09:36Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2987#issuecomment-423399755",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2987",
    "updated_at": "2018-09-21T03:09:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Closing due to lack of activity. Feel free to reopen if anyone can reproduce.",
    "created_at": "2018-09-20T19:57:13Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2940#issuecomment-423312592",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2940",
    "updated_at": "2018-09-20T19:57:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I think this can be considered a bug - as long as the negative sides of the errorbars don't reach past zero, we should give autorange a tight bound at 0. Likely this can be accomplished by having the errorbar calc inherit the `tozero` option bars pass to `Axes.findExtremes`:\r\nhttps://github.com/plotly/plotly.js/blob/2a3dc2656d3c832ceb24b3c22c9155aa02fd7c7a/src/traces/bar/cross_trace_calc.js#L533\r\nwhich does exactly that: as long as the pre-padding lower bound is above zero (or the pre-padding upper bound is below zero) it adds a tight bound at zero, but the padding comes back as soon as you have explicit bounds on both sides of zero.\r\n\r\nNote #3031 complicates this a bit... so the two should probably be tackled together.",
    "created_at": "2018-09-20T15:12:57Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3029#issuecomment-423221032",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3029",
    "updated_at": "2018-09-20T15:12:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@brian428 we still have not been able to reproduce this. Can I close it or do you have a demonstration of the issue?",
    "created_at": "2018-09-19T16:54:27Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2940#issuecomment-422877803",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2940",
    "updated_at": "2018-09-19T16:54:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Can you check what happens with `config: {editable: true}` when you drag the legend around and bump up against these various limits? Does the legend end up where you expected after you drop it? Is it ever possible to drag it totally off the edge and lose it (cc #2940)? If you're in one of these situations (esp. off the edge where the legend has increased the margin) and you drag it just a few pixels, is the result always a small change in the expected direction or does it jump one way or another?\r\n\r\nI don't think this needs any new tests added, unless you encounter and fix any weird behavior.",
    "created_at": "2018-09-19T16:52:17Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3024#issuecomment-422876989",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3024",
    "updated_at": "2018-09-19T16:52:17Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for the quick work! 💃 \r\nCould probably simplify and prevent this kind of issue by only constructing `updates` when required and passing it in to `dragTail`... but that's a bigger project, lets get this out!",
    "created_at": "2018-09-19T16:23:20Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3028#issuecomment-422867258",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3028",
    "updated_at": "2018-09-19T16:23:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Confirmed - thanks for the report @pfbuxton!",
    "created_at": "2018-09-19T13:13:54Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3026#issuecomment-422798394",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3026",
    "updated_at": "2018-09-19T13:13:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Interesting - yes, we set the top-level default font here:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/4225f9ea3bed6443a00886631532675362a826ca/src/css/_base.scss#L3\r\n\r\nAnd it's possible that we could simply remove that, as long as we have set the font consistently across all internal elements.\r\n\r\nI'm hesitant to do that though, as `'inherit'` breaks portability of the plot. Even the \"Download plot as a png\" button could break, as this renders the plot in a `<canvas>` element that's not attached to the DOM.\r\n\r\nThe other concern is layout: because this is SVG (rather than HTML which has a layout engine) we need to render text, measure it, then manually size boxes, margins, etc to fit the text. So if the user were to render the plot and then change the font upstream, everything would be sized wrong. There's also the case where the user initially renders the plot into a div that's not attached to the DOM, and only attaches it later when the user requests that content - in that case there is no inheritance chain.\r\n\r\nSo while many cases *could* be accommodated one way or another, this poses enough problems that I think we had better leave it as is.",
    "created_at": "2018-09-19T13:00:07Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3027#issuecomment-422793427",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3027",
    "updated_at": "2018-09-19T13:00:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Fantastic work @jonmmease - 💃 ",
    "created_at": "2018-09-18T01:21:18Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3018#issuecomment-422222015",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3018",
    "updated_at": "2018-09-18T01:21:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I don't think the scrollbar issue in #966 is reproducible in the current master.\r\n\r\n#966 seems to have disappeared between 1.34 and 1.35 despite the fact that they both have the horizontal alignment problem. Likely #2426 fixed the scrollbar issue, but since MathJax was unusable in legends until this PR, I'll let you close #966 when this PR is merged.",
    "created_at": "2018-09-18T01:16:59Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3018#issuecomment-422221300",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3018",
    "updated_at": "2018-09-18T01:16:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 ",
    "created_at": "2018-09-18T01:05:06Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3016#issuecomment-422219450",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3016",
    "updated_at": "2018-09-18T01:05:06Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Very nice bunch of cleanup @etpinard! 💃 ",
    "created_at": "2018-09-18T01:02:47Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3021#issuecomment-422219082",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3021",
    "updated_at": "2018-09-18T01:02:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Do you agree that the current set of properties could be extended to support these modes in the future without altering the existing properties?\r\n\r\nThose are all good points @jonmmease - thanks for writing that up! Yes, we could add this in the future, the only slight concern I see is that `layout.clickmode` would presumably control this behavior in `parcats`, so if someone turns on `select` there before it exists (to control the subplots that support it now, like the cartesian subplot in your example) then it will also turn this on for `parcats` when we add it. I think that's an acceptably small change, but we should be aware of it.",
    "created_at": "2018-09-17T20:03:40Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2963#issuecomment-422151340",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2963",
    "updated_at": "2018-09-17T20:03:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@jonmmease that brushing example is great! I wonder if we can make it look explicitly like a selection though, rather than just a `line.color`... ie like in `scatter` and various other traces, a [`selectedpoints` attribute](https://github.com/plotly/plotly.js/blob/b6d52839a85706758238242a2d8f689419d74a07/src/plots/attributes.js#L104-L115) and [`selected`/`unselected` styles](https://github.com/plotly/plotly.js/blob/b6d52839a85706758238242a2d8f689419d74a07/src/traces/scatter/attributes.js#L447-L518)?\r\n\r\nI don't think this (yet?) has the problem I describe in https://github.com/plotly/plotly.js/issues/3012 of overspecifying the selection, since selections in `parcats` are not persistent within a dimension in the same way as they are in `parcoords`, though it's probably worth thinking at this point about whether we envision something like that in the future, ie that ability to restrict the selection to one or more categories within each dimension, where the final selection is the intersection of all the dimension selections...",
    "created_at": "2018-09-17T17:45:52Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2963#issuecomment-422107770",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2963",
    "updated_at": "2018-09-17T17:45:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Absolutely! Here are the PR guidelines: https://github.com/plotly/plotly.js/blob/master/.github/PULL_REQUEST_TEMPLATE.md\r\n\r\nLets discuss this as two separate features (and two separate PRs), one for hover and another for filtered data.\r\n\r\n---\r\n\r\nRe: hover - here's where the events are emitted:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/ed39d82a9aa809f1de06f0050572a6d55fb524f8/src/traces/parcoords/plot.js#L57-L63\r\n\r\nYou'd just need to plumb in `Fx.loneHover` and `Fx.loneUnhover` before the event emissions. A good model for that may be gl3d:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/ed39d82a9aa809f1de06f0050572a6d55fb524f8/src/plots/gl3d/scene.js#L117-L133\r\n\r\nhttps://github.com/plotly/plotly.js/blob/ed39d82a9aa809f1de06f0050572a6d55fb524f8/src/plots/gl3d/scene.js#L165\r\n\r\n---\r\n\r\nRe: extracting the filtered data: This one is tougher, as `parcoords` manages all of that on the GPU. I'm not sure what the best way to get back to js will be... have the shaders write selection data back into a buffer/texture as a bitmask perhaps, then convert that to an array of indices in js?\r\n\r\nThen there's the question of where to put the resulting selection. We can certainly emit `plotly_selecting` and `plotly_selected` events once we have this data, but it would be great if it were available as part of the state, not just in events. Most other trace types define a `selectedpoints` attribute, but we can't (just) do that with `parcoords` because the selection is defined by the dimension filters. That said, it would be great for crossfiltering purposes if we *did* have a way to specify a selection independent of the dimension filters (like in the example @jonmmease made for parcats https://github.com/plotly/plotly.js/pull/2963#issuecomment-420769904). Perhaps a (writable) `selectedpoints` attribute as an input that acts as an additional filter beyond the dimension selections, then a (read-only) `fullTrace._finalSelectedpoints` array giving the resulting selection? We should hash out this API before anyone starts work on this part.",
    "created_at": "2018-09-17T17:29:49Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3012#issuecomment-422102457",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3012",
    "updated_at": "2018-09-17T17:29:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "(BTW, this kind of question is a better fit for community.plot.ly - github issues should be for bug reports or feature requests)\r\n\r\nThat's the intended behavior. We could certainly do a better job of describing this in the docs... but you can't put `data` or `layout` into the second argument, they need to be in the first argument (either directly, as you have it in your second fiddle, or already attached to a div).\r\n\r\n`Plotly.downloadImage` is a wrapper around `Plotly.toImage`, which is described more in the [source](https://github.com/plotly/plotly.js/blob/ed39d82a9aa809f1de06f0050572a6d55fb524f8/src/plot_api/to_image.js#L75-L83)\r\n\r\n> If anyone can point me towards how I could reuse the given graph and just \"overload\" it with another layout, so I don't need to redraw everything in the background\r\n\r\nNo matter what you do, we're going to redraw the plot in the background when you ask for an image of it, since the image options can change how it is drawn. But the way you do it in your second fiddle is the correct way to do it, there are no unnecessary redraws there.",
    "created_at": "2018-09-17T15:24:06Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3019#issuecomment-422060476",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3019",
    "updated_at": "2018-09-17T15:24:06Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Maybe we should consider enabling https://eslint.org/docs/rules/no-shadow?\r\n\r\nmmm, interesting, that's a good idea, I'll make a `maintenance` issue for it.",
    "created_at": "2018-09-17T14:17:36Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3017#issuecomment-422035067",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3017",
    "updated_at": "2018-09-17T14:17:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@cpsievert ^^ ?",
    "created_at": "2018-09-15T18:35:30Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/53#issuecomment-421613353",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/53",
    "updated_at": "2018-09-15T18:35:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice, thanks! 💃 ",
    "created_at": "2018-09-15T02:12:21Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3015#issuecomment-421523488",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3015",
    "updated_at": "2018-09-15T02:12:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Great idea. We currently *do* emit `plotly_hover` and `plotly_unhover` events that point to individual items, but we don't show hover labels, nor is there a way to access the set of selected items. These would be great to add.",
    "created_at": "2018-09-14T16:01:32Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3012#issuecomment-421404962",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3012",
    "updated_at": "2018-09-14T16:01:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yep, seems to have been fixed between 1.40 and 1.41. I suspect either #2978 or #2960.",
    "created_at": "2018-09-14T15:06:21Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2380#issuecomment-421388367",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2380",
    "updated_at": "2018-09-14T15:06:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This seems to be happening in [`dragTail`](https://github.com/plotly/plotly.js/blob/e545415463730291201e0adadb876874680c4361/src/plots/cartesian/dragbox.js#L718). `updateSubplots` removes the transformations we added to the data during the zoom/pan (that's where the data jumps back) and then `relayout` does a more complete redraw (ensuring we get the best view of the data given the updated axis ranges).\r\n\r\nIn the past MathJax had stopped being async after the first render of any given equation - so even though internally this jump-and-redraw has always happened, it was all synchronous so there was no repaint. I guess that changed and now MathJax is always async?\r\n\r\nThe *best* solution here is probably to ensure that the main draw (invoked by `relayout` and executed by [`Cartesian.plot`](https://github.com/plotly/plotly.js/blob/e545415463730291201e0adadb876874680c4361/src/plots/cartesian/index.js#L138) and the individual trace type `module.plot` routines) resets these transforms by itself, so we can remove that `updateSubplots` call entirely. Some of the trace types probably already do this, some probably do not... Unfortunately that solution requires testing drag with each and every trace type to ensure that it stays in the right place afterward.",
    "created_at": "2018-09-14T13:39:27Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3006#issuecomment-421361367",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3006",
    "updated_at": "2018-09-14T13:39:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "For the record, some aspects of the current ~disaster~ behavior:\r\n\r\n### Single trace\r\n\r\nStarting from `{type: 'histogram', x: xArray}` add the following:\r\n\r\n1. `{}` (full implied auto):\r\n  We add `autobin: true, xbins: {start, end, size}` to `gd.data`. Future data changes cause new autobin.\r\n\r\n2. `{autobinx: false}` (specify not auto, but no values):\r\n  We keep `autobinx: false` but add `xbins: {start, end, size}` to `gd.data`. So we autobin once but future data changes will not autobin again.\r\n\r\n3. `{autobinx: ?, xbins: {size}}` (specify any auto, incomplete bin values, any combination except all 3 bin attributes specified):\r\n  Partial bin info is discarded, future autobin as in above two cases. Unspecified `autobinx` gets set to `true`.\r\n\r\n4. `{xbins: {start, end, size}}` (autobin not included, complete bin values):\r\n  We add `autobin: false` to `gd.data`, no autobin ever happens.\r\n\r\n5. `{autobinx: false, xbins: {start, end, size}}` (specify not auto, complete values):\r\n  No mutation to `gd.data`, no autobin ever happens.\r\n\r\n6. `{autobinx: true, xbins: {start, end, size}}` (specify auto AND complete values):\r\n  New autobin values overwrite `xbins`. Future data changes cause new autobin.\r\n\r\nAs proposed above, the only change to first draw behavior would be case 3, where partial bin specification would respect the specified parts and auto-determine the others. But all `gd.data` mutations would disappear *except* the `cleanData` step of clearing `xbins` if `autobinx=true` then removing `autobinx`\r\nOn updates, the new proposal has no \"autobin once\" possibility. In fact I believe that's theoretically impossible without mutating `gd.data`. I suppose we could keep an explicit `autobinx=false` around until we finish autobinning, then push the results back to `gd.data` and delete `autobinx`... This would be similar to how we handle `xaxis.autorange: 'reversed'` and turn it into `autorange: true, range: [high, low]`\r\n\r\n### Multiple traces\r\n\r\n1. `[{}, {}, {}]` (full implied auto):\r\n  `xbins` gets chosen to match across all traces (minimum size), but `autobinx` is set `true` in the first and `false` in others.\r\n\r\n2. `[{autobinx:?}, {autobinx:?}, {autobinx:?}]` (no bin defs but explicit autobinx either true or false):\r\n  `xbins` as in implied auto, `autobinx` takes the requested value for each trace.\r\n\r\n3. `[{xbins:{size}}, {xbins:{size}}, {xbins:{size}}]` (partial bin defs):\r\n  `autobinx=true` for all traces, but `xbins.start,end` are NOT filled in anywhere. PLOT FAILS TO RENDER. Same result if even one trace has partial bin defs and others have no bin defs (though specifying `start` and `end` with no size seems to nearly work.\r\n\r\n4. `[{autobinx:true, xbins:{?}}, {autobinx:true, xbins:{?}}, {autobinx:true, xbins:{?}}]` (explicit autobin, any or no bin defs):\r\n  `xbins` gets chosen to match across all traces, `autobinx` is respected.\r\n\r\n5. `[{}, {xbins:{start,end,size}}, {}]` (full bin def for one trace):\r\n  `xbins` of other traces sometimes get chosen to match the one with a full def, sometimes smaller bin sizes (we seem to have thought this acceptable at some point, it seems to always be the defined bin size divided by an integer? Whatever, it really makes no sense). `autobinx` is set `false` for the trace with defined bins, and otherwise `true` for the first trace and `false` for others (as in case 1)\r\n\r\n6. `[{xbins:{start,end,size}}, {xbins:{start,end,size}}, {}]` (full bin def for more than one trace):\r\n  The defined bins are allowed, even if they conflict. Any undefined bin(s) get sized to the first defined bin size divided by some integer, always small enough to be less than the smallest defined bin size.\r\n\r\nAll of these scenarios have problems, other than (3) explicit and complete autobin (though even that I think we agree we should pick the bin size differently and usually larger). I'd say the multi-trace behavior is broken enough that anyone who's currently using it successfully must either have data that happens to work fine fully auto, or must have inserted complete manual (and explicitly matching!) bin specs. Neither of those cases would break using the above proposal.",
    "created_at": "2018-09-14T03:07:59Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3001#issuecomment-421217088",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3001",
    "updated_at": "2018-09-14T03:09:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Can't I just set `data-notex`?\r\n\r\nActually that's a good point, since we don't support LaTeX in pie slices either for now (see the [mathjax test image](https://github.com/plotly/plotly.js/blob/master/test/image/baselines/mathjax.png)), I wouldn't be opposed to `data-notex` here. I suspect there's not *too* much intersection between pie users and LaTeX users... :neckbeard: ",
    "created_at": "2018-09-13T22:48:30Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2987#issuecomment-421176694",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2987",
    "updated_at": "2018-09-13T22:48:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks like just linux+FF - works fine in both FF and Chrome on Mac",
    "created_at": "2018-09-13T22:40:25Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3008#issuecomment-421175128",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3008",
    "updated_at": "2018-09-13T22:40:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Would you mind adding a few words about this behavior in the fill attribute description?\r\n\r\nGood call, I added it to both `fill` and `stackgroup` -> https://github.com/plotly/plotly.js/pull/3005/commits/fe0c988adfabf500961bb9a881b86c6b7c80d1c5",
    "created_at": "2018-09-13T22:36:19Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3005#issuecomment-421174327",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3005",
    "updated_at": "2018-09-13T22:36:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Was this a conscious decision in #1944? Would things break if all those \"subsequent\" traces get `autobinx: true`?\r\n\r\nNo, pure bug. It wouldn't break things, but given that this is already broken I feel we have some extra flexibility to improve things, as long as we don't change things that currently work.\r\n\r\n> Is dropping autobin(x|y) entirely necessary to get your proposal to work?\r\n\r\nPerhaps not, but I'm not quite sure how `autobinx` should behave if we keep it - just ignore `traceIn.xbins` entirely?\r\n\r\n> Sounds to me like autobin(x|y) will still be valuable in e.g. the chart-editor where one could easily toggle between the auto values and their set values even if we make all non-overlaid histogram traces share the same bins.\r\n\r\nI feel like there's actually more potential for confusion if we *have* `autobin(x|y)` attributes, at least after we stop mutating these pieces of `gd.data`, but would be curious to hear @nicolaskruchten's take.\r\n\r\nIf `autobinx` just means we ignore `traceIn.xbins`, then when it's *on* you would see values for `xbins.(start|end|size)` but either you wouldn't be able to change them, or if changing one turned off `autobinx`, then the other two would also suddenly jump to whatever non-auto values you had previously given them. Or perhaps changing one would turn off `autobinx` and then also unset the other two values...\r\n\r\nAnd if we get that far, the entire `autobinx` attribute, at least as far as the GUI is concerned, could just be replaced by a button with no associated attribute (other than \"do we have a value for start, end, or size\") saying \"unset start, end, and size.\" But in the scheme I'm proposing it's meaningful to set/unset each of these attributes individually, so while \"unset all\" might be nice, it's just one of several possible unsetting operations.\r\n\r\nIs there something else `autobinx` could mean that would make more sense?\r\n\r\n> All in all, it sounds to me the the proposed algorithm could be an opt-on feature (in v1.x) via a `bingroup` attribute.\r\n\r\nUnless we make some option for multiple overlay groups (where each group could have independent binning but we stack or something within each group... would be strange), I think this has to be all-or-nothing, at least per-subplot. So I suppose we could make a boolean to opt into this... but I'm hopeful that we can design it without that in such a way that the initial render is close enough to current behavior (ie just fixes bugs) and changes are mostly confined to dynamic behavior.",
    "created_at": "2018-09-13T04:58:00Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3001#issuecomment-420883448",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3001",
    "updated_at": "2018-09-13T04:58:00Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard 3rd time's a charm, but the intermittent error in `test-jasmine2` (that came in with the context loss event PR?) has been rearing its ugly head...",
    "created_at": "2018-09-13T04:20:28Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/3005#issuecomment-420878570",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3005",
    "updated_at": "2018-09-13T04:20:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> How hard would it be to make to cover @jonmmease 's brilliant new MathJax logic under a config flag\r\n\r\nProblem is MathJax config happens now on loading plotly.js, not on plotting. So there are effects before any `Plotly.*` call. ",
    "created_at": "2018-09-12T22:20:02Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2994#issuecomment-420816950",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2994",
    "updated_at": "2018-09-12T22:20:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Hmm, I think I need to actually reorder the traces internally so each stackgroup (and all groups of unstacked-but-filled-together traces) stays together. Otherwise you can get situations like this:\r\n<img width=\"429\" alt=\"screen shot 2018-09-12 at 5 04 44 pm\" src=\"https://user-images.githubusercontent.com/2678795/45453306-79dea800-b6ae-11e8-8ede-0cd101632b67.png\">\r\nWhere all the fills have the right shape but the layering is ridiculous. You would never do this intentionally, but I can imagine it happening in the editor for example if you make a couple of stacks and then add a new item to an earlier stack. (If you leave the fills semi-transparent the situation is comprehensible... I just made them opaque to highlight the problem)\r\n\r\nI first thought of bringing all unstacked traces to the front, but I think the better solution would be to push traces toward the back to join their groups, but otherwise stay in the same order. It would be weird, but I could imagine a user explicitly wanting a line to be drawn behind a stack. Or, perhaps more likely, wanting a single filled-to-zero trace drawn behind a stack.",
    "created_at": "2018-09-12T21:20:29Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3003#issuecomment-420801898",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3003",
    "updated_at": "2018-09-12T21:20:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Whew, I can make all sorts of fun stuff happen with multiple stackgroups... this example has them out of order in `gd.data`:\r\n<img width=\"449\" alt=\"screen shot 2018-09-12 at 4 36 31 pm\" src=\"https://user-images.githubusercontent.com/2678795/45451796-29fde200-b6aa-11e8-9432-46907ae3610d.png\">\r\nBut even if they're in the right order (ie all 'a' group together, then all 'b' group together, then all unstacked) there are still problems right now. Thanks for the report @dmt0!",
    "created_at": "2018-09-12T20:39:51Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/3003#issuecomment-420789620",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/3003",
    "updated_at": "2018-09-12T20:39:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@jonmmease that was some great detective work! If we were adding MathJax support today knowing what we know now, this would be the solution, no question. I might try some things to reduce the overhead, particularly for the case where plotly.js is the only MathJax consumer so the config setting/resetting is unnecessary... but you're probably right that this is a negligible portion of overall MathJax rendering time, so I wouldn't hold it up for that.\r\n\r\nWe need to think through the potential breaking change though - three bad things could happen:\r\n- MathJax incorrectly typesets content that either isn't math or was intended to be managed some other way.\r\n  - This is mitigated by the fact that the initial typeset will use the default `$$...$$` instead of the `$...$` that we switch to. There's also `\\(...\\)` which doesn't change. These delimiters were chosen to be unlikely to appear naturally, with the intent to remain displayed, though one could always construct uses for them.\r\n  - Would anyone ever insert *partial* math, to be completed and typeset later? Seems unlikely... would be a major FOUC, normally you'd just insert and typeset the whole expression when it's ready.\r\n- MathJax slows down startup just by looking for content. They [claim this is negligible](https://github.com/mathjax/MathJax/wiki/Understanding-mathjax-performance#pre-processing) but I thought I'd mention it.\r\n- The user had adapted to our config, and was explicitly typesetting blocks using `$...$` delimiters, and now these stopped working.\r\n\r\nThe first seems like an exceedingly rare problem; the second is purportedly negligible though I haven't measured it personally; the third is perhaps the most likely, though I get the impression that the number of users in this camp is far fewer than those who are currently unable to adapt to the config we've set, and these users (and any bothered by the first two issues) need only make a small change, reinstating the piece(s) of our config that they depended on as Jon shows above.\r\n\r\nSo I guess I would call this an acceptably-small break given the benefits and ease of adaptation for affected users. But would appreciate other perspectives, particularly from @etpinard.",
    "created_at": "2018-09-12T16:12:34Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2994#issuecomment-420707281",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2994",
    "updated_at": "2018-09-12T16:12:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yep, this is great, no need to wait on the stragglers before merging this. 💃 ",
    "created_at": "2018-09-12T14:35:52Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2850#issuecomment-420671851",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2850",
    "updated_at": "2018-09-12T14:35:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> On the other hand, maybe we don't need to disable automatic typesetting anymore. I'll try removing `skipStartupTypeset: true` and see if that breaks anything for Plotly.js with this change in place.\r\n\r\nThat might be a breaking change for some users. I would love it if we could figure out a way to allow you to invoke that mode (and/or other config changes that we would then reset just like you're doing here with the renderer), but that seems tricky given that we're making the current MathJax config call on load. I suppose we could imagine deferring that call to the first `Plotly.plot`, or even to the first time we encounter LaTeX, in which case there could be a plotly.js `config` parameter allowing you to modify the MathJax config...",
    "created_at": "2018-09-12T01:02:11Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2994#issuecomment-420476156",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2994",
    "updated_at": "2018-09-12T01:02:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yes, I see the issue repeatably now.\r\n\r\nDon't worry about forking now - I almost didn't mention it because we really do appreciate your help in zeroing in on the problem. The state you left it in is great, it shows the bug in a clear and straightforward way. Just something to keep in mind for future issues 😄 ",
    "created_at": "2018-09-11T23:29:41Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2999#issuecomment-420460302",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2999",
    "updated_at": "2018-09-11T23:29:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ha, I was about to write \"crazy, I see the failure in the last plot in your codepen, one of the ones labeled 'Always seems to work'\" but I guess that was as you were editing it. Small style point: we very much appreciate your effort to find a way to make this bug reproducible - thanks very much! but once you've posted a codepen here, it's better to fork it and edit the copy, so the written record here is clear on what we should expect to see at any given link.\r\n\r\nI see the points disappear (but remain active for hover, as you describe) consistently on both Chrome and FF on my mac.",
    "created_at": "2018-09-11T22:44:07Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2999#issuecomment-420451114",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2999",
    "updated_at": "2018-09-11T22:44:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@codrut3 thanks for the PR, this is looking really strong!\r\n\r\nOne other question that occurred to me is how will these titles interact with outside slice labels? These labels already have known open issues (eg https://github.com/plotly/plotly.js/issues/75) so I won't be surprised if the answer is \"not well\" and I don't think we need to find a solution to that now, but it's worth keeping in mind and asking whether there's anything simple we could do to improve it in the short term.",
    "created_at": "2018-09-11T20:40:20Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2987#issuecomment-420417807",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2987",
    "updated_at": "2018-09-11T20:40:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "🛠 💃 ",
    "created_at": "2018-09-11T17:11:40Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2996#issuecomment-420349096",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2996",
    "updated_at": "2018-09-11T17:11:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Beautiful! 💃 ",
    "created_at": "2018-09-11T16:42:04Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2995#issuecomment-420339544",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2995",
    "updated_at": "2018-09-11T16:42:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 \r\nMake sure we add a mention of this to https://plot.ly/javascript/plotlyjs-events/",
    "created_at": "2018-09-11T16:37:40Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2986#issuecomment-420338162",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2986",
    "updated_at": "2018-09-11T16:37:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice fix. 💃 ",
    "created_at": "2018-09-11T16:32:24Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2993#issuecomment-420336497",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2993",
    "updated_at": "2018-09-11T16:32:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @jonmmease - I had gone looking for a way to query and reset the renderer a while back and failed... so thanks for finding this!\r\n\r\nThe mocks that include LaTeX have changed - presumably because of the explicit font. Presumably explicit is more robust than implicit, and this one looks to be slightly more compact which is probably better for backward compatibility than if it had gotten larger... @etpinard are you OK with this change? If so we just need to regenerate these baseline images.\r\n\r\nrelated: #2300, #2403 - does this solve those issues, or is there more required? Can we write a test for this, something like:\r\n```js\r\nMathJax.Hub.Queue(\r\n    ['setRenderer', /* not SVG */ ... ],\r\n    function() { \r\n        Plotly.newPlot(gd, /* something with MathJax */).then(function() {\r\n            expect(renderer).toBe(/* whatever we set it to above */);\r\n        })\r\n       .catch(failTest).then(done);\r\n    }\r\n);\r\n```",
    "created_at": "2018-09-11T16:26:33Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2994#issuecomment-420334660",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2994",
    "updated_at": "2018-09-11T16:26:33Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Personally, I think emitting an event is better, but maybe consistency with gl3d is best\r\n\r\n👍 for events in all cases.\r\n\r\n> I'm not sure if there's a way to actually test this.\r\n\r\nMaybe not to cause a real context loss, but can we mock the native event, just so we can be sure the plotly event is triggered on *any* of the canvases losing their context?",
    "created_at": "2018-09-10T19:38:33Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2986#issuecomment-420034406",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2986",
    "updated_at": "2018-09-10T19:38:33Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 ",
    "created_at": "2018-09-10T19:34:48Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2977#issuecomment-420033251",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2977",
    "updated_at": "2018-09-10T19:34:48Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks great! Nice detective work @antoinerg 💃 ",
    "created_at": "2018-09-07T18:54:52Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2983#issuecomment-419533419",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2983",
    "updated_at": "2018-09-07T18:54:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> For testing, I added a baseline image. Should I do this in jasmine instead?\r\n\r\nAn image is the way to go here, since it's a presentation element, so it's harder (and more fragile in case we change element structure) in jasmine to be sure we're testing the right thing.",
    "created_at": "2018-09-07T18:34:35Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2983#issuecomment-419528260",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2983",
    "updated_at": "2018-09-07T18:34:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Alright, looks great now - thanks for the quick turnaround on my comments! 💃 ",
    "created_at": "2018-09-07T14:14:21Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2974#issuecomment-419452787",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2974",
    "updated_at": "2018-09-07T14:14:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Closed by #2960 ",
    "created_at": "2018-09-07T14:09:09Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1217#issuecomment-419451203",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1217",
    "updated_at": "2018-09-07T14:09:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard beautifully done. Nice catch with the bar/scatter ordering, looks like we missed that before because the traces in the related mock are semi-transparent...\r\n\r\nI like the way you collected `TODO` items in a commit at the end. Not sure if I'm organized enough to do that myself but I can try 😅 ",
    "created_at": "2018-09-07T13:57:10Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2977#issuecomment-419447545",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2977",
    "updated_at": "2018-09-07T13:57:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Proposal from @etpinard, came up during stacked area #2960:\r\nMake `'fill'` part of the mode flaglist, then the `fill` value just determines *how* to fill, not *whether* to fill.\r\n- :hocho: `fill: 'none'`\r\n- add `'fill'` flag in scatter `mode`\r\n- add that `'fill'` flag the `mode` default whenever `stackgroup` is set\r\n- coerce scatter `fill` (that maybe we should call `fills` similar to the `markers` and `lines` attribute containers) only if `'fill'` is part of `mode`\r\n- make `tonexty` the only valid `fills` value when `stackgroup` is set (`tonextx` for horizontal stacks). `Lib.log` something if some other value is set.\r\n\r\nI might even go one step further, now that we have `orientation` (which is so far just used by the `stackgroup`, and if we did this it would still only have one value *within* a stack group but outside that it would be a per-trace attribute), we could 🔪 the `'x'` and `'y'` suffixes, determine that from `orientation`, and just let fill take values `'tozero'`, `'tonext'`, and `'toself'`",
    "created_at": "2018-09-07T02:23:32Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/420#issuecomment-419299905",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/420",
    "updated_at": "2018-09-07T02:23:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Very nice 💃 ",
    "created_at": "2018-09-05T23:33:51Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2954#issuecomment-418914648",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2954",
    "updated_at": "2018-09-05T23:33:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Could we make sure the documentation clearly explains whether or not stack normalization applies across or within subplots please? I don't know the answer but I'd like to and I think we should canonicalize it in the docs!\r\n\r\nWithin subplots (and within stack groups, if there are multiple on one subplot) -> https://github.com/plotly/plotly.js/pull/2960/commits/00d7d2255437fc803a6c4793478313794651a840",
    "created_at": "2018-09-05T19:22:13Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2960#issuecomment-418851079",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2960",
    "updated_at": "2018-09-05T19:22:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@antoinerg thanks for pushing on this one, it's looking good!\r\n\r\nI'm not sure how feasible it is to write a test for my [async comment](https://github.com/plotly/plotly.js/pull/2974#discussion_r215378845) - you could try resizing synchronously after `Plotly.plot` returns but that might not do it (or might not do it consistently). I guess perhaps we could artificially inject a delayed promise into `gd._promises` but... might be too hacky to be worth it.\r\n\r\nBut the comment about [purging and replotting](https://github.com/plotly/plotly.js/pull/2974#discussion_r215381319) we can definitely test, also lets test that we have exactly one resize handler and one redraw after making a plot, then editing something (causing a new `Plotly.plot` call), and THEN resizing the window. That one looks like it already works, lets keep it that way 😈 ",
    "created_at": "2018-09-05T18:44:42Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2974#issuecomment-418838510",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2974",
    "updated_at": "2018-09-05T18:44:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Well, *mostly* as intended... they're showing up horizontal (which requires them to be weirdly shifted vertically)\r\n![screen shot 2018-09-05 at 9 32 53 am](https://user-images.githubusercontent.com/2678795/45096530-ba5a8680-b0ee-11e8-946a-2f7c1f52c1aa.png)\r\n\r\n\r\nwhen they should be showing up tilted, which seems to me much more readable:\r\n![screen shot 2018-09-05 at 9 31 38 am](https://user-images.githubusercontent.com/2678795/45096481-a44cc600-b0ee-11e8-97f4-88b1d8f9f6db.png)\r\n",
    "created_at": "2018-09-05T13:35:29Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2970#issuecomment-418732786",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2970",
    "updated_at": "2018-09-05T13:35:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @konieczny9lives! There's also a very strange interaction between the two plots in that codepen, that sometimes (for example, click \"show closest data on hover\" in the top modebar) the hover labels for the top plot show up at the positions they should have for the bottom plot !?!\r\n![screen shot 2018-09-05 at 9 08 31 am](https://user-images.githubusercontent.com/2678795/45095283-b4af7180-b0eb-11e8-8ade-f7135dcced45.png)\r\n",
    "created_at": "2018-09-05T13:12:23Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2970#issuecomment-418725197",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2970",
    "updated_at": "2018-09-05T13:12:23Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Confirmed - thanks for the clear reproduction @mikesmith1611!",
    "created_at": "2018-09-05T13:00:55Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2971#issuecomment-418721643",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2971",
    "updated_at": "2018-09-05T13:00:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> So from a high-level API standpoint, why do we want `stackgroup` again? Is it just so as to match a potential future equivalent for `bar`? Because as a standalone API it's kind of ungainly, and I can't imagine a use-case for have some areas stacked and some not in the same plot... ?\r\n\r\nIt's unusual for sure, but I wouldn't want to rule it out. What if you have one stack series for data and another for fits? Then one stack would need its fill removed, since they're overlapping. Or prediction/extrapolation - these might not overlap but still you might want different styling for corresponding items in each stack. Or two back-to-back stacks, like those plots that have male on one side and female on the other, with the axis in the middle (we could manage that one with an analog of `barmode: 'relative'`, or perhaps even better two axes with a constraint so you don't need to flip your data... but you see the point)\r\n\r\n> What do you think about adding a `'stack'` flag to scatter `mode` to make it easier to toggle stacked areas on and off?\r\n\r\n`mode` is otherwise all about *how* to draw the series, not *where* to draw it... and the one bit of *how* that stacking impacts (`fill`) isn't even part of `mode`.\r\n\r\nBut, perhaps both of these concerns could be assuaged by making a boolean `stack` attribute, then giving `stackgroup` a default value but only coercing it when `stack` is `true`? (and for completeness, if you provide only a `stackgroup` let `stack` default to `true`). That way the usual behavior would be to just use the boolean but the full flexibility would still be available (if perhaps buried in the UI)",
    "created_at": "2018-09-05T03:06:20Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2960#issuecomment-418584839",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2960",
    "updated_at": "2018-09-05T03:06:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for the PR (and demonstration of the issue) @ErwanMAS ! Looks like a good solution to me, just two things I'd like to add to it:\r\n- [ ] Can you include a few more invalid values in the mock - `undefined`, `''`, `'N/A'` perhaps? I'm assuming they've all been turned into the same value by the time we get to your new code, but while we're here lets verify that.\r\n- [ ] Do the same for `tozerox`",
    "created_at": "2018-09-04T19:01:22Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2965#issuecomment-418481204",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2965",
    "updated_at": "2018-09-04T19:01:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Would be nice to know what https://github.com/a-vis/gl-text/commit/95036634910f6801b0eb583a58ab286c98b0c500 was about @dy - and potentially add a test that requires it assuming it was a bugfix - but as it doesn't break any of our existing tests I'm happy to take this as is.\r\n💃 ",
    "created_at": "2018-09-04T15:54:35Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2956#issuecomment-418421259",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2956",
    "updated_at": "2018-09-04T15:54:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@oricou that’s v2 of `plotly.py`. `plotly.js` is still on v1. ",
    "created_at": "2018-09-04T13:34:46Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1561#issuecomment-418368989",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1561",
    "updated_at": "2018-09-04T13:34:46Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I feel like the number of folks that want it removed outweighs the number of folks that see the benefit of having it, although I only have anecdotal evidence.\r\n\r\nIt's hard to tell, given the selection bias (we'll only ever hear from the people who don't like it).\r\n\r\n> If not, could we make a new key to remove it?\r\n\r\nDefinitely. I wonder if we can do something generic like `legendstyle: {mode: 'lines+markers'}` so you could modify any of the relevant style attributes? Related: #1701 - though I'm not sure if that would quite fit into `legendstyle`, as the label doesn't exist on the plot itself.",
    "created_at": "2018-09-03T19:23:14Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2967#issuecomment-418180764",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2967",
    "updated_at": "2018-09-03T19:23:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> It might be nice in some cases to also push labels upward to avoid collisions, but at the moment this only pushes things down.\r\n\r\nNot sure how easy it will be to reuse, but check out `hoverAvoidOverlaps` which does shift both ways. \r\n\r\nhttps://github.com/plotly/plotly.js/blob/19f3800bac848e702948fcc32302ded56ea1cdb7/src/components/fx/hover.js#L963",
    "created_at": "2018-09-01T16:52:39Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2963#issuecomment-417872453",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2963",
    "updated_at": "2018-09-01T16:52:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "#2956 will move us back to `gl-text`, presumably will get finished up next week... but as @etpinard points out there are other scoped packages in our dependencies (and we can't commit to keeping them out since they're becoming more widely used in the community), so it's not clear this will really solve your issue. Lots of people have encountered issues like this, and the only robust solutions I see seem to be at the proxy/network level, eg https://github.com/angular/angular/issues/8422",
    "created_at": "2018-08-31T22:34:43Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2952#issuecomment-417805958",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2952",
    "updated_at": "2018-08-31T22:34:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @codrut3 - very nice!\r\nGrouping matching values into a single box is a particularly nice touch 🎉 \r\n\r\n`hoveron` in other trace types answers the question \"which objects do you get hover info for\" - for example for `box` it's a `flaglist` with options `['boxes', 'points']` - meaning you can choose `'boxes'` to just hover on the boxes, `'points'` to just hover on the individual sample points, or `'boxes+points'` to show info for either/both. That's not really what you're doing here - it's always the same ohlc/candlestick combination object the user is hovering on, you're just controlling how the information about that object is displayed, and it wouldn't make sense to show both versions simultaneously (in this case `'ohlc+points'` - that would just be redundant). Before we discuss an attribute name, type, and values that would make sense for this, I'll bring up what I said in #2706:\r\n> perhaps even just change to 4 separate tooltips as you suggest, rather than making this configurable\r\n\r\n@etpinard @chriddyp @cldougl what do you think? Do we need to keep the existing behavior (a single hover label containing all four values) and allow this as an option, or should we just switch to this version? The best argument I can think of for the existing version is if users like to be able to read off the four values in a consistent order (top to bottom open, high, low, close) but I'm not really a user of this chart type myself.\r\n\r\nTo your other question:\r\n> I defined spikeDistance for the points that the functions returns, even though I am not sure how it's used.\r\n\r\nThis controls when to show spike lines, and which ones to show. Click \"Toggle spike lines\" in the modebar. This is different from `distance` because even in \"compare\" hovermode (where only the x value of the cursor is used to decide which objects to show hoverinfo for) we only show at most one spikeline. I'll play with it when this is further along to be sure, but as long as the spikelines in the new mode behave the same as in the existing version you should be fine.\r\n\r\n(BTW happy Labor day 😅 - we may not hear back from other folks until next week)",
    "created_at": "2018-08-31T20:15:57Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2959#issuecomment-417777814",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2959",
    "updated_at": "2018-08-31T20:15:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Fantastic job @etpinard - look and feel is beautiful, you've got more than enough here for a v1. Just a few comments above and we'll be ready to go!",
    "created_at": "2018-08-31T03:23:03Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2954#issuecomment-417539888",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2954",
    "updated_at": "2018-08-31T03:23:03Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I can switch back `@etpinard/gl-text` to `gl-text`, but I'm afraid it won't be enough to solve the problem.\r\n\r\nAh right. Well, we should get back on the main trunk of `gl-text` anyway.",
    "created_at": "2018-08-30T13:49:40Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2952#issuecomment-417326181",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2952",
    "updated_at": "2018-08-30T13:49:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@Michaelzvu are you behind a proxy by any chance?\r\nhttps://stackoverflow.com/a/44729575/9188800\r\n> Found out this was caused by my Company's proxy.\r\n>\r\n> The redirection causes the escaped '/' to become un-escaped, so it was hitting https://registry.npmjs.org/@angular/core rather than https://registry.npmjs.org/@angular%2fcore\r\n\r\n@etpinard @dy do we still need to be pointing at `@etpinard/gl-text` or can we put it back to `gl-text`?",
    "created_at": "2018-08-30T13:37:40Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2952#issuecomment-417322195",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2952",
    "updated_at": "2018-08-30T13:37:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Is it correct, that when clickmode flag list is missing event (i.e. just select), neither plotly_click nor plotly_selected should fire?\r\n\r\nYes, agreed.",
    "created_at": "2018-08-29T18:09:07Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2944#issuecomment-417050237",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2944",
    "updated_at": "2018-08-29T18:09:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nicely done @antoinerg! 💃 ",
    "created_at": "2018-08-29T14:05:21Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2949#issuecomment-416966034",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2949",
    "updated_at": "2018-08-29T14:05:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Case 1: I would suggest that this is how xaxis.showline should work anyway, if there are more than 2 axes.\r\n\r\nI could imagine making that an option, but not the default - A quick image search [\"graph many y axes\"](\r\nhttps://www.google.com/search?biw=1430&bih=943&tbm=isch&sa=1&ei=0vuFW_TBA8SQ_QburJ-4Ag&q=graph+many+y+axes&oq=graph+many+y+axes&gs_l=img.3...25616.27920.0.28840.17.17.0.0.0.0.195.1749.9j7.16.0....0...1c.1.64.img..1.10.1112...0j0i67k1j0i8i30k1.0.zBpdQ8IQ4eE) shows a whole lot of examples that all match our current behavior. Not to say that popularity *makes* it the correct behavior, but I've always understood the axis line to either indicate \"here's the range of positions encoded by this axis,\" or closely related, to outline the plot area - and plotly.js toggles between these two behaviors as appropriate, but the difference is minor. Unless and until we make an option specifically for the behavior you're describing, I think a shape is still your best bet.\r\n\r\n> Case 2: if I draw my threshold line as \"just a line shape\", then I'll lose the ability to see the tooltips, it won't appear in the Legend, and it won't get switched on and off along with the dataset by legendgroup.\r\n\r\nI see - if you want it in the legend, with tooltips, then I think you do want this to be data. For now I would suggest just moving the first data point over a bit (`'2018-08-26 12:00'` would be the left edge).\r\n\r\nJust to link these ideas together: there are some features we've talked about but haven't yet implemented that could be useful to you - allowing individual traces to specify that they don't contribute to autorange for example (which I thought had been discussed in #1876 but I don't see it) and hover on lines #1960.",
    "created_at": "2018-08-29T02:20:19Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2948#issuecomment-416801315",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2948",
    "updated_at": "2018-08-29T02:20:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Here's the situation I think you're describing https://codepen.io/alexcjohnson/pen/XPjXRV?editors=1010, but I don't see that behavior, it all looks fine to me - light colors get dark hover text, dark colors get white hover text:\r\n![screen shot 2018-08-28 at 9 46 30 pm](https://user-images.githubusercontent.com/2678795/44760227-d9b04d00-ab0b-11e8-9c09-6c2461ae55fd.png)\r\n\r\nCan you provide a reproducible example?",
    "created_at": "2018-08-29T01:48:16Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2947#issuecomment-416795867",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2947",
    "updated_at": "2018-08-29T01:48:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @dsmmcken - this issue also pertains to bars:\r\n![screen shot 2018-08-28 at 6 46 52 pm](https://user-images.githubusercontent.com/2678795/44755142-da88b500-aaf2-11e8-990f-e2232e1e448d.png)\r\nWe should:\r\n- make the default flip from black to white per slice the same way hover labels do\r\n- allow an array for font properties - was left as a TODO and never followed up on:\r\nhttps://github.com/plotly/plotly.js/blob/bff736d1efdbb471e212374c50c12044ccedcad5/src/traces/pie/attributes.js#L172\r\n\r\nBars already allow array font properties:\r\n![screen shot 2018-08-28 at 6 56 27 pm](https://user-images.githubusercontent.com/2678795/44755426-2556fc80-aaf4-11e8-87e6-99082e983c25.png)\r\nBut there's a bug (see trace 0 above, the lower set of positive bars) where `insidetextfont` is ignored when you explicitly set `textposition: 'outside'` but the text gets drawn inside anyway because another set of bars got stacked on top.\r\nhttps://codepen.io/alexcjohnson/pen/aamzMP?editors=1010",
    "created_at": "2018-08-28T23:10:34Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2951#issuecomment-416769762",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2951",
    "updated_at": "2018-08-28T23:10:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Heh to add to the confusion a little bit more - on my Mac, Chrome and Safari use different cursors for everything we're discussing here, but FF has the same cursors for `ns-resize` and `row-resize` (both have the line across the middle) and for `ew-resize` and `col-resize`. But I see (in Browserstack anyway, would be nice if someone could confirm this natively at https://developer.mozilla.org/en-US/docs/Web/CSS/cursor) that FF on Windows (tested with FF61 on Windows 7 and 10) has different cursors for these four even though `(n|s|ns)-resize` all look the same there.\r\n\r\nDoesn't change the conclusion of how to fix the issue, but it's interesting (and frustrating) to notice that these inconsistencies don't depend purely on OS nor purely on browser but the combination of the two. At least I haven't (yet) seen any dependence on browser or OS version, at least across those we support.\r\n\r\nSo to be clear: the fix is to switch `ns-resize` to `row-resize` and `ew-resize` to `col-resize` on Windows only. If anyone on a different OS has contravening data please post it here! (@etpinard does Linux behave like a Mac?)",
    "created_at": "2018-08-28T21:02:06Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2942#issuecomment-416739256",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2942",
    "updated_at": "2018-08-28T21:02:06Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I think you can do both of these already using `layout.shapes`.\r\n\r\nCase 1: turn off `xaxis.showline` and replace it with a shape:\r\n```js\r\n{\r\n  type: 'line',\r\n  x0: 0, // or whatever the leftmost axis `position` is\r\n  x1: 1,\r\n  y0: 0, y1: 1,\r\n  xref: 'paper',\r\n  yref: 'paper'\r\n}\r\n```\r\n\r\nCase 2:\r\n```js\r\n{\r\n  type: 'line',\r\n  x0: 0.1, x1: 1, // or matching `xaxis.domain`\r\n  y0: 5, y1: 15, // your data value\r\n  xref: 'paper',\r\n  yref: 'y2',\r\n  line: {dash: 'dash'}\r\n}\r\n```",
    "created_at": "2018-08-28T14:59:18Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2948#issuecomment-416619482",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2948",
    "updated_at": "2018-08-28T14:59:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "For the most part we do that - here it is for scatter, where you can see the orange color is light enough to trigger dark text but the (darker) blue and the black common label get white text.\r\n![screen shot 2018-08-28 at 10 30 17 am](https://user-images.githubusercontent.com/2678795/44729714-65df5780-aaad-11e8-87bd-3baaac47c6c3.png)\r\nBut I wouldn't be surprised if we failed to do this in some cases - What context are you seeing this?",
    "created_at": "2018-08-28T14:33:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2947#issuecomment-416608257",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2947",
    "updated_at": "2018-08-28T14:33:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Perhaps, we could make could only apply that change if\r\n> \r\n> ```js\r\n> navigator.platform.indexOf('Win') === 0\r\n> ```\r\n\r\nPlausible. I had commented:\r\n\r\n> just saying \"change behavior in Windows\" doesn't seem robust\r\n\r\nBut if we can convince ourselves that this is really the right criterion - ie it's *just* windows that omits the single-sided versions - I'd be OK with it.\r\n\r\nI suppose we could also try to [make our own cursors](https://codepen.io/netsi1964/details/DsAhE) but that seems to have some compatibility issues so probably not a good idea for now.",
    "created_at": "2018-08-27T19:33:24Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2942#issuecomment-416341661",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2942",
    "updated_at": "2018-08-27T19:33:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Wow, look at that... Windows doesn't seem to allow any of the single-sided cursors. Thanks for bringing this up @siakouchine! If I visit https://developer.mozilla.org/en-US/docs/Web/CSS/cursor on Browserstack, seems like all browsers and all Windows versions just silently use the double-sided resize cursors, even though the computed styles still show the single-sided version. There's this rather unhelpful note:\r\n> In some environments, an equivalent bidirectional resize cursor is shown. For example, `n-resize` and `s-resize` are the same as `ns-resize`.\r\n\r\nI guess \"some environments\" includes all of Windows 😞 Note that this impacts cartesian axes as well, where on x axes the left and right ends are supposed to be `w-resize` and `e-resize` respectively (and similarly on y axes). Shape resizing also uses the single-sided cursors but I don't think the effect is ambiguous.\r\n\r\nSo... how to fix this? I'd like to continue supporting all three where they're available, but I don't see any way to tell what cursor *actually* gets rendered, and just saying \"change behavior in Windows\" doesn't seem robust. I suppose we could switch `ns-resize` to `row-resize` (and `ew-resize` to `col-resize`)... so it would still indicate the motion direction, with the (meaningless to us) bars in the middle showing that something changed. Not ideal, as the bars imply that something else is going on, but it would at least show when you moved from one region to the next.\r\n\r\n@etpinard thoughts?",
    "created_at": "2018-08-27T17:07:22Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2942#issuecomment-416296120",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2942",
    "updated_at": "2018-08-27T17:10:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "superseded by #2945 ",
    "created_at": "2018-08-27T16:30:09Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2877#issuecomment-416285009",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2877",
    "updated_at": "2018-08-27T16:30:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I am using the latest version, and at https://plot.ly/javascript/parallel-coordinates-plot/ I see the same behavior shown in my gif above. Perhaps it's a browser issue? I was under the impression that all relevant browsers supported these cursors https://developer.mozilla.org/en-US/docs/Web/CSS/cursor but maybe not? What browser and OS are you using?",
    "created_at": "2018-08-27T16:12:44Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2942#issuecomment-416279611",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2942",
    "updated_at": "2018-08-27T16:12:44Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @illtud, really appreciate you taking the time to review! @HywelMJ let me know if you'd like to swap in 'olin' or keep 'tres', and then I'll make a new PR.",
    "created_at": "2018-08-23T21:46:14Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2877#issuecomment-415581521",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2877",
    "updated_at": "2018-08-23T21:46:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "We do, don't we? We use `n-resize` and `s-resize` for resizing the top and bottom, and `ns-resize` for dragging it. Is that not showing up for you?\r\n\r\n![parcoords cursors](https://user-images.githubusercontent.com/2678795/44547879-6d3be500-a6ea-11e8-9484-309d90375736.gif)\r\n",
    "created_at": "2018-08-23T19:39:20Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2942#issuecomment-415545659",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2942",
    "updated_at": "2018-08-23T19:39:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "True, I don't see a flicker in the `click` animation anymore. But I see a flicker in the `ctrl-click`/`cmd-click` animation - in fact I see that in both FF and Chrome. Was that always there?\r\n![flicker](https://user-images.githubusercontent.com/2678795/44544312-d36f3a80-a6df-11e8-9131-e50481866ece.gif)\r\n",
    "created_at": "2018-08-23T18:22:23Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1628#issuecomment-415519471",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1628",
    "updated_at": "2018-08-23T18:22:23Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Whew, fixing the timezone issue was harder than it should have been, thanks for persevering there! This looks great. 💃 \r\nOddly though, it seems like a wash in terms of total test time - `build` is faster but `test-jasmine` and `test-jasmine2` are both slower... oh well, still better to be up to date.",
    "created_at": "2018-08-23T16:10:34Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2934#issuecomment-415474588",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2934",
    "updated_at": "2018-08-23T16:10:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for tracking this down and bearing with my iterative comments :) Looks great now. 💃",
    "created_at": "2018-08-22T20:22:44Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2939#issuecomment-415166831",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2939",
    "updated_at": "2018-08-22T20:22:44Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Can you demonstrate in a codepen? I can't figure out how to reproduce the effect you're describing. By default the margins expand to fit wherever you drag it, but if I turn that off (`margin.autoexpand: false`) it always seems to jump back onto the plot when I let go of it.\r\n![legend-off-edge](https://user-images.githubusercontent.com/2678795/44485789-c1c65e00-a61f-11e8-96d7-0dade754d75e.gif)\r\n",
    "created_at": "2018-08-22T19:28:23Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2940#issuecomment-415151133",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2940",
    "updated_at": "2018-08-22T19:28:23Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Check out https://plot.ly/javascript/reference/#pie-outsidetextfont\r\nPlease direct \"how to\" questions to https://community.plot.ly/c/plotly-js so we can reserve github for feature requests and bug reports. Thanks!",
    "created_at": "2018-08-22T15:56:47Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2937#issuecomment-415083811",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2937",
    "updated_at": "2018-08-22T15:56:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The issue is `true` and `false` are supposed to be boolean values, but somehow by the time they make it here you have the *string* `'FALSE'` which is invalid so we revert to the default value (`true`). Not sure if this is an issue with the R API or something in your code - you do have the correct `true` in the `'All T'` button which makes me think perhaps it's a problem with the R API and mixed-type arrays? Anyway I would open an issue over at https://github.com/ropensci/plotly",
    "created_at": "2018-08-21T19:01:11Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2935#issuecomment-414785962",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2935",
    "updated_at": "2018-08-21T19:01:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 ",
    "created_at": "2018-08-21T18:42:29Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2931#issuecomment-414780049",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2931",
    "updated_at": "2018-08-21T18:42:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Huh... the first test failure is just a slightly different rounding result - should be able to just increase the tolerance. But the second, we still have the explicit timezone-setting step:\r\n![screen shot 2018-08-21 at 2 09 38 pm](https://user-images.githubusercontent.com/2678795/44420504-1c8e8580-a54c-11e8-9658-2e8770ec87f8.png)\r\nBut this is apparently not being honored by Chrome? There must be some other way to get it to use a timezone...\r\n\r\nI see two timezone switches in the [chrome flags](https://peter.sh/experiments/chromium-command-line-switches/#disable-system-timezone-automatic-detection):\r\n`--disable-per-user-timezone`\r\n`--disable-system-timezone-automatic-detection`\r\nHard to tell if one of those would get us back to the previous behavior of \"just look at `/etc/localtime`\" but we could try.\r\n\r\nActually, looking at where that page [got its info from](https://cs.chromium.org/chromium/src/chromeos/chromeos_switches.cc), maybe this is the new one that would help us:\r\n`--disable-fine-grained-time-zone-detection`",
    "created_at": "2018-08-21T18:24:12Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2934#issuecomment-414774233",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2934",
    "updated_at": "2018-08-21T18:24:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 is still dancing.",
    "created_at": "2018-08-21T15:56:38Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2933#issuecomment-414725934",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2933",
    "updated_at": "2018-08-21T15:56:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Another (non-blocking) thought to speed up `test-jasmine2` - have only the final retry run to completion, let all the others fail fast.",
    "created_at": "2018-08-21T13:23:40Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2933#issuecomment-414672047",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2933",
    "updated_at": "2018-08-21T13:23:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice! 💃 \r\n\r\nNon-blocking: This leaves `test-jasmine2` a bit long, would be great if we can shift the burden a bit onto other suites, to get the total time under 10 minutes. But not now, lets merge this and get ourselves up and running again!",
    "created_at": "2018-08-21T12:34:16Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2933#issuecomment-414657977",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2933",
    "updated_at": "2018-08-21T12:34:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> The handling is inconsistent, depending on the tag.\r\n\r\nYes, we have an open item to document this better https://github.com/plotly/documentation/issues/766\r\nCurrently there are a few references to this system, eg https://plot.ly/javascript/reference/#layout-annotations-text and https://help.plot.ly/adding-HTML-and-links-to-charts/ but they have not kept pace with the available options, and they're not referenced from most of the places you can use them (which is essentially all the svg-based text rendering in the library). As a general rule, *style* tags are supported, but *layout* and *content* tags are not. See also https://github.com/plotly/plotly.js/issues/1387 and https://github.com/plotly/plotly.js/issues/2515\r\n\r\n> An end user can certainly inject raw html into a chart\r\n\r\nCertainly by using your own javascript on your own page you can add whatever new elements you want, but you cannot inject any raw HTML or javascript using just the figure `data` and `layout` objects, which are the portable parts. If I'm wrong about that statement, that would constitute a security hole and I'm eager to hear about it!\r\n\r\nAnyway I'll have a fix shortly for the immediate issue of decoding entities improperly. Turns out there are also some easy performance and functionality gains to be had.\r\n\r\nWe are not likely to support the full set of named HTML entities, just the special characters (&, <, >) that are difficult to enter explicitly, and a few that we've supported for a long time (μ, nbsp, ×, ±, °) but I think we can support all of the numbered entities. So for any named entity not in that list, just use a unicode literal or the numbered entity. There is a way to get the browser to decode arbitrary named entities, eg https://gomakethings.com/decoding-html-entities-with-vanilla-javascript/, but it involves `node.innerHTML` and I don't want to take the chance of this introducing a security hole even though I *think* we could do it safely... just seems to be an unnecessary risk.",
    "created_at": "2018-08-20T18:41:06Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2927#issuecomment-414420361",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2927",
    "updated_at": "2018-08-20T18:41:06Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @RichardNeill - you're right, we're prematurely decoding those entities. It's not really *double* conversion, since we're not creating HTML at all, but directly instantiating corresponding SVG elements.\r\n\r\nI don't believe there are any security holes here (if you do find one please do let us know!), but that is the reason we're extra constrained - because plotly.js is used on our public-facing platform, we can't allow users to take responsibility for security of their own plots, we need the conversion to be safe no matter what string is supplied.",
    "created_at": "2018-08-20T14:43:18Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2927#issuecomment-414340903",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2927",
    "updated_at": "2018-08-20T14:43:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Good idea. To be precise this would be three scales, since we have positive sequential, negative sequential, and diverging. ",
    "created_at": "2018-08-18T19:22:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2925#issuecomment-414080727",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2925",
    "updated_at": "2018-08-18T19:22:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Keepin' up with the Joneses. 💃 ",
    "created_at": "2018-08-17T21:44:55Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2923#issuecomment-413996020",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2923",
    "updated_at": "2018-08-17T21:44:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Interesting, kind of a mix of pie and the upcoming `barpolar` #2810. No, I hadn't seen this before, thanks for bringing it up.\r\n\r\nIt suffers from the same ambiguity as `barpolar` will, about whether data is encoded in radius (to be precise, radial thickness) or in area (or perhaps area fraction). In contrast the [Marimekko chart](https://www.contextures.com/excelmarimekkochart.html) is unambiguous in this regard, for displaying the same kinds of data. But people like circles, whatcha gonna do. Anyway Marimekko is also [not yet implemented here](https://github.com/plotly/plotly.js/issues/2221).",
    "created_at": "2018-08-17T21:27:06Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2901#issuecomment-413992709",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2901",
    "updated_at": "2018-08-17T21:27:06Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ha, we're explicit in the code about treating these the same:\r\nhttps://github.com/plotly/plotly.js/blob/f9964468d77e6738e9ff88e20f767c52c0c58dce/src/plots/cartesian/axes.js#L1103\r\nBut you're right, that's weird. Should be an easy add.",
    "created_at": "2018-08-17T18:45:44Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2919#issuecomment-413956051",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2919",
    "updated_at": "2018-08-17T18:45:44Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Alright, more general pattern in https://github.com/plotly/plotly.js/pull/2917/commits/69dee7514ba57d86a044ddf56cb79f4cc142075e, and used it to 🌴 pie in https://github.com/plotly/plotly.js/pull/2917/commits/9ddad4c51463e0f4fab4bd5b19d7193970823a3e and fix choropleth https://github.com/plotly/plotly.js/pull/2917/commits/e8929237c0d0da6f54d6e027b434c9f096f31a90 and scattergeo https://github.com/plotly/plotly.js/pull/2917/commits/521d27fe17533dbf89cfca1bbdd230e037ed6e65 (⚠️ may make a merge conflict with #2918)\r\n\r\nThere are likely still similar hide/show ordering bugs in some other standalone svg trace types, eg `table` and `sankey`, I didn't feel like wading through these right now, and it seems unlikely BOTH that you'd be hiding/showing these AND that they would overlap each other, so doesn't seem like such a big issue with them.",
    "created_at": "2018-08-17T18:19:51Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2917#issuecomment-413949115",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2917",
    "updated_at": "2018-08-17T18:19:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard do you want to use this PR, since it's all about tests, to play with the streamtube test failure? Or make a new one to sort that out?",
    "created_at": "2018-08-17T12:33:58Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2918#issuecomment-413851421",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2918",
    "updated_at": "2018-08-17T12:33:58Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Huh, on my machine as well as on CI `connectgaps_2d` looks fine, but somehow GH can't display it? I don't know why there are image diffs here. `connectgaps_2d` I think I can at least see something that changed at the edges of the clip path, `contour_heatmap_coloring` I really can't even see anything.",
    "created_at": "2018-08-17T03:15:02Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2917#issuecomment-413745770",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2917",
    "updated_at": "2018-08-17T03:15:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Absolutely, this has come up before, would be very useful!",
    "created_at": "2018-08-16T20:04:07Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2915#issuecomment-413668025",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2915",
    "updated_at": "2018-08-16T20:04:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> If we go this route, could the `supplyDefaults` logic modify the input container (from representation to TypedArray) as well as the output? Or is that frowned upon 🙂 Is there currently a better place to do that?\r\n\r\nYeah, we do modify the input in a few places, but we're trying to break that habit. This is why I'm angling for an explicit deserialize step when new data comes in (and an explicit serialize step when saving). And as the serial format is really all about interfacing with the world outside of javascript, it seems like it should be kept separate from the regular pipeline, to be invoked by whatever application it is that's doing that out-of-js interfacing.\r\n\r\n> If the `isPrimitiveTypedArrayRepr` and `primitiveTypedArrayReprToTypedArray` were public so that I could import and use them from FigureWidget then I think that's all I would need.\r\n\r\nOK great, lets see how far we can get that way!",
    "created_at": "2018-08-16T19:25:40Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2911#issuecomment-413657588",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2911",
    "updated_at": "2018-08-16T19:25:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I'll revert 1c8017e so it will remain in git history in case we change our mind later.\r\n\r\nGood call. 💃 ",
    "created_at": "2018-08-16T19:03:32Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2914#issuecomment-413651671",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2914",
    "updated_at": "2018-08-16T19:03:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for bringing this issue to the fore @jonmmease - your format proposal looks great, and I'd be very happy to have this format locked in as an official part of plotly.js. My main concern is where it fits in the pipeline. Leaving the representation in the figure and making conversion part of `coerce` means:\r\n- It will be repeated on every `supplyDefaults` - ie on every change to the plot, which is a lot of overhead\r\n- Potentially a problem for `Plotly.react` as it would create arrays with new identity each time, making it look like the data changed when it didn't.\r\n- We don't have an actual array in the figure object, so calls like this (which you likely don't use, but they are supported) won't work:\r\n```js\r\nPlotly.newPlot(gd,[{y:new Int8Array([1,2,3,4,5])}]);\r\nPlotly.restyle(gd, 'y[2]', 6);\r\n```\r\n\r\nI guess the first two could potentially be fixed by @etpinard's suggestion of moving the conversion to `calc`, but it wouldn't affect the third one. I guess it would be OK in principle to just say we don't support this kind of mutation on the new data type, but doesn't seem ideal.\r\n\r\nAlternatively, would it be reasonable to have official serialization/deserialization routes, that can be used both on a complete figure and on arguments to `restyle` et al, so we can keep `gd.data` in native format? Does that cause a problem for any of the use cases you enumerated above?",
    "created_at": "2018-08-16T18:51:24Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2911#issuecomment-413648262",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2911",
    "updated_at": "2018-08-16T18:51:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The first solution (extending the `toSVG` patch) is certainly the smaller conceptual change. Switching to attributes is certainly appealing though - and we have at least one issue https://github.com/plotly/plotly.js/issues/2355 encouraging us to switch whole hog. My main concern about this is how easy it is to (accidentally) override attributes with css. I worry that we will\r\n- get lots of users complaining that plotly.js doesn't work in their page/app because other css (which they may or may not control but anyway are not expecting will impact plots) is interfering with the plot.\r\n- get users intentionally overriding plot styling with css, thereby breaking portability of these plots\r\n\r\nSo I guess in the end I'd vote for the `toSVG` patch, at least until we have a serious conversation / investigation about attributes.",
    "created_at": "2018-08-16T18:11:00Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2914#issuecomment-413636074",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2914",
    "updated_at": "2018-08-16T18:11:00Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice catch @SKalt - thanks! 💃, will merge once tests pass.",
    "created_at": "2018-08-16T15:53:14Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2913#issuecomment-413594189",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2913",
    "updated_at": "2018-08-16T15:53:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> can you create a jsFiddle with this `layout.grid` sample?\r\n\r\nhttps://codepen.io/alexcjohnson/pen/NBZYpm?editors=0010",
    "created_at": "2018-08-16T15:37:42Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2909#issuecomment-413589147",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2909",
    "updated_at": "2018-08-16T15:37:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "oh hmm there's another way to trigger this same problem...",
    "created_at": "2018-08-16T15:03:05Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2912#issuecomment-413577213",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2912",
    "updated_at": "2018-08-16T15:03:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @SemmZemm - another one related to our rounding precision. Short-term I'm going to just enforce the 0.1ms minimum here, until we decide on something better to do in #2893 ",
    "created_at": "2018-08-16T14:24:53Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2892#issuecomment-413563919",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2892",
    "updated_at": "2018-08-16T14:24:53Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "As long as those console errors don't break other pre-existing functionality then sure, lets merge. 💃 ",
    "created_at": "2018-08-16T14:07:52Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2863#issuecomment-413558063",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2863",
    "updated_at": "2018-08-16T14:07:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@andi1984 I haven't been able to reproduce the `yanchor: 'bottom'` issue you mentioned. Maybe it was solved somewhere else, or maybe I just haven't found the other pieces required to exhibit it... if you still see this please open a new issue with a reproducible example.",
    "created_at": "2018-08-16T14:04:14Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/970#issuecomment-413556866",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/970",
    "updated_at": "2018-08-16T14:04:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Right, like we do for multiple 3D scenes or multiple maps. Worth considering. That said, have you looked at `layout.grid`? If you use that, you can just specify `domain: {row, column}` for each pie trace rather than `domain: {x, y}` which, you're right, is awkward to calculate, but you get the flexibility to decide on side-by-side, top-to-bottom, or any shape of grid.",
    "created_at": "2018-08-16T04:10:35Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2909#issuecomment-413419735",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2909",
    "updated_at": "2018-08-16T04:10:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Can we close this now that #2905 is merged?",
    "created_at": "2018-08-15T20:39:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2902#issuecomment-413328301",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2902",
    "updated_at": "2018-08-15T20:39:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Further discussion needed on if and how to automatically avoid legend/colorbar overlaps\r\n\r\nMoved this to #420 as it would be a breaking change. The rest of this issue is handled in #2891 so closing.",
    "created_at": "2018-08-15T20:33:32Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2880#issuecomment-413326729",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2880",
    "updated_at": "2018-08-15T20:33:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "- Automatic positioning of legend and colorbar(s) so they don't overlap (see #2880)",
    "created_at": "2018-08-15T20:32:14Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/420#issuecomment-413326361",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/420",
    "updated_at": "2018-08-15T20:32:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Hah, maybe I should take that as a sign and just do ^^",
    "created_at": "2018-08-15T20:29:01Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/970#issuecomment-413325433",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/970",
    "updated_at": "2018-08-15T20:29:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Excellent, this is really going to help robustness and usability for splom traces. 💃 ",
    "created_at": "2018-08-15T20:26:44Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2899#issuecomment-413324721",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2899",
    "updated_at": "2018-08-15T20:26:44Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I misread parts of #2880, where I thought the individual contour levels would optionally get corresponding legend items too. Was this ever discussed?\r\n\r\nAh no, that's not what we're after here. Interesting though, kind of an alternative a colorbar, I guess? Related to #1747 and #1785",
    "created_at": "2018-08-15T20:04:56Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2891#issuecomment-413318589",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2891",
    "updated_at": "2018-08-15T20:04:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "LGTM. There's a `karma@3.0.0` now, which doesn't look at all risky to update to, as the only breaking change is [dropping node4](https://github.com/karma-runner/karma/releases) but also doesn't seem to matter to us...\r\n💃 ",
    "created_at": "2018-08-15T18:30:04Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2906#issuecomment-413291508",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2906",
    "updated_at": "2018-08-15T18:30:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 ",
    "created_at": "2018-08-15T14:05:25Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2815#issuecomment-413208080",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2815",
    "updated_at": "2018-08-15T14:05:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice work! 💪 💃 ",
    "created_at": "2018-08-14T20:46:00Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2895#issuecomment-413010138",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2895",
    "updated_at": "2018-08-14T20:46:00Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Right, we have `valType: 'string'` so internally we don't actually use the `values` at all. The code has this comment:\r\n```\r\n    // string type usually doesn't take values... this one should really be\r\n    // a special type or at least a special coercion function, from the GUI\r\n    // you only get these values but elsewhere the user can supply a list of\r\n    // dash lengths in px, and it will be honored\r\n```\r\n\r\nFor now I'd make this a special case, but @etpinard what about folding this into `enumerated` and adding a field like\r\n```js\r\nregExpValues: [/^(\\d+(\\.\\d+)?px,)*\\d+(\\.\\d+)?px$/]\r\n```\r\nie in principle a list of `RegExp` (but we only need one here) that during `PlotSchema.get()` we convert into a list of strings\r\n```js\r\nregExpValues: ['^(\\d+(\\.\\d+)?px,)*\\d+(\\.\\d+)?px$']\r\n```\r\n(which is slightly more complicated than just `.toString()` because that leaves the `/` bookends that other languages won't want... but that's easy to fix.)\r\n\r\nOddly, although we've always used `px` as part of the string, it's really not supposed to be there and seems to just be ignored by all the browsers we support. So I guess we should continue to support it but make it optional and adapt the docs to discourage it. And you can use commas or whitespace between items. And then there's also an option to specify percentages, that I can see occasionally being convenient...\r\nhttps://www.w3.org/TR/SVG/painting.html#StrokeDashing\r\n\r\nSo the ideal regexp might be: `/^(\\d+(\\.\\d+)?(px|%)?(,|\\s))*\\d+(\\.\\d+)?(px|%)?$/`",
    "created_at": "2018-08-14T14:56:20Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2903#issuecomment-412901336",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2903",
    "updated_at": "2018-08-14T14:56:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Heh, recently epoch ms had coarser rounding than strings, until #2847 brought the two into harmony.\r\n3 things to say about this:\r\n- That v1.20.5 behavior is quite fragile, as you can see if you decrease the overall range a bit, among other things. I was unaware that it even worked to the degree that you demonstrate in your fiddle though, so thanks for pointing it out!\r\n- At least until v2 where we intend to alter how epoch ms work (given their strange timezone behavior), we do not intend to allow them any better features than strings. Our official stance is that they are tolerated but discouraged in v1.\r\n- We can certainly have a discussion about how to handle *all* dates though - 0.1ms precision was chosen to work consistently across the whole supported date range, but that's thousands of years and numbers closer to the unix epoch can do better than this. Within a reasonable range of modern dates we should be able to increase the resolution, looks like 1µs is not out of the question in fact for the current time, though it will take some investigation to see how far into the future (and past) we can allow this. And extending this adaptive handling throughout the rest of our date handling machinery will take a fair bit of effort and a lot of testing.",
    "created_at": "2018-08-14T02:29:39Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2893#issuecomment-412733090",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2893",
    "updated_at": "2018-08-14T02:29:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "No problem @HywelMJ - I'm happy to manage the mechanics. Not sure if I'll be able to do it in a way that preserves your authorship in the git history but I'll try!\r\n\r\n@carlmorris @illtud @meigwilym if one of you would review the items in `dictionary` here I'd be grateful - then I'll fix up the indentation and such and make a new PR.",
    "created_at": "2018-08-14T00:53:23Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2877#issuecomment-412716098",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2877",
    "updated_at": "2018-08-14T00:55:33Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Huh, I don't see the error messages @etpinard mentioned in #2882 (either here or in your codepen) though I do see the bug. Very likely related. #2881 I suspect is independent.",
    "created_at": "2018-08-14T00:39:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2900#issuecomment-412713586",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2900",
    "updated_at": "2018-08-14T00:39:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> do you want to try translating the text as well\r\n\r\nThanks very much @HywelMJ! Can you recommend another Welsh speaker who's able to review these?\r\n\r\n> Now I can't seem to be able to push `HywelMJ:master`. Can someone either cherry-pick ac28c34 or open another PR from ac28c34?\r\n\r\nHuh, now github seems confused about where this is coming from altogether, just says:\r\n\r\n> **HywelMJ** wants to merge 4 commits into `plotly:master` from `unknown repository`\r\n\r\nMight be easiest to just remake this as a PR from a local branch. I'm happy to do this (also the new dictionary needs indentation and some other whitespace) but lets see if we can find a reviewer for the dictionary first in this PR.",
    "created_at": "2018-08-13T20:18:09Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2877#issuecomment-412649290",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2877",
    "updated_at": "2018-08-13T20:18:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This is the [`hoveron`](https://plot.ly/javascript/reference/#scatterpolar-hoveron) attribute, which defaults to `fills` in this case. This is consistent with `scatter` behavior, `scatterpolargl` seems to be the odd one out.",
    "created_at": "2018-08-09T13:39:25Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2887#issuecomment-411760520",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2887",
    "updated_at": "2018-08-09T13:39:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "But it's so pretty :)\r\n\r\nConfirmed - in fact, doesn't seem to happen in `lines+markers` mode, only in `lines` with or without `fill`",
    "created_at": "2018-08-09T13:30:49Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2888#issuecomment-411757818",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2888",
    "updated_at": "2018-08-09T13:30:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "(see also #903, which would be the better solution once we et around to implementing it)",
    "created_at": "2018-08-08T19:56:25Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2885#issuecomment-411532012",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2885",
    "updated_at": "2018-08-08T19:56:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for the report @WG- \r\n\r\nOddly enough it works if you don't *tell* it to use `tickmode: 'array'` but provide `tickvals` and `ticktext` anyway so the plot *infers* `tickmode: 'array'` https://codepen.io/alexcjohnson/pen/QBJdQV?editors=0010\r\n\r\nBut you're of course correct that this isn't the intended behavior!",
    "created_at": "2018-08-08T19:54:21Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2885#issuecomment-411531413",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2885",
    "updated_at": "2018-08-08T19:54:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "We don’t really have any way to know that it’s the second trace that contains all the labels in order, and the first trace is missing some. We create a category list from all the labels in the first trace, then add on any we find in the second that weren’t in the first. You can solve this by either including the missing point in the first trace (with zero or `null` for `y`) or making `xaxis.categoryarray`",
    "created_at": "2018-08-08T11:22:25Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2883#issuecomment-411372778",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2883",
    "updated_at": "2018-08-08T11:22:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks good, thanks for doing this. Comment is nonblocking. 💃 ",
    "created_at": "2018-08-07T22:57:12Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2879#issuecomment-411229005",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2879",
    "updated_at": "2018-08-07T22:57:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "When you use Gantt charts for analysis, they contain features that would need to be precomputed if done using a 2-point framework:\r\n- dependencies: you set a duration for a certain task, but rather than a start time you want it to be \"as soon as tasks X, Y, and Z are finished\" and perhaps even resources \"don't allocate Bob to two tasks at once\"\r\n- aggregations: you may want to group tasks, functionally (permitting, engineering, construction, testing...) or in some other way, and display the composite durations, possibly with the option to collapse the details.\r\n\r\nI don't expect we're going to build an entire project management tool inside plotly.js, but some of these would be straightforward extensions that seem to me they'd add a lot of value over simply presenting a static chart, and they would not be possible using this more general trace type.",
    "created_at": "2018-08-07T16:09:19Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2876#issuecomment-411112147",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2876",
    "updated_at": "2018-08-07T16:09:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I suspect that was intended to be the opposite axis `showline` - so we don't show two lines nearly on top of each other. Notice that that's the effect it has - if you move zero just a little away from the end of the axis, the zero line will show up again.\r\n\r\nNice catch @cldougl ",
    "created_at": "2018-08-07T14:49:35Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2874#issuecomment-411083770",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2874",
    "updated_at": "2018-08-07T14:49:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Quiver plots could surely use the same renderer (i.e. the _module.plot method), but I think the attributes for quiver plots should be similar to our 3D vector field trace types (cone and streamtubes) where we have coordinates arrays (x and y) and velocity component arrays (u and v).\r\n\r\nGood point - generally neither head nor tail will be exactly at (x,y) but somewhere in the middle, and velocity doesn't have the same units as (x,y) - actually, depending on how we want it to scale with zoom, it's possible we wouldn't even want the same `plot` method, so we can create a group for each arrow for efficient scaling.\r\n\r\nI guess it's in the same category as Gantt, that we could use this kind of trace to more efficiently *display* a quiver plot, but it's not really natural for the data, would require a bunch of preprocessing.",
    "created_at": "2018-08-07T14:13:53Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2876#issuecomment-411071115",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2876",
    "updated_at": "2018-08-07T14:13:53Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Interesting idea @nicolaskruchten - I like it. I do recall hacking something like this at least once myself:\r\n![fueldensitygraph](https://user-images.githubusercontent.com/2678795/43779099-79a9c450-9a25-11e8-80f6-b06bbed5ea3b.png)\r\n\r\nPerhaps we generalize a bit so `x` and `y` are required, but then you can have `xend` (absolute) or `dx` (relative) or neither (start = end for x), and `yend` or `dy` or neither, as long as either x or y (or both) has endpoint data.\r\n\r\nI'm not sure about using this for Gantt - it would work for presentation, but not for analysis. Better than current options but perhaps not our final answer on the topic...\r\n\r\nSome potential name options: `link`? `segment` (per R)? `pair` is already used as a synonym for `splom`, maybe `couple`, `couplet`, or `doublet`?",
    "created_at": "2018-08-07T13:38:17Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2876#issuecomment-411059011",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2876",
    "updated_at": "2018-08-07T13:38:17Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Perhaps this belongs with #2876? Would be fairly natural there. ",
    "created_at": "2018-08-07T11:04:40Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/147#issuecomment-411019426",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/147",
    "updated_at": "2018-08-07T11:04:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Very nice @HywelMJ, thanks! I just linted a couple of whitespace issues. (though it's still complaining \"incorrect header information\" - @etpinard I don't see what's wrong, do you?)\r\n\r\n@HywelMJ do you want to try translating the text as well, or are you OK leaving this in English? There are examples [here](https://github.com/plotly/plotly.js/pulls?q=is%3Apr+is%3Aclosed+label%3A%22type%3A+translation%22)",
    "created_at": "2018-08-06T23:01:57Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2877#issuecomment-410879516",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2877",
    "updated_at": "2018-08-06T23:01:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I think it might be best at some point to move the `ErrorBars.calc` call down to the trace module's own `calc` methods (similar to `Colorscale.calc`) to spare us a another loop over all the traces\r\n\r\nExcellent idea. In general it needs to be in `crossTraceCalc` though, as it can be impacted by stacking (leaving aside the question of whether it's actually a good idea to put errorbars on stacked items... sometimes perhaps, other times 🙈 )",
    "created_at": "2018-08-06T15:58:01Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2870#issuecomment-410758016",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2870",
    "updated_at": "2018-08-06T15:58:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "See https://plot.ly/javascript/line-and-scatter/#data-labels-on-the-plot\r\nOmit `textposition` to leave the text centered.",
    "created_at": "2018-08-06T13:26:49Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2875#issuecomment-410707218",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2875",
    "updated_at": "2018-08-06T13:26:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Oh actually, I think it's OK: see updated codepen https://codepen.io/alexcjohnson/pen/jpKZgg\r\nI had to make a few tweaks, but one that may not be obvious is we won't accept a grid with only one cell - either `rows` or `columns` must be >1\r\n\r\n@JonathanWolfe does this make sense?",
    "created_at": "2018-08-03T21:35:37Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2869#issuecomment-410382496",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2869",
    "updated_at": "2018-08-03T21:35:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @JonathanWolfe - you're absolutely right. We hadn't bothered propagating `domain.row` and `domain.column` since these are used right away and then no longer needed, but I forgot about `Plotly.validate` in this regard. We'll fix that. Thanks for the report!",
    "created_at": "2018-08-03T21:14:55Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2869#issuecomment-410378315",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2869",
    "updated_at": "2018-08-03T21:14:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Closing this PR, will recreate it once #2868 is merged.",
    "created_at": "2018-08-03T20:40:22Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2867#issuecomment-410370360",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2867",
    "updated_at": "2018-08-03T20:40:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks great, thanks for doing that! 💃 after fixing the little typo 😅 ",
    "created_at": "2018-08-03T20:37:56Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2868#issuecomment-410369837",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2868",
    "updated_at": "2018-08-03T20:37:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> This is the issue with marching cubes.\r\n\r\nYou should be able to get the desired result using marching cubes, following the example of our 2D SVG `contour` plot, which uses marching SQUARES but extends it:\r\n\r\n- First, we do one level at a time, not two... so the binary values are below/above rather than between/outside. That way you can't lose the surface if it transitions too quickly between the two bounds.\r\n- Then we recognize that each of the \"crossings\" identified just refers to \"somewhere on the line segment connecting two adjacent grid points\" but we refine that crossing point by linear interpolation between those same two grid points, and use THAT as the mesh vertex, but connect these into a mesh the same way you do currently.\r\n\r\n> In some traces, it's nice to have a separate colorscale for the caps. E.g. https://gl-vis.github.io/gl-isosurface3d/smooth_skin.html\r\n\r\nYes, the *caps* get a colorscale. The *isosurfaces*, especially with the refinement ^^, will just get a single color each (one for the low, one for the high) so I don't think it's a good idea to make people pull those colors out of a colorscale, just specify one or two colors.",
    "created_at": "2018-08-02T11:50:16Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2752#issuecomment-409899865",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2752",
    "updated_at": "2018-08-02T11:50:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Beautiful. 🍋 -> 🍹 \r\n💃 ",
    "created_at": "2018-08-01T16:16:56Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2860#issuecomment-409632003",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2860",
    "updated_at": "2018-08-01T16:16:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Great job plucking out the good bits, this still ended up as a pretty big PR, that cleans up a lot of things! Should we give it a `type: bug` as well? It still includes the splom fix https://github.com/plotly/plotly.js/pull/2837#discussion_r204580575",
    "created_at": "2018-07-31T22:41:42Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2860#issuecomment-409391397",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2860",
    "updated_at": "2018-07-31T22:41:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "OK great - I think it's fair to say that any difference in outcome between `newPlot` and `react` is a bug, so please open a new issue if you encounter such a difference!",
    "created_at": "2018-07-31T15:08:16Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2852#issuecomment-409255511",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2852",
    "updated_at": "2018-07-31T15:08:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@bytesnz this does seem like a browser issue, but I wonder if you've tried using `Plotly.react` instead of `purge`+`newPlot`? That should give the same result but in principle it reuses resources like webGL contexts.",
    "created_at": "2018-07-31T14:23:40Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2852#issuecomment-409239311",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2852",
    "updated_at": "2018-07-31T14:23:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Interesting idea - I could imagine adding some named colorways... kind of like we do with colorscales where you can either specify `[[fraction, color], [fraction, color], ...]` or one of the [predefined names](https://github.com/plotly/plotly.js/blob/master/src/components/colorscale/scales.js). Would be a nice complement to plot templates.\r\n\r\n@jackparmer this seems right up your alley 🎳 ",
    "created_at": "2018-07-31T14:18:33Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2851#issuecomment-409237510",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2851",
    "updated_at": "2018-07-31T14:18:33Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @simonerubiu - You're correct that our Sankey diagrams don't currently support `layout.separators`, and you're correct that this is a bug :)\r\n\r\nUnfortunately our number formatting code is a bit chaotic at the moment, and ripe for refactoring... There's [`Lib.numSeparate`](https://github.com/plotly/plotly.js/blob/0c1d6d5ebbd2334f712aede2a32236fb451838b7/src/lib/index.js#L902) that handles separators for simple floating-point representations, [`axes->numFormat`](https://github.com/plotly/plotly.js/blob/0c1d6d5ebbd2334f712aede2a32236fb451838b7/src/plots/cartesian/axes.js#L1242) that handles rounding and exponents along with separators but is tightly coupled to cartesian axes, and [`fullLayout._d3locale.numberFormat`](https://github.com/plotly/plotly.js/blob/0c1d6d5ebbd2334f712aede2a32236fb451838b7/src/plots/plots.js#L371) for using d3 format strings (including localization and override by `layout.separators`)",
    "created_at": "2018-07-31T13:57:56Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2859#issuecomment-409230374",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2859",
    "updated_at": "2018-07-31T13:57:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> What if we added a piegroup attribute?\r\n\r\nWe already have a [`scalegroup` attribute](https://github.com/plotly/plotly.js/blob/master/src/traces/pie/attributes.js#L135) so would this need to be `colorgroup`? Or perhaps we can reuse `legendgroup` for this purpose? Anyway seems like the two issues are distinct, so it's not simply a matter of renaming `scalegroup`, we need both to exist (though I suppose we could discuss whether their defaults should be linked)",
    "created_at": "2018-07-30T22:00:02Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2858#issuecomment-409025714",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2858",
    "updated_at": "2018-07-30T22:00:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> is calcdata available as a reference in fullLayout or fullData somewhere?\r\n\r\nNo. And I don't really want to put it there, lest it invite other people to start using it.\r\nPerhaps instead we should put the calculated color array into the `fullData` trace as a private `_calcColors` or something?",
    "created_at": "2018-07-30T19:46:58Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2834#issuecomment-408986961",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2834",
    "updated_at": "2018-07-30T19:46:58Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": ">  it looks like _fullLayout._piecolormap gives a cross-pie view and we'll have to stitch the actual ordered scale back together...\r\n\r\nyes, that's exactly the reason I suggested it - because that's the only way to unambiguously set the color for a *label*, without wondering whether it will apply to one, some, or all pies that share that label.\r\n\r\n> is there some internal function we can use that gives us the colors, in order, for a given pie trace?\r\n\r\nNo, but you could pull them out of `calcdata`.\r\n\r\n> If not, we may just display the colorway for this particular component if nothing is stored in data... it's \"close enough\" :)\r\n\r\nAs long as you're not worried about these changes propagating to non-pie traces, and as long as this pie isn't inheriting colors from another one. To me though those seem like pretty substantial caveats!",
    "created_at": "2018-07-30T19:30:36Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2834#issuecomment-408982517",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2834",
    "updated_at": "2018-07-30T19:30:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "We can't *just* fill these into `fullData` during `calc`, or `Plotly.react` will break (ie it will always think these attributes changed, because it's looking at `newFullData` immediately after `supplyDefaults` and comparing it to `oldFullData` after the plot is finished.\r\n\r\nA `calcDflt` schema property might help, though if we do this AND fill the values back into `fullData` we'll still have a problem figuring out if the value is the default or not - the user inserts a non-default value, then removes it via `Plotly.react` - we see no value in `newFullData` and a value in `oldFullData`, how do we know if that old value is the default or was given explicitly? We could create `trace._dflt_bandwidth = false` or something...\r\n\r\nIf we make `calcDflt` but do NOT fill the value into `fullData`, how is the editor going to find the value, or even know that it should be expected to look for a value? Doesn't seem like a good idea to force it to reach into `calcdata`. So I feel like ^^ or something like that would work better.\r\n\r\nPie `marker.colors` is a tricky one. In addition to the question about `findArrayAttributes`, subsequent pies can affect each other. If you provide colors for the first pie trace (or even if you don't), any later pies with matching `label` values will inherit the same color if you don't override it, but previous pies will not. That means even if we manage to pull out the relevant color array, if someone uses that as the base to edit these colors, it could give unexpected results where a user expects to alter the color for *all* slices of a given label but ends up only altering some of them. We could fix that order dependence, but there would still be an ambiguity then if someone set the color for a certain label in one trace and then changed it in another trace - do they intend both to take the new color, or just one? What if there are 3 pies, you set a color first on the second pie, then you set a different color for the same label on the first pie, then the 3rd will inherit the new color?\r\n\r\nOr that's how it's supposed to work anyway... looks like there's a bug where explicit colors don't get propagated correctly, though default colors do. In this test here, the orange 'a' should be red, looks like the mechanism that's supposed to make this work (`fullLayout._piecolormap`) is getting the wrong key (`undefined`) somehow:\r\n![screen shot 2018-07-30 at 1 54 40 pm](https://user-images.githubusercontent.com/2678795/43414248-3d82323a-9400-11e8-9627-4379e5c57bea.png)\r\n\r\nAnyway, aside from making the editor happy, I'm not sure if it matters whether `marker.colors` defaults are included in `fullData`. Pie hover events already report the color either way, does it have other meaningful effects? For the editor's sake, seems like we may want to have one (very special) control based on `fullLayout._piecolormap` that figures out how to set these colors unambiguously, unless we think there's an important reason to support per-trace colors for matching labels.",
    "created_at": "2018-07-30T18:33:46Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2834#issuecomment-408965483",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2834",
    "updated_at": "2018-07-30T18:33:46Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks good! 💃 after https://github.com/plotly/plotly.js/pull/2857#discussion_r206180943",
    "created_at": "2018-07-30T15:14:29Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2857#issuecomment-408899444",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2857",
    "updated_at": "2018-07-30T15:14:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> one polar mock is currently failing, but I think it is more correct now.\r\n\r\nI think I agree - the new one (radial autorange still happens even though angular data is invalid) matches how we handle cartesian with invalid data on the opposite axis, right?",
    "created_at": "2018-07-26T20:55:38Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2849#issuecomment-408232298",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2849",
    "updated_at": "2018-07-26T20:55:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@Talador12 not sure I understand your concern. I don't see anything that looks wrong in that codepen, but then I don't see a step that updates the data either. For example if I amend your code to:\r\n```js\r\nPlotly.newPlot('graph', [{\r\n  y: input.map(sec2dt)\r\n}], {\r\n yaxis: {\r\n   tickformat: '%H:%M:%S'\r\n }\r\n}).then(function() {\r\n  Plotly.restyle('graph','y', [[2002, 5008, 9007].map(sec2dt)]);\r\n});\r\n```\r\nit appears to update as expected, including the displayed seconds field.\r\n\r\nCan you elaborate?",
    "created_at": "2018-07-26T16:32:06Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2848#issuecomment-408157076",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2848",
    "updated_at": "2018-07-26T16:32:06Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Must have been an artifact in the SVG engine that has since been fixed by whatever browsers it was an issue in. I don't see this anymore in any browsers I have access to.",
    "created_at": "2018-07-26T15:00:06Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1134#issuecomment-408127038",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1134",
    "updated_at": "2018-07-26T15:00:06Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Oh sorry - this is a duplicate of #2765 - and the example there behaves the same way, the last line shows up on a redraw.",
    "created_at": "2018-07-26T12:13:15Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2846#issuecomment-408076835",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2846",
    "updated_at": "2018-07-26T12:13:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@vincex confirmed, thanks for the example and partial debugging. I'll let @dy figure out where the fix goes, but regardless it counts as a bug in plotly.js!",
    "created_at": "2018-07-26T12:09:43Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2846#issuecomment-408075984",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2846",
    "updated_at": "2018-07-26T12:09:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for the nice simple reproduction @llnns - merging into #2291.",
    "created_at": "2018-07-26T11:53:30Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2845#issuecomment-408071828",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2845",
    "updated_at": "2018-07-26T11:53:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "A nice pared-down reproduction from @llnns in #2845:\r\n\r\n---\r\n\r\nUsing `scattergl` with `toself` fill option results in a \"ghost\"/wrong/extra fill among the first points of each object. A minimal example creating three rectangles:\r\n\r\n[https://codepen.io/anon/pen/NBvbbv](https://codepen.io/anon/pen/NBvbbv)\r\n\r\nResults in:\r\n\r\n![newplot](https://user-images.githubusercontent.com/11335099/43237624-05e16154-9061-11e8-8fa9-9cfd4ecfb258.png)\r\n\r\nAlso, using the same data with `scatter` type has the expected output:\r\n\r\n![newplot 1](https://user-images.githubusercontent.com/11335099/43237641-19b71886-9061-11e8-93a7-b85f714f439a.png)\r\n",
    "created_at": "2018-07-26T11:52:55Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2291#issuecomment-408071690",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2291",
    "updated_at": "2018-07-26T11:52:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I can't comment on the Typescript types, Plotly staff have not been involved in that effort. But the flattened object is the intent here. See eg https://plot.ly/javascript/plotlyjs-function-reference/#plotlyrestyle:\r\n\r\n> The term **attribute strings** is used above to mean **flattened** (e.g., `{marker: {color: 'red'}}` vs. `{'marker.color': red}`). When you pass an attribute string to restyle inside the update object, it’s assumed to mean **update only this attribute**. Therefore, if you wish to replace and entire sub-object, you may simply specify **one less level of nesting**.\r\n\r\nThe event data mirrors these arguments.",
    "created_at": "2018-07-26T10:40:53Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2843#issuecomment-408055349",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2843",
    "updated_at": "2018-07-26T10:40:53Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I’ve seen plenty of charts like this with some of the signals analog. Wouldn’t need to be included from the outset but we shouldn’t preclude it.\r\n\r\nThis could of course be created already using one subplot and one trace for each signal, but I can see the argument for making it a single trace: it would have better performance, much cleaner API, and the interactions could be tailored to this use case. ",
    "created_at": "2018-07-25T10:58:52Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2842#issuecomment-407716221",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2842",
    "updated_at": "2018-07-25T10:58:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Love the concept! But it looks like autoranged axes aren't updated with the faster logic. I'll hold off reviewing until that's sorted out as I suspect it's going to be a bit involved - likely by maintaining separate `_min` and `_max` for each trace? We've been talking about doing that for a while anyhow.\r\n\r\n![autorange on visibility](https://user-images.githubusercontent.com/2678795/43165877-ed9b118c-8f8c-11e8-94e1-578e6b8ebcbb.gif)\r\n",
    "created_at": "2018-07-24T21:00:51Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2837#issuecomment-407550652",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2837",
    "updated_at": "2018-07-24T21:00:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I think what you want is [`nameformat`](https://github.com/plotly/plotly.js/blob/180b6b9225173e834ff92245b6f3620bfcfd14a8/src/transforms/groupby.js#L43-L55) - which already defaults to the behavior you want when the grouped trace is the only one, but since you have other traces for the 1D histograms it defaults to including the trace name as well. `nameformat: '%{group}'` should fix it for you. I suppose we could be smarter and only default to the multi-trace format when there are multiple traces *in the legend*... but that's a little trickier to determine.",
    "created_at": "2018-07-24T20:23:34Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2841#issuecomment-407539708",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2841",
    "updated_at": "2018-07-24T20:23:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Huh, I thought we already did that. Anyway yes, this is good. :dancer:",
    "created_at": "2018-07-24T16:32:23Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2840#issuecomment-407469892",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2840",
    "updated_at": "2018-07-24T16:32:23Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ah interesting... good catch, because of how `getTraceUids` pulls uids out of `oldFullData`, any operation that can alter existing trace indices - so not just delete but also move and add (if not adding at the end) - will have the same issue. I guess the easiest may be to mirror these operations in `fullData`? Are there similar bugs due to `relinkPrivateKeys` after a delete etc?",
    "created_at": "2018-07-23T21:16:21Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2836#issuecomment-407203895",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2836",
    "updated_at": "2018-07-23T21:16:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Oh, no we can close it. If bugs or additional desires emerge we can make a new issue.",
    "created_at": "2018-07-23T20:44:51Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2469#issuecomment-407194998",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2469",
    "updated_at": "2018-07-23T20:44:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Beautiful. Thanks for sorting out that flakiness. 💃 ",
    "created_at": "2018-07-23T19:49:15Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2829#issuecomment-407179060",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2829",
    "updated_at": "2018-07-23T19:49:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Lovely. Nice bug fix and a structural step in the right direction to boot! :dancer:",
    "created_at": "2018-07-21T13:55:35Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2831#issuecomment-406798331",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2831",
    "updated_at": "2018-07-21T13:55:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Very nice, :dancer:  Thanks for the report @rmoestl!",
    "created_at": "2018-07-21T06:46:11Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2827#issuecomment-406775284",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2827",
    "updated_at": "2018-07-21T06:46:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@jonfreedman we could certainly allow class to pass through from the pseudo-html to the svg, my concern (and this applies to some of the other suggested additions as well) is that referencing external content means the plot loses portability, or at least would lose that content if rendered elsewhere. That would be a first for plotly.js, at least as far as the plot's static behavior is concerned.",
    "created_at": "2018-07-19T09:41:48Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1387#issuecomment-406218482",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1387",
    "updated_at": "2018-07-19T09:41:48Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@hidai I'm afraid this bug is still open. 100 microseconds resolution works when you use date strings, but the issue here is when you provide the data as epoch milliseconds, and that still drops to 1 millisecond resolution.",
    "created_at": "2018-07-19T09:14:53Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1363#issuecomment-406210806",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1363",
    "updated_at": "2018-07-19T09:14:53Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard this is great, I have no qualms about this tradeoff and anyway we have a route to improve it even more later on with per-trace updates. A couple of minor comments but nothing blocking. 💃 ",
    "created_at": "2018-07-18T16:59:55Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2823#issuecomment-406002968",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2823",
    "updated_at": "2018-07-18T16:59:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Sure, though I worry the template is already a bit long to expect people to parse",
    "created_at": "2018-07-17T14:49:04Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2821#issuecomment-405609465",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2821",
    "updated_at": "2018-07-17T14:49:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Confirmed. Thanks @AlanJMac for the extremely clear bug report, and for the thorough research into when it does and does not occur!",
    "created_at": "2018-07-17T10:25:29Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2819#issuecomment-405535471",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2819",
    "updated_at": "2018-07-17T10:25:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "As far as I can tell, it's working as designed:\r\n- Your input data is `x: [1, 2, 3, 4, 5, 6]`, which you aggregate with groups `[1, -1, 1, -1, 1, -1]` so it breaks into sets `1, 3, 5` and `2, 4, 6`\r\n- No `aggregations` are defined within the `aggregate` transform, so we default to `first` - thus after aggregation you have `x: [1, 2]`\r\n- Then you filter on `x >= 3`, which eliminates both points, so the result is an empty trace. But if you change the `3` to `2`, the second point remains (and this result is different than if you reversed the order of the transforms - in that case you get `x: [2, 3]`, or `[3, 4]` with the original filter `x >= 3`.\r\n\r\n@bhogan-mitre can you clarify the behavior you expected?",
    "created_at": "2018-07-17T09:13:27Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2804#issuecomment-405515444",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2804",
    "updated_at": "2018-07-17T09:13:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "It's hard to see this working, because we use the area just outside the plot for other interactions. In your example the exact starting point of your \"this direction not possible\" arrow is unused, but on the other three sides, where there's an axis, a click-and-drag will pan just that axis (if you start near the middle) or change just one end of that axis range (if you start near either end). If you put an axis on top as well, then all sides serve as the starting point of another interaction.\r\n\r\nIn addition, a click-and-drag starting from just outside any corner of the plot will change the corresponding end of all axes. So if the reason your client wants to start outside the plot is that their goal is, for example, to preserve the coordinates in the upper left corner while zooming the lower right, perhaps dragging the lower right corner would suit their needs?",
    "created_at": "2018-07-17T08:46:40Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2817#issuecomment-405507574",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2817",
    "updated_at": "2018-07-17T08:46:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for pointing this out! We should probably also include data there large or small enough to actually *use* exponents, if we want this part of the demonstration to be meaningful.\r\ncc @cldougl ",
    "created_at": "2018-07-17T08:24:34Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2818#issuecomment-405501446",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2818",
    "updated_at": "2018-07-17T08:24:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "We really do. It starts to bog down after a while, but for example `splom` traces have been tested up to 50 dimensions, which means 50 X axes, 50 Y axes, and 1200 to 2500 subplots. ",
    "created_at": "2018-07-14T17:36:52Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2808#issuecomment-405038354",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2808",
    "updated_at": "2018-07-14T17:36:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "It's a good sign when you can fix a bug in negative LOC :) 💃 ",
    "created_at": "2018-07-14T08:33:21Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2814#issuecomment-405008798",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2814",
    "updated_at": "2018-07-14T08:33:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 Capping off a pretty great week!",
    "created_at": "2018-07-14T08:28:37Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2816#issuecomment-405008529",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2816",
    "updated_at": "2018-07-14T08:28:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "So the bug isn't manifest in the figure JSON at all, just on screen? The test looks great, but I agree, @dy should review the actual code change.",
    "created_at": "2018-07-13T20:50:00Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2815#issuecomment-404950277",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2815",
    "updated_at": "2018-07-13T20:50:00Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": ":dancer: very nice 👍 ",
    "created_at": "2018-07-13T07:56:21Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2811#issuecomment-404756831",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2811",
    "updated_at": "2018-07-13T07:56:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> do you think patching the above line in line_points.js and documenting this \"equal-length\" workaround is an ok solution to the problem\r\n\r\nYes, seems like `line.simplify: false` should mean that anyway. This would be important for other animations too, even if the number of points really is constant but there's a chance that sometimes neighboring points could match.\r\n\r\n> or should we try to find a better way to smoothly transition line paths of different coordinate lengths?\r\n\r\nThat would be great, but sounds theoretically ambiguous. How can we tell if an increase in number of points is an append, prepend, insert, or something else? All of those would imply different animations.",
    "created_at": "2018-07-12T21:43:58Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2794#issuecomment-404660406",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2794",
    "updated_at": "2018-07-12T21:43:58Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard a request has come in for radial axis `hole` (third checkbox above) and legacy `area` type replacement (first bullet point). `hole` is straightforward enough that I think this checkbox will suffice to track it, but I'll make a new issue for `area` so we can hash out the API without overrunning this thread.",
    "created_at": "2018-07-12T14:01:27Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2255#issuecomment-404522573",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2255",
    "updated_at": "2018-07-12T14:01:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Is this error coming from the DefinitelyTyped definitions for plotly.js? If so the issue will probably need to be sorted out over there. The core plotly.js team has not been involved in any typescript definitions, so I really wouldn't know what to suggest to fix the issue, other than a huge list of all possible x or y axis ids... perhaps a modification of this PR is in order https://github.com/DefinitelyTyped/DefinitelyTyped/pull/20467 ?",
    "created_at": "2018-07-12T13:47:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2808#issuecomment-404517760",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2808",
    "updated_at": "2018-07-12T13:47:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This is a config option `scrollZoom: true` https://plot.ly/javascript/configuration-options/\r\n\r\n\"how do I\" questions are better suited to community.plot.ly - thanks!",
    "created_at": "2018-07-12T13:16:42Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2807#issuecomment-404508485",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2807",
    "updated_at": "2018-07-12T13:16:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Alright @jony89 if you're happy I'm happy! I think we should merge, seems to me unlikely anyone using plotly.js in an RTL environment has implemented a workaround that would conflict with this, and in case someone wants to do the more complicated thing I'm imagining (to preserve RTL direction inside the plot but fix the alignment) we can discuss further at that time.\r\n\r\n@etpinard I'll let you merge if you agree with this assessment. 💃\r\n\r\nBTW I changed the title to include RTL, to make this PR more discoverable later on.",
    "created_at": "2018-07-12T13:10:14Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2790#issuecomment-404506650",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2790",
    "updated_at": "2018-07-12T13:10:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Yet I've tried to change the title to RTL language with that fix and it seems ok.\r\n\r\nHmm, this is the part I'm worried about, and I'm confused about how it could be OK if we switch to LTR inside the plot. You can include arbitrarily long and complex text in the plot - in the plot title, axis titles, trace name (for the legend), annotations... won't it all be written backward? For instance what would this one look like RTL: https://plot.ly/~alex/455.embed\r\n\r\nThe fix I would imagine - though it would be a good deal more involved than this - would be to leave the direction RTL inside the plot, detect this, and flip the signs of all our alignments to put the text in the right place.",
    "created_at": "2018-07-12T07:02:33Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2790#issuecomment-404410571",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2790",
    "updated_at": "2018-07-12T07:02:33Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "🙄 cc #749 \r\n💃 ",
    "created_at": "2018-07-11T21:44:14Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2805#issuecomment-404320309",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2805",
    "updated_at": "2018-07-11T21:44:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice, I was hoping that one would be easy. Curious though, how did [contour_edge_cases](https://github.com/plotly/plotly.js/blob/master/test/image/baselines/contour_edge_cases.png) not run into this problem?\r\n\r\nAt some point we should make this `exponentformat` configurable, but that's a `feature` rather than a `bug`.\r\n\r\n💃 ",
    "created_at": "2018-07-11T21:42:28Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2806#issuecomment-404319931",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2806",
    "updated_at": "2018-07-11T21:42:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@jony89 so this change says that even though the document is RTL, we override plots to use LTR. Is that common and accepted behavior in such cases? I also notice that in your image the numbers are handled in a peculiar way, with the digits in LTR order but the minus sign moved to the right side. And then it seems like anything that's center-aligned (ie the X axis labels) is positioned correctly, but anything left-aligned (hover text) or right-aligned (Y axis labels) goes the wrong way from the anchor point.\r\n\r\nSo the question is: What would people in RTL locales expect to see? Would they be satisfied with us flipping to LTR inside the plot, or would they prefer us to leave it RTL and fix the alignment instead - and if so, is there anything ELSE we need to fix, like this minus sign positioning? Is the answer to this question even consistent across RTL locales?\r\n\r\nSo I'll repeat @etpinard's question: Can anyone help out?",
    "created_at": "2018-07-11T16:54:37Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2790#issuecomment-404239302",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2790",
    "updated_at": "2018-07-11T16:54:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks OK to me - new test is beautiful, and as it doesn't break any existing tests it can't be too bad! But I'd like @dy to give the 💃 since he [added this](https://github.com/plotly/plotly.js/blame/master/src/plot_api/plot_api.js#L3268-L3270) in the first place.",
    "created_at": "2018-07-11T16:27:43Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2793#issuecomment-404231327",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2793",
    "updated_at": "2018-07-11T16:27:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 ",
    "created_at": "2018-07-11T16:14:23Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2788#issuecomment-404227253",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2788",
    "updated_at": "2018-07-11T16:14:23Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice find, beautiful test! :dancer:",
    "created_at": "2018-07-10T18:37:20Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2801#issuecomment-403924183",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2801",
    "updated_at": "2018-07-10T18:37:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Hmm ok, seems there are several issues here. The HTML file should help us to debug, so thanks for posting that. ",
    "created_at": "2018-07-10T18:01:18Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2794#issuecomment-403913479",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2794",
    "updated_at": "2018-07-10T18:01:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@iandanforth we understand that the Python code here reproduces the bug but the first step for us to work on this issue would need to be converting it to pure JavaScript anyway, which is substantially easier for you (since you already have this graph generated) than it is for us, and can also help rule out non-JavaScript root causes. That’s why we ask reporters to provide a reproduction specifically in JavaScript. Thanks for your understanding!",
    "created_at": "2018-07-10T16:33:07Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2794#issuecomment-403886372",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2794",
    "updated_at": "2018-07-10T16:33:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "😍 love it! Funny that in at least one case (Cartesian) minified is bigger but gzipped is *smaller* this way!?\r\n:dancer:",
    "created_at": "2018-07-10T05:53:40Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2792#issuecomment-403708748",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2792",
    "updated_at": "2018-07-10T05:54:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Good find! While we’re at it, would it be worth including all trace types in that test? The `plot_types` mock is a good start, but also may be nice to include parcoords, sankey, table, scattergl...\r\n\r\nAlso, is it possible to base this flag on whether mapbox is in the bundle definition, rather than naming specific bundles? I wouldn’t want to have to remember this if we add another that includes mapbox. Or should we just leave this option in all bundles? Does it add a noticeable number of bytes? Anyway it says IE10 and below might not like this compression so it may be best to just make it consistent. ",
    "created_at": "2018-07-09T17:39:19Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2792#issuecomment-403560285",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2792",
    "updated_at": "2018-07-09T17:39:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Awesome find, that we get a whole new class of animations with this little change!!! 🎉 🏆 ",
    "created_at": "2018-07-07T07:18:45Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2788#issuecomment-403195130",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2788",
    "updated_at": "2018-07-07T07:18:45Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "yes, I suppose we'd better merge and release this, then find a better solution later. Annoying but 💃 ",
    "created_at": "2018-07-07T06:39:00Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2789#issuecomment-403193181",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2789",
    "updated_at": "2018-07-07T06:39:00Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Very nicely done - getting us that much closer to regular d3 idioms - and great tests! Both of my comments are nonblocking - 💃 ",
    "created_at": "2018-07-06T16:10:11Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2785#issuecomment-403078432",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2785",
    "updated_at": "2018-07-06T16:10:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ah OK, I see what you're going for. We actually do currently use `MultiLineString` for the first case (with `NaN` in the data) and you can use arrays for `text`, `hovertext`, and `hoverinfo` in order to mimic multiple traces, but our implementation doesn't allow this to include multiple line colors, and as you say it's a bit clunky to massage your data this way.\r\n\r\nI wasn't aware of these performance issues with many layers, but it *looks* as though it should be possible to combine all our lines into one layer, and all points into one more layer, so that you could specify it in the second form (and therefore get the associated flexibility re: line color, and line width) but with the performance of the first form.",
    "created_at": "2018-07-05T12:36:17Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2778#issuecomment-402707686",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2778",
    "updated_at": "2018-07-05T12:36:17Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@OleMussmann I'm not sure I understand what you're trying to achieve here - can you provide examples of the two workarounds, perhaps by modifying this codepen: https://codepen.io/etpinard/pen/oLdaXP ? Thanks!",
    "created_at": "2018-07-05T10:25:38Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2778#issuecomment-402678103",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2778",
    "updated_at": "2018-07-05T10:25:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard @vdh I removed the legacy `toggleSpikeLines` hack as I mentioned https://github.com/plotly/plotly.js/pull/2762#discussion_r199466432 -> https://github.com/plotly/plotly.js/pull/2762/commits/586ff25c8966e880b8cffb2f28ad6d857d8380ab\r\nIf you're OK with this, I think we're ready to go! 💃 ",
    "created_at": "2018-07-05T09:57:23Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2762#issuecomment-402670946",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2762",
    "updated_at": "2018-07-05T09:57:23Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Definite improvement, though there are still some oddities - I'm seeing similar effects to what @etpinard reported. I'd be OK with merging this as is and considering these issues bugs. Fairly urgent bugs though!\r\n\r\nOn Mac OS 10.13.5, retina display. For reference here's the SVG `text_chart_arrays` mock, which AFAICT looks identical on Chrome, FF, and Safari:\r\n<img width=\"766\" alt=\"chrome svg\" src=\"https://user-images.githubusercontent.com/2678795/42315547-04e0fe46-8048-11e8-942f-3a5636c6c22d.png\">\r\nBut the gl2d version looks bold and blurry (perhaps this is retina-only, related to #2756?), and there are first-load issues in FF (missing some items entirely) and Safari (wrong font).\r\nHere's Chrome:\r\n<img width=\"759\" alt=\"chrome gl\" src=\"https://user-images.githubusercontent.com/2678795/42315567-130d79fe-8048-11e8-8bae-b39c5b7a231b.png\">\r\nFF the first render in a given tab is missing some items:\r\n<img width=\"740\" alt=\"ff gl first\" src=\"https://user-images.githubusercontent.com/2678795/42315599-24dee2f8-8048-11e8-9a26-d1834c3748d4.png\">\r\nBut the second gets them all:\r\n<img width=\"751\" alt=\"ff gl second\" src=\"https://user-images.githubusercontent.com/2678795/42315613-2df7dac0-8048-11e8-8d71-76759ba32e9a.png\">\r\nAnd Safari on first render has the wrong font for \"Text G\":\r\n<img width=\"757\" alt=\"safari gl\" src=\"https://user-images.githubusercontent.com/2678795/42315631-36697650-8048-11e8-8661-767f83dab73d.png\">\r\nbut it's fixed on second render:\r\n<img width=\"745\" alt=\"safari gl second\" src=\"https://user-images.githubusercontent.com/2678795/42316190-7942bf76-8049-11e8-9314-d380051a9823.png\">\r\n",
    "created_at": "2018-07-05T09:53:37Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2737#issuecomment-402669918",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2737",
    "updated_at": "2018-07-05T09:53:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "🎉 💃 ",
    "created_at": "2018-07-05T08:55:31Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2776#issuecomment-402653254",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2776",
    "updated_at": "2018-07-05T08:55:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "If the only goal is \"make it not error until there's more data\" this is fine. But if we think this is a real use case we should use other violins on the same subplot to pick a bandwidth that's reasonable for the whole collection, like we do with [histograms](https://github.com/plotly/plotly.js/blob/master/src/traces/histogram/calc.js#L350)\r\n\r\n💃 but consider making an issue for ^^",
    "created_at": "2018-07-05T07:27:15Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2775#issuecomment-402630340",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2775",
    "updated_at": "2018-07-05T07:27:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yep, the real ugliness lies in our loopy automargin pipeline, this is fine. Nicely done! 💃 ",
    "created_at": "2018-07-05T07:20:26Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2773#issuecomment-402628760",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2773",
    "updated_at": "2018-07-05T07:20:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Tricky question... I’m not sure “selectable” is going to serve us well, or at the very least it’s likely to change over time as we figure out meaningful ways to select more kinds of objects. Can we just annotate each item as to what it represents, and have the module decide what to do with it?\r\n\r\nRe: `pointNumber` vs `binNumber` - the idea is `pointNumber` should refer to an index in the data arrays, and if the item doesn’t refer to one index it should use a different name (such as `binNumber`) but if applicable it may include an array `pointNumbers`. Sounds like you’ve found some places we don’t follow this convention, perhaps now is the time to fix these!",
    "created_at": "2018-07-04T10:37:16Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1852#issuecomment-402439900",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1852",
    "updated_at": "2018-07-04T10:37:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Love it! 💃 ",
    "created_at": "2018-07-03T20:13:20Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2766#issuecomment-402278873",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2766",
    "updated_at": "2018-07-03T20:13:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looking at that point again - I can confirm that it's not *broken*, it does all seem to connect ala pinched sausage links. But we're off the edge of the data here, the largest x in the data is 4 and we're almost at x=5 here. So I'm not sure what extrapolation is going on but I can't imagine it would take what looks like a fairly large and stable divergence and take it through zero before coming back out to essentially the same magnitude at the next point. Is there any chance it's taking two neighboring rings and rather than connecting them directly, it's connecting them inverted? Meaning it's making a mesh that connects points at the top of the tube on the first ring to points at the bottom of the next ring, and so on? I feel like I see some tight folding that makes it look like a wrapped present, which seems like it could happen with an inversion scenario like that:\r\n<img width=\"357\" alt=\"screen shot 2018-07-03 at 10 01 06 pm\" src=\"https://user-images.githubusercontent.com/2678795/42242094-07538b62-7f0d-11e8-9b2d-1e756db78919.png\">",
    "created_at": "2018-07-03T20:06:42Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2658#issuecomment-402277291",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2658",
    "updated_at": "2018-07-03T20:06:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@dy I'm getting rendering failures on my mac. Using the mock `gl2d_text_chart_arrays` here, but seems like all the new mocks have the same issues.\r\n\r\nChrome the letters all sit on top of each other:\r\n<img width=\"973\" alt=\"screen shot 2018-07-03 at 9 04 28 pm\" src=\"https://user-images.githubusercontent.com/2678795/42240041-44608412-7f06-11e8-9ca6-1def6eb2c34f.png\">\r\nFF multiple letters don't show up at all:\r\n<img width=\"776\" alt=\"screen shot 2018-07-03 at 9 16 01 pm\" src=\"https://user-images.githubusercontent.com/2678795/42240070-63c35c58-7f06-11e8-86c2-5358919d2755.png\">\r\nI'm seeing the same in Browserstack - actually I'm not even seeing the lines when I load FF in Browserstack, which I think is how it started out locally in FF but then the lines showed up. Can you try to debug this there?",
    "created_at": "2018-07-03T19:26:47Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2737#issuecomment-402267432",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2737",
    "updated_at": "2018-07-03T19:26:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@sid-thakur what hardware are you using? I have to say when I look at https://rreusser.github.io/plotly-mock-viewer/#gl2d_parcoords on my mac retina display it looks a bit blurry, as do scattergl plots like https://rreusser.github.io/plotly-mock-viewer/#gl2d_10, whereas gl3d plots look crisp. I hadn't noticed this before but I mostly display plots on my second monitor, which is not as high resolution. Perhaps we need to oversample in addition to antialiasing?",
    "created_at": "2018-07-03T10:48:50Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2756#issuecomment-402105863",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2756",
    "updated_at": "2018-07-03T10:48:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "AFAIK there's no way for us to determine how big this element is going to be before it's visible. `window.getComputedStyle` will return zero size. If you don't have an explicit size to give us on first render, you'll need to find an event corresponding to displaying the element, and trigger a redraw in that event.\r\n\r\n`Plotly.Plots.resize(gd)` is what we normally use for this, but it may not be optimal in this case since it's a little delayed & debounced (to accommodate use cases like dragging to resize a window). To avoid a FOUC you can use `Plotly.relayout(gd, {autosize: true})` which is, in the end, what `Plotly.Plots.resize` [does anyway](https://github.com/plotly/plotly.js/blob/c2457ff7d2a3189d35a190b9e4bb315f49dc080d/src/plots/plots.js#L107).",
    "created_at": "2018-07-03T10:31:59Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2769#issuecomment-402099552",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2769",
    "updated_at": "2018-07-03T10:31:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "You need to wrap the array in another array. As mentioned in the [`restyle` docs](https://plot.ly/javascript/plotlyjs-function-reference/#plotlyrestyle) (from which `update` inherits its behavior):\r\n\r\n> In restyle, arrays are assumed to be used in conjunction with the trace indices provided. Therefore, to apply an array **as a value**, you need to wrap it in an additional array.\r\n",
    "created_at": "2018-07-03T10:08:15Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2768#issuecomment-402090676",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2768",
    "updated_at": "2018-07-03T10:08:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Are there any plans to get this merged in and released?\r\n\r\nYes, it's ready to go but because it will result in substantial changes to the documentation we want to merge it immediately before releasing v1.39.0. That should happen within the next week.",
    "created_at": "2018-07-02T20:00:26Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2670#issuecomment-401916727",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2670",
    "updated_at": "2018-07-02T20:00:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "FYI making this whole situation more configurable is being discussed in #1876. That effort, whenever it happens, will include the ability to override this automatic padding.",
    "created_at": "2018-07-02T17:00:57Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1775#issuecomment-401869487",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1775",
    "updated_at": "2018-07-02T17:00:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "We initially envisioned this system being limited to style attributes, meaning those marked with `role: 'style'`. But there are two problems with this:\r\n- By default we strip `role` out of our attributes (at the [same time](https://github.com/plotly/plotly.js/blob/06738233c0bd61c4c6ff6e93f946f5a61d88bd43/tasks/util/compress_attributes.js#L31) as we strip descriptions) - we could put it back, but that's a fairly big carry for just this application.\r\n- We haven't been very careful with `role` - personally I think I've probably erred toward marking things `'info'` instead, if they *might* encode real information rather than just aesthetics - and it's not clear-cut anyway; users could easily have different expectations around which attributes should or should not be included.\r\n\r\nAnyway, if something gets included in the template and you don't want it in subsequent plots, you have two chances to fix this: first after the template is created you can manually remove items; then when it's applied you can always override it in the new plot. So I'm thinking of ignoring `role` entirely. We will still omit `valType: 'data_array'` or `arrayOk` arrays, which is the most important differentiator between a template and a full plot.\r\n\r\nThoughts? Any attributes or attribute classes we *really* don't want in the template, that I should find some other way to exclude?",
    "created_at": "2018-06-28T18:24:29Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2469#issuecomment-401128681",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2469",
    "updated_at": "2018-06-28T18:24:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Sure, those both sound completely reasonable. Would you like to make a PR to add them? In addition to adding them as [attribute values](https://github.com/plotly/plotly.js/blob/06738233c0bd61c4c6ff6e93f946f5a61d88bd43/src/transforms/aggregate.js#L71) as you already mentioned in the community post, they just need to be added in [`getAggregateFunction`](https://github.com/plotly/plotly.js/blob/06738233c0bd61c4c6ff6e93f946f5a61d88bd43/src/transforms/aggregate.js#L286) and then included briefly in the [aggregation test suite](https://github.com/plotly/plotly.js/blob/master/test/jasmine/tests/transform_aggregate_test.js)",
    "created_at": "2018-06-28T15:01:41Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2763#issuecomment-401065762",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2763",
    "updated_at": "2018-06-28T15:01:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Big improvement - thanks @chriddyp, looks great @etpinard 💃 ",
    "created_at": "2018-06-27T20:37:28Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2760#issuecomment-400820835",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2760",
    "updated_at": "2018-06-27T20:37:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "a mess indeed. This looks good to me! 💃 ",
    "created_at": "2018-06-27T18:47:30Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2758#issuecomment-400789873",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2758",
    "updated_at": "2018-06-27T18:47:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Very nice. 💃 stands (or continues dancing?), lets do it!",
    "created_at": "2018-06-26T19:39:29Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2739#issuecomment-400437309",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2739",
    "updated_at": "2018-06-26T19:39:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thinner + and x exist already (with thickness set just by `marker.line.width`):\r\nhttps://rreusser.github.io/plotly-mock-viewer/#marker_symbols\r\n![screen shot 2018-06-25 at 2 02 54 pm](https://user-images.githubusercontent.com/2678795/41867369-fc755b22-7880-11e8-8d2e-c2e19ff3ef88.png)\r\n\r\nI won't reopen the issue just yet without some more discussion, but I could imagine extending the system we have for path shapes - where we let you specify path strings with data values in them and we extract the numbers from the strings and rescale them to the specific marker. My only concern doing this is performance, shapes aren't really expected to be repeated thousands of times.\r\n\r\nThat said, it's possible we could also improve the performance of regular pre-defined markers by reusing the same path each time, scaling with a transform, and using `vector-effect: non-scaling-stroke`. If we did that, custom marker paths would be almost trivial to implement.",
    "created_at": "2018-06-25T18:33:19Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/330#issuecomment-400051511",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/330",
    "updated_at": "2018-06-25T18:33:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looking good! @etpinard will likely have more to say when he's back tomorrow, but some thoughts of my own to start:\r\n\r\n> Add support for axis-aligned clipping planes to construct a clipped version of the isosurface\r\n\r\n👍 the simplest way to do this would be 6 attributes `(x|y|z)(min|max)` and that might be the best in fact - we could do `xrange: [min, max]` or even `range: {x: [min, max]}` but those all seem like they make it harder to do the most common thing, which is to add a single clipping plane so you can see the data there.\r\n\r\n> Should isocaps be a separate trace or part of the isosurface? Now the isosurface has isocaps turned on and merged into the isosurface mesh. The lib supports breaking them into two and having separate colorscales for each.\r\n\r\nPart of the same trace. My gut reaction is the isosurfaces should by default be colored according to the isocap colorscale, but that you should be free to provide separate colors for each isosurface. What do you mean by \"separate colorscales\"? Each isosurface just gets a single color, right?\r\n\r\n> How to pass in data, now it's following the streamtube plot method of passing in x, y, z and u arrays, then constructing a meshgrid out of the x,y,z -values and using that as the coords for the u array of intensities. Is this ok?\r\n\r\nI think the input data format is good, though `u` I might rename to `v` or `value` - Or I guess `intensity` for consistency with `mesh3d` but I don't particularly like that attribute, I wish we had used `value` there.\r\n\r\nI'm not sure what you mean by \"constructing a meshgrid out of the x,y,z -values and using that as the coords for the u array\" though - won't the meshgrid you actually display be some sort of interpolation between the provided (x, y, z) values to find the isovalue?",
    "created_at": "2018-06-25T15:08:12Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2752#issuecomment-399985596",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2752",
    "updated_at": "2018-06-25T15:08:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "No updates, and the only workarounds I'm aware of are those I mentioned above. This would be a great issue for a community PR.",
    "created_at": "2018-06-25T14:23:37Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1962#issuecomment-399970066",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1962",
    "updated_at": "2018-06-25T14:23:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Hmm OK, IE11 normally works fine for plotly.js, including webGL. .NET isn't a platform I have any experience with so I won't be much help debugging unless we can figure out more detail about the error. I'll leave the report open, but wait to give it a `bug` label until we determine that there's something we could change here to fix it.",
    "created_at": "2018-06-22T18:22:16Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2751#issuecomment-399534929",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2751",
    "updated_at": "2018-06-22T18:22:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@analytics-bootcamp you're right, that's not a timezone issue. The issue there is that we automatically put the label \"Aug 2018\" at August 1, which is essentially at your bar for July 31. The ticks are not labeling the bars, though in this case they're very close to the bars, they're labeling axis positions.\r\n\r\nYou can force the behavior you want with eg:\r\n```js\r\nPlotly.relayout(gd,{\r\n    'xaxis.tick0':'2000-01-31', // canonical tick on the last day of the month\r\n                                // (which automatically sets tickmode: 'linear')\r\n    'xaxis.dtick':'M1', // can't use auto ticks with tick0, so you have to specify 1-month ticks\r\n    'xaxis.tickformat':'%b %Y' // eg 'Jul 2018', otherwise we'll show 'Jul 31'\r\n                               // (and year when necessary)\r\n})\r\n```\r\n\r\nI'm not really sure how we could figure out automatically that this is what you want though.",
    "created_at": "2018-06-22T17:13:49Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/482#issuecomment-399515068",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/482",
    "updated_at": "2018-06-22T17:13:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for the report @Helveg - there's not a lot to go on here though, so I can't tell whether it's a problem with the browser version loaded by `WebBrowser` or something specific to `WebBrowser` itself. Do you know which browser & version it is? Note if it's IE9 we have [extra requirements](https://github.com/plotly/plotly.js/blob/master/dist/README.md#to-support-ie9), older than that we do not support. Does this also happen with `plotly-basic-latest(.min).js` (or [other bundles](https://github.com/plotly/plotly.js/blob/master/dist/README.md#partial-bundles) that omit webGL)?\r\n\r\nLast q: certainly it's nice to be able to support as many legacy systems as possible, for compatibility with existing projects, but for projects that aren't yet locked in, is there any reason someone would *need* `WebBrowser` instead of CEF?",
    "created_at": "2018-06-22T15:29:46Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2751#issuecomment-399481228",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2751",
    "updated_at": "2018-06-22T15:29:46Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Any feedback on the interface change I described, Alex?\r\n\r\nTotally agreed on breaking up the functionality that way, and `getPointsIn` looks great. I just wonder if we can reduce the footprint a bit for `selectPoints`, `deselectPoints`, and `clearSelection`, into one item, something like:\r\n```js\r\ntoggleSelected(searchInfo, selected, pointIds)\r\n// @param {boolean} selected: are these points to be selected (true) or deselected (false)\r\n// @param {array[integer]} pointIds: the points to modify - omit to modify all points in the trace.\r\n//     ie clearSelection is toggleSelection(searchInfo, false)\r\n```",
    "created_at": "2018-06-22T13:39:07Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1852#issuecomment-399445610",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1852",
    "updated_at": "2018-06-22T13:39:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "confirmed, thanks @bcdunbar - cc @dy ",
    "created_at": "2018-06-22T12:56:40Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2750#issuecomment-399433349",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2750",
    "updated_at": "2018-06-22T12:56:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I think approach 3, as you've done it, is the right one - there may be other ways to select points that DO differentiate multiple points at the same coordinates, for example on a SPLOM you select points in one pane where they have different coordinates, then you modify that selection in a pane where they overlay. Working only with polygons would not be able to handle this.\r\n\r\nI can certainly see the appeal of having click-to-select pick all points at the current location instead of just the top one - while you're right that users can already do this with a tiny polygon, there's no way to  select *just* an occluded point either way, so this seems like a limitation as much as a feature. But I think we should solve this as a separate issue in concert with a multi-overlapping-point hovermode, that perhaps makes hover labels like `(4.2, 5.3) - 13 points` so you know from the tooltip what your click is going to select.",
    "created_at": "2018-06-22T12:25:02Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1852#issuecomment-399425093",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1852",
    "updated_at": "2018-06-22T12:25:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard beautiful, your trigonometry teacher would be very proud 🥇\r\nSounds like https://github.com/plotly/plotly.js/pull/2739#discussion_r197305287 may contain a small bug, otherwise just minor 🐄 comments. Lets do it! 💃 ",
    "created_at": "2018-06-22T11:52:15Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2739#issuecomment-399416902",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2739",
    "updated_at": "2018-06-22T11:52:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Love the look and feel now, nicely done! I still see some discrepancy between mouse position and polygon edge. In this clip, I'd expect the mouse to *always* be exactly on an edge of the polygon, but sometimes it's inside and sometimes outside:\r\n![polar poly zoom](https://user-images.githubusercontent.com/2678795/41724721-2ab484ce-753c-11e8-9b32-a5e9499c6d6f.gif)\r\nAlso, I can't angular-drag the upper-right subplot there (the green one) - should I be able to? I don't see anything in `layout.polar3` that I would expect to prevent it...",
    "created_at": "2018-06-21T14:29:28Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2739#issuecomment-399123605",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2739",
    "updated_at": "2018-06-21T14:29:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> and what if the cursor is on a vertex?\r\n\r\nbreak the symmetry however you like - but I don't think it's worth making bent handles at vertices, in fact I'd argue it's better to use the edge centers anyway because we know we're not obscuring any data points there.",
    "created_at": "2018-06-20T14:08:03Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2739#issuecomment-398762543",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2739",
    "updated_at": "2018-06-20T14:08:03Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Is this what you had in mind?\r\n\r\nI was imagining we'd put straight-line handles in the center of whatever polygon edge you're over - or, per our discussion yesterday on slack, whichever edge the mouse was over when you started the zoom, like this:\r\n![screen shot 2018-06-20 at 9 21 07 am](https://user-images.githubusercontent.com/2678795/41661851-9da907ae-746d-11e8-8ea4-eb2991615ddc.png)\r\n\r\nAlso the cursor should be *on* the polygon edge, not at the same radius as the polygon vertices. That's what I meant above:\r\n> the radial value implied by any given cursor location is given by the *polygon* it's on, NOT its distance from the center point.\r\n\r\n---\r\n> About ⤴️ , this doesn't apply to polar subplots at the moment. Only cartesian data-ref'ed layout items support real numbers between categories.\r\n\r\nGot it, thanks for clarifying.",
    "created_at": "2018-06-20T13:43:05Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2739#issuecomment-398752887",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2739",
    "updated_at": "2018-06-20T13:43:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Two ways come to mind:\r\n- Make a [translation](https://github.com/plotly/plotly.js/pulls?q=is%3Apr+is%3Aclosed+label%3A%22type%3A+translation%22)\r\n- Use `hoverinfo: 'text'` and make your own completely custom `trace.text` array.\r\n\r\nDoes either of those fit your use case?",
    "created_at": "2018-06-20T11:51:33Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2749#issuecomment-398722204",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2749",
    "updated_at": "2018-06-20T11:51:33Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> are any of your remarks in https://github.com/plotly/plotly.js/pull/2658#issuecomment-394836109 blocking for a v1 release?\r\n\r\nJust the broken tube - if there's a benign explanation for it then fine, I'd just like us to make sure we're not setting ourselves up for breaks in some broad class of conditions we haven't fully explored yet.",
    "created_at": "2018-06-19T18:15:15Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2658#issuecomment-398495072",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2658",
    "updated_at": "2018-06-19T18:15:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "You're correct, that ability doesn't exist today. I like the idea, and in v2 we could consider making this the default behavior, but for now it would need to be opt-in. Something like `sharegroupstyle: true` (though we have other kinds of groups too, it's getting a bit long but we may need `sharelegendgroupstyle`), would make this trace inherit style attributes from the first trace in the legend group before applying its own values. I'm a little uneasy with the order-dependence of that, could have some unexpected consequences upon reordering or adding/removing traces (and we'll have to be careful how it behaves on hiding/showing traces) but I think we can sort that out.",
    "created_at": "2018-06-19T11:50:39Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2744#issuecomment-398371613",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2744",
    "updated_at": "2018-06-19T11:50:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Note that this does have consequences. This plot works correctly:\r\n```\r\nPlotly.newPlot(gd,[{x:['1600-01-01','1600-01-01 00:01'],y:[1,2]}])\r\n```\r\nbut these two, which should be identical to the above, are both shifted by some seconds:\r\n```\r\nPlotly.newPlot(gd,[{x:[new Date(1600,0,1),new Date(1600,0,1,0,1)],y:[1,2]}])\r\nPlotly.newPlot(gd,[{x:[+new Date(1600,0,1),+new Date(1600,0,1,0,1)],y:[1,2]}],{xaxis:{type:'date'}})\r\n```",
    "created_at": "2018-06-19T02:01:37Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2743#issuecomment-398250470",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2743",
    "updated_at": "2018-06-19T02:01:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The distortion happens about noon on November 18, 1883 - exactly when [time zones took effect in the US](https://www.history.com/this-day-in-history/railroads-create-the-first-time-zones). My working hypothesis is that Chrome started using the computer's exact location, rather than simply its present-day time zone, to determine the time zone offset before this moment (update: not quite that precise: 15 miles west of here, which corresponds to about 80 seconds, has the same offset as I do). Note that Chrome 67 *also* now correctly identifies that in Boston, daylight saving time was not observed before 1918, so this seems to be part of a broader \"enhancement\" of Chrome's date handling logic.\r\n\r\nUnfortunately, they seem to have made the decision to set the actual offset between each location's time and UTC to the *second*, but the function `Date.getTimezoneOffset()` only has *minute* precision (in Boston I see a time zone offset of `296`, in Montreal @etpinard sees `317`, always an integer).\r\n\r\nSo our hack to remove timezones:\r\nhttps://github.com/plotly/plotly.js/blob/e7896e98f2643ba2824e5c4831b9f5d63f795cd4/src/lib/dates.js#L138-L141\r\nis off by some semi-random integer number of seconds. It looks like I can fix this by comparing `Date.getSeconds()` with `Date.getUTCSeconds()`. I suppose I have to bring in `Date.get[UTC]Minutes()` as well and compare it to the timezone offset, since I don't know how they're rounding - clearly not +/-30 sec since @etpinard sees 32 seconds off, but I don't know if it's 0-59 seconds, or -10 to 49, or...?",
    "created_at": "2018-06-19T01:59:25Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2743#issuecomment-398250071",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2743",
    "updated_at": "2018-06-19T01:59:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "That's super strange... thanks for bringing it up, I'll look into it. Another clue: I get a different error than you get, but I think for all the same ancient dates. Yours are off by 32 seconds, mine by only 2 seconds!",
    "created_at": "2018-06-18T21:32:33Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2743#issuecomment-398202727",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2743",
    "updated_at": "2018-06-18T21:32:33Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Aren't we planning on renaming `Plotly.react` -> `Plotly.plot`  in v2?\r\n\r\nsure :) Alright, fiddling a little it seems like `plotly_afterplot` was actually closer to firing after every GUI-initiated change than I thought, so perhaps it *is* worth extending it to be the one \"any change of state\" event and then renaming it (amid coalescing with other events) in v2.",
    "created_at": "2018-06-18T21:16:08Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2740#issuecomment-398198401",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2740",
    "updated_at": "2018-06-18T21:16:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "It's true, if there were one event that always fired after any change to the plot, that could be useful. But what if in v2 this event was `plotly_react`?",
    "created_at": "2018-06-18T20:43:54Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2740#issuecomment-398189306",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2740",
    "updated_at": "2018-06-18T20:43:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Good call @JOE95443 - the example at https://plot.ly/javascript/plotlyjs-events/#afterplot-event no longer acts as described.\r\n\r\n@etpinard I seem to recall us discussing this before and concluding we no longer even need afterplot, you can just use eg `Plotly.newPlot(...).then(...)` to accomplish its original purpose (and as this issue shows, the other times it currently fires it really shouldn't be used). So should we update the docs to describe it as deprecated and add this to #420?",
    "created_at": "2018-06-18T19:12:23Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2740#issuecomment-398163563",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2740",
    "updated_at": "2018-06-18T19:12:23Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Interesting... we had only considered the built-in text of the library to be in scope for translation, I suppose it would be possible to allow translation of the contents of the plot as well. Might even be possible to build this into `svg_text_utils` so it gets applied uniformly with minimal footprint. @etpinard thoughts?",
    "created_at": "2018-06-18T16:04:05Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2741#issuecomment-398106542",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2741",
    "updated_at": "2018-06-18T16:04:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Beautiful, thanks @rafalbromirski! 💃 ",
    "created_at": "2018-06-18T15:55:09Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2710#issuecomment-398103568",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2710",
    "updated_at": "2018-06-18T15:55:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard do you want to leave this open as a placeholder for a cleaner way to disable legend doubleclick, or shall we close it?",
    "created_at": "2018-06-18T15:51:22Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2733#issuecomment-398102236",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2733",
    "updated_at": "2018-06-18T15:51:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> So should the cursor follow the handle, or should it just snap to the closest polygon edge?\r\n\r\nMmm, it could actually be a bit weird if the handles move around everywhere the cursor goes, especially as they slip over the corners and would have to bend in arbitrary places. And there would be something nice about leaving the handles in the center of the polygon edge, where we know there's no data, only connecting lines. So yeah, I guess snap to the nearest edge center, sound reasonable?\r\n\r\nThat said, currently (circular mode) the starting handle is fixed and only the ending handle moves around with the cursor, I wonder if it wouldn't look cleaner to have the ending handle stay at the same angle as the starting handle no matter what? That's how we do it in cartesian with one axis `fixedrange` and I like it, makes clear that motion in the other direction is irrelevant. So I might argue for snapping the starting handle to the nearest edge center, then keeping the ending handle on the same edge no matter where the cursor goes.\r\n\r\nRegardless (and this may already be implied but just to be clear) I think it's important that the radial value implied by any given cursor location is given by the *polygon* it's on, NOT its distance from the center point.",
    "created_at": "2018-06-18T15:39:39Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2739#issuecomment-398098281",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2739",
    "updated_at": "2018-06-18T15:39:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "`radar` is ambiguous - actual radar screens have circles on them, right? And `spider: false` doesn’t really scream “circular” to me. So I’d prefer both shapes to be explicitly stated, like `gridshape: (linear|circular)`. \r\n\r\n> maybe make zoombox handles follow the polygon, this would make zoombox interaction lose their rotational symmetry though\r\n\r\nYes. Rotational symmetry is already gone. \r\n\r\n> maybe restrict theta values to string or \"integer\" to not show \"out-of-scale\" values\r\n\r\nThis isn’t already the case for category axes?\r\n\r\n> maybe make the angular drag layer a \"polygon\" annulus\r\n\r\nWould be weird if there are little gaps between the angular and radial drag areas, so probably yes. ",
    "created_at": "2018-06-18T14:33:27Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2739#issuecomment-398075163",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2739",
    "updated_at": "2018-06-18T14:33:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This is likely due to our performance improvements, so axis range changes don’t require a full replot anymore. The `plotly_relayout` event is really the one you want anyway, as it also tells you what the change was. ",
    "created_at": "2018-06-17T01:32:19Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2740#issuecomment-397848551",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2740",
    "updated_at": "2018-06-17T01:32:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Also for x/y contours it would be nice to just say \"all data points\" ie display a dense wireframe of the data, whether it's uniform or not (eg #2713). Not sure if there's a use case for it, but in principle you could also imagine wanting to specify each individual contour level ala `tickvals` on an axis (which *do* currently map into nonuniform contour levels, see https://codepen.io/alexcjohnson/pen/gKLBgR?editors=0010)",
    "created_at": "2018-06-15T12:26:18Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/485#issuecomment-397604971",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/485",
    "updated_at": "2018-06-15T12:26:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Confirmed, thanks @acarapetis - and the pared-down codepen is much appreciated! Seems to be a problem specifically with gaps in the lower trace.\r\n\r\nI'm probably going to need to muck with fills for #1217, perhaps I can fix this at the same time (along with the [many other fill bugs](https://github.com/plotly/plotly.js/issues/1217#issuecomment-393967628))",
    "created_at": "2018-06-14T19:26:08Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2736#issuecomment-397410706",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2736",
    "updated_at": "2018-06-14T19:26:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> could `template.layout.(annotation|shape)defaults` support array values?\r\n\r\nI suppose it *could* - there are cases like the one-annotation-per-trace we've been [looking at](https://codepen.io/alexcjohnson/pen/ERvewP?editors=0010), though this seems a bit unusual. I'd vote to leave it out for now, but would be an easy non-breaking add later.",
    "created_at": "2018-06-14T19:17:07Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2469#issuecomment-397408242",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2469",
    "updated_at": "2018-06-14T19:17:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "(side note: you may find `annotation.visible` better than `annotation.opacity`, particularly if you care about autoranging the axes: `visible: false` stops reserving space for the annotation, whereas `opacity: 0` will continue autoranging to include the annotation even though you can't see it. I've updated the codepen to use `visible` https://codepen.io/alexcjohnson/pen/ERvewP?editors=0010)",
    "created_at": "2018-06-14T19:08:18Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2733#issuecomment-397405827",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2733",
    "updated_at": "2018-06-14T19:08:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@contactsandygo the issue is that changing the trace visibility is delayed with respect to the `click` event now, so that we can distinguish single- and double-clicks. Anyway rather than diving into our element structure, I'd suggest binding to the `plotly_restyle` event that accompanies actually changing the trace visibility:\r\nhttps://codepen.io/alexcjohnson/pen/ERvewP?editors=0010",
    "created_at": "2018-06-14T18:18:22Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2733#issuecomment-397390716",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2733",
    "updated_at": "2018-06-14T18:18:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@dy  @etpinard you get a whole troupe for this one\r\n💃  💃  💃  💃 \r\n💃  💃  💃  💃 \r\n💃  💃  💃  💃 \r\n💃  💃  💃  💃 ",
    "created_at": "2018-01-18T21:56:41Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2258#issuecomment-358794824",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2258",
    "updated_at": "2018-06-13T17:51:44Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Anyway my comment ^^ is just a 🐎 question, could be addressed now or not, up to you. The bugfix here looks great, so if you want to leave it at that 💃 !",
    "created_at": "2018-06-13T17:32:54Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2734#issuecomment-397021674",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2734",
    "updated_at": "2018-06-13T17:32:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> So perhaps we could add `uid` attribute in each mapbox layer so that users that create a new source object on each react call can see their map update faster. Thoughts?\r\n\r\nPerhaps we should compare `source` as (JSON) strings if they fail strict equality (and use `_compareAsJSON` so `Plotly.react` does this too)?\r\n\r\nhttps://github.com/plotly/plotly.js/blob/27c77c11f2eab9cf773543926938743d2eb2b0fc/src/plot_api/plot_api.js#L2495\r\n\r\nCould be a bit slow if `source` is large, but I feel like `uid` is asking users to get a bit too involved in our low-level optimizations.",
    "created_at": "2018-06-13T17:18:45Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2734#issuecomment-397017307",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2734",
    "updated_at": "2018-06-13T17:18:45Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I'm a bit confused, what behavior there is undesirable? I don't see anything *out of sync*, which to me would mean the actual trace visibility not matching the visibility implied by the legend, or clicking on one legend item having an effect as if you clicked on a different item.\r\n\r\nIf you double-click one trace in the legend, then that trace is isolated (per #1432), then if you single-click that trace again you hide that trace so no traces are visible. That all seems to be working as expected as far as I can see. I understand that if you spam-click the legend it may be hard to tell what's a single-click and what's a double-click, but it'll be hard for the user to tell that too, so I doubt anyone would be surprised that this results in the plot being in a strange state.",
    "created_at": "2018-06-13T16:00:41Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2733#issuecomment-396992508",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2733",
    "updated_at": "2018-06-13T16:00:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for trying it standalone in codepen. The fact that it works there certainly implies either a problem with the build process you're using - though that looks fine to me and usually problems there manifest themselves earlier than this - or an interaction with something else on the page.\r\n\r\nLooks to me like the problem is with the class `.line` we apply to multiline SVG text `<tspan>` elements. All the single-line labels appear as they should, all the multiline labels disappear. Is it possible you can find the style rule that's hiding (or moving?) these elements, and make it more specific? I suppose if all else fails you could override it with your own super-specific-to-plotly rule like:\r\n\r\n`.js-plotly-plot .plotly tspan.line { reset whatever's being mucked up }`\r\n\r\nbut it would be much better (more robust and maintainable) to narrow the original rule if possible.",
    "created_at": "2018-06-13T13:46:56Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2720#issuecomment-396943063",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2720",
    "updated_at": "2018-06-13T13:46:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I don't think there's ever a case where you want the template to add a whole *trace* to the plot - I was envisioning just cycling through traces per type.",
    "created_at": "2018-06-12T21:10:44Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2469#issuecomment-396735156",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2469",
    "updated_at": "2018-06-12T21:10:44Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> a template whereby ALL annotations and shapes would be styled\r\n\r\nGood point, that's a different use case, I suspect it's important to support both. How about a parallel object like:\r\n```js\r\ntemplate.layout: {\r\n    annotationdefaults: {arrowcolor: 'green'} // defaults applied to all annotations\r\n    annotations: [{text: 'Confidential'}] // a specific annotation to add\r\n}\r\n```\r\nThen to let users extract this from a reference plot... perhaps if we make `name` a real attribute of component array items, the first item with no name, if any, could become the default (kind of the inverse of the second option above), and only named annotations would be included in the array.",
    "created_at": "2018-06-12T20:52:47Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2469#issuecomment-396729935",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2469",
    "updated_at": "2018-06-12T20:52:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Seems to be a hack to make legends happy. Should be easy to unwind on the legend side.\r\n\r\nhttps://github.com/plotly/plotly.js/blob/1a050e85c2b901b2579af0a5e09df00197271ca9/src/traces/scattermapbox/defaults.js#L46-L47",
    "created_at": "2018-06-12T19:51:38Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2727#issuecomment-396712036",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2727",
    "updated_at": "2018-06-12T19:51:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Question: what if someone wants a template to contain components in an object array? Like an annotation saying \"Confidential,\" or the company logo in `layout.images`? We need a way for users to use, not use, or modify these without modifying the template itself.\r\n\r\n@nicolaskruchten @VeraZab curious your thoughts on how this would fit with editor contexts and if you see alternatives.\r\n\r\nA simple option, seems a bit awkward but does fulfill these needs:\r\n- If the new figure doesn't have that array at all, we just use the template array unchanged.\r\n- If the new figure *does* have that array, we generate an output array with the max of the two lengths, and combine objects pairwise.\r\n- If you want to omit one of the template array items, set your item to `{visible: false}` (currently it looks to me like all container arrays except [`updatemenus[i].buttons`](https://github.com/plotly/plotly.js/blob/1a050e85c2b901b2579af0a5e09df00197271ca9/src/components/updatemenus/attributes.js#L17) and [`rangeselector.buttons`](https://github.com/plotly/plotly.js/blob/master/src/components/rangeselector/button_attributes.js) support `visible` - we should add it to those two anyway!). Anything else in these first items represents a modification to that template item.\r\n- If you want to create your own item in addition to the template items, first add `{}` for each template item. Creating these would be the responsibility of editor or client apps. I guess editors would need special logic to prevent deleting these objects too - you could only set them invisible.\r\n\r\nThat last part bothers me, having to insert some template-dependent number of `{}` before your own items. That makes changing templates awkward - any edits you make to these would be moot with the new template unless it contained substantially the same items in the same order, so what do you do in that case? Truncate this initial set if the new template has fewer items, and fill it with `{}` if it has more?\r\n\r\nAn alternative: append the template items to the end of the array, *unless* there's a specially-marked item, like `{templateindex: 1, bgcolor: 'red'}` which would pluck that element out of the template array, inserting it as modified at that point in the final array instead of appending it, and I guess if the template array doesn't have that item at all, turning it `visible: false`. Or perhaps even better, we could give the template items a `name` field and refer to them that way rather than by index, so that this modification would only apply to templates defining items of the correct name rather than all templates by index.",
    "created_at": "2018-06-12T19:40:01Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2469#issuecomment-396708874",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2469",
    "updated_at": "2018-06-12T19:40:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> disabling clicking on legend\r\n\r\nAs of v1.37 and https://github.com/plotly/plotly.js/pull/2581:\r\n`gd.on('plotly_legendclick', function() { return false; });`",
    "created_at": "2018-06-12T12:34:18Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2711#issuecomment-396573150",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2711",
    "updated_at": "2018-06-12T12:34:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Already included in #2725",
    "created_at": "2018-06-11T20:53:10Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2714#issuecomment-396383616",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2714",
    "updated_at": "2018-06-11T20:53:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": ":dancer:",
    "created_at": "2018-06-11T20:47:08Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2725#issuecomment-396381829",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2725",
    "updated_at": "2018-06-11T20:47:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Closed by #2724 - would be closed automatically when this fix hits master but first we're going to publish it with a patch off its own branch",
    "created_at": "2018-06-11T19:54:38Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2722#issuecomment-396366029",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2722",
    "updated_at": "2018-06-11T19:54:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Great! Smoothing off a few more rough edges with cones. 💃 ",
    "created_at": "2018-06-11T18:40:04Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2715#issuecomment-396343925",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2715",
    "updated_at": "2018-06-11T18:40:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "in fact any recalc after hiding the first of several histogram traces - click to hide A and then doubleclick the plot to autorange and the same happens.",
    "created_at": "2018-06-11T18:15:01Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2722#issuecomment-396336218",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2722",
    "updated_at": "2018-06-11T18:15:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Confirmed - thanks! This doesn't seem to have anything to do with syncing the charts though - the same thing happens if you just click the legend items the same way on the histogram, or a similar multi-trace histogram plot all by itself.",
    "created_at": "2018-06-11T18:05:55Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2722#issuecomment-396333463",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2722",
    "updated_at": "2018-06-11T18:05:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "related (mainly just about the attribute structure): #882 ",
    "created_at": "2018-06-11T16:16:56Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2721#issuecomment-396300231",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2721",
    "updated_at": "2018-06-11T16:16:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Right, sorry, that's one we haven't officially documented but it's useful in cases like this. `gd` is \"graph div\", the DOM element you rendered your plot into. If you just have one Plotly plot on the page you can do `gd = document.querySelector('.js-plotly-plot')`",
    "created_at": "2018-06-11T13:41:17Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2720#issuecomment-396247002",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2720",
    "updated_at": "2018-06-11T13:41:17Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "duplicate of https://github.com/plotly/plotly.js/issues/1267 - I'm afraid this is a rather long-standing issue...",
    "created_at": "2018-06-11T13:31:22Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2717#issuecomment-396243858",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2717",
    "updated_at": "2018-06-11T13:31:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I guess the question is really what you mean by \"resetting\" the axis - to what initial state? In your [bug codepen](https://codepen.io/plotly/pen/VdPbMa?editors=1010) you first make the plot with no layout, ie autoranged, so that becomes the state to reset to. How can we tell that you meant the second state, after the `Plotly.react` call, to be the reset state and not just a temporary mutation?\r\n\r\nPut another way, how can we tell the difference between the change you made with `Plotly.react`, which you expected would clear the reset ranges, and any other change, including user-initiated zoom and pan (where it would be rather silly to clear the reset ranges...)\r\n\r\nAnyway your point is well taken, there certainly *are* cases where you want these ranges to reset - if you make a totally different plot in the same div, for example, the reset ranges could bear zero resemblance to the new data. I'm just not sure how to distinguish these cases. I suppose we could make initial range into a regular attribute that, if omitted, we write back into `gd.layout` during the first draw; then any `Plotly.react` call that's *not* basing its `layout` on the previous state will automatically reset it. We've been trying to get *away* from mutating the figure during drawing though.\r\n\r\n@etpinard thoughts?",
    "created_at": "2018-06-11T13:29:01Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2718#issuecomment-396243160",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2718",
    "updated_at": "2018-06-11T13:29:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@guitar9 can you make a codepen or other reproducible example? If you're seeing this in a complex page you can pull your figure data out using `Plotly.Plots.graphJson(gd)` then paste it into a codepen. Thanks!",
    "created_at": "2018-06-11T13:12:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2720#issuecomment-396238201",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2720",
    "updated_at": "2018-06-11T13:12:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Range selectors generate `plotly_relayout` events:\r\n![screen shot 2018-06-11 at 7 23 12 am](https://user-images.githubusercontent.com/2678795/41229022-71890f7e-6d48-11e8-9ea8-6cd0e4fbecf0.png)\r\nThese events are nice because you can see any other range changes as well (zoom, pan...). Does that work for you?",
    "created_at": "2018-06-11T11:25:48Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2719#issuecomment-396210837",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2719",
    "updated_at": "2018-06-11T11:25:48Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I see, thanks for the extra info. You're right to be concerned about tooltips - that's #888 and probably applies here as well. Anyway we would probably need to make it a [`config` option](https://github.com/plotly/plotly.js/blob/master/src/plot_api/plot_config.js) to allow plots to scale this way, I'm fairly certain some users would consider this a breaking change.",
    "created_at": "2018-06-08T19:47:14Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2711#issuecomment-395869600",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2711",
    "updated_at": "2018-06-08T19:47:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Awesome, thanks for taking a look at this!\r\n\r\nThere's a 3rd bug in that codepen (and your new mock here), that contour lines I expected to be straight are not rendered straight. It looks to me as though it's actually the surface that's not getting drawn in quite the right place - perhaps it's trying to smooth the sharp edges a bit or something - and then the contours are at the correct coordinates but faithfully following the incorrect surface. See what happens to hover when I zoom in on the corner of the bottom:\r\n![screen shot 2018-06-08 at 2 47 27 pm](https://user-images.githubusercontent.com/2678795/41175414-fca65a96-6b2a-11e8-9c1c-637005a67fdb.png)\r\n\r\nAnyway, this is still 2 bugs down so lets get it in! 💃\r\nDo you want me to make a new issue for the 3rd one?",
    "created_at": "2018-06-08T18:51:05Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2712#issuecomment-395854927",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2712",
    "updated_at": "2018-06-08T18:51:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Alternatively, we could accomplish the same thing by specifying [right-hand-rule](https://en.wikipedia.org/wiki/Right-hand_rule) or left-hand-rule for the scene.",
    "created_at": "2018-06-08T15:38:31Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1940#issuecomment-395800412",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1940",
    "updated_at": "2018-06-08T15:38:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Bumping this to `bug` since you can set a reversed axis range (`scene.xaxis.range: [6500, 500]` eg [here](https://codepen.io/alexcjohnson/pen/gKLBgR?editors=0010)) and all the data disappears 😢 ",
    "created_at": "2018-06-08T15:36:11Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1940#issuecomment-395799649",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1940",
    "updated_at": "2018-06-08T15:36:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for the issue and proactive PR @jcubic! Before we get into the PR though, I'd like to understand a little better the issue you're trying to solve - can you make a codepen or similar that shows what the current behavior is that you'd like to change?\r\n\r\nNote: there are also some known issues with scaling plots that I'm afraid we'll run into here, see #888, #1988, #1902",
    "created_at": "2018-06-08T13:38:59Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2711#issuecomment-395763533",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2711",
    "updated_at": "2018-06-08T13:38:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Interesting, thanks for bringing this up @rafalbromirski! Seems like a reasonable check but the source must be a little different from what you've identified. The reason `gd` has no `layout` when you detach it in the test dashboard is that we [recreate it if needed every second](https://github.com/plotly/plotly.js/blob/49819237db1673dc98b087e6e1e7a9a9b607784b/devtools/test_dashboard/devtools.js#L157) so you're not looking at the same `gd`. If before calling `gd.parentElement.removeChild(gd)` you say `gd2 = gd`, you can see that at the end `gd2` is different from `gd`, and `gd2` still has a layout.\r\n\r\nHowever if you call `Plotly.purge(gd)` (possibly an [unmount](https://github.com/plotly/react-plotly.js/blob/6fe45a76d1542419fdbb9379941a631706bcf0a8/src/factory.js#L142) before this timer runs out?) we DO remove `layout`, and everything else we had attached to the `<div>`. So in that case the check you added makes a lot of sense, `gd` was valid at the time `resize` was called so we should not generate an error.\r\n\r\nCan you add a test to the [resize promise test suite](https://github.com/plotly/plotly.js/blob/49819237db1673dc98b087e6e1e7a9a9b607784b/test/jasmine/tests/plot_promise_test.js#L453-L498) mimicking this situation? I'm thinking:\r\n```js\r\nvar resizePromise = Plotly.Plots.resize(initialDiv);\r\n\r\n// now purge and detach the element before the resize timer runs out\r\nPlotly.purge(initialDiv);\r\ninitialDiv.parentElement.removeChild(initialDiv);\r\n\r\n// then wait for the promise as usual, if it doesn't error the test passes\r\nresizePromise.catch(failTest).then(done);\r\n```\r\nhmm, looks like that test file doesn't have our robust promise error handling (`failTest`) yet - needs it added like in [this commit](https://github.com/plotly/plotly.js/commit/26278de2dcc7771d8c76c45df8fa4e1623a06ea2#diff-739250b254e51d88177d4372123fb2d5), otherwise a failure is just manifest as a timeout because `done` never gets called.",
    "created_at": "2018-06-08T13:21:35Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2710#issuecomment-395758836",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2710",
    "updated_at": "2018-06-08T13:21:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I not a fan of trace \"layout\" attributes. ... I would even vote for deprecating all trace layout attributes in v2.\r\n\r\nThat's a pretty strong statement! But I think I can get behind it. Thinking through the details of individual use cases there are still a number of decisions to make, but I think we can work it out. That said...\r\n\r\n> (second trace) would not coerce 'bargap', 'bargroupgap, ... if not first trace in bargroup, Plotly.validate would pick this up!\r\n\r\nMy concern about this is its impact on reordering traces - which I suspect is fairly common in exactly these cases where traces within a group interact with each other. If I have a lot of stacked items there may be different ways I want to organize them, and if this resulted in moving the first trace out of its spot, I'd need to also move the group attributes to the new first trace.\r\n\r\nWhat if we just take the first value we find for these attributes, looking at every trace in the group, and apply that value to all of them in `fullTrace`? Then `Plotly.validate` would naturally complain if two traces contained different values but not if two contained the same value. Also think about hiding the first trace in the group - seems like these attributes should still apply even from an explicitly `visible: false` trace.\r\n\r\n> I think using `orientation` in a scatter trace would be confusing. ... We would again lose symmetry with bar though.\r\n\r\nI feel like symmetry with bar - when the function is the same which I think it is here - is worth a good deal, not just in terms of simplifying the editor as folks toggle between bar and area, but from a straight plotly.js user perspective as well, not having to learn more attribute names. Would it suffice to include in its description \"applies only to stacked area traces\"?\r\n\r\n> Similarly, I would prefer using `stackgroupnorm` or `stacknorm`.\r\n\r\nAgain I feel like the function is the same so we should use a name that works for both bar and scatter. Right now we have `barnorm`, which needs the `bar` qualifier because it's in `layout`, but once it's in the trace it wouldn't need that. But it's not necessarily a stack normalization, it can apply to grouped bars as well. I might have just called it `norm`, but we have `histnorm` in histogram traces, which handles normalization across bars *within* one trace, and in fact you can currently use `trace.histnorm` alongside `layout.barnorm`, for example to show the relative densities of two distributions. It's a little tricky to interpret, since you're normalizing twice across different axes of the data, but it does work:\r\n```js\r\nPlotly.newPlot(gd,[{\r\n  x: [1,1,1,2,2,3], type: 'histogram', histnorm: 'probability'\r\n},{\r\n  // eg 2 results in 50/50 because 2 is one third of the samples in each trace\r\n  x: [1,1,1,1,2,2,2,2,3,3,3,3], type: 'histogram', histnorm: 'probability'\r\n}],{\r\n  barmode: 'stack', barnorm: 'percent'\r\n})\r\n```\r\n![screen shot 2018-06-07 at 2 43 20 pm](https://user-images.githubusercontent.com/2678795/41119585-25ce3ddc-6a61-11e8-8795-78ed885368fb.png)\r\n\r\nSo if `histnorm` is \"normalization of the histogram binning results\", what do we call \"normalization of the trace grouping that we either stacked or grouped side-by-side\"? Again, since functionally it's equivalent whether we're talking bars or stacked area I'd like to use the same name for both. If we didn't already use `barmode: 'group'` it could easily be `groupnorm`; maybe we just use that, I can't really find anything else nice... `setnorm`? `combonorm`? `batchnorm`? [`possenorm`](http://www.thesaurus.com/browse/group) 🤠?\r\n\r\n> We could alternatively suggest using a `sort` transform\r\n\r\nTBH I can't really figure out a stacking algorithm that would make sense without sorting, except I guess for the very top trace, so I think sorting needs to be baked in.",
    "created_at": "2018-06-08T02:40:51Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1217#issuecomment-395628232",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1217",
    "updated_at": "2018-06-08T02:40:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "🎉 💃 very nice!",
    "created_at": "2018-06-07T18:35:43Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2709#issuecomment-395521850",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2709",
    "updated_at": "2018-06-07T18:35:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Seems reasonable - perhaps even just change to 4 separate tooltips as you suggest, rather than making this configurable. This is already basically what we do for box plots:\r\n![screen shot 2018-06-07 at 10 10 36 am](https://user-images.githubusercontent.com/2678795/41105185-157f2afc-6a3b-11e8-9553-1ef83fd19150.png)\r\nCould make a great first PR if you're looking to get involved - look at how [box hover](https://github.com/plotly/plotly.js/blob/95c88e686601a7c3fa109d6f87c91be0c1b5a667/src/traces/box/hover.js#L48) works and fit something similar into [OHLC hover](https://github.com/plotly/plotly.js/blob/master/src/traces/ohlc/hover.js) (which is shared by candlestick)",
    "created_at": "2018-06-07T14:15:56Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2706#issuecomment-395436325",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2706",
    "updated_at": "2018-06-07T14:15:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "BTW the gradient on part of the orange fill in @nicolaskruchten 's comment above seems to be a Chrome + Mac Retina screen rendering bug - fiddling around with similar multiply-self-crossing paths I can get all manner of related errors on my laptop's main (retina) screen, but they all look fine when I put the window on my second monitor (non-retina) or in FF or Safari on the retina screen. I'm going to [ignore it](https://en.wikipedia.org/wiki/Somebody_else%27s_problem) and hope Chrome fixes it.",
    "created_at": "2018-06-06T20:00:17Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1217#issuecomment-395194775",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1217",
    "updated_at": "2018-06-06T20:00:17Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nicely done! 💃 ",
    "created_at": "2018-06-06T19:35:22Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2697#issuecomment-395187872",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2697",
    "updated_at": "2018-06-06T19:35:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Possibly useful: https://github.com/mathjax/MathJax-docs/wiki/Using-different-mathjax-renderers-on-one-page",
    "created_at": "2018-06-06T18:06:43Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2300#issuecomment-395161772",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2300",
    "updated_at": "2018-06-06T18:06:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Re duplicates and ordering, I would want to just stick with whatever we currently do for filling, which can lead to some crazy results, but at least we're not introducing a whole new way of filling...\r\n\r\nI don't think we can get away from doing something new here.\r\n\r\nIf you have unordered data below and ordered above, you'll be stacking as though the values below were ordered, creating entirely new strange behavior. Anyway, when you're just filling but not stacking there are legitimate reasons to have unordered data, but it seems to me that when you're stacking you've made a strong statement that `y` is a function of `x` (or vice versa if horizontal) so we can only help the user by sorting.\r\n\r\nIf you have duplicates below and unique values above, which one do you add onto? One way to arrive at the solution I gave above is to imagine the duplicate points start out at slightly different `x` and you take the limit as they push to the same `x`. I can imagine this arising in data for example if you've sampled some quantity in time, and took multiple samples on one day but only recorded the date. Seems to me showing (and stacking on) all the points is the most faithful we can be to the input data.",
    "created_at": "2018-06-06T15:11:18Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1217#issuecomment-395104393",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1217",
    "updated_at": "2018-06-06T15:11:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "yep, at some point we should make an attempt to 🌴 it up - will probably uncover and fix a bunch more bugs that way like I did (am doing...) with colorbars in #2681 \r\n\r\nBut nice quick fix 💃 ",
    "created_at": "2018-06-05T22:41:52Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2698#issuecomment-394883457",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2698",
    "updated_at": "2018-06-05T22:41:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks like there's a broken tube in `gl3d_streamtube-first`:\r\n![screen shot 2018-06-05 at 3 33 18 pm](https://user-images.githubusercontent.com/2678795/40998503-00c2bd7e-68d6-11e8-92c8-328f753d3f16.png)\r\nnear here:\r\n![screen shot 2018-06-05 at 3 34 00 pm](https://user-images.githubusercontent.com/2678795/40998505-068d7e38-68d6-11e8-9c79-4f18e2e83ad5.png)\r\n\r\nI also notice that when multiple tubes come together and overlap we don't do anything to stop this, for example this set of 3 near the one I flag ^^ that spend most of their length conjoined. Is that a normal way of handling things? Not what I would have expected comparing these to 2D streamline plots, for example, where a line usually disappears when it gets too close to another.\r\n\r\nRelated: what if a line gets too close to *itself*, or goes on forever? Like, what would happen if we express the Lorentz attractor as a vector field and try to draw tubes on it? Or a magnetic field, whose lines *always* close?",
    "created_at": "2018-06-05T19:44:42Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2658#issuecomment-394836109",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2658",
    "updated_at": "2018-06-05T19:44:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> `stackgaps: (inferzero | interpolate | interrupt)`\r\n\r\n👍 though in atttribute values we've tended to include spaces between words, so it could be\r\n`stackgaps: ('infer zero' | 'interpolate' | 'interrupt')`\r\n\r\n> I'd be fine with not implementing that final mode in the first version of this thing and leaving it as a nice-to have\r\n\r\nAbsolutely - the goal here is just to make sure the API will support all the options we anticipate, but we can start with the default behavior.\r\n\r\n> I'll be curious to see what orphan points will look like there.\r\n\r\nNot great... you won't see them at all unless markers are displayed. Another option we could consider, that would be better for orphan points and perhaps alleviate my concern about the Highcharts behavior making it look like the neighbors are weird rather than the missing point itself: draw the fill halfway to the missing point before breaking it (probably following the same path that would be taken by `'interpolate'`, though you could imagine other options like extrapolating as a constant from either side), something like:\r\n![screen shot 2018-06-04 at 9 43 50 am](https://user-images.githubusercontent.com/2678795/40920890-e8e855d8-67db-11e8-8861-2ad511ee7152.png)\r\nThis way orphan points would generate a fill spanning from halfway to the preceding missing point through halfway to the following missing point, essentially like bars unless it's the first or last point.\r\n\r\n# API\r\n\r\ntldr this is what I'm proposing:\r\n```js\r\ndata: [\r\n  {\r\n    type: 'scatter',\r\n    x: [...], y: [...],\r\n    stackgroup: '1', // this (any non-empty value) is what enables stacking\r\n    orientation: 'h', // like horizontal stacked bars - along with stackgroup this sets default fill attr\r\n    groupnorm: 'percent',\r\n    stackgaps: 'interpolate'\r\n  },\r\n  {\r\n    x: [...], y: [...],\r\n    stackgroup: '1',\r\n    orientation: 'h',\r\n    // groupnorm here would be ignored unless omitted above\r\n    stackgaps: 'infer zero'\r\n  }\r\n],\r\nlayout: {\r\n  // could specify groupnorm, stackgaps here instead if uniform\r\n}\r\n```\r\n\r\nThere would be advantages to making the whole stack into a single trace, with an array similar to `dimensions` from parcoords/splom, which is effectively how all the others mentioned above do it.\r\n- The structure tells you which items to stack with no extra attributes.\r\n- You have an obvious place to put attributes that apply to the whole stack but not necessarily the whole plot (normalization, orientation).\r\n\r\nBut I still think we're better off leaving this as a collection of `scatter` traces:\r\n- Single-trace doesn't match how we handle bar stacks, and the general pattern in plotly.js that one trace is one relationship between the relevant coordinates. Which also means it would be harder to change between stacked and unstacked or area & bar\r\n- Other libs doing this lose generality re: the x coordinate - though we could solve this by allowing `x` arrays inside the array elements.\r\n- Essentially all the style attributes from scatter would need duplication in this new context.\r\n\r\nRe: a `barmode` analog - we talked about the current limitations of `barmode` (grouped stacks, and subplots with different styles). Seems like (as we've discussed before) in the bar case we can alleviate that with a trace-level attribute like `stackgroup`, which would have arbitrary values and group matching items like `legendgroup` does (in this case it would also group by subplot, and I guess by `orientation`, see below). As far as I can see, the same logic should apply to stacked area. We could imagine a layout-level attribute that says \"stack all scatter traces\" but it might be cleaner to just require a `stackgroup` attribute to activate stacking.\r\n\r\n`stackgaps` could be `layout`-level or `trace`-level. I feel like users would generally want to provide that setting graph-wide but implementation-wise it'll be just as easy to use the `layout`-level attribute as the default for the `trace`-level one.\r\n\r\nRe: a `barnorm` analog - currently `barnorm` is only a `layout`-level attribute. Per its name it only applies to `bar` traces, but note that it applies to `barmode: 'stack'` and `'group'` bar traces, ie anything but `barmode: 'overlay'` (in that case there's no \"group\" so you'd always be normalizing by the sum of a single item). I'm tempted to suggest an attribute `layout.groupnorm` to supersede `barnorm` and include stacked area - though of course there are groups this should not apply to, box and violin 🤔. but then the question is how to specify a per-group normalization. So I can see two ways to specify this:\r\n- `trace.groupnorm`, but we only use the first one we find per group (🙇 @etpinard )\r\n- `layout.groups`, a `keyedContainer` providing attributes for each trace group.\r\n\r\nThe latter is arguably more correct, as there's no ambiguity, there's exactly one place to specify one value. But it seems heavy and potentially confusing to users. Actually it becomes even more complicated with the planned extension for bars - if we have grouped stacks, you might want to normalize so each stack reaches 100%, or you might want to normalize so the sum of all stacks in each group is 100%. The former seems like the more natural (and more common) case, the latter could perhaps be another `barnorm` value, but note that this setting would in principle apply per subplot, not per `stackgroup`. That seems like a more concrete strike against `layout.groups`.\r\n\r\nOne more thought: do we want to allow stacking horizontally, not just vertically? Perhaps an `orientation: ('v'|'h')` to match bars, which also makes switching between them easier. I thought about if we could enable this just by setting `fill: 'tonextx'` instead of the normal `fill: 'tonexty'`, but that seems a little too magical, and would also cause problems if you wanted to include an unfilled trace in the stack, perhaps as a baseline that everything else is stacked on. I suppose though we could let `orientation` set the default `fill`, since `orientation` has no purpose without stacking.\r\n\r\n## More data issues\r\n\r\nTwo more related questions about `x` values (or `y` if horizontal):\r\n- What if they're unordered? Just sort them?\r\n- What about duplicates? My first thought is to sort first on value and second on index, so we keep all duplicates in the order they appear. Then if you have different `y` values for that one `x` you'll get a line that goes up and down, and can leave from a different y than it entered from. If higher traces do not have the same multiplicity they'd also need to get both `x` and `y` copied before the stacking process, so the line would keep doing the same thing. So if you provided:\r\n```js\r\n{\r\n  x: [2,0,1,2,4,3,2], // out of order and 2 shows up 3x\r\n  y: [1,1,2,3,2,3,2], // values for x=2 are 1, 3, 2\r\n  stackgroup: '1'\r\n}, {\r\n  x: [0,1,2,3,4], // no duplication, all in order, but we draw extra values at x=2\r\n  y: [2,3,3,2,2], // because otherwise what y do we stack onto?\r\n  stackgroup: '1'\r\n}\r\n```\r\nyou'd get something like:\r\n![screen shot 2018-06-05 at 2 52 04 pm](https://user-images.githubusercontent.com/2678795/40996566-1b3815d8-68d0-11e8-838c-765a335d9455.png)\r\nI don't have a use case in mind for this, just trying to do something that won't hide the problem (like, for example, just using the first y for each x) and might even be what the user intended.",
    "created_at": "2018-06-05T19:11:10Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1217#issuecomment-394826415",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1217",
    "updated_at": "2018-06-05T19:11:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "haha I guess we don't look for a constant `text` attribute, we just see something truthy and assume it's an array. Thanks for the report @cpsievert ",
    "created_at": "2018-06-05T18:20:14Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2693#issuecomment-394810476",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2693",
    "updated_at": "2018-06-05T18:20:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks like you got a good bunch (I assume these came from https://github.com/plotly/plotly.js/graphs/contributors?), there are a few more at https://github.com/plotly/plotly.js#creators\r\n\r\nBTW if you'd like a charting library with a more *open* license to use on *Open Hub* I can recommend one 😉 ",
    "created_at": "2018-06-05T14:15:06Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2692#issuecomment-394725517",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2692",
    "updated_at": "2018-06-05T14:15:06Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I'm afraid we don't have anyone with much Vue experience internally at Plotly, whereas we actively use React and have some in-house [Angular](https://github.com/plotly/angular-plotly.js) experience. So it would be difficult for us to create an \"official\" Vue wrapper and have much confidence in it. The [vue-plotly repo](https://github.com/statnett/vue-plotly) @chiaramdelucia pointed to is the most mature option I'm aware of at present. If you think it's a good start architecturally, I'd encourage you to contribute PRs or issues to improve it, perhaps using code from our official [React wrapper](https://github.com/plotly/react-plotly.js) as a point of comparison.",
    "created_at": "2018-06-04T15:35:59Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2691#issuecomment-394399304",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2691",
    "updated_at": "2018-06-04T15:35:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> One worry I have around both interpolate and gaps is that we support neither in our stacked-bar implementation as far as I know.\r\n\r\nThe key difference, from my standpoint, between stacked bars and stacked area is the physical connection between subsequent points. Which is why interpolation makes little sense for bars but a lot of sense for area, because in most cases you're showing an interpolation already. The big exception to this is a categorical x axis like in your party/province chart above, where the lines are drawn really just as a form of object constancy (the object being each province).\r\n\r\nThe argument in favor of gaps could also be applied to bars - in as far as the total is important and you don't want to make any assumptions about missing data, you could say that we should truncate a bar stack at a missing value. The problem with that is that with bars you can't tell the difference between a truncated stack and just all zero entries above it; whereas with area, you clearly see the line(s) stop if there's a gap vs drop smoothly to zero if all higher entries are zeros. I don't see a good option to disambiguate this with bars.\r\n\r\n> One other salient point of comparison between stacked bars and stacked areas are handling of negative values. Google Sheets/Excel basically handles this by overlapping/\"folding\" the area downwards, which is sort of how our `stack` mode operates, but I'm not sure I can imagine an area equivalent of our `relative` mode :)\r\n\r\nYes, seems like folding is the way to go here, and we share (by default) Google's semitransparent fills, which helps a bit with interpreting these folds. I guess *in principle* you could imagine a `relative` mode where the positive area goes to zero at the same time as the negative area grows:\r\n![screen shot 2018-06-03 at 11 17 29 am](https://user-images.githubusercontent.com/2678795/40888067-d1cf8cb6-671f-11e8-9fff-6425c72c1bf2.png)\r\nseems a bit weird though.\r\n\r\n> Highcharts interrupts the area stacking for missing values\r\n\r\nThat's an interesting option - a gap for the series that has the gap, then make the same area you would have made for all higher traces but slide them down into the gap. It's a little weird that it makes it look like there's something strange in the data for the higher traces at the points *next* to the gap, but at least a) you see as much of the total as is known, b) you see that something is weird so you are alerted not to infer too much from the data around there, and c) if you look carefully enough at it you can figure out which data point is missing. So yeah, I guess I like it, I'd be fine using that behavior for `stackgap: 'gap'` mode. One other thing to note, all markers end up in the same places as they would with `stackgap: 'zero'` - which isn't necessarily an argument in favor of it, but may be nice for implementation.",
    "created_at": "2018-06-03T15:50:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1217#issuecomment-394171313",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1217",
    "updated_at": "2018-06-03T15:50:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "You want https://plot.ly/javascript/reference/#layout-annotations\r\n\r\nThis kind of question is more appropriate for https://community.plot.ly/c/plotly-js",
    "created_at": "2018-06-02T14:55:56Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2690#issuecomment-394093202",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2690",
    "updated_at": "2018-06-02T14:55:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "That was quick! Looks great :dancer:",
    "created_at": "2018-06-01T23:18:17Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2689#issuecomment-394033414",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2689",
    "updated_at": "2018-06-01T23:18:17Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Wow, that seems... draconian. So much so that I'm not sure anyone would really want to use it?\r\n\r\nThis wouldn't be the default for gaps introduced by the stacking process - the default would match gsheets and excel and fill with zeros, which if I'm interpreting your party/province plot right is probably what you'd want to have there, right? Missing items are not unknown data, they're cases of zero count.\r\n\r\nBut I can certainly imagine doing an analysis and not wanting to make any assumptions about missing data, especially if that missing data is explicit in the data as an x with no/invalid y. And really the only way to do that is to throw out the unstackable data.",
    "created_at": "2018-06-01T21:15:47Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1217#issuecomment-394011120",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1217",
    "updated_at": "2018-06-01T21:15:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard seems like these came in with some of the 🐎 optimizations between 1.36 and 1.37 https://codepen.io/alexcjohnson/pen/jKbmmV",
    "created_at": "2018-06-01T21:09:40Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2688#issuecomment-394009843",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2688",
    "updated_at": "2018-06-01T21:09:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @kochelmonster - there's another bug if you delete the text array:\r\n```js\r\nPlotly.restyle(gd, {text: null})\r\n```\r\n\r\nThe text doesn't disappear, and gets stuck in place if you pan/zoom on the plot:\r\n![screen shot 2018-06-01 at 5 02 05 pm](https://user-images.githubusercontent.com/2678795/40863384-9a254e12-65bd-11e8-9c51-dae85581e973.png)\r\n",
    "created_at": "2018-06-01T21:03:07Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2688#issuecomment-394008352",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2688",
    "updated_at": "2018-06-01T21:03:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "If you're not filling gaps (with zeros or interpolations), then anything above a gap gets discarded - that's what I meant by \"probably we'd want all gaps to propagate upward to the top of the stack.\"",
    "created_at": "2018-06-01T20:15:59Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1217#issuecomment-393997181",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1217",
    "updated_at": "2018-06-01T20:15:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I have a concern about gap ... How would that render? If I have a single data point for a given trace with gaps on either side, then it will look like an empty quadrilateral with a single dot? Otherwise it would in effect me the same as zero no?\r\n\r\nright - an \"orphan point\" we've called that in the past - it doesn't make a line segment either, so if you don't show markers you won't see anything.",
    "created_at": "2018-06-01T19:29:45Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1217#issuecomment-393986144",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1217",
    "updated_at": "2018-06-01T19:29:45Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> That said, could this new attribute help us alleviate some current less-than-ideal fill problems? There are many open issues about this: #1132, #1867, #113, #1205 and possibly others.\r\n\r\nmmm, there's some interaction between this issue and some of those - particularly #1132 and #1205 - but I think those are pretty much all implementation issues, not problems of specifying the desired behavior.\r\n\r\n> As an aside, this problem of mismatching x in stacked area chart appear very plotly specific. Both MATLAB and mpl assume the same independent coordinates for all their stacked area \"y\" arrays.\r\n\r\nTrue, that's because both of those create all stacked lines in a single function call, so conceptually as a single object. We could in principle do the same, treating the entire stack as a single trace, but we can do better than that. I've certainly encountered plenty of situations like the population example I described, where I wanted to add up data that didn't come with matching x values, and I'd have loved it if this *just worked* ™️ \r\n\r\n> Should we display the \"true\" y datum or the stacked (i.e. cumulative) y value?\r\n\r\n`hoverinfo: 'x+y+total'` (or `'sum'` or something). Where `'y'` is the value of the trace you're focused on... I'm not quite sure whether `'total'` is the partial or complete sum... I guess perhaps we want to allow both (`'x+y+partial+total'`?) but I'm not sure which should be the default? When you're hovering on a single point I can see wanting to know the sum of everything up to and including that point (that's where your cursor is after all... but there may also be particular subtotals you're interested in), as well as the total of everything in the stack so you can quickly see \"this item is 10% of the total\" (maybe we even want `hoverinfo: 'percent'` or something?)\r\n\r\n> Similarly, should we include the y datum or the stack value in the plotly_(hover|click) event data?\r\n\r\nI think the `y` field in the event data should be the y datum but we should also include `subtotal` and `total` as separate fields.\r\n\r\n> These new hoverinfo keys could be used in stacked bar charts too.\r\n\r\n😍 ",
    "created_at": "2018-06-01T18:52:58Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1217#issuecomment-393976937",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1217",
    "updated_at": "2018-06-01T18:52:58Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@baaron4 closing as I don't see any action items here - other than potentially improving the docs to highlight the default `barmode`? Feel free to comment if I'm missing something though and we can reopen.",
    "created_at": "2018-06-01T14:46:16Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2675#issuecomment-393903262",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2675",
    "updated_at": "2018-06-01T14:46:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks like the same root issue as #2643, or perhaps #2644. Regardless we clearly need some better solutions for updating a plot that the user may already be interacting with...",
    "created_at": "2018-06-01T00:35:35Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2687#issuecomment-393724093",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2687",
    "updated_at": "2018-06-01T00:35:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I don't think there's actually a difference between the two: Excel isn't drawing lines at all, only fills, so there's nothing to omit, but presumably you can turn lines on and then I bet they would be drawn the same way as Google's.\r\n\r\nAs @nicolaskruchten alludes to, the question of what to do with mismatched `x` values is the key sticking point here, the reason adding stacked area charts is not as easy for us as adding stacked bars.\r\n\r\nGoogle sheets (and Excel, at least by default, I haven't looked in detail) has a simpler data model than we do: every series shares the same `x` data, so it's not possible to have mismatched `x`, the most you can do is have empty `y` at certain `x` values. They seem to treat those empties as zeros. That's certainly a plausible interpretation for certain data anyway, but not all, and it differs from how we handle scatter (line) in other contexts - where a missing `y` (or `x` for that matter) either leaves a gap or gets the line drawn straight from one valid point to the next, depending on the `connectgaps` setting.\r\n\r\nSeems to me when we stack area charts we can internally fill in missing x values across all the stacked traces, and then there are perhaps three ways you might want to interpret gaps:\r\n- Treat them as 0 (like google sheets does) - this would arise for example if your data came from doing an SQL aggregation (sum of sales by month, for example) and there were no events to aggregate in some of the periods.\r\n- Interpolate (linearly?) across the gap. This is basically the equivalent of `connectgaps: true`, and would make sense in cases of incomplete data, for example you're summing populations across different countries by year, you don't have data for every country for every year but interpolating is a good assumption (certainly better than guessing zero population in those years!). This could get tricky if we want to take `line.shape` into account and try to make the (first) stacked trace look identical to its unstacked alternative. That's probably not necessary though, at least to begin with we can interpolate linearly (which is also probably about the only interpolation option that preserves the total, independent of stacking order). But I think it probably *is* important to not display markers at the interpolated points.\r\n- Leave a gap. If you really want the plot to show what's truly known, with no extra interpretation, then gaps should be left empty. This is equivalent to `connectgaps: false`. We could do complicated things with stacking gap-less traces on top of gapped traces, but since the point here is to not make any assumptions that aren't explicit in the data, probably we'd want all gaps to propagate upward to the top of the stack.\r\n\r\nSo if the second and third cases are covered by `connectgaps`, what about the first (which, to fit with Google & Excel, should be the default)? I suppose it could be a new `connectgaps: 'zero'` or something? There would also be an argument for making this a separate setting, so that `x` values with an *invalid* `y` (`''`, `null`, non-numeric) would be treated differently from `x` values that get inserted just because they're present in other data sets. Perhaps you'd like newly-inserted `x` values to get `y=0` but invalid `y` to be treated as a gap?\r\n\r\nI guess I can imagine cases where that would be the \"most correct\" way to display the data, though it might be more complexity than users really want. On the other hand making a new setting for this would allow us to avoid turning `connectgaps` into another \"boolean plus a string\" enumerated attribute, as well as avoiding extra logic around its default value. And mostly people would just use the default value of this new setting. So what could this new attribute be? How about\r\n`stackgaps: ('zero' (dflt)|'gap'|'interpolate')`?",
    "created_at": "2018-05-31T21:43:39Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1217#issuecomment-393690305",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1217",
    "updated_at": "2018-05-31T21:43:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I also can't reproduce - I can delete and reinstall `@plotly/d3-sankey` v0.5.0 with no errors.\r\nOS X 10.13.4 with node 8.9.4, npm 5.8.0\r\n\r\nI don't see how it would cause such a problem, but note plotly.js uses d3 v3 still - and we've seen it cause occasional problems in the front end if both v3 and v4 (or 5) are loaded in one page - see eg https://github.com/plotly/plotly-webpack/issues/5",
    "created_at": "2018-05-31T18:35:42Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2686#issuecomment-393632624",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2686",
    "updated_at": "2018-05-31T18:35:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I saw that possibility, but it requires to manually set the color of the line as well, rather than letting plotly do the coloring.\r\n\r\nSeems like a reasonable use case... I wouldn't be opposed to adding that.\r\n\r\n> In my project I'm changing the list of default colours provided by the `Colors` component, in order to avoid manually setting the colour in every plot I create.\r\n\r\nHave you seen `layout.colorway` that does exactly that? https://github.com/plotly/plotly.js/pull/2156 It's still part of each figure then, but it can be a constant for every plot, and then it doesn't require you to have a custom build.",
    "created_at": "2018-05-31T18:07:25Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2684#issuecomment-393622893",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2684",
    "updated_at": "2018-05-31T18:07:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> This doesn't solve the `pr-br` vs `pt` case though. We should try to find a `pt` speaker. \r\n\r\nThat's a (hopefully) uncommon case, where [3/4 of the language's speakers are in a single non-base region](https://en.wikipedia.org/wiki/List_of_territorial_entities_where_Portuguese_is_an_official_language) (and 20x the number in the base region) - I have no idea how different the two are, but I think it's OK to leave as is for now - hopefully a user from Portugal will come along and make us a `pt` and then we can collapse the two if they *do* have enough overlap that it's justified.",
    "created_at": "2018-05-31T14:19:42Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2683#issuecomment-393546034",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2683",
    "updated_at": "2018-05-31T14:19:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I'd vote for making all locale dist files (base and regional) standalone, that way users only have to import one file to localize their app.\r\n>\r\n> The only drawback I can think is for app that want to display multiple locales. In this case, importing a base locale along with its regional variants will lead to a few duplicated kBs.\r\n\r\nWhat if we do this in code? ie have `lib/locales/de-ch.js` be:\r\n```js\r\nmodule.exports = Lib.extendDeep({}, require('de'), {\r\n    name: 'de-CH',\r\n    format: {\r\n        decimal: '.',\r\n        thousands: ','\r\n    }\r\n});\r\n```\r\n\r\nThen `dist/plotly-locale-de-ch.js` could contain the output of that code, so it would automatically get updates from `de`. Users providing both as script tags would still have to carry the extra bytes, but the most byte-conscious users make custom bundles, and a bundle containing both would *not* have any extra bytes.",
    "created_at": "2018-05-31T13:43:51Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2683#issuecomment-393534443",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2683",
    "updated_at": "2018-05-31T13:43:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I notice that `de-ch` probably doesn't work the way we'd want it to. As far as I can see it's identical to `de` in the fields that exist, but `de` has added the dictionary and decimal separators. The way our localization framework is set up, that means `de-ch` on top of `de` will behave identically to just `de` because the fields not contained in `de-ch` will just be taken from `de`. AFAICT the only difference there *should* be between the two is perhaps with decimal separators (which are not part of the `world-calendars`/`kbwood/calendars` framework these originally came from, because that only deals with date & time) - so ideally we'd collapse `de-ch` to just:\r\n\r\n```js\r\nmodule.exports = {\r\n    moduleType: 'locale',\r\n    name: 'de-CH',\r\n    dictionary: {},\r\n    format: {\r\n        decimal: '.',\r\n        thousands: ','\r\n    }\r\n};\r\n```\r\n\r\nSomething similar can probably be said for all the regional locales currently in the repo... so before we invest more energy in spelling out how to use regional locales we should probably discuss and agree on how we really intend these to be used: do we want the regional locales to always be layered on the base language locale, or should they be independent?\r\n\r\nWe have at least one case right now where you *can't* layer: we have a contributed Brazilian Portuguese (`pt-br`) but no `pt` - so anyone currently using `pt-br` would see stripping that one down to just its differences with `pt` (once we have a `pt`) as a breaking change... on the other hand it's really nice if new translations get added to the base and they are automatically inherited by the regional locale. I'm not sure the right way to go about this. Thoughts?",
    "created_at": "2018-05-31T13:23:11Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2683#issuecomment-393528293",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2683",
    "updated_at": "2018-05-31T13:23:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @dalle - looks perfect! 💃 ",
    "created_at": "2018-05-30T19:18:44Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2682#issuecomment-393284832",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2682",
    "updated_at": "2018-05-30T19:18:44Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Perhaps requiring x/y/z to list all coordinates (so that x/y/z and u/v/w would have matching lengths) would be best albeit (way) less efficient.\r\n\r\nIt's not *way* less efficient - x/y/z are way bigger, but the trace as a whole is only twice as big. I think we should require this form (x/y/z/u/v/w all the same length) as the default. We can extend this with some non-default option that lets users specify the more efficient x/y/z (either with 3D or 1D u/v/w arrays, we can discuss that later), but then we can also handle arbitrary sample points in the future, either by pre-interpolating like in [convert_column_xyz](https://github.com/plotly/plotly.js/blob/master/src/traces/heatmap/convert_column_xyz.js) and [interp2d](https://github.com/plotly/plotly.js/blob/master/src/traces/heatmap/interp2d.js) or some Delaunay-like algorithm. And it'll ensure users can switch between `streamtube` and `cone` relatively robustly. Then we could fill in all the corresponding gaps in `cone` data handling as well.",
    "created_at": "2018-05-29T23:24:54Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2658#issuecomment-392979698",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2658",
    "updated_at": "2018-05-29T23:24:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Please forgive this newbie for some more questions.\r\n\r\nNo problem at all! I'm happy to answer lots of questions for anyone contributing a PR 😎 \r\n\r\n> why the multiple layers of drawing action? What determines what gets redrawn during the interaction and what gets redrawn at the relayout?\r\n\r\nJust performance - we can translate and rescale very efficiently, but after that's done we need to actually recalculate & repositions the points to be displayed, and depending on the new ranges there may be more (or less) detail in the new view - for example scatter plots employ more aggressive decimation (and eventually clipping) the farther you get from the visible viewport.\r\n\r\n> zoomWheel employs a debounce, why doesn’t panning? gl3d interactions do not use a debounce right now, do they need one?\r\n> \r\n> Wait. Answering part of the question 2 myself, panning doesn’t do relayout until dragging ends. So the debounce in zoomWheel is more about reducing number of relayout calls.\r\n\r\nYou got it! zoom/pan effectively have a built-in debounce with the multiple mousemoves before mouseup. zoomWheel only has one event type.\r\n\r\nThe performance considerations are very different for SVG than for WebGL. It might be worthwhile (cc @etpinard) to make the WebGL events look more like the SVG ones though, both to signal that the plot is mid-interaction so should perhaps not be subjected to other modifications (see eg #2644) and to limit effects on performance of the rest of the application (so we can allow users to choose whether to respond to every mousemove or just the final view)... but we may need to wait for v2 for that as it would be a somewhat breaking change.",
    "created_at": "2018-05-29T17:21:24Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2606#issuecomment-392863434",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2606",
    "updated_at": "2018-05-29T17:21:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Slick! As to the questions about `topojson` and `MathJax` - these are both outside of the build, so seems to me the question is what would be the most useful thing we could do for folks who want to use local versions of `topojson` and `MathJax`, that wouldn't inconvenience folks content to use the CDN versions of these (or ignore them entirely)? Feels to me like we may want to include `topojson` anyway since otherwise they'd have to include the full `plotly.js` anyway just to get that, right? But maybe not MathJax, which they can get from [npm](https://www.npmjs.com/package/mathjax) now.\r\n\r\nIncidentally, I was just chatting with @etpinard about our 4-year-old mathjax version - we're using 2.3, they're up to 2.7.4. Presumably a drop-in replacement since it's still 2.x, though we may change how we package it due to the npm package. We could make a separate issue for this, but perhaps the upgrade should be this PR, regardless of whether it's going to be included in the dist packages or not... if it *is* included people may start to wonder why it's so old, if not they'll be including the current version anyway (or at least one they can get from npm, which started at 2.5.1) so we'd better make sure it works!",
    "created_at": "2018-05-29T17:06:34Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2670#issuecomment-392857059",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2670",
    "updated_at": "2018-05-29T17:06:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ah good catch - this happens when the tick spacing is too small for us to display adjacent ticks differently at all. The maximum resolution we can display is 0.1 ms, and at that zoom level you're asking for ticks at 0.02 ms spacing.\r\n\r\nIt'll be easy to stop this from erroring - the culprit is:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/5ccc83da118b10cdbadeb0b17ac35dd1b137a519/src/plots/cartesian/axes.js#L787\r\n\r\nWhere both the canonical tick and its neighbor are `'2000-01-01'` so the result is -10. We just need to fall back on max resolution (`ax._tickround = 4`) if the two strings are identical (`tick0str === tick1str` after we break that out of the `tick1len` calculation).\r\n\r\nBut even after we stop this throwing an error neighboring ticks will still be identical. Providing more resolution here would be a separate and very difficult issue.",
    "created_at": "2018-05-29T16:47:35Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2680#issuecomment-392847785",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2680",
    "updated_at": "2018-05-29T16:47:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "You want `layout: {barmode: 'stack'}`, or really anything but the default `barmode: 'group'`, which is trying to arrange these bars vertically as a group within a full group width of 1 unit in y. Changing one of the bars to `y=1.49` makes it look like it's fixed just because then the full group width is 0.01, which is much less than the `width: 0.5` you chose.",
    "created_at": "2018-05-29T16:26:52Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2675#issuecomment-392840967",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2675",
    "updated_at": "2018-05-29T16:26:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Fantastic. Really nice tests BTW! 💃 ",
    "created_at": "2018-05-29T16:01:54Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2676#issuecomment-392832640",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2676",
    "updated_at": "2018-05-29T16:01:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Very nice! Great catches on the size and linewidth issues! 💃 ",
    "created_at": "2018-05-29T15:11:12Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2677#issuecomment-392813539",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2677",
    "updated_at": "2018-05-29T15:11:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> When should the event be `plotly_relayouting` and when should it simply be `plotly_relayout`?\r\n\r\nEvery time we actually alter `gd.layout` (via a `Plotly.relayout` call, or directly if we've short-circuited that) there should be an associated `plotly_relayout` event. If we've only altered the appearance on-screen but haven't propagated the change to `gd.layout` yet, it should be a `plotly_relayouting` event instead. So with that in mind:\r\n\r\n> Currently, zoomwheel emits a `plotly_relayout` in `dragTail` for each wheel scroll.\r\n\r\n`dragTail` is what actually updates `gd.layout`, so that's the correct place to emit `plotly_relayout`. But in fact we update the viewbox (on-screen appearance) in principle many times before we get to `dragTail` (notice that `zoomWheel` calls [`clearTimeout(redrawTimer);`](https://github.com/plotly/plotly.js/blob/master/src/plots/cartesian/dragbox.js#L416)) so it would be reasonable to add a `plotly_relayouting` event inside `zoomWheel`.\r\n\r\n> Should we make panning behave the same way: emitting a `plotly_relayout` every time the mouse moves?\r\n\r\n[panning](https://github.com/plotly/plotly.js/blob/master/src/plots/cartesian/dragbox.js#L485) works the same as zoom - on `mousemove` we just change the viewbox but do not alter `gd.layout` and redraw properly until `mouseup`. So like zoom, mousemove should have a `plotly_relayouting` event, not `plotly_relayout`.",
    "created_at": "2018-05-29T14:31:02Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2606#issuecomment-392798072",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2606",
    "updated_at": "2018-05-29T14:31:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Creating a new hover label test seems easy\r\n\r\nAh great, that's the harder test!\r\n\r\n> but I could not understand how to test for the marker.\r\n\r\nOnce you've made a plot that has text on the markers (which is done in the `beforeEach` block in the linked test) you should just be able to do something like:\r\n\r\n```\r\nd3.select(gd).selectAll('.textpoint text').size()\r\n```\r\n\r\nto check that the correct number of text markers are created - in the codesandbox example above, the `.textpoint` groups are empty in the bug case.",
    "created_at": "2018-05-29T01:21:49Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2660#issuecomment-392627178",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2660",
    "updated_at": "2018-05-29T01:21:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Good catch! 💃 ",
    "created_at": "2018-05-25T19:16:27Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2668#issuecomment-392154887",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2668",
    "updated_at": "2018-05-25T19:16:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "you can even omit 5. Pan",
    "created_at": "2018-05-25T16:18:37Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2667#issuecomment-392108802",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2667",
    "updated_at": "2018-05-25T16:18:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Computing cmin/cmax just from u/v/w is probably more \"true to the data\" whereas computing cmin/cmax from the vector field interpolated to the tubes' locations will give better aesthetically-pleasing results.\r\n\r\n\"True to the data\" is my preference here - it shows you a bit of what you've missed about the data by converting to tubes. It shouldn't often be very far off the interpolated values, right?\r\n\r\n> As for hover, it's an interesting problem.\r\n\r\nInteresting indeed - I actually think \"true to the data\" would be really confusing here, as there's nothing to \"hover on\" at the data point. Particularly since this is 3D, you could end up hovering on something at a totally different depth from the tube you're inspecting. The tube vertices (2) don't mean anything. I assume when you say this you're talking about the surface of the tube? I'm thinking the ideal solution (tell me how painful this would be to calculate...) would be to find the exact tube surface point the cursor is over (not the closest vertex) and project from there back to the centerline of the tube; show x/y/z and u/v/w/norm for that point (or perhaps the closest actual data point? that could be confusing though); and perhaps somehow highlight the whole tube, so you can see not just where it came from but the whole streamline? That last part seems more like a \"nice to have\" that we could add later though.",
    "created_at": "2018-05-25T15:42:53Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2658#issuecomment-392098813",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2658",
    "updated_at": "2018-05-25T15:42:53Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@dalle Looks likely that's the culprit - any chance you'd like to make a PR combining those two diffs with a test covering both parts? Perhaps based on:\r\nhttps://github.com/plotly/plotly.js/blob/887cae6c0e879ac910e15040d7d3aabeccbec478/test/jasmine/tests/hover_label_test.js#L105",
    "created_at": "2018-05-25T13:03:59Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2660#issuecomment-392051338",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2660",
    "updated_at": "2018-05-25T13:03:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Confirmed, thanks for the report @jonwedell !",
    "created_at": "2018-05-24T21:47:58Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2664#issuecomment-391875538",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2664",
    "updated_at": "2018-05-24T21:47:58Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice, glad it was that easy! 💃 ",
    "created_at": "2018-05-24T16:16:14Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2662#issuecomment-391773730",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2662",
    "updated_at": "2018-05-24T16:16:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for the clear reproductions @GlennMatthys! The issue here is that we only look at the first trace to automatically determine the axis type - if you add `yaxis: {type: 'category'}` to your `layout` it works as you expect (unless you were hoping for trace 0 to still contribute a category - if you want that you'll need a different solution like `yaxis.categoryarray`, or use numbers for the y data along with `ticktext`/`tickvals`).\r\n\r\nI suppose we could look at subsequent traces for the axis autotype if the first trace is empty like this... sure, I'll slap a `bug` label on this and at some point we'll try that.",
    "created_at": "2018-05-24T13:31:40Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2661#issuecomment-391715639",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2661",
    "updated_at": "2018-05-24T13:31:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @stillesjo ! Interestingly we have a comment implying that we had addressed exactly this issue, so we'll have to look at it.\r\nhttps://github.com/plotly/plotly.js/blob/dfb56d3a7b99ecf979365ed9b9c2c40747cdd915/src/traces/scatter/fill_hover_text.js#L38-L41\r\n@dalle thanks, that would fix a related bug - display of the text alongside the markers. Add this to each of the traces in @stillesjo's example:\r\n```js\r\nmode: 'lines+markers+text',\r\ntextposition: 'top right'\r\n```\r\nand you'll see the zeros get left out there too:\r\n![screen shot 2018-05-24 at 9 09 47 am](https://user-images.githubusercontent.com/2678795/40487468-3ecce8ea-5f32-11e8-83f4-b36821d3a155.png)\r\n",
    "created_at": "2018-05-24T13:15:51Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2660#issuecomment-391710565",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2660",
    "updated_at": "2018-05-24T13:15:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "You want `layout.bargroupgap`\r\nhttps://plot.ly/javascript/reference/#layout-bargroupgap",
    "created_at": "2018-05-24T13:01:38Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2659#issuecomment-391706075",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2659",
    "updated_at": "2018-05-24T13:01:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ah right, thanks, I forgot about running *just* the `@noCI` tests - I usually just run *everything* locally when making a big change. Nice clean solution! 💃 ",
    "created_at": "2018-05-23T22:22:51Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2656#issuecomment-391515950",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2656",
    "updated_at": "2018-05-23T22:22:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Benchmarks - compare a full heatmap, which plots in around 70ms for me at n=100 (100x100 heatmap):\r\n```js\r\nfunction hmFull(n) {\r\n  var z = new Array(n); for(var i = 0; i < n; i++) { z[i] = new Array(n); for(var j = 0; j < n; j++) z[i][j] = Math.random(); }\r\n  var t0 = performance.now();\r\n  Plotly.newPlot(gd, [{z: z, type: 'heatmap', showscale: false}], {width: 500, height: 500})\r\n  return performance.now() - t0;\r\n}\r\n```\r\n\r\nto a gapped one:\r\n```js\r\nfunction hmPartial(n) {\r\n  var z = new Array(n); for(var i = 0; i < n; i++) {\r\n    z[i] = new Array(n);\r\n    for(var j = 0; j < n; j++) z[i][j] = null; z[i][Math.floor(Math.random() * n)] = Math.random();\r\n  }\r\n  var t0 = performance.now();\r\n  Plotly.newPlot(gd, [{z: z, type: 'heatmap', showscale: false, connectgaps: true}], {width: 500, height: 500})\r\n  return performance.now() - t0;\r\n}\r\n```\r\n\r\nA fairly full heatmap (n=100, m=50, so about 50% gaps) spends about 40ms on `interp2d`.\r\nA fairly empty one (n=100, m=5, so about 95% gaps) spends about 450ms on `interp2d`. Only twice as many gap points to fill in, but it iterates much more slowly.",
    "created_at": "2018-05-23T21:28:35Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2657#issuecomment-391502358",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2657",
    "updated_at": "2018-05-23T21:28:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Excellent - 💃 ",
    "created_at": "2018-05-23T18:18:10Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2653#issuecomment-391447762",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2653",
    "updated_at": "2018-05-23T18:18:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This is a bit of an old issue, but adding some thoughts to it that arose while thinking about #2644:\r\n`rehover` was created for cases like streaming data, where something not driven by immediate user action is altering the data in a plot. Without recalculating the hover state with the new data, we'd either lose hover entirely (if streaming is fast you'd never be able to see hover info) or you'd be looking at out-of-date points.\r\n\r\nIt becomes tricky though when you're using a hover event to modify the plot. The issue here is that, as you noted, the y axis is rescaled by adding the new annotation, so after adding it the mouse is no longer over that point and you get a new hover event to reflect that. As a result you remove the annotation, the y axis rescales again, and the mouse IS over the point again. ∞\r\n\r\nSo what's the *right* behavior, and where should we break this loop? We can't say \"no hover events if the hover was from `rehover`\" or the displayed and reacted-to hover information would get out of sync. I suppose we could annotate the event data, to let you know that it came from a `rehover` and allow you to react accordingly. We could also probably try to detect such an infinite loop and throw an error rather than locking up the page, or perhaps add a small delay somewhere so instead of freezing you'll just see flashing and be able to move your mouse away. I'm thinking maybe *if* the hover is triggered by `rehover`, add a delay after displaying the tooltip but before emitting the hover event. That way normal hover events still come immediately but once we get into a potential infinite loop we slow things down.\r\n\r\nThinking about this from an application standpoint, I'm not sure what behavior you would want anyway - if autoranging to the annotation is important, would you want to stop at hover (and annotation) displayed, even though the mouse is not over the point anymore? But then a small mouse move will confirm that the mouse is not over the point, and remove the annotation... so that would replace the infinite loop with one iteration of the loop per mousemove event. Best would be to avoid this altogether, perhaps by disabling autorange when adding this annotation, or I suppose in principle we could add an annotation attribute to tell us not to consider *this* annotation in autorange calculations... it will still display as long as the arrowhead is pointing to displayed coordinates.",
    "created_at": "2018-05-23T17:28:46Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1640#issuecomment-391432416",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1640",
    "updated_at": "2018-05-23T17:28:46Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks good to me, thanks for doing this @etpinard ! If you're OK with my (small) changes, 💃 ",
    "created_at": "2018-05-23T16:39:15Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2654#issuecomment-391416486",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2654",
    "updated_at": "2018-05-23T16:39:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Oof, that might be a little too magical here for my taste. How bad (for most applications) would clickmode: 'select' and hovermode: 'x' be?\r\n\r\nPer https://github.com/plotly/plotly.js/issues/420#issuecomment-391396554 we're thinking of changing the default `hovermode` to always be `'closest'`, so it's not too much of a stretch to say new features could force that behavior before v2. But I'd also be OK with just adding something to the docs for `clickmode` - like \"`clickmode: 'select'` with `hovermode: 'x'` can be confusing, consider explicitly setting `hovermode: 'closest'` when using this feature\"",
    "created_at": "2018-05-23T15:58:18Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1852#issuecomment-391401079",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1852",
    "updated_at": "2018-05-23T15:58:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "- Change the default `layout.hovermode` from `'x'` (compare) to `'closest'`. In #778 we discussed setting restrictions on when cartesian plots could default to compare mode (we already separate out non-cartesian and horizontal traces [here](https://github.com/plotly/plotly.js/blob/89aa364970bee25e3500ef37073d0356c0a9eb25/src/components/fx/layout_defaults.js#L22-L31)) but this is both difficult to do (requires digging into data arrays during `supplyDefaults`) and potentially error-prone, and can still be a source of confusion (see `clickmode` #1852, `spikelines`). Seems better just to default to `'closest'` and make compare modes explicitly opt-in.",
    "created_at": "2018-05-23T15:45:23Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/420#issuecomment-391396554",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/420",
    "updated_at": "2018-05-23T15:45:23Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Wow, that's no good - the more you click back and forth in that pen the worse it gets, until the whole page crashes. Thanks for splitting this out and making that codepen @etpinard !",
    "created_at": "2018-05-23T15:03:15Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2652#issuecomment-391380932",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2652",
    "updated_at": "2018-05-23T15:03:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Alright, managed to reproduce and understand what's going on here:\r\n- The user starts a selection on the infant mortality plot\r\n- The event callback calls `Plotly.react` on the same plot, giving it new data arrays.\r\n- This change triggers a \"recalc\" ie the most complete redraw we do - and the signal we've used for `Plotly.plot` to know to recalc is to delete `gd.calcdata`.\r\n- But `Plotly.plot` bails out because you're in the middle of a drag:\r\n\r\nhttps://github.com/plotly/plotly.js/blob/master/src/plot_api/plot_api.js#L139-L145\r\n\r\n- Then the *next* time we call `Plotly.react` the data arrays may have *not* changed, so we don't delete `gd.calcdata`, we expect it to be there to be relinked to the modified traces.\r\n- Except that we haven't actually DONE a recalc in the meantime (we won't do one until mouseup, though it looks like somehow this one is sometimes getting lost too?), so there's no `gd.calcdata`\r\n- 💥 \r\n\r\nI could do various simple things to avoid the particular error seen here (recalc before bailing out of `Plotly.plot`, or use some other signal besides deleting `gd.calcdata`, or just check if `gd.calcdata` exists before trying to relink it) but all of those have problems of various severity with the plot data being out of sync with the displayed plot, which are going to bite us down the line in obvious or subtle ways.\r\n\r\nI think the solution is to make something like [`gd._hoverData` and `Plots.rehover`](https://github.com/plotly/plotly.js/blob/master/src/plots/plots.js#L2420) but for dragging, so we can get rid of that `gd._dragging` bail out, actually do the replot, then re-establish the partial drag (be it a pan, a zoom, a select...). Obviously this has the potential to be a bit of a project, given all the different `dragmode` settings; but it would also address the use case of streaming (or otherwise changing independent of user interaction) data.\r\n\r\n@nicolaskruchten we talked about making the select box / lasso part of the figure - and that may still be part of this solution (just as we'd eventually like to have the hover data be part of the figure https://github.com/plotly/plotly.js/issues/1848, but I think the parts of the state that depend explicitly on mouse events (is the mouse up or down, where was it at mousedown) - which *are* necessary to fully recreate the plot after a mid-drag redraw - should *not* be part of the figure but should instead be kept as internal state. For one thing we don't really want the user to be able to say \"start this plot out as though the mouse is down.\" For another, having this be internal state that we re-initialize after replot would allow us to clear it naturally if the change has obviated that state, like if the subplot was removed, `dragmode` was changed, anything like that.\r\n\r\n@etpinard also brought up https://github.com/plotly/plotly.js/issues/1640 - an infinite loop created by using the hover event to do something that moves data points around (in that case adding/removing an annotation that changes the axis ranges) such that as soon as a point is hovered it is moved by the update so it's not hovered on, whereupon it's moved back again... I'll comment more over there, but similar loops could be an issue here too.",
    "created_at": "2018-05-22T21:52:23Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2644#issuecomment-391152782",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2644",
    "updated_at": "2018-05-22T21:52:23Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks great! 💃 ",
    "created_at": "2018-05-22T20:56:11Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2650#issuecomment-391137800",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2650",
    "updated_at": "2018-05-22T20:56:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I still have two concerns about this:\r\n- The user can still lock things up with a custom bandwidth that's sufficiently small (and potentially even automatically, say you provide a million zeros and one one? That might still be OK though...) - we need *some* absolute limit.\r\n- A sharp transition from Silverman to Scott means that some distributions that are *actually* narrower will end up looking wider. In your example say you tweaked it to be just on the Silverman side of the limit: you'd get 1e5 bandwidths in the span, then narrow it a little and it would pop out to essentially what's in your test image, looks like ~50 bandwidths in the span. I guess I don't mind if we reach a point where distribution width stops affecting bandwidth, but not if the dependence goes the wrong direction.\r\n\r\nWhat if the automatic bandwidth just used Silverman but limited it to `> (max - min)/100` or something? Maybe `/100` is too wide still? `/1000`? I think a narrower result would do a better job showing the shape of this particular distribution anyhow, don't worry about matching Seaborn. And then the `1e5` limit would constrain all cases, manual or automatic. That's far narrower than one pixel, until you've zoomed waaaay in.",
    "created_at": "2018-05-22T19:47:13Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2650#issuecomment-391117538",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2650",
    "updated_at": "2018-05-22T19:47:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Very nice! 💃 after the minor comment above.",
    "created_at": "2018-05-22T16:10:28Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2620#issuecomment-391049306",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2620",
    "updated_at": "2018-05-22T16:10:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@jmmease this looks great, nice paper! (and nice work 🎉 )\r\n\r\nOnly thing that I see off the bat is there's no mention of `Plotly.react` - is that used in the new plotly.py version at all?\r\n\r\nOther than that, just a style comment that in looking at some of the slides it's not obvious to me whether I'm looking at Python or JS syntax - all the dictionary/object keys are quoted, which makes it look like Python (also the schema slide switches into double-quotes, a little distracting), but I also see `false` (not `False`) and `undefined`, which look like JS.",
    "created_at": "2018-05-21T18:24:43Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2648#issuecomment-390740128",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2648",
    "updated_at": "2018-05-21T18:24:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Beautiful! Thanks for cleaning up multitrace and `compMax` along the way! 💃 ",
    "created_at": "2018-05-21T16:01:02Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2647#issuecomment-390698958",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2647",
    "updated_at": "2018-05-21T16:01:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Alright! I'm happy if you are! 💃 💃 💃 ",
    "created_at": "2018-05-18T20:53:43Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2641#issuecomment-390329358",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2641",
    "updated_at": "2018-05-18T20:53:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I should note that this does work, it just also throws while it's working so maybe I could have the thing wait to redraw until it's done redrawing?\r\n\r\nThe problem is not that it's in the middle of redrawing, it's that it's in the middle of dragging, and we defer redraws until you're done dragging. This is for like streaming data, we stop redrawing the stream while you drag (to select, zoom, pan, whatever). Maybe we shouldn't do that, we should allow redraws mid-drag, but that's a substantially bigger development effort.\r\n\r\n> Re `selected.marker.color` I don't think that will work because the colour I want is dependent not only on the selection-state in the given chart but all the others...\r\n\r\nCouldn't you have one trace that's \"selected elsewhere\" and another trace that's \"deselected elsewhere\", and then use `[de]selected.marker.color` to automatically bifurcate both of those traces on [de]selected here?",
    "created_at": "2018-05-18T14:56:28Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2643#issuecomment-390233693",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2643",
    "updated_at": "2018-05-18T14:56:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Yes, I'm adding/removing to the same chart that's being dragged on, so as to colour them. Maybe I should restyle?\r\n\r\nYour restyle would need to change an array attribute, so it doesn't make any difference, it would go through the `Plotly.plot` pathway and get rejected here as well. Best would be to see if you could avoid this altogether, and get the updates on the same chart to be handled just by `selected.marker.color` and `unselected.marker.color`.\r\n\r\n > I should add that the error message is kinda gross, throwing `undefined`... Is this normal on `Promise.reject()` ?\r\n\r\nHence my comment \"We should at least add a message to the rejection stating the reason\"\r\n![screen shot 2018-05-18 at 10 28 15 am](https://user-images.githubusercontent.com/2678795/40240278-37d98ad0-5a86-11e8-9ec3-9a5ab2bcbe1a.png)\r\n",
    "created_at": "2018-05-18T14:28:55Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2643#issuecomment-390225207",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2643",
    "updated_at": "2018-05-18T14:28:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I suspect it's this: \r\n\r\nhttps://github.com/plotly/plotly.js/blob/fb751582506a4d71d23a89786ba8138473e33cd9/src/plot_api/plot_api.js#L139-L145\r\n\r\nAre you adding/deleting traces to the same plot that the selection is happening on? I guess we're rejecting here because the plot hasn't actually redrawn yet, so if you expected to be able to do something like look at `gd.data` or the DOM, it would not be in the correct state. We should at least add a message to the rejection stating the reason. Alternatively, since we're not rejecting due to an error but just due to the plot not being done yet, we could imagine returning a promise that only resolves when the plot *is* done... wouldn't affect your usage but I worry that this could potentially deadlock existing apps. Dunno quite how it would work but some combination of event bindings that mean two plots are simultaneously waiting for each other to finish?",
    "created_at": "2018-05-17T21:42:25Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2643#issuecomment-390022270",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2643",
    "updated_at": "2018-05-17T21:42:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "OK, thanks for testing that. Sounds like we really do have to debug this inside Dash. I'm really not sure the best way to do that, so perhaps you can open an issue over at https://github.com/plotly/dash-core-components? Feel free to @ mention me and @chriddyp and link to this issue (which I'll leave open until we figure out where the problem really is).",
    "created_at": "2018-05-17T17:59:56Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2640#issuecomment-389955585",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2640",
    "updated_at": "2018-05-17T17:59:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "It's certainly possible Dash plays a role here, yes - in which case to really debug it we'd need to get this running on some publicly accessible Dash app. I'm more than a little puzzled by how Dash could alter what's happening inside the plotly.js button click, that's why I want to be very sure it's not a pure plotly.js bug before we go that route.",
    "created_at": "2018-05-17T12:54:31Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2640#issuecomment-389856145",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2640",
    "updated_at": "2018-05-17T12:54:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Surface plots (and these ribbon plots are just specialized surface plots) are like heatmap and contour maps, they generally get colorscales (controlled by `showscale`) rather than legend entries. We've never implemented legend items for any of these traces, so they're not *broken*, but you could make a case for us to *add* them. I guess in the special case of multiple single-color surfaces a legend entry could be useful to label them, and even colorscaled items could benefit from a legend entry to allow you to toggle them on and off.",
    "created_at": "2018-05-17T11:55:30Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2642#issuecomment-389840911",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2642",
    "updated_at": "2018-05-17T11:55:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Hmm, we have a number of test plots that match your general description but don't show that bug when I test them - for example https://github.com/plotly/plotly.js/blob/master/test/image/baselines/18.png.\r\n\r\nHere's how to copy your plot into a codepen so we can see it:\r\n1. find the DOM element `gd` where the bug is seen\r\n2. call `Plotly.Plots.graphJson(gd)`\r\n3. copy the output\r\n4. fork this codepen: https://codepen.io/alexcjohnson/pen/NMdMbE?editors=1010\r\n5. paste your figure JSON to replace `var fig` in that codepen\r\n6. run it and verify that the bug is still there\r\n7. post your new codepen to this issue here 🎉 ",
    "created_at": "2018-05-17T11:24:31Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2640#issuecomment-389833712",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2640",
    "updated_at": "2018-05-17T11:24:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> We currently call `cone2mesh` twice which can be slow (~300ms for 20k cones) per `.plot` call. Once in `calc` to get the colors (i.e. intensity) values and another in `convert` to compute the correctly scaled coordinate\r\n\r\nIf it's just for color (which, per https://github.com/plotly/plotly.js/pull/2641#issuecomment-389644575, might not not even come from the cone lengths), can't we just find the bounds of the data provided, as a simple loop over the cone data? That should be a heck of a lot faster (quick test: ~5ms for 20k data points) and, I might argue, more faithful to the data than basing the color bounds on the interpolated data used in the actual cones.",
    "created_at": "2018-05-16T20:36:29Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2641#issuecomment-389656987",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2641",
    "updated_at": "2018-05-16T20:36:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Huh, MATLAB places the cones with their tails at the data positions. That also seems wrong to me...",
    "created_at": "2018-05-16T20:03:32Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2641#issuecomment-389647804",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2641",
    "updated_at": "2018-05-16T20:03:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Computed trace bounds are off. They only consider the cones' tip, ignoring their lengths and directions.\r\n\r\nAre the cones positioned with their tips at the data positions? That seems odd, I'd have thought the data position would go at its center of mass, ie 3/4 of the way from the tip to the base.",
    "created_at": "2018-05-16T19:59:39Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2641#issuecomment-389646705",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2641",
    "updated_at": "2018-05-16T19:59:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Cool!\r\n\r\n> How to name this trace? I chose `cone`, like a _cone_ trace, similar to `surface`. But since a cone trace has often many cones, maybe `cones` would be better.  `cone3d` similar to `mesh3d` could work, but I think the _3d_ is not necessary, _quiver_ is more popular in 2d.\r\n\r\nAgreed - a cone is a 3D shape, it would have no meaning in 2D, so just `cone` - `3d` is unnecessary. We don't pluralize any of our other types (`parcoords` looks plural, but it's \"coordinates\" that's plural, not the lines connecting these coordinates, which are really the objects on the plot)\r\n\r\n> How to name the meshgrid attribute? I chose `vx`, `vy` and `vz` (_v_ for vector), but maybe `meshgrid.x`, `meshgrid.y` and `meshgrid.z` would be best. Note that these attributes are optional.\r\n\r\nI think we should have the required data be the vector field `(x, y, z) -> (u, v, w)`, then probably we need a few ways to specify whether and how to interpolate cones onto that field (and I think this is what you're already doing, but in case it's not clear already all of these arrays are assumed to be 1D - 3D leads to too many ambiguities as well as extra headaches for our back end):\r\n- If you add nothing else, draw cones at exactly the specified positions `(x, y, z)`\r\n- You can provide 3 more data arrays, then the cones are interpolated onto these positions. Perhaps like MATLAB we call these `(cx, cy, cz)`? or `cones: {x, y, z}`?\r\n- It would also be nice to be able to specify just a grid for each dimension; what should this look like? I don't think it can just be `x0, dx` etc because we need both bounds; `x0, dx, x1` would do this but we have no precedent for that. For histograms and contours we have `{start, end, size}`, so how about `cones: {xgrid: {start, end, size}, ygrid: {start, end, size}, zgrid: {start, end, size}}`? `start` and `end` could be optional, then we would just bound the grid to the data.\r\n- In principle it seems like you could mix and match these per dimension... like you provide `cones: {x, y, zgrid}` and the result is cones explicitly positioned in `x` and `y`, then repeated for every value implied by `zgrid`. But that could get confusing, I could imagine people wanting to think of `cones.x`, `cones.y`, and `cones.z` each as an independent array, ie cone positions are the cartesian product of the three rather than element-by-element combinations. Too many possibilities, if you want to start with just the first option that's fine, we can add the others later if there's demand.\r\n\r\n> Should the colorbar show normalize vector norm i.e. 0 to 1) values or absolute vector norms? Maybe we need an attribute to enable both behaviors?\r\n\r\nAbsolute vector norm seems far more useful. Leave this attribute out and let people normalize on their own, until someone complains. The hover data is always going to show the absolute vector anyway, right? Would be weird if this disagreed with the colorscale.\r\n\r\n> The color values (i.e. intensity) for the cones represent the vector norm which is positive definite. Maybe we should restrict `cmin` and `cmax` to be positive also? Moreover, maybe we should make `Viridis` the default colorscale.\r\n\r\nMuch as I like `Viridis`, lets not diverge from the default colorscales we have for all other traces until we can change them as well.\r\n\r\nIs there a use case to supply color as an independent data array? Perhaps someone wants to color just by `w` (vertical flux) or **∇∙v** or **∇×v** or who knows what... If we allow that, `cmin` and `cmax` could be anything. Anyway I don't see a need to explicitly force them to be positive even when color is the norm, they'd be positive by default and only go negative if the user explicitly chooses that.",
    "created_at": "2018-05-16T19:52:33Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2641#issuecomment-389644575",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2641",
    "updated_at": "2018-05-16T19:52:33Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Hmm OK, that gets us somewhere. I tried adding a slow event handler to `plotly_relayout` (which gets emitted when you click that button) but that by itself still didn't cause this problem.\r\n\r\nWhen you see the y spike lines erroneously, go find the DOM element (I'll call it `gd`) for the plot - has `gd.layout.yaxis.showspikes` been correctly set to `false`, or is it still saying `true`? If it's `false` yet you're seeing spike lines, then this is definitely a plotly.js bug. If it's `true` then we may have to open this as a bug on the Dash side, perhaps something funny is happening in the event handlers there. Either way though, we're not going to be able to do much until there's a clear reproduction case, ideally as a codepen.",
    "created_at": "2018-05-16T16:25:05Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2640#issuecomment-389581007",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2640",
    "updated_at": "2018-05-16T16:25:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This would definitely be a great feature to have. It's a tricky problem though, and we'd really like to at least *try* for a friendlier-looking layout, preserving line thickness and avoiding overlaps where possible. Note that plotly.js already uses our own fork of d3-sankey: https://github.com/plotly/d3-sankey, mainly because we weren't happy with how the original handles some common edge cases like very sharply curved links.\r\n\r\nSo the ideal development path from our standpoint would be to make a PR to *that* repo and use the result in a PR to plotly.js that removes the circularity check. If you're interested in trying it out, you can develop in both repos simultaneously using [`npm link`](https://docs.npmjs.com/cli/link).\r\n\r\nAs an aside, there has been further development in the main d3-sankey repo https://github.com/plotly/d3-sankey - would be nice to take a look at that, see if it's worthwhile pulling those changes into our own fork. Maybe they even obviate the need for some of the changes we made? I doubt the original repo would accept our changes as a PR back though (**edit:** they explicitly [rejected it](https://github.com/d3/d3-sankey/pull/24) in fact), as we change the SVG structure of the links kind of fundamentally, from a path whose stroke is the link width to a filled path with no stroke. That said the circular fork you reference above obviously uses a filled path for loops just like we do...",
    "created_at": "2018-05-15T22:14:23Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2636#issuecomment-389330558",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2636",
    "updated_at": "2018-05-16T16:01:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "BTW I looked at the [updates to `d3-sankey` since our fork](https://github.com/d3/d3-sankey/compare/c343f2bee77222ba17b669c08078eed5973f0b6f...master?short_path=9da0c8a#diff-9da0c8a13a5d1709ced52b87efe0ea37) - they've added a few features, and merged one of @monfera 's [fixes](https://github.com/d3/d3-sankey/pull/19), doesn't look like there should be any problem updating our fork but also no particular rush.",
    "created_at": "2018-05-16T15:51:02Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2636#issuecomment-389569485",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2636",
    "updated_at": "2018-05-16T15:51:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I don't see that happening - can you post a codepen showing the problem? Thanks!",
    "created_at": "2018-05-16T15:19:00Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2640#issuecomment-389557755",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2640",
    "updated_at": "2018-05-16T15:19:00Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yes, that should work, thanks for the report! Seems like it should also show hover labels on the bar, wouldn't you think?\r\n\r\nEven the pie has some behavior (on my phone anyway) that I wouldn't have expected: the first touch on a slice shows hover data and the *second* touch on that same slice makes a click event. @etpinard is that intentional? I guess I could imagine a rationale for that - otherwise there's no way to see the hover info without generating a click, which may be a stronger interaction than the user intended - but it still feels weird to me. Anyway, we should pick a behavior and have all trace/subplot types follow it.",
    "created_at": "2018-05-16T14:01:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2639#issuecomment-389529292",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2639",
    "updated_at": "2018-05-16T14:01:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ah, I had forgotten about #2539 - thanks! I even made a very similar comment there.",
    "created_at": "2018-05-16T13:20:26Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2637#issuecomment-389515622",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2637",
    "updated_at": "2018-05-16T13:20:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @giulioungaretti ! And thank you @ghtmtt for your contribution! 💃 ",
    "created_at": "2018-05-16T13:17:19Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2632#issuecomment-389514698",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2632",
    "updated_at": "2018-05-16T13:17:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Matching axes #1549 would be one way to address this. But it would be much more user-friendly to just provide the flexibility to display labels in several places. Maybe you want labels both on top and bottom of a tall single plot, for example.",
    "created_at": "2018-05-15T22:41:30Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2637#issuecomment-389336706",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2637",
    "updated_at": "2018-05-15T22:41:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Great! I just tweaked a little of the punctuation and code reference comments. Perhaps I can convince @giulioungaretti to give a quick review of these translations? 🙏 ",
    "created_at": "2018-05-15T15:18:57Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2632#issuecomment-389205962",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2632",
    "updated_at": "2018-05-15T15:18:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Had some slack discussions about this with @nicolaskruchten, particularly about how it will apply in the chart studio context. As well as the Initial requirements, we should be able to use this feature for theming there, which brings in a number of interrelated use cases:\r\n- Applying a template to an already-made plot (that's more or less what we're talking about here).\r\n- Setting a default template per user/group/company (we have a hacky per-company implementation [here](https://github.com/plotly/streambed/tree/master/shelly/plotlyjs/static/plotlyjs/src/styles))\r\n- Applying a template and then later adding another trace, and expecting that trace to also conform to the template\r\n- (somewhat speculative) Retroactively applying template changes to existing plots that use this template - company changes its color scheme, or default font, etc.\r\n\r\nExcept for the first one, which covers the initial requirements above, all of these require that we hold on to the template as a property of the plot so that it can continue to be applied to new pieces (traces, axes, annotations, rangesliders, etc) as they are added, or to existing pieces as they are changed (scatter -> bar for example) rather than viewing templates simply as transformations that turn a figure into a new, templated, figure.\r\n\r\nNow, if we have the template as part of the figure rather than a transformation TO the figure, we have the option of whether to apply it *before* the already-specified style attributes of the figure, or *after* (which is how it works here). I haven't played with them in enough detail to really know, but @nicolaskruchten says existing office suites (gdocs, ms office) seem to apply templates *before* user-modified attributes, ie if you've set a color or font or something explicitly and apply a template that has another value, you will keep your own value. My concern about doing it that way in the chart editor is that users don't have any way to know which settings are defaults and which have been explicitly set, or to un-set something that was previously set. There's also a question about which behavior users want or expect. I guess ideally we would give them both options, as we can come up with clear use cases for both, perhaps even on a per-attribute (or per-attribute-category) basis. If templates are transformations though, we really *can't* do both - either the template overwrites everything (ie applied after the user values, even resetting values not included in the template) or the *next* template application can't do anything because it doesn't know which settings are user-specified and which are from the previous template. But as a part of the figure, the normal mode would be to not override user values, and if you *want* to override you simply delete all the user values.\r\n\r\nSo what I'm thinking now is:\r\n- Template creation works as discussed and as @bpostlethwaite has begun implementing (though will need a little extension in case the figure used as the template base has a template of its own!)\r\n- Merging templates (@sglyon) is just an `extendDeep` since these are plain JSON 🎉 \r\n- You apply a template to a figure by setting `layout.template` with this JSON\r\n- We implement THAT during `supplyDefaults`, by using the template value if there is no user value, and only if neither one exists do we fall back on the dynamic default (inherited or calculated based on other attributes) or the schema `dflt`. Note that because of dynamic defaults we can't just have the template directly override the schema `dflt` like we do in our existing template hack, it needs to be another step in the precedence chain.\r\n- We need a separate operation that strips user-supplied styles.\r\n- And @nicolaskruchten has assured me he will sort out indicating default/explicit and unsetting in the editor, and once we have ^^ in plotlyjs we can make some options in the template application GUI to clear some or all user styles.\r\n- For retroactive updates, we can use `templatesrc`, which will be the only dereference-able `layout` key, but it'll need special handling anyway since it's JSON not an array.\r\n\r\nOK, that's a long comment... Any thoughts on all that?",
    "created_at": "2018-05-14T21:17:18Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2469#issuecomment-388965856",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2469",
    "updated_at": "2018-05-14T21:17:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "That all sounds great. One possible modification for flexibility would be:\r\n- `npm run bench -- --base XXX` just runs steps 1-5, then saves the results with a versioned filename\r\n- user could then run this against as many different versions as she wants, getting a new output file for each one\r\n- then a small script to combine them into one output, `npm run bench-compare -- v1.31.0 v1.36.0 master my-feature` that outputs:\r\n\r\n|  | v1.31.0 | v1.36.0 | master | my-feature |\r\n| --- | --- | --- | --- | --- |\r\n| cleanNumber | 1.38e5/sec | 1.41e5/sec (+2.2%) | 1.37e5/sec (-0.7%) | 1.40e5/sec (+1.4%) |\r\n| scattergl 1e5 pts | 2.10/sec | 1.08/sec (-49%) | 10.1/sec (+381%) | 11.2/sec (+433%) |\r\n| newer feature | ERROR | ERROR | 1.80e3/sec | 5.41e4/sec (+2900%) |\r\n\r\nOr I suppose this could all be done with a single command that takes a list of base tags/branches, though that feels dangerous, as it's a whole lot to run in sequence and expect all to go right... but also, with a separate `bench-compare` script you could run the benchmarks and leave the results there, possibly changing the filename, then you could get comparisons of the same code over time (computer-to-computer or browser version), or across different browsers, or just more quickly compare against your own branch from yesterday.",
    "created_at": "2018-05-14T19:53:03Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1511#issuecomment-388941230",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1511",
    "updated_at": "2018-05-14T19:53:03Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I'm going to assume `xaxis.domain` is sufficient to cover this use case without a potentially confusing change in behavior. @gajus if I'm missing something feel free to chime back in.",
    "created_at": "2018-05-14T16:46:54Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2613#issuecomment-388884852",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2613",
    "updated_at": "2018-05-14T16:46:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @ghtmtt - looks like you're almost there! Comparing with https://github.com/plotly/plotly.js/blob/master/dist/translation-keys.txt there are just a few more to add. Can you suggest one or two other Italian speakers to review once the last items are added?",
    "created_at": "2018-05-14T14:26:20Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2632#issuecomment-388836244",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2632",
    "updated_at": "2018-05-14T14:26:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yes, I think so. @tropys feel free to reopen if I'm missing something, or to discuss strategies for using `Plotly.react` effectively you may find https://community.plot.ly/ more helpful.",
    "created_at": "2018-05-14T14:14:13Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2608#issuecomment-388831983",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2608",
    "updated_at": "2018-05-14T14:14:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard this looks like a great framework, and with all the work you and @dy are doing it's definitely important to get something like this going.\r\n\r\nMy big question, from a practical standpoint, is how we can run matching benchmarks - including new benchmarks just added - against older versions of code, and quickly compare performance? Ideally I don't want to compare to an older run, even one that I did on my own computer - I want to be able to check out some random older version of the code, maybe even 4 or 5 different versions, run the bench suite against each of them in turn, and then see an output table showing the % change vs the first version (or at least the first version that worked, what happens in this system when there's an error?)\r\n\r\nI guess we could do this by somehow copying the `bench` folder out of the repo (or into an ignored folder in the repo) so that it's not affected by checking out various versions of the code?",
    "created_at": "2018-05-12T01:37:46Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1511#issuecomment-388521356",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1511",
    "updated_at": "2018-05-12T01:37:46Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💪 Well done, this is a really fantastic collection of boosts and fixes! Thanks for the `Axes.doTicks` separation, a nice first step toward more comprehensible `axes.js`.\r\n\r\nhttps://github.com/plotly/plotly.js/pull/2628#issuecomment-388458992 is non-blocking.\r\n💃 ",
    "created_at": "2018-05-11T21:39:44Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2628#issuecomment-388492585",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2628",
    "updated_at": "2018-05-11T21:39:44Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Could making range relayout go through editType \"plot\" (instead of \"calc\") be sufficient?\r\n\r\nDo we have a test of setting mutually-exclusive range values, as per the [comment on that line](https://github.com/plotly/plotly.js/blob/a132b85b899dd490216d12823be56ad3861f091f/src/plot_api/plot_api.js#L2034-L2038)? If we do, and the result correctly fixes them for the constraints, then go for it!",
    "created_at": "2018-05-11T19:11:48Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2628#issuecomment-388458992",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2628",
    "updated_at": "2018-05-11T19:11:48Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Good to know, thanks for benchmarking it. Sounds like adding a `_hasOnlyLargeSplom` switch is a no-brainer.\r\n\r\nDown the line though we should be able to do even better by only making the ones we need period, by building up the required list during `supplyDefaults` and using that during `makeClipPaths` instead of the maximal list we generate there now. Changing axis references for shapes is already `editType: 'calc'`, we could do that with images as well (I don't see much reason to make those operations fast, if we ever autorange images #1111 we'd probably need to do that anyway), that seems like it would solve the `relayout` concerns.",
    "created_at": "2018-05-10T17:25:22Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2595#issuecomment-388123728",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2595",
    "updated_at": "2018-05-10T17:25:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard looks great! Just the one nonblocking comment, lets do it. 💃 ",
    "created_at": "2018-05-09T22:37:04Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2623#issuecomment-387896101",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2623",
    "updated_at": "2018-05-09T22:37:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Again, I think the Delaunay case is an exception to that, but sounds good - closing until we hit a more problematic or clear-cut case.",
    "created_at": "2018-05-09T21:09:57Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2621#issuecomment-387876619",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2621",
    "updated_at": "2018-05-09T21:09:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "If you can parametrize it, use `surface`. That way it's clear on the level of the data structures which points are supposed to be connected to which other points.\r\n\r\nIf you have a surface with more complicated topology, or the data are just a collection of arbitrary (x,y,z) triplets, you need to use `mesh3d` - but the caveat is that if you don't provide the connections yourself (i, j, k vertex arrays to define the triangles) we'll have to guess. With the exception of data that are single-valued in one of the axes (so you can use Delaunay triangulation - for example you know z is a function of x and y but you have irregularly arranged data points) our algorithms for this obviously leave something to be desired.\r\n\r\n@etpinard do you want to leave this open for someone to look at whether `alphahull` is really doing the right thing and/or if another algorithm could do better? Or would you prefer to close this as too speculative / distant a concern?",
    "created_at": "2018-05-09T20:44:31Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2621#issuecomment-387869814",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2621",
    "updated_at": "2018-05-09T20:44:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "right, it needs to be 2D arrays, of the same shape, for all 3 arrays. You've already got a 2D loop, just use both indices as the array indices https://codepen.io/alexcjohnson/pen/NMyOmg\r\n![screen shot 2018-05-09 at 3 33 29 pm](https://user-images.githubusercontent.com/2678795/39835509-5a9481d6-539e-11e8-849d-3068d548381b.png)\r\n(also needed to change `intensity` to `surfacecolor`)",
    "created_at": "2018-05-09T19:34:11Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2621#issuecomment-387850844",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2621",
    "updated_at": "2018-05-09T19:34:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks again @vinipitta - very nice work!",
    "created_at": "2018-05-09T16:39:09Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2622#issuecomment-387800356",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2622",
    "updated_at": "2018-05-09T16:39:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard's suggestion is probably the right way to handle this - you may find this reference useful: https://plot.ly/python/3d-parametric-plots/ (in Python but it translates easily to JS)\r\n\r\nBut it's interesting that `alphahull` doesn't work in this seemingly fairly simple case - as you say, positive values help a little, up to about 5 you can start to see the shape emerge but above that any more detail is mooted by the appearance of unwanted holes. I wonder if there would be some smarter variant of the `alphahull` algorithm, that determines a dynamic connection radius based on the local density of points or something?\r\n\r\nIt's also quite possible we have a bug in that algorithm at the moment. For example here's your plot at `alphahull: 5` - why would it connect that pane across the bottom, then leave a gap? Seems weird.\r\n![screen shot 2018-05-09 at 11 21 12 am](https://user-images.githubusercontent.com/2678795/39823600-6044e814-537b-11e8-9c5f-654520ac2a47.png)\r\nAnd increasing to `alphahull: 6`, gaps open up that look to be substantially smaller than connections that we *do* draw from lobe to lobe, which I wouldn't have expected.\r\n![screen shot 2018-05-09 at 11 26 23 am](https://user-images.githubusercontent.com/2678795/39823815-dde866ba-537b-11e8-969d-ec1485b7cb4e.png)\r\n",
    "created_at": "2018-05-09T15:27:44Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2621#issuecomment-387778235",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2621",
    "updated_at": "2018-05-09T15:27:44Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @vinipitta - looks great!\r\n\r\nOur [syntax check](https://circleci.com/gh/plotly/plotly.js/9744?utm_campaign=vcs-integration-link&utm_medium=referral&utm_source=github-build-link) is complaining about the number of spaces for the translation keys (should be 4 more than the level above, not 8) and some trailing spaces at the end of lines and on blank lines.\r\n\r\nI'm on the fence about the `kde` translation - most other translators so far have left that as the English abbreviation, because spelling it out completely could be a bit long for the tooltip where this appears:\r\n![screen shot 2018-05-09 at 9 45 19 am](https://user-images.githubusercontent.com/2678795/39817996-c3a68f24-536d-11e8-870f-652af43271c8.png)\r\nBut if you think people will be confused by `kde` by itself I'm happy to leave it as you have it.",
    "created_at": "2018-05-09T13:52:15Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2622#issuecomment-387745695",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2622",
    "updated_at": "2018-05-09T13:52:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nicely done. I like it with the small centered bars for the one-axis-fixed-pixels case. Now that they're centered, rather than sitting on one (seemingly arbitrary) edge, I could see going back to a cross, but to my eye anyway it's a little bit clearer and more intuitive as a bar.\r\n\r\nThe drawing is very crisp now too, thanks for cleaning that up. I think we're ready! 💃  ",
    "created_at": "2018-05-09T12:44:32Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2594#issuecomment-387726126",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2594",
    "updated_at": "2018-05-09T12:44:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> what if you try ...\r\n\r\nsame error `Failed to get 'appData' path`",
    "created_at": "2018-05-08T22:43:30Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2615#issuecomment-387565572",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2615",
    "updated_at": "2018-05-08T22:43:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "in https://github.com/plotly/plotly.js/pull/2615/commits/265a882a3e68431805a6b007592461c6266b30c6 I changed `id --user` to `id -u` (and added a tighter check on the `docker run` -> `docker start` fallback so I could see the error message with `id`), now `npm run docker -- run` works on my mac. But I still didn't get `npm run test-image` to run. It failed with:\r\n\r\n```\r\nRunning image comparison test using build/plotly.js from 2018-5-8 15:39:37 \r\n\r\nA JavaScript error occurred in the main process\r\nUncaught Exception:\r\nError: Failed to get 'appData' path\r\n    at Object.<anonymous> (/var/www/image-exporter/node_modules/electron/dist/resources/electron.asar/browser/init.js:149:39)\r\n    at Object.<anonymous> (/var/www/image-exporter/node_modules/electron/dist/resources/electron.asar/browser/init.js:173:3)\r\n    at Module._compile (module.js:569:30)\r\n    at Object.Module._extensions..js (module.js:580:10)\r\n    at Module.load (module.js:503:32)\r\n    at tryModuleLoad (module.js:466:12)\r\n    at Function.Module._load (module.js:458:3)\r\n    at Function.Module.runMain (module.js:605:10)\r\n    at startup (bootstrap_node.js:167:16)\r\n    at bootstrap_node.js:589:3\r\n```\r\n\r\nWhich people seem to indicate is a permissions issue, but AFAICT `id -u` is doing the right thing...",
    "created_at": "2018-05-08T21:37:00Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2615#issuecomment-387550289",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2615",
    "updated_at": "2018-05-08T21:37:00Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> dropped the idea to additionally display a thin line. IMO showing the cross-hair is enough of a visual cue. Felt quite natural to me\r\n\r\nAgreed, this feels very clear to me as you have it now, makes it really obvious what's going on and how to get the alignment you want. Nice! Thanks for adding the annotation cursors as well, make sure you close #679 in addition to #2038 when this is merged 🎉 \r\n\r\nI haven't looked at the code yet, but two comments on the mechanics:\r\n- The cross gets blurry much of the time. `.crisp` can help, though even with that I've seen cases where corner pixels get dropped unexpectedly. The best solution is to round its positioning to  exact half-integer pixels - hence all the `.5`'s [here](https://github.com/plotly/plotly.js/blob/57eb8ef3314017b262ed43fbb50edc3033020d14/src/plots/cartesian/dragbox.js#L1014-L1041) - but that one doesn't need to explicitly round because it's positioned based on a mouse event... yours is placed based on data.\r\n\r\nonly a little blurry:\r\n![less blurry](https://user-images.githubusercontent.com/2678795/39765812-b0752ca2-52b0-11e8-96f7-e7aa482f843c.png)\r\n\r\nvery blurry:\r\n![blurry](https://user-images.githubusercontent.com/2678795/39765799-ac181f48-52b0-11e8-9405-3e59fee0d429.png)\r\n\r\n- I'm not quite sure what to do with the (very unusual, but supported) case of one axis fixed-pixels and the other data- or plot-referenced... Having the anchor cross appear at one edge of the non-pixel dimension feels weird though. Perhaps it would be enough to put it at the center of that dimension? Even better might be to put it at the center AND make it just a bar - a horizontal bar if only the y direction is fixed pixels, a vertical bar if only x is fixed. Like we do for 1D zooms:\r\n![screen shot 2018-05-08 at 11 38 34 am 2](https://user-images.githubusercontent.com/2678795/39767323-78f02170-52b4-11e8-8822-8dc17d66da99.png)\r\n\r\n> Also, in case there's a place in the code to gather functions together that generate some kind of \"symbol\" like the cross-hair shape, please let me know.\r\n\r\nNo, not at present. We do have nearly a identical path defined in [ternary](https://github.com/plotly/plotly.js/blob/57eb8ef3314017b262ed43fbb50edc3033020d14/src/plots/ternary/ternary.js#L439). That one is smaller than the one you made, which probably makes sense, so I'm not sure DRYing this up is a good goal, though there would be something to be said for collecting these paths at least to ensure the differences between them are intentional. Anyway I wouldn't worry about that in this PR but it's a good point to keep in mind for later.\r\n![screen shot 2018-05-08 at 11 28 35 am 2](https://user-images.githubusercontent.com/2678795/39766995-a5555704-52b3-11e8-83f9-831e232cff8f.png)\r\n",
    "created_at": "2018-05-08T15:41:35Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2594#issuecomment-387447104",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2594",
    "updated_at": "2018-05-08T15:41:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Sweet! I haven't looked at the code yet, just playing with your awesome `shapes_move-and-reshape-lines` mock 🎉 The mechanics of it are great! But I noticed a few things:\r\n- [x] I like the `move` cursor over the middle section, but how about `grab` for the ends? Won't work in IE but I think that's OK, it'll fall back to `default` there I guess, which is what you use now.\r\n- [x] Not part of this PR but I also notice we don't do anything special with the cursor when an annotation is draggable. It's a little tricky what to do with the text box, as click edits the text and drag moves it... but the arrow itself could safely get a `move` cursor. Your call whether to add that to this PR or make a new issue for it.\r\n- [x] When you drag a shape off the edge of an autoranged plot, dragging still works but part of the shape is hidden by the `clip-path` - could be helpful to remove the clipping during the move. I guess to be precise about it, if one of the axes is autoranged and the other is fixed, we should only stop clipping on the autoranged axis. Note that there are single-axis `clipPath`s already defined and available for this purpose.\r\n- [x] Also maybe not part of this PR, but came up while I was playing: seems like there's something off with y-autorange + fixed-size shapes. When one end of the green line is highest, the autorange is about right, but when the other end is highest it reserves too much space. Does not seem to happen in the x direction:\r\n![screen shot 2018-05-01 at 9 33 26 am](https://user-images.githubusercontent.com/2678795/39474662-0d7ded8c-4d23-11e8-9295-9bc2072e020a.png)\r\n",
    "created_at": "2018-05-01T13:39:38Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2594#issuecomment-385672804",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2594",
    "updated_at": "2018-05-08T14:24:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@rm-rf-etc yes, see https://github.com/plotly/react-plotly.js#customizing-the-plotlyjs-bundle",
    "created_at": "2018-05-08T14:17:23Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/202#issuecomment-387417828",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/202",
    "updated_at": "2018-05-08T14:17:23Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Update: the issue here is with a link with `value: 0` (element 5 in this graph's `link.value` array, that leads to node 15 having zero size). If I replace that with anything positive the layout is fixed. The zero results in a `NaN` in the node list, and I suspect the breakage and the browser-dependence of the problem have to do with strange handling of `NaN` in `Array.sort` or the like.\r\n\r\nObviously we need to prevent a zero (or otherwise invalid) `value` from breaking things, but the question then is, what *should* this do? Should we delete it completely? Draw it as a very thin node & link (labeled as size zero)?\r\n\r\nNegative or non-numeric values I feel confident we should ignore, but I feel like there may be cases you still want a zero-size node to show up. Thoughts?",
    "created_at": "2018-05-07T20:48:00Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2480#issuecomment-387201484",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2480",
    "updated_at": "2018-05-07T20:48:00Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @adube - yes, makes a lot of sense. I don't think we can *always* do this, there are times when the title is too long, or displayed on one subplot and not others, etc... so it would probably have to be opt-in unless we can come up with a sufficiently robust criterion for automatically using the title.",
    "created_at": "2018-05-07T14:04:48Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2618#issuecomment-387075292",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2618",
    "updated_at": "2018-05-07T14:04:48Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Huh, if you open http://localhost:3000/devtools/test_dashboard/#mathjax in FF it looks like the *only* place it works is in annotations, and not even all of those. Interestingly that mock doesn't put any MathJax into the legend, can't recall why, perhaps I had a problem with it in the image server? But yeah, on Chrome it works in the legend.\r\n\r\nThis is probably a `getBoundingClientRect` issue, you can see at least one of the missing labels peeking in from the left edge, the others are probably drawn somewhere but completely clipped.\r\n\r\nIn FF:\r\n<img width=\"818\" alt=\"screen shot 2018-05-07 at 9 52 17 am\" src=\"https://user-images.githubusercontent.com/2678795/39705429-607c5f92-51dc-11e8-88ab-f4ed859c0530.png\">\r\n\r\nIn Chrome:\r\n<img width=\"804\" alt=\"screen shot 2018-05-07 at 9 55 08 am\" src=\"https://user-images.githubusercontent.com/2678795/39705560-c87e7846-51dc-11e8-9314-666b767eb39d.png\">\r\n",
    "created_at": "2018-05-07T14:00:05Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2616#issuecomment-387073828",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2616",
    "updated_at": "2018-05-07T14:00:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I'm really not happy about the idea of anything less than perfect matching. There have been quite a few cases of very small changes in the image output being the only evidence of a real bug. I'm open to discussing it though.",
    "created_at": "2018-05-04T20:07:01Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2615#issuecomment-386718923",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2615",
    "updated_at": "2018-05-04T20:07:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Currently `position` is limited to [between 0 and 1](https://github.com/plotly/plotly.js/blob/7acca0abb3ae226c458ce29b3dabdd1c1e3c460a/src/plots/cartesian/layout_attributes.js#L709-L710). I suppose we could expand that range (some other items that use paper-referenced positioning do allow [a wider range](https://github.com/plotly/plotly.js/blob/7acca0abb3ae226c458ce29b3dabdd1c1e3c460a/src/components/legend/attributes.js#L83-L84)). Notice though that this positioning is fractional, not pixels, so if your plot size changes the position will change as well. So I'd be a little worried about axes disappearing unexpectedly if we allow this.\r\n\r\nCan you accomplish this with `xaxis.domain` instead? https://jsfiddle.net/9wegmbsc/",
    "created_at": "2018-05-04T12:48:38Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2613#issuecomment-386590955",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2613",
    "updated_at": "2018-05-04T12:48:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@aiko-psi any chance your environment has d3 v4 in it? Plotly uses d3 v3, and we've seen a case where d3 v4 ends up replacing v3 and breaking everything, in similar ways to that (@nicolaskruchten remind me where that was debugged?)",
    "created_at": "2018-05-04T11:31:29Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2599#issuecomment-386573774",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2599",
    "updated_at": "2018-05-04T11:31:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks promising - I know that problem is a bit hard to pin down, but are you able to actually see this fix a bug? Also why `Uint8Array` if I see `type: 'float'`?\r\n\r\nIs there any way we can test this? Like, if we know it's risky to initialize a `regl.buffer` with `null`, can we wrap `regl.buffer` in our whole test suite and throw an error in this case? Similar to [`strict-d3`](https://github.com/plotly/plotly.js/blob/master/test/image/strict-d3.js) I guess, maybe we also need a `strict-regl`? Would that help us 🔒 some of these other browser-and-hardware-dependent bugs?",
    "created_at": "2018-05-03T18:10:37Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2612#issuecomment-386386862",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2612",
    "updated_at": "2018-05-03T18:10:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks! 💃 ",
    "created_at": "2018-05-03T17:54:37Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2607#issuecomment-386381783",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2607",
    "updated_at": "2018-05-03T17:54:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "As you point out @zhihua-chen `wheel` is already emitting a `relayout` event for every DOM event... which is different from 2D where we [wait](https://github.com/plotly/plotly.js/blob/398eeb3e5f3ef697609235d47d7ad78cada79cac/src/plots/cartesian/dragbox.js#L451-L459) a somewhat arbitrary [delay time](https://github.com/plotly/plotly.js/blob/398eeb3e5f3ef697609235d47d7ad78cada79cac/src/plots/cartesian/constants.js#L51) after the last `wheel` event we see before firing the `relayout`. We really should make 3D work like 2D here, at least once we have these intermediate events implemented.\r\n\r\nI can't imagine that simply emitting the event would impact performance noticeably, right? It's how the developer responds to that event that matters, but I think we should let them decide how much performance hit is acceptable in their own application. Likewise I don't think we should throttle these events, let developers do that themselves if it suits their application - though at some point perhaps it would be neat to build that into our events API, like `gd.onThrottled(event, callback, minDelay)`?\r\n\r\nCan we do this in a way that explicitly mirrors `relayout` so that a) it's clear what the event data structure will be, and b) it will apply not just to drags but wheel events as well? That could be `plotly_relayouting`, or `plotly_relayoutpending`, something like that?",
    "created_at": "2018-05-03T17:52:31Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2606#issuecomment-386381105",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2606",
    "updated_at": "2018-05-03T17:52:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> (unless someone would prefer another name for that config key instead of `toImageButtonDefaults`)\r\n\r\nThey're not really defaults at that point, since there's no way to override them further, right? So I might vote `toImageButtonOptions` or something.",
    "created_at": "2018-05-03T17:22:14Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2607#issuecomment-386371343",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2607",
    "updated_at": "2018-05-03T17:22:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Seems reasonable - @dy is this just a matter of exposing the [`fovy` option](https://github.com/gl-vis/gl-plot3d/blob/master/scene.js#L164) to `gl-plot3d` and setting it to what, 0, or something sufficiently tiny?",
    "created_at": "2018-05-03T15:49:37Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2611#issuecomment-386342638",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2611",
    "updated_at": "2018-05-03T15:49:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The issue here is that hiding the trace via legend updates (mutates) that trace in `data`, and when you rebuild the state for the new `Plotly.react` call you're discarding that update.\r\n\r\nTypically what we do in cases like this is build the new state for `Plotly.react` as a modified version of the old state (in `gd.data` and `gd.layout`, which should in fact be the objects you previously passed in to `Plotly.plot` or `Plotly.react`) so that any user-initiated changes in that state - others include zooming in, changing `layout.hovermode` or `layout.dragmode` - will be incorporated in the new state. But to resolve *just* the legend-set visibility issue, you could include it explicitly like https://codepen.io/alexcjohnson/pen/gzRZQR",
    "created_at": "2018-05-03T15:30:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2608#issuecomment-386336005",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2608",
    "updated_at": "2018-05-03T15:30:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Not immediately able to reproduce that error, can you try to get a codepen? I see a related issue though: stacked to overlaying axes -> remnants of one of the original subplots remains.\r\nhttps://codepen.io/alexcjohnson/pen/jxwQPb?editors=1010\r\n\r\n",
    "created_at": "2018-05-03T14:38:37Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2610#issuecomment-386318246",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2610",
    "updated_at": "2018-05-03T14:38:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> striped rows but striped columns, so the two adjacent category can distinguish easily\r\n\r\nNice, I'd call that the same feature (just applied to the x axis instead of y) but that does seem like a more useful application of it. Note that if you zoom out in your example you can see the issue I was worried about, when categories get too dense and the stripes (and/or ticks/lines) get put in what's suddenly a weird place:\r\n![screen shot 2018-05-03 at 10 02 50 am](https://user-images.githubusercontent.com/2678795/39581280-31ecc368-4eb9-11e8-8724-770013401d8c.png)\r\n\r\n> Another advance would be the category region hover highlight\r\n\r\ninteresting, kind of a generalization of the idea of spikelines https://github.com/plotly/plotly.js/pull/1461 - perhaps this could fit into that framework.",
    "created_at": "2018-05-03T14:20:24Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2601#issuecomment-386312022",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2601",
    "updated_at": "2018-05-03T14:20:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "And the label as well, I gather? Meaning you want the hover label to always show the closest event to the left of the mouse?\r\n\r\nThat's not currently possible, no. Would be a great candidate for a community PR 😉 but we should probably agree on an API for it here before anyone starts coding on it.",
    "created_at": "2018-05-02T22:17:27Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2605#issuecomment-386138819",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2605",
    "updated_at": "2018-05-02T22:17:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "You're right, that should register a click. Thanks for clarifying!\r\nWe should probably make variants of all tests for all of our click events, where between mousedown and mouseup we add a small mousemove.",
    "created_at": "2018-05-02T18:43:22Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2598#issuecomment-386080106",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2598",
    "updated_at": "2018-05-02T18:43:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for the report! I'll fix this, came in with #2577 I think.",
    "created_at": "2018-05-02T13:59:11Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2602#issuecomment-385987109",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2602",
    "updated_at": "2018-05-02T13:59:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Good point, ticks and gridlines halfway between the category labels is often better than aligned with the labels, as they are for numeric or date axes. Not always, for example label-aligned may be better for scatter/bubble plots. Also I'm not sure what the right behavior is when categories get too dense and we can't show them all...\r\n\r\nStriped rows is interesting, I see a few examples of it elsewhere, like [here](https://canvasjs.com/docs/charts/basics-of-creating-html5-chart/tick-marks-grid-lines-and-interlaced-colors/) - it's not an effect I'd use myself, I think it makes interpreting the data harder. But we'd entertain a PR to add it 😄 ",
    "created_at": "2018-05-02T13:52:44Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2601#issuecomment-385985025",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2601",
    "updated_at": "2018-05-02T13:52:44Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Also it gets autorange even *more* wrong, and the errorbars disappear on redraw (the latter also reported in #2450)\r\n\r\nThanks for the report!",
    "created_at": "2018-05-02T13:39:39Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2600#issuecomment-385980837",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2600",
    "updated_at": "2018-05-02T13:39:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The source for that is:\r\nhttps://github.com/plotly/plotly.js/blob/c91866d5fc7372c7de769726cd76f6e21c4f40c6/src/plots/cartesian/axes.js#L209-L210\r\n\r\nIt looks like you have some transformation that's incorrectly adding `=` before the `/ newDiff`?\r\nA little farther down in your traceback:\r\n```\r\nif (_minDtick === void 0) { _minDtick = / newDiff\r\n+ 1e-6) % 1 < 2e-6 &&(((newFirst - ax._forceTick0) / newDiff % 1)\r\n```\r\nNo idea why that would have happened, but it certainly doesn't look like a correct transformation of the source.",
    "created_at": "2018-05-02T13:29:14Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2599#issuecomment-385977631",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2599",
    "updated_at": "2018-05-02T13:29:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "In what contexts are you seeing this? We're probably not consistent about this, but at least the callers that go through [`dragElement`](https://github.com/plotly/plotly.js/blob/c91866d5fc7372c7de769726cd76f6e21c4f40c6/src/components/dragelement/index.js#L118) get a `minDrag` that's usually set to [8px](https://github.com/plotly/plotly.js/blob/c91866d5fc7372c7de769726cd76f6e21c4f40c6/src/plots/cartesian/constants.js#L36) and should still emit a `plotly_click` below that threshold.",
    "created_at": "2018-05-02T13:20:08Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2598#issuecomment-385974964",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2598",
    "updated_at": "2018-05-02T13:20:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> What about the `text` or `pointer` cursor for the text and the `move` cursor for the rect around the text? E.g. Trello is using `text` and `pointer` cursors to indicate direct editing of card and list titles.\r\n\r\nCurrently the two behave the same when you click or drag them, I think - so I'd keep the cursor the same for both elements. Maybe `pointer` is best to capture the multiple possibilities? I suppose we could also use `text` but change it to `move` once you start dragging? Dunno, I don't have a strong opinion.",
    "created_at": "2018-05-02T13:02:55Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2594#issuecomment-385970083",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2594",
    "updated_at": "2018-05-02T13:02:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "On my mac the bubbles show up but the tick labels are broken - also only in FF\r\n![screen shot 2018-05-01 at 6 41 38 pm](https://user-images.githubusercontent.com/2678795/39497034-53e2a0b4-4d6f-11e8-9242-5eedd8e68c7d.png)\r\nFirefox 59.0.2\r\n2015 MacBook Pro with Intel Iris 6100 1536MB",
    "created_at": "2018-05-01T22:44:48Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2597#issuecomment-385812381",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2597",
    "updated_at": "2018-05-01T22:44:48Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I guess we could make `clickmode` a flaglist so that users could set e.g. `clickmode: 'select+event'`.\r\n\r\nI like that - so users who already implemented hacks to get a similar result (@cpsievert) or switching between select and some other click behavior could set `clickmode: 'select'` and not worry about their other event handlers conflicting with the new behavior.\r\n\r\n> That said, are we ever going to add support for persistent selection via hover? For example via `layout.hovermode: 'select'`?\r\n\r\nYeah possibly - for immediate cross-plot brushing like https://rd3.now.sh/ perhaps. Doesn't seem to me like the two conflict though, we could add that later and people might even want to use the two together, so you can persistently select some points then add the transient hover selection to it.\r\n\r\n> perhaps means we need two new `click*` attributes: one similar to dragmode which tells which interaction to perform and one similar to `hovermode` which tells which info the interaction should brings up.\r\n\r\nAlternatively, don't implement a second attribute, have selection and event data always match hover data, but make `hovermode` default to `'closest'` when you're using the new `clickmode` values.\r\n\r\nI started describing how a second `click* attribute would look and it got really complicated (below), so ^^ is my vote, I think it's both clearer for users (it's obvious what exactly you're clicking on) and easier to implement!\r\n\r\n- `clickdata: ('all'|'closest')` perhaps? Where `'all'` means \"all the points showing hover data\" and `'closest'` is just the closest one (but I think `hovermode: 'closest', clickdata: 'x'` would be confusing, I don't think we allow that - so `clickdata` would be irrelevant if `hovermode` is already `'closest'`)? And this controls both the event data and the selection data? For backward compatibility it seems like with `clickmode: 'event'`, `clickdata` should default to `'all'`, but for `clickmode: 'select'` I feel like `clickdata` should default to `'closest'` AND we should find some way to indicate with the hover tooltip which point is the closest (thicker border? bold text?)",
    "created_at": "2018-05-01T20:12:42Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1852#issuecomment-385776071",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1852",
    "updated_at": "2018-05-01T20:12:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice and easy - 💃 \r\n\r\nNo guarantee there aren't others lingering out there... I wonder if we can do something perhaps in the [react-noop tests](https://github.com/plotly/plotly.js/blob/master/test/jasmine/tests/plot_api_test.js#L3235) like crawl each figure for numeric arrays, convert them all to typed arrays, and verify that nothing fails? I guess that wouldn't have caught this one though, as it didn't cause an error, just failed to use the array, and it doesn't seem like there's any generic way to tell that other than I guess image tests...\r\n\r\nOr we can just let @jmmease tell us what else we missed 😉 ",
    "created_at": "2018-05-01T16:40:48Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2596#issuecomment-385718949",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2596",
    "updated_at": "2018-05-01T16:40:48Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Very nice. 💃 ",
    "created_at": "2018-05-01T16:26:02Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2581#issuecomment-385715267",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2581",
    "updated_at": "2018-05-01T16:26:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Oh hmm, re: the y-autorange issue: I think I just got the anchor point outside the actual range of the line, so it was autoranging to the anchor point, which is totally reasonable! I'm not really sure how to handle this, but as it is it's too easy to get into strange unintuitive situations, since there's nothing to show you visually where the anchor point is.\r\n\r\nThe easy way to handle this would be just not to allow GUI resizing of pixel-sized shapes, only moving them. Or perhaps allow resizing but not past the anchor point, so the shape always contains the anchor? That would cause problems for lines though, as you'd have the same problem this PR is intended to fix, of not being able to change the direction the way you want to. A more complete solution might be to show the anchor point during the resize - that would let people see what they're really doing. Perhaps a crosshair, white with a black outline like we make for zoom box corners?",
    "created_at": "2018-05-01T14:32:27Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2594#issuecomment-385685115",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2594",
    "updated_at": "2018-05-01T14:32:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Good call renaming 'fixed_size_shapes' to 'shapes_fixed_size' - I hadn't noticed that but yes, it's nice to keep all the shapes mocks together in our various listings.",
    "created_at": "2018-05-01T13:43:18Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2594#issuecomment-385673579",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2594",
    "updated_at": "2018-05-01T13:43:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks great! Thanks for the help understanding https://github.com/plotly/plotly.js/pull/2583/commits/3776e8f20299cd9b3ecb5db59950a3355481a075\r\n\r\n💃 ",
    "created_at": "2018-05-01T12:54:10Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2583#issuecomment-385664176",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2583",
    "updated_at": "2018-05-01T12:54:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> In 1.36.1 the points look less dense. Is there a chance that not all of the points are being rendered in 1.36.1?\r\n\r\nIs this https://github.com/plotly/plotly.js/issues/2334 again?\r\n\r\nIt's pretty bad anyway - check out what happens when you make the x values monotonic https://codepen.io/alexcjohnson/pen/GdWEqp\r\n\r\n![screen shot 2018-04-30 at 3 41 50 pm](https://user-images.githubusercontent.com/2678795/39446599-0d022396-4c8d-11e8-931f-5afa949bc837.png)",
    "created_at": "2018-04-30T19:44:55Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2586#issuecomment-385507493",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2586",
    "updated_at": "2018-04-30T19:44:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Beautiful - thanks for those couple of changes. This is a huge improvement not just in 🐎 but in structure and maintainabilty! 💃 ",
    "created_at": "2018-04-30T15:46:17Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2579#issuecomment-385439781",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2579",
    "updated_at": "2018-04-30T15:46:17Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "A few notes after discussing this offline with @chriddyp \r\n- Using click to create or alter selections need not be mutually exclusive with lasso or box select; those are set by `layout.dragmode` because the property you're controlling is \"what happens when the user drags on the plot.\" Here the question is \"what happens when the user clicks on the plot\" and it could be really nice to, for example, draw a lasso to start your selection but then click individual points to add or remove them from the selection.\r\n- I don't think we can make click-to-select the default behavior. A lot of existing apps rely on the click event to trigger something other than selection. Should we make a new top-level attribute `layout.clickmode` or does this need to be a trace-level attribute? The new behavior could be `clickmode: 'select'`, and later we can add `clickmode: 'hover'` to trigger persistent hover labels, what do we call the existing behavior, `clickmode: 'event'`? Do we still emit `plotly_click` events in these other `clickmode` settings?\r\n- Multiple selections and deselection: my gut reaction is to have a regular click make a totally new selection, so deselection would be just a matter of clicking a blank spot on the plot (perhaps also when only one point is selected, clicking it again would deselect?), and use shift-click to add/remove points. Is this discoverable enough? Perhaps we add a notifier about it on your first click-to-select?\r\n- Does click-to-select exactly mirror hover data, like the click event data does right now, so that in \"compare\" mode a single click could add one point from each trace? Or do we do something like in the spikelines feature where after picking the hover data, we filter again to find the best single point and that's the one referenced for selection?",
    "created_at": "2018-04-30T15:01:33Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1852#issuecomment-385425732",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1852",
    "updated_at": "2018-04-30T15:01:33Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Closing - thanks for the fruitful discussion @LeanderK ",
    "created_at": "2018-04-30T13:35:35Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2544#issuecomment-385399720",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2544",
    "updated_at": "2018-04-30T13:35:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "And yet a different result in FF (image is Chrome / FF / Safari):\r\n![screen shot 2018-04-29 at 1 18 54 pm](https://user-images.githubusercontent.com/2678795/39409159-11f51828-4bb0-11e8-810b-d5c6a6445929.png)\r\n\r\nHere it is as a pared-down codepen https://codepen.io/alexcjohnson/pen/NMdMbE?editors=1010\r\nEven in Safari it's not quite right - there is no overlap at least, but there's a net upward shift from left to right that should not be there.",
    "created_at": "2018-04-29T17:40:45Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2480#issuecomment-385268090",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2480",
    "updated_at": "2018-04-29T17:40:45Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "`Plotly.plot` should not be used on a plot with existing data - its behavior is weird: it adds the new `data` to the existing traces and ignores `layout`. I guess it does update `config` but this method should be considered deprecated.\r\n\r\nIf you meant to not change the plot, `Plotly.newPlot` does work as expected. `Plotly.react` however, which is really the only other approved way to change `config`, does not work correctly - it shows the same behavior as `Plotly.plot` - so I'll take that as the item to fix here.",
    "created_at": "2018-04-27T21:56:07Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2484#issuecomment-385104171",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2484",
    "updated_at": "2018-04-27T21:56:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@nitinlkoin1984 were you able to create a codepen/jsfiddle showing the problem?",
    "created_at": "2018-04-27T21:34:57Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2535#issuecomment-385100266",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2535",
    "updated_at": "2018-04-27T21:34:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @sunqingsong - actually it looks like in Chrome there's a tiny offset sometimes too... but FF is way off.",
    "created_at": "2018-04-27T19:33:50Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2588#issuecomment-385072182",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2588",
    "updated_at": "2018-04-27T19:33:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @booleanbetrayal - this will be in the 1.37.0 release, expected next week.",
    "created_at": "2018-04-27T16:01:08Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2526#issuecomment-385015874",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2526",
    "updated_at": "2018-04-27T16:01:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Actually I think my first instinct about this was incorrect - it's not how regular non-grouped traces work, and the regular-trace behavior was chosen to optimize the GUI editing experience: if you delete a label, it stays deleted but gets replaced with 4 spaces, so that you still have something to click on to put a new name there later. I think I'd like to tweak this a little - when you delete a label, store it as `''`, but when you're in editable mode display it as 4 spaces (or perhaps even a number of spaces chosen to roughly match the size of other nearby labels?). As is, if you restyle to `name: ''` it's impossible to click and edit the name after that because it has no size to click on.\r\n\r\nThat means there's no way in the GUI to delete the name and get back to the default - to do that you need to restyle to `name: null` - but I think that's better than some hack like a total delete gives the default, but setting the name as a single space makes it look blank.",
    "created_at": "2018-04-27T14:32:45Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2576#issuecomment-384988293",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2576",
    "updated_at": "2018-04-27T14:32:45Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @kndungu ! @booleanbetrayal if you can merge in @kndungu 's suggestions I'll be happy to merge 😄 ",
    "created_at": "2018-04-26T21:54:42Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2526#issuecomment-384801040",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2526",
    "updated_at": "2018-04-26T21:54:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Toolpanel works fine, the only thing I had to do was remove this line:\r\nhttps://github.com/plotly/streambed/blob/master/shelly/plotlyjs/static/plotlyjs/src/plotly.js#L29\r\n\r\nAs far as I can tell `Plotly.Heatmap.hasColumns` isn't used anywhere anyway, but if I'm missing something and it still is needed we can point it to `Lib/isArray1D`.",
    "created_at": "2018-04-26T21:51:10Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2577#issuecomment-384800227",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2577",
    "updated_at": "2018-04-26T21:51:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Oh, one more thing. I don't think the checklist in https://github.com/plotly/plotly.js/issues/2508#issuecomment-378952799 got completed.\r\n\r\ncompleted in https://github.com/plotly/plotly.js/pull/2577/commits/965bcfb0d20717ba2aa2e2b1f4cda2d049ff4f08",
    "created_at": "2018-04-26T18:29:25Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2577#issuecomment-384744153",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2577",
    "updated_at": "2018-04-26T18:29:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Two tests to add, probably to `transform_groupby_test`, when fixing this:\r\n- [x] relinkPrivateKeys https://github.com/plotly/plotly.js/pull/2525#discussion_r179326458\r\n- [x] `Plotly.react` diffing on `fullInput` https://github.com/plotly/plotly.js/pull/2525#discussion_r179326587",
    "created_at": "2018-04-05T14:20:13Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2508#issuecomment-378952799",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2508",
    "updated_at": "2018-04-26T18:28:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> should we really use `Events.triggerHandlers`? One drawback of using it: the custom handlers must be called **before** the default handlers, meaning the users won't have access to the to-be-updated `visible` trace attribute values - which could be confusing for users that want to augment the default behavior (but maybe listening to `plotly_restyle` is good enough for that use case?)\r\n\r\nNot sure what that deprecation comment is about (@bpostlethwaite ?) but this seems like a clean solution to me. I don't see ^^ as a downside, in fact it's really the only option if you want to be able to avoid the default behavior in the first place right? I suppose we could make even more events (`plotly_legendclicked`?) but unless someone is really bothered by it I'd just leave it at `plotly_restyle`.\r\n\r\n> should `plotly_legendclick` and `plotly_legenddoubleclick` be the same event? For example, maybe both click and doubleclick could trigger `plotly_legendclick` where the click/doubleclick distinction would be made using addition event data field (e.g `numClick: 1 || 2`). This would allows users to define their own click-vs-doubleclick timeouts.\r\n\r\nreferencing https://github.com/plotly/plotly.js/issues/1546 - if we're ever going to add `plotly_singleclick` then perhaps for consistency we should have three events here - or at least ensure that the two we're introducing match names <-> behaviors with two of the (eventually) three data click events (so if this one behaves like `plotly_singleclick` perhaps name it `plotly_legendsingleclick`?)\r\n\r\n> can anyone think of any other useful field to include in the event data?\r\n\r\nFor use with our favorite transform, `groupby`, it would be nice to include `_expandedIndex` and maybe `_group` if it exists.",
    "created_at": "2018-04-25T21:05:10Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2581#issuecomment-384433747",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2581",
    "updated_at": "2018-04-25T21:05:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard this is amazing - you make it look so easy, I thought it would be way more involved 😅\r\nJust a few 🐎 suggestions/questions, then this'll be ready to go!",
    "created_at": "2018-04-25T17:09:51Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2579#issuecomment-384362852",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2579",
    "updated_at": "2018-04-25T17:09:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "re: tricky `.select()` behavior - see https://github.com/d3/d3/issues/1443#issuecomment-345548077\r\n\r\n>  I've added an extension to d3-selection, selection.selectWithoutDataPropagation which does `d3.select(this.node().querySelector(name))`\r\n\r\nIn case using `selectAll` in these instances becomes a 🐎 issue or something...",
    "created_at": "2018-04-25T16:44:24Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2579#issuecomment-384354405",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2579",
    "updated_at": "2018-04-25T16:44:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The helper element approach is what we did with annotations:\r\nhttps://github.com/plotly/plotly.js/blob/4ed586a6402073cc5c50a40cad5f652d7472fcce/src/components/annotations/draw.js#L525-L599\r\n\r\nThere we only needed one helper, since dragging the arrowhead and arrow line do the same operation. But the idea is the same, and we did exactly what you're describing above: a bigger active region right around the head (I made it a square but a circle would have been even better) plus a thicker version of the original line. I'd vote to do the same here; it's more DOM overhead but I can't really see people making hundreds of editable lines. Yes, more effort for us, but I agree that it should be a better experience.\r\n\r\nI suppose it would be possible to do it with only one transparent helper element, drag is enabled whenever you're over it but the mode is calculated on the fly. I wouldn't pick a fixed fraction though, but a fixed size that perhaps grows with the line width. Like this, where the black is the shape and red is the transparent helper (not actual size 😅):\r\n<img width=\"394\" alt=\"screen shot 2018-04-24 at 8 52 34 am\" src=\"https://user-images.githubusercontent.com/2678795/39188168-193ea840-479d-11e8-8c60-6ea644de28e4.png\">\r\nAnyway that's the desired behavior, you choose the implementation.",
    "created_at": "2018-04-24T12:59:46Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2038#issuecomment-383921106",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2038",
    "updated_at": "2018-04-24T12:59:46Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@arlowhite y-axis range sliders would be a separate effort - feel free to create a new issue for it.",
    "created_at": "2018-04-23T19:37:59Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2453#issuecomment-383696927",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2453",
    "updated_at": "2018-04-23T19:37:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> So how can a UI like react-chart-editor determine if a given trace in a figure is eligible for transforms?\r\n\r\nIf you have `_fullData` look at `trace._length`: if it's a positive integer you can transform it, if it's `null` you can't. One caveat though, if the trace isn't `visible` it does not need to define `_length` so you wouldn't know. I suppose that applies everything though so it must be standard for the editor to not be able to really edit invisible traces.\r\n\r\nWe could add this to the schema I guess, but there are a few cases where the `type` isn't enough to know whether you can transform it or not. Chiefly `heatmap` and `contour`, where if `z` is 1D you *can* transform it, but if it's 2D you can't.",
    "created_at": "2018-04-22T22:59:07Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2577#issuecomment-383419095",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2577",
    "updated_at": "2018-04-22T22:59:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Good call - like my upcoming react/transforms fix...",
    "created_at": "2018-04-20T15:41:04Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2574#issuecomment-383136843",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2574",
    "updated_at": "2018-04-20T15:41:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> the only place where pruning empty containers makes sense (and even that's debatable) is during restyle/relayout/update.\r\n\r\nRight, I guess I'm arguing for not even pruning `{}` during restyle/relayout/update - the only place this could have a practical effect (`rangeslider`) it doesn't anyway due to our clandestine mutations.\r\n\r\nIn fact... currently we also prune `[]` with exceptions for data arrays, which we determine in the negative by matching the attribute string against a hard-coded collection of known `info_array` names\r\nhttps://github.com/plotly/plotly.js/blob/4ed586a6402073cc5c50a40cad5f652d7472fcce/src/lib/nested_property.js#L138\r\nyet there too we have a note:\r\n```\r\n * Info arrays can be safely deleted, but not deleting them has no ill effects other\r\n * than leaving a trace or layout object with some cruft in it.\r\n```\r\nHonestly this has probably *never* actually happened to a user - using `restyle` etc to remove all items from an `info_array` like `range` or `domain`, and expecting the array container to disappear? So as much as it was a nice idea that a `restyle` and then its undo operation should put the object back into its original state exactly, the fact is with no pruning we get the same *practical* result with far less complexity and coupling. I've come around to thinking we shouldn't treat `[]` as something to delete either - and I'm going to do that now, along with 🔪 the rest of the pruning stuff, unless anyone objects.",
    "created_at": "2018-04-20T14:30:19Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1410#issuecomment-383114659",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1410",
    "updated_at": "2018-04-20T14:30:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @yniknafs for the codepen 🎉 \r\n\r\n@nicolaskruchten I thought in my fiddling yesterday it looked like in cases like this we *were* pushing the x title down below all the tick labels... but here we *are* automatically adjusting the margins but the title just avoids the nearby labels... even if I shorten the really long labels.\r\n\r\nSo let me toss this back to you, is this a bug or is this how the feature was intended to work so this is a feature request?\r\n\r\n@yniknafs totally agreed that the title/label padding would be nice as an adjustable parameter.",
    "created_at": "2018-04-20T13:54:12Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2575#issuecomment-383103419",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2575",
    "updated_at": "2018-04-20T13:54:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @yniknafs - can you work this plot into a codepen/jsfiddle so we can debug?",
    "created_at": "2018-04-20T13:14:01Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2575#issuecomment-383091795",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2575",
    "updated_at": "2018-04-20T13:14:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Update: I notice one case that `{}` is different from `undefined`, and that's `rangeslider`, eg:\r\n```\r\nPlotly.newPlot(gd,[{x:[1,2,3]}],{xaxis:{rangeslider: {}}})\r\n```\r\nChanging that will probably have to wait for v2... interestingly once you *have* a `rangeslider` we add some things to it (in the input `layout` copy) so the bug I was expecting (eg `Plotly.relayout(gd, {'xaxis.title': null})` accidentally deleting the `rangeslider`) is not manifest, but there is a related bug: you can't *add* a rangeslider by `Plotly.relayout(gd, {'xaxis.rangeslider': {}})` because `nestedProperty` sees `{}` and prunes it.\r\n\r\nAnyway, unless something has changed in the 14 months 🙄 that this issue has lain dormant, seems like we're agreed that we can :hocho: the pruning check. I need to remove it at least within `supplyDefaults` - where it's always been useless (and wasteful 🐎) but now is actually causing me other bugs while I try to fix #2508. Would be easier to just remove than to make a special version to use in `supplyDefaults`",
    "created_at": "2018-04-20T12:56:52Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1410#issuecomment-383087185",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1410",
    "updated_at": "2018-04-20T12:56:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Beautiful. Only the one very nonblocking comment, lets do it! 💃 ",
    "created_at": "2018-04-20T00:13:26Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2574#issuecomment-382920732",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2574",
    "updated_at": "2018-04-20T00:13:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> actually automargins is that mode\r\n\r\nAh I see, didn't realize those two were coupled but you're right, that does generally work and seems like a good standard behavior. I still think it would be nice to be able to decouple them, ie *by default* it works like you have it but you could use another attribute to force either separate-label avoidance with `automargins` or all-label avoidance without.",
    "created_at": "2018-04-19T17:45:19Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2243#issuecomment-382822463",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2243",
    "updated_at": "2018-04-19T17:45:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> If ever we start supporting transforms on 2D arrays, we can reassess.\r\n\r\nYes - just looking at `table` traces... it would be sweet to be able to filter/sort/aggregate a `table`, but this has (at least) two problems right now:\r\n- `cells.values` is a 2D array... our transforms wouldn't know what to do with this, and generally you'd want the transform target to be one column of that, but we don't have a mechanism to pick out a column.\r\n- `header.values` is also a 2D array, so it'll show up in `_arrayAttrs` and if we try to continue using automatic array collection we'll have to find a way to exclude headers.\r\n\r\nAnyway trying to generalize this to other 2D trace types seems tough, given all the different combinations of 1D & 2D data available within a single trace type, with some of the 1D arrays matching columns of the 2D, some matching rows, some allowing 1D or 2D, etc etc... So either each transform would have to be specifically extended for each 2D trace type it wants to support or we'd need a way to describe (in the schema?) which dimensions of which attributes relate to each other.\r\n\r\nSo with `_length = null` we can disable this explicitly, then re-enable it type-by-type as we figure it out.",
    "created_at": "2018-04-19T17:33:58Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2508#issuecomment-382818869",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2508",
    "updated_at": "2018-04-19T17:33:58Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Aside from the legend overlap, this question about where the axis title goes has come up before - though I'm not aware of an issue discussing it. @yniknafs as you've deduced, we currently have the title avoid the bounding box of each tick label independently, so if there's a long label near the edge somewhere, that won't cause the title to shift outward (until you pan the axis to put that long label in conflict with the title, then it'll move). But you're right, in certain cases it would be nice to have a mode where the title stays out beyond the longest label even if they wouldn't actually cover each other.",
    "created_at": "2018-04-19T17:12:58Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2243#issuecomment-382812462",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2243",
    "updated_at": "2018-04-19T17:12:58Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "A new rule I'm considering implementing & enforcing, to help ensure transforms work correctly with all trace types:\r\n- *Every* trace must define `_length`, and MUST do it during `supplyDefaults` so it's available before any transforms operate.\r\n- This is (at least for now) only appropriate for traces that have 1D data - so it applies for example to heatmaps if you provide triplet data (`x`/`y`/`z` are all 1D) but not if `z` is 2D.\r\n- When it does not apply, set `_length = null`, and all transforms that operate on the assumption of 1D data (which is currently all of them) will be automatically disabled.\r\n\r\n@etpinard thoughts?",
    "created_at": "2018-04-19T16:47:20Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2508#issuecomment-382804443",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2508",
    "updated_at": "2018-04-19T16:47:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": ">So I'm thinking of moving this block out of Plots.linkSubplots and into the lsInner subroutine\r\n\r\nSounds reasonable. Another option - not necessarily mutually exclusive, we could do both in fact - would be to make another collation of subplots that maps each (x|y) axis onto the (y|x) axes it makes subplots with. That should substantially reduce the size and complexity of loops like this.",
    "created_at": "2018-04-19T15:19:35Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2549#issuecomment-382775857",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2549",
    "updated_at": "2018-04-19T15:19:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Agreed. Enough is enough. 🔪 \r\n\r\n💃 ",
    "created_at": "2018-04-18T16:20:53Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2572#issuecomment-382445252",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2572",
    "updated_at": "2018-04-18T16:20:53Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "duplicate of https://github.com/plotly/plotly.js/issues/1516 - see in particular the [`ticktext/tickvals` workaround posted there](https://github.com/plotly/plotly.js/issues/1516#issuecomment-289139760)",
    "created_at": "2018-04-18T12:41:18Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2570#issuecomment-382372598",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2570",
    "updated_at": "2018-04-18T12:41:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Can the coordinate system for selections be documented somewhere, perhaps in the contributing guide?\r\n\r\nThat's a good idea - @etpinard where would be the right place for this?\r\n\r\nI like your diagram. Note that [175, 175] and [225, 225] go one (data) unit down and right of where you have them, ie 175 is actually where you've drawn 225.",
    "created_at": "2018-04-17T18:33:08Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2506#issuecomment-382096543",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2506",
    "updated_at": "2018-04-17T18:33:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Not sure if CI is extra-flaky today or if splom and other new features are causing it to bog down... but anyway I moved those new shape tests to `@flaky` as well... 🤞 ",
    "created_at": "2018-04-17T17:47:55Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2506#issuecomment-382082180",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2506",
    "updated_at": "2018-04-17T17:47:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@GlennMatthys I think it's all set now, check out https://github.com/plotly/plotly.js/pull/2506/commits/6d4a4f82fad6e3ca427dafa5781bd21e3cd015b9\r\n\r\nBut for reference, if you're contributing more in the future, it's relative to the corner of the plot, including the margins. That's why in that commit you can see I set the margins, size, and axis ranges explicitly so I know x is 100px->0, 300px->4, and y is the opposite 100px->4, 300px-> 0",
    "created_at": "2018-04-17T17:37:54Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2506#issuecomment-382079013",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2506",
    "updated_at": "2018-04-17T17:37:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard care to take a quick look?",
    "created_at": "2018-04-17T17:18:14Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2506#issuecomment-382072928",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2506",
    "updated_at": "2018-04-17T17:18:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I like `gridsize` too. We probably still need an upper bound on `n` even when you do use `gridsize` though.\r\n\r\nAlso, it's not spelled out in detail, but seaborn says \"Number of points in the discrete grid used to compute the kernel density estimate.\" - the implication being that they actually do a 2-step process to calculate the KDE:\r\n1) bin the data on this grid\r\n2) convolve the binned data with the kernel and bandwidth\r\n\r\nIf you have a lot of points in your distribution, and you're generating a lot of KDE values (and at least by default, the more points you have the lower your bandwidth will be and the more KDE points you need to evaluate), that process could be substantially faster than evaluating the entire distribution for each KDE value. But if we do this, it's not totally clear to me that `n` and `gridsize` should be exactly the same. Maybe they should, but maybe one should be 2x or 3x the other?",
    "created_at": "2018-04-17T16:54:56Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2552#issuecomment-382065806",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2552",
    "updated_at": "2018-04-17T16:54:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@GlennMatthys I'll finish this up, so it can go out with v1.36 this afternoon.",
    "created_at": "2018-04-17T16:22:21Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2506#issuecomment-382054243",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2506",
    "updated_at": "2018-04-17T16:22:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Fixed by #2510 - this is working now on master.",
    "created_at": "2018-04-17T16:16:45Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2481#issuecomment-382052526",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2481",
    "updated_at": "2018-04-17T16:16:45Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks! LGTM 💃 ",
    "created_at": "2018-04-17T14:50:15Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2564#issuecomment-382021138",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2564",
    "updated_at": "2018-04-17T14:50:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @amidabucu - very clear report, even parametrized so we can play with it to debug 🏆 \r\n\r\ncc @dy looks like regardless of # of points per trace, we're only drawing lines for the first 512 of them?",
    "created_at": "2018-04-17T14:36:28Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2566#issuecomment-382016020",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2566",
    "updated_at": "2018-04-17T14:36:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Can you add a baseline image that would have failed before, and works now?",
    "created_at": "2018-04-17T14:31:25Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2564#issuecomment-382014148",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2564",
    "updated_at": "2018-04-17T14:31:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @mbfts-ts for reviewing. And thanks @jins-tkomoda for the translations and edits!",
    "created_at": "2018-04-17T14:24:36Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2558#issuecomment-382011624",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2558",
    "updated_at": "2018-04-17T14:24:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Another idea about this: create *and remove* the trace layers (`'g.scatterlayer'` etc) using a d3-idiomatic pattern based on the actual traces present in each subplot. Then we won't have to look at the old module list at all, d3 will just look at the DOM and remove the no-longer-needed layers. As a bonus then we won't need to make all those empty containers in the first place!",
    "created_at": "2018-04-17T12:49:03Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2563#issuecomment-381980172",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2563",
    "updated_at": "2018-04-17T12:49:03Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": ">  I think we should replace 1e5 with an optional parameter rather than hard coding it\r\n\r\nI'm not quite sure what would prompt someone to want to vary this, but OK. Then it needs to be an attribute that goes through the `supplyDefaults` framework. It should still have a `min` (3?) and a `max` (1e6?) that will keep things from breaking. Is there a use case for using different values per trace (in which it goes in [violin/attributes](https://github.com/plotly/plotly.js/blob/master/src/traces/violin/attributes.js)) or can we just set it once in `layout` (in which case it goes int [violin/layout_attributes](https://github.com/plotly/plotly.js/blob/master/src/traces/violin/layout_attributes.js)). Either way, to differentiate these \"points\" from [outliers](https://github.com/plotly/plotly.js/blob/7d91d29a48bc882afccda635054dfa1a7ece85fd/src/traces/violin/attributes.js#L111) we should call it something more verbose like `maxkdepoints` perhaps?",
    "created_at": "2018-04-16T19:52:15Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2552#issuecomment-381727835",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2552",
    "updated_at": "2018-04-16T19:52:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The two newest keys (which some of our first translations haven't updated to add) didn't make it into your list, could you add them? These are:\r\n[\"Click to enter radial axis title\"](https://github.com/plotly/plotly.js/blob/7d91d29a48bc882afccda635054dfa1a7ece85fd/dist/translation-keys.txt#L10)\r\n[\"new text\"](https://github.com/plotly/plotly.js/blob/7d91d29a48bc882afccda635054dfa1a7ece85fd/dist/translation-keys.txt#L50)",
    "created_at": "2018-04-16T19:35:49Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2558#issuecomment-381723128",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2558",
    "updated_at": "2018-04-16T19:35:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @jins-tkomoda - can you recommend another Japanese speaker to review?",
    "created_at": "2018-04-16T19:27:09Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2558#issuecomment-381720704",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2558",
    "updated_at": "2018-04-16T19:27:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Added tests that cover the missing Saturday and most of the rest of the fields that should be in the locale. @etpinard OK?",
    "created_at": "2018-04-16T19:20:32Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2490#issuecomment-381718862",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2490",
    "updated_at": "2018-04-16T19:20:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ah you're right, sorry about that - we've just used `d3.time.format.utc` in `lib_date_test`, you don't get locales until you've done a `supplyDefaults` step. We've got some related tests in `localize_test`, we can probably model it off [this one](https://github.com/plotly/plotly.js/blob/master/test/jasmine/tests/localize_test.js#L52) - but it's a little more involved than I had realized, I can take it if you want.",
    "created_at": "2018-04-16T02:07:37Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2490#issuecomment-381460061",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2490",
    "updated_at": "2018-04-16T02:07:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yes, those are expected - they're labeling 2 and 5 times the previous power of 10. Zoom in a bit more and you'll see 2, 3, 4, 5, 6, 7, 8, 9.\r\n\r\nYou can get rid of these labels, *and* the lines that they're labeling, using `xaxis: {dtick: 1}`, the downside then is it won't auto-adjust as you zoom in or out - see https://plot.ly/javascript/reference/#layout-xaxis-dtick for full details.",
    "created_at": "2018-04-14T15:13:41Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2554#issuecomment-381335931",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2554",
    "updated_at": "2018-04-14T15:13:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Oh sorry about letting this one slip through last week - thanks for pinging me again. Yes, the test failure is unrelated, we should probably mark that test as `@flaky` as I have seen that fail spuriously before.\r\n\r\nAnyway I could rerun it for you but it still looks like the promise chain in your test is branched - see https://github.com/plotly/plotly.js/pull/2506#discussion_r179503484 - can you rearrange so every `.then` is chained off the original `Plotly.newPlot`? The ['should skip over BADNUM items'](https://github.com/ECraneWorldwide/plotly.js/blob/69c3157dce84e5a4e45c98b603b096d5a6fa2157/test/jasmine/tests/select_test.js#L495) test is a good reference for this structure.",
    "created_at": "2018-04-13T13:38:27Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2506#issuecomment-381138065",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2506",
    "updated_at": "2018-04-13T13:38:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Good news! We've found a Swahili speaker - @kndungu has offered to review. 🎉 ",
    "created_at": "2018-04-13T13:13:42Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2526#issuecomment-381131173",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2526",
    "updated_at": "2018-04-13T13:13:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "As long as all the TODOs added here are linked to the upcoming splom open items issue(s) I agree, they're all fine to omit from this PR. Looking amazing guys! 💃 ",
    "created_at": "2018-04-12T22:52:18Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2505#issuecomment-380968330",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2505",
    "updated_at": "2018-04-12T22:52:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@LeanderK I wholeheartedly agree with your sentiment here - any error that leaves the plot in a state that looks plausible but is in fact either missing or misrepresenting data must be a high priority for us to fix.\r\n\r\nThe challenge with communicating (visually on the plot itself I gather, as you already have this indication in the console) is that some errors don't seem to be accessible from javascript, as far as I can tell. I've seen that with some of the DOM errors during SVG rendering, haven't really looked into it for WebGL but wouldn't be surprised if the same is true of some errors there, given how separated it is from javascript processing.\r\n\r\nWith that in mind, we have four potential classes of bug:\r\n- Those that throw an error, accessible from javascript, late enough that the plot looks plausible but is in fact wrong\r\n- Those that throw an error early on, halting execution, so the plot is obviously incomplete\r\n- Those that throw an inaccessible error, like the DOM errors I mentioned above\r\n- Those that throw no errors, we just have a logic error or hit an unanticipated edge case\r\n\r\nOnly the first class would be helped by visually reporting the error (the second we could report but the user already knows there's a problem), while the last class accounts for the majority of bugs we deal with. So I worry that if we *were* to visually report, it would not only miss most bugs but if users expected to see such a report they would be less likely to notice the bugs that *don't* show such a report.",
    "created_at": "2018-04-11T21:13:16Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2544#issuecomment-380597537",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2544",
    "updated_at": "2018-04-11T21:13:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Got it. The professionally reviewed ones should be great, and that set (dates & hover tips) covers arguably the most important ones. I'm a little uneasy with machine translation though, if it hasn't been reviewed by a human. Are you doing this for a customer who might be willing to help out? I can keep asking around but so far have not found any Swahili speakers in my own network.",
    "created_at": "2018-04-11T20:27:54Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2526#issuecomment-380584980",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2526",
    "updated_at": "2018-04-11T20:27:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard really impressive - and counterintuitive - work here!\r\n💃 💃 🐎 🚀 ",
    "created_at": "2018-04-11T19:55:26Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2527#issuecomment-380576013",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2527",
    "updated_at": "2018-04-11T19:55:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Great, glad that's all it took! That bug fix may actually help performance too - ironically, since now we're calling `getBoundingClientRect` many more times, but we're *not* calling it during draw, only during mouse moves.\r\n\r\nI'm happy with this now, lets go! 💃 ",
    "created_at": "2018-04-11T16:40:12Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2532#issuecomment-380517977",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2532",
    "updated_at": "2018-04-11T16:40:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for the test image tweaks - love it!\r\n\r\nI figured out what the bug is - it's when you scroll the page after the plot draws (which I was doing naturally with your mock because it's fairly tall, whereas the original `shapes` mock is much shorter - if you shrink your browser window so you need to scroll that one you can see it there too).\r\n\r\nIt's not new in this PR, but I think it has a simple solution so you might as well address it here. The issue is that `getBoundingClientRect` gets called in the outer scope of `setupDragElement`, and gets used later in `updateDragMode`, at which point the actual bbox is different if you've scrolled. The simple solution is to move `getBoundingClientRect` to the scope where it's used.",
    "created_at": "2018-04-11T12:58:39Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2532#issuecomment-380442495",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2532",
    "updated_at": "2018-04-11T12:58:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "One thing I just noticed is the cursors start out wrong (at least in some cases) - the \"top\" cursor shows for most (or all!) of the shape, then after you cause a redraw (in the gif below I zoom in then double click to autorange again) the cursors look correct.\r\n\r\nI haven't looked to see if this is exclusive to pixel-sized shapes, nor if it's new with this PR... can you check it out @rmoestl ?\r\n\r\n![weird shapes cursor](https://user-images.githubusercontent.com/2678795/38583178-3ddfa04a-3ce0-11e8-94d1-624ee4d627ca.gif)\r\n",
    "created_at": "2018-04-10T20:58:55Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2532#issuecomment-380244566",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2532",
    "updated_at": "2018-04-10T20:58:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks - I just made a couple of changes to put the format on par with the others in `/lib/locales/`, but otherwise looks perfect now! Can you find another Swahili speaker who can review this? They need not be a plotly user, nor even technical though that does help. Even if they can just look at https://github.com/plotly/plotly.js/pull/2526/files?diff=unified and give you some offline feedback like we did with [czech](https://github.com/plotly/plotly.js/pull/2483) that would suffice.",
    "created_at": "2018-04-10T14:56:50Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2526#issuecomment-380131712",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2526",
    "updated_at": "2018-04-10T14:56:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Right, there's no way to replicate the tick labels and title across multiple subplots. Once we implement https://github.com/plotly/plotly.js/issues/1549 that will be one way to do it, though that would be kind of heavy, both in terms of having to specify all the config multiple times and probably in terms of performance.\r\n\r\nBetter would be for us to make some options within the one axis to replicate its tick labels and/or title. It can also be nice to show labels both top and bottom, if you have a single especially-large subplot.\r\n\r\nSupposedly we already have this for the tick *marks* using `{ticks: 'inside', mirror: 'allticks'}` but a) you're not using tick marks here so that wouldn't help you, and b) `'allticks'` doesn't seem to work ATM - so I'll give this issue a `bug` label to remind us to fix that (though it's probably been broken for a while so it doesn't seem many people care about this...)",
    "created_at": "2018-04-09T20:07:28Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2539#issuecomment-379877593",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2539",
    "updated_at": "2018-04-09T20:07:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@rmoestl this is looking really great! I think there are enough new cases, re: axis vs paper referencing, autorange, and paths vs other shape types, that it deserves a new test image - similar to the [shapes](https://github.com/plotly/plotly.js/blob/master/test/image/baselines/shapes.png) mock, so we can see that the autorange results are correct and the shapes are drawn as expected. That would also help me to try out the new dragging effects and see if our conclusion about edge vs center dragging really holds up 😄 ",
    "created_at": "2018-04-06T16:18:15Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2532#issuecomment-379303425",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2532",
    "updated_at": "2018-04-06T16:18:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @booleanbetrayal ! Can I ask you though (as mentioned in the [PR template](https://github.com/plotly/plotly.js/blob/master/.github/PULL_REQUEST_TEMPLATE.md)) to update `lib/locales/` and not `dist`? The ones in `dist/` are automatically generated, and unreadable since they're minified.",
    "created_at": "2018-04-06T05:55:00Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2526#issuecomment-379155827",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2526",
    "updated_at": "2018-04-06T05:55:00Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yep, that's a bug alright. Thanks for the very clear report! Made it nice and easy to find the problem.",
    "created_at": "2018-04-06T05:16:47Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2529#issuecomment-379150396",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2529",
    "updated_at": "2018-04-06T05:16:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> double-click (i.e auto/reset range) performance. This thing currently goes through `editType: 'calc'` which is slow as a :turtle:\r\n\r\n`Axes.expand` (which happens during `calc` does nothing if the axis isn't autoranged - which can speed up initial drawing but means if you turn on `autorange` later you don't know whether `ax._min/_max` are populated. We could either calculate min/max no matter what during `calc`, or at least stash the arrays & options used to generate them so that when `autorange` is enabled we can pull it back out and proceed with the calculation without needing to go all the way through `calc` again.\r\n\r\nThere would also be some advantages to keeping separate track of each trace / object that called `Axes.expand` - ie keep a separate `_min/_max` for each trace/shape/annotation etc. and only combine them when finally calculating the range. That would avoid `calc` for visibility changes, for example (you'd just have to know to include or not include that object's `_min/_max`) and for moving annotations/shapes, and down the road would allow `calc` per trace.",
    "created_at": "2018-04-05T22:01:40Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2527#issuecomment-379090239",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2527",
    "updated_at": "2018-04-05T22:01:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Interesting - it depends on the length of the gap, or perhaps the total number of missing values? See https://codepen.io/alexcjohnson/pen/NYLaPR - at the end I have a loop that replaces `null` with `0` up to a certain point (`for(var i = 0; i < fig.data[0].y.length/1.8; i++)`) - at 1.8 the problem is still there (and in fact some of the `0` values before (to the right of) the gap also have no hover) but if you decrease that number to 1.75 or less it all works as expected.",
    "created_at": "2018-04-04T22:45:52Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2524#issuecomment-378768609",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2524",
    "updated_at": "2018-04-04T22:45:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Better: you can look at whether the attribute includes [`strict: true`](https://github.com/plotly/plotly.js/blob/3d65de3adb20ca0c75e9ecb67739c5d801cc3b24/src/plots/font_attributes.js#L35) - if it does, the value must be explicitly a string, and numbers will be rejected. If it does not, we accept numbers (and ONLY numbers - not booleans or any other types) and will coerce them to strings during `supplyDefaults`.",
    "created_at": "2018-04-04T22:27:21Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2523#issuecomment-378764867",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2523",
    "updated_at": "2018-04-04T22:27:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Incidentally, I came across this page that has a whole bunch of variants on candlestick charts, that we will suddenly be free to add as new features once these are their own trace type http://stockcharts.com/school/doku.php?id=chart_school:chart_analysis:arms_candlevolume\r\nIn particular, check out this one that uses color (black/red) to denote whether the closing price is higher or lower than the previous day, and filling (closed/open) to denote whether the price increased or decreased during the day\r\n![armscv-4-can-isrg](https://user-images.githubusercontent.com/2678795/38321017-49942d7e-3804-11e8-9f63-7ec3fdf1e1a5.png)\r\n ",
    "created_at": "2018-04-04T16:33:18Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2510#issuecomment-378663864",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2510",
    "updated_at": "2018-04-04T16:33:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This will give us the freedom to make custom legend symbols for candlestick and OHLC, rather than just using the box and scatter line symbols. And to collapse them into a single item, rather than one for increasing and another for decreasing. Here's about the only example I see of this in a quick image search:\r\nhttps://stackoverflow.com/questions/21223501/market-price-charts-in-qt\r\n![wcwc3](https://user-images.githubusercontent.com/2678795/38320157-cf089722-3801-11e8-8f9f-abb547e4d7f4.png)\r\nI like it, any comments? @chriddyp @cldougl @charleyferrari? Seems concise and clear which color is increasing/decreasing. But I'm open to tweaks.\r\n\r\nCurrently we have two legend entries, each with its own name. Those names would go away if I make this change, and I'll probably have to do something hacky in `cleanData` to combine them if we have increasing/decreasing names but not a base trace name. It's *not* possible currently to toggle off just one direction - if you click either legend item they both disappear. So from that standpoint we're free to collapse to a single legend item.",
    "created_at": "2018-04-04T16:22:22Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2510#issuecomment-378660401",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2510",
    "updated_at": "2018-04-04T16:22:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "That's probably the only place we parse a `d` path attribute. See if you can generalize that code into a form you can reuse, and feel free to move it to another file that both `shapes/draw` and your addition (in `shapes/calc_autorange`?) can import from.",
    "created_at": "2018-04-04T14:56:37Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2193#issuecomment-378630180",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2193",
    "updated_at": "2018-04-04T14:56:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I vote for _not a bug_. \r\n\r\nI think so too, I'm afraid. You can make a histogram on a categorical axis, for example, which is of course not continuous and therefore a gap is reasonable. And you can mix (and stack) `histogram` traces with `bar` traces for cases where *some* of your data is pre-binned, and in that case it doesn't make sense to have two different gaps, we would have to pick one of them to win and ignore the other.",
    "created_at": "2018-04-04T14:30:20Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2521#issuecomment-378620263",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2521",
    "updated_at": "2018-04-04T14:30:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Or, perhaps cleaner, make a new `layout` object for each plot https://codepen.io/alexcjohnson/pen/GxXJjp?editors=0010",
    "created_at": "2018-04-04T14:21:30Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2522#issuecomment-378617072",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2522",
    "updated_at": "2018-04-04T14:21:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "My macbook, on which FF 58 and 59 work fine:\r\n<img width=\"245\" alt=\"screen shot 2018-04-04 at 10 02 57 am\" src=\"https://user-images.githubusercontent.com/2678795/38312316-709031e4-37ef-11e8-84e3-0ed12641d12c.png\">\r\nAlso works on FF on my iPhone, but I'm not sure that tells us much, as that's constrained to use Apple's rendering engine.",
    "created_at": "2018-04-04T14:13:59Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2518#issuecomment-378614552",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2518",
    "updated_at": "2018-04-04T14:13:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "`x1` is not really accepted by plotly.js - it's generally converted to `x`, though I wouldn't say with any confidence that *every* place you can use an axis reference will make this conversion. Likewise (and this I *can* say confidently) if you pass in a layout with `xaxis1` it will be renamed to `xaxis`.\r\n\r\nWould it be possible for plotly.py to force `x` instead of `x1` as well, either by automatically converting like we do here or simply not accepting `x1`?",
    "created_at": "2018-04-04T04:54:14Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2519#issuecomment-378479934",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2519",
    "updated_at": "2018-04-04T04:54:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Huh, is this another GPU-hardware-dependent issue like #1368 😱? Works fine for me, Mac OS 10.13.4, both before and after updating FF 58 to 59.",
    "created_at": "2018-04-04T04:46:06Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2518#issuecomment-378478915",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2518",
    "updated_at": "2018-04-04T04:46:06Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I would like the behavior to be that the effect of Fx.hover is the same as hovering over a single point manually, the spikelines are shown.\r\n\r\nYes, I agree that that should be the behavior. Seems like a bug that this isn't what happens.\r\n\r\n> It seems to expect the values to be numeric or fails to retrieve them given the datetime string, I've also tried time in milliseconds since the epoch but with no success.\r\n\r\nI'll have to look at this one in more detail, but in principle it *should* work using the date string. milliseconds are problematic and discouraged.",
    "created_at": "2018-04-04T04:38:31Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2517#issuecomment-378477973",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2517",
    "updated_at": "2018-04-04T04:38:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Update: This is an issue with `Plotly.react` but NOT with `Plotly.restyle`. I spent a couple of hours fighting with it before concluding (after talking with @etpinard) that my time would be better spent turning `candlestick` and `OHLC` into first-class chart types instead of transform hacks. I'm not even going to *look* at #2508 until this is done, because the OHLC transform hacks are so different from our other transforms that the framework will be far easier to reason about and fix once they're gone. Anyway this is a change we've been discussing for ages and will allow us to fix several more otherwise-intractable bugs.\r\n\r\nWhile investigating this I found a different class of errors, that may or may not impact plotly.js directly but will definitely impact the editor and perhaps other apps: traces mutating the \"public\" parts of `_full(Data|Layout)` outside of the `supplyDefaults` framework: either:\r\n- adding new properties that look like attributes (because they aren't prefaced with `_`) but are not\r\n- reshaping an existing attribute, as when we reshape 1D Z arrays into 2D\r\n- filling in auto values only during `calc` and NOT writing them back to `data` and `layout` - this means if you make a small change to the plot that doesn't trigger `calc`, these quantities will disappear from `_full*` and will not be available to the editor.\r\n\r\nI've fixed many of these, and explicitly ignored the others in the relevant test ([this one](https://github.com/plotly/plotly.js/blob/3d65de3adb20ca0c75e9ecb67739c5d801cc3b24/test/jasmine/tests/plot_api_test.js#L2837), where we draw and then redraw a plot with `Plotly.react` and verify that nothing was done; now I'm also testing that `fullData` and `fullLayout` are unchanged in their supposedly public portions), so that the problem is at least bounded.",
    "created_at": "2018-04-04T04:26:22Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2510#issuecomment-378476447",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2510",
    "updated_at": "2018-04-04T04:26:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Right, due to image exports, and the desire to export SVG itself for use by Illustrator etc, we have avoided `foreignObject` elements. Anyway I suspect replicating this in javascript will not be terribly difficult.",
    "created_at": "2018-04-02T19:21:09Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2515#issuecomment-378016825",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2515",
    "updated_at": "2018-04-02T19:21:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Seems like a nice feature, sure. Looks like we'd have to do this in javascript though, as I don't see an equivalent functionality built into SVG. The `<title>` tag *might* have allowed this but doesn't seem browsers have adopted this as a tooltip-like display.",
    "created_at": "2018-04-02T18:47:57Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2515#issuecomment-378008211",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2515",
    "updated_at": "2018-04-02T18:47:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "And yes, happens with relayout as well:\r\n```js\r\nPlotly.newPlot(gd,\r\n  [{x:[1],y:[2]},{x:[3],y:[4],xaxis:'x2',yaxis:'y2'}],\r\n  {xaxis2:{overlaying:'x'},yaxis2:{overlaying:'y'},plot_bgcolor:'red'}\r\n)\r\nPlotly.relayout(gd,{\r\n  'xaxis.domain':[0, 0.4],\r\n  'xaxis2.domain':[0.6,1],\r\n  'xaxis2.overlaying':null\r\n})\r\n```",
    "created_at": "2018-03-30T21:43:29Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2509#issuecomment-377630081",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2509",
    "updated_at": "2018-03-30T21:43:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Alright, this one isn't as bad as it looks... the grid actually *is* supposed to be this color (which is a slightly darkened version of the red background), since we blend `plot_bgcolor` with the default line color in order to avoid unnecessary opacity. The problem is just that we're not creating the right background rect for the new subplot.",
    "created_at": "2018-03-30T21:39:24Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2509#issuecomment-377629391",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2509",
    "updated_at": "2018-03-30T21:39:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Excellent. 💃 ",
    "created_at": "2018-03-30T21:24:22Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2513#issuecomment-377626634",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2513",
    "updated_at": "2018-03-30T21:24:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "What if you have `lon` but not `lat` for a point, or vice versa? Is that case handled elsewhere?",
    "created_at": "2018-03-30T21:21:54Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2513#issuecomment-377626151",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2513",
    "updated_at": "2018-03-30T21:21:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "👍 for a config param eg `Plotly.newPlot(gd, [], {}, {downloadImageFilename: \"\"})`",
    "created_at": "2018-03-30T21:18:09Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2444#issuecomment-377625485",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2444",
    "updated_at": "2018-03-30T21:18:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Beautiful - squishes 2 bugs plus the new one reported here! 💃 💃 💃 ",
    "created_at": "2018-03-30T21:16:08Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2489#issuecomment-377625148",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2489",
    "updated_at": "2018-03-30T21:16:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "superseded by #2506 ",
    "created_at": "2018-03-29T16:17:56Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2498#issuecomment-377289212",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2498",
    "updated_at": "2018-03-29T16:17:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I'm still figuring out how to do the necessary calculations.\r\n\r\nWhile it's nice to be able to write a test where you've pre-calculated what the outcome should be, it's not always necessary: as long as you can demonstrate a difference between the different modes, you can just write tests, watch them fail when you run them, and change them so they pass. But if you do want to do the calculation yourself, I've had good luck setting explicit `width`, `height`, `margin`, and axis `range` so you can make an easy calculation of data value -> pixel position.",
    "created_at": "2018-03-29T16:03:00Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2506#issuecomment-377284721",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2506",
    "updated_at": "2018-03-29T16:03:00Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "It's true, this is a weird point that requires a lot of minus signs in our code, but I think positive y should be toward the top, no matter whether it's data (unless you explicitly flip the y axis), plot fraction, or pixels.\r\n\r\nThere's one exception to this, that I know of anyway, and that's `annotations[i].ay`, which is to the bottom. I think elsewhere \"to the top\" is consistent enough that we should make anything new be \"to the top\", and in v2.0 we should flip `ay` to match (or even before, if we couple the fix with giving this attribute a nicer name, then we can do it in a backward-compatible way).",
    "created_at": "2018-03-28T20:03:02Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2193#issuecomment-377017506",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2193",
    "updated_at": "2018-03-28T20:03:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "One thing we could do without changing the API at all is add the `customdata`/`text` for *all* points in the polygon, as an array, to the event data. The data would still be specific to each polygon, in the case of a disjoint trace, and you'd be able to distinguish point and fill events by the array structure.",
    "created_at": "2018-03-28T16:16:54Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2504#issuecomment-376946075",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2504",
    "updated_at": "2018-03-28T16:16:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "We don't support editing vertices of path shapes by GUI currently, and while that could be interesting, I feel like dragging data points themselves would be a more valuable feature to add first. Not in this issue though, we can make another issue if there's sufficient interest.",
    "created_at": "2018-03-28T16:12:05Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2193#issuecomment-376944445",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2193",
    "updated_at": "2018-03-28T16:12:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yes, it'll be more effort to get `path` working with pixel sizing - but I think we should do it. We don't want any more exceptions in the API than we really need, and even if very few people use it, we'll be able to make some extra-cool demos with this feature.",
    "created_at": "2018-03-28T13:48:08Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2193#issuecomment-376893042",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2193",
    "updated_at": "2018-03-28T13:48:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks great 💃 ",
    "created_at": "2018-03-27T18:38:07Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2503#issuecomment-376630739",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2503",
    "updated_at": "2018-03-27T18:38:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for the quick updates, I think it's ready now!",
    "created_at": "2018-03-27T12:49:09Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2483#issuecomment-376512398",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2483",
    "updated_at": "2018-03-27T12:49:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "OK great - thanks for adding the new ones. Lets leave `kde` as is. `mean` and `mean ± σ` are used in hover labels for box plots, depending on the information shown:\r\n![screen shot 2018-03-27 at 8 02 40 am](https://user-images.githubusercontent.com/2678795/37966097-59828124-3195-11e8-94c3-870d26299c88.png)\r\n![screen shot 2018-03-27 at 8 02 18 am](https://user-images.githubusercontent.com/2678795/37966101-5d58e2d4-3195-11e8-85ba-d2cbc90c9f7c.png)\r\nYour call whether an adjective or a noun makes most sense here, but since it's in a hover label it's preferable to keep it short.",
    "created_at": "2018-03-27T12:07:22Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2483#issuecomment-376500814",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2483",
    "updated_at": "2018-03-27T12:07:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @fhurta ! I hope you don't mind that I asked a Slovak friend to review 🇨🇿 🇸🇰 - that's as close as I could get but he assures me he is qualified 😅 His comments:\r\n> I think it's good. I would only change \"střední\" to \"průměr\" (literally meaning Average), because \"průměr\" is a noun while \"střední\" is an adjective and if you needed a noun you'd need to say \"střední hodnota\" (=mean value).\r\n\r\nWhat do you think, is that reasonable?\r\n\r\nAlso a couple of things I noticed:\r\n- There are two new strings that haven't made it into whichever file you based this off: [\"Click to enter radial axis title\"](https://github.com/plotly/plotly.js/blob/master/dist/translation-keys.txt#L10) and [\"new text\"](https://github.com/plotly/plotly.js/blob/master/dist/translation-keys.txt#L50) - can you add these?\r\n- \"kde:\" (kernel density estimate) - is that understandable as is, to Czech speakers who know what a violin plot is, or is there a reasonable (and compact) translation?",
    "created_at": "2018-03-27T05:10:03Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2483#issuecomment-376398861",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2483",
    "updated_at": "2018-03-27T05:10:03Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for the PR! You're right though, we can do a bit better - first off, lets think about the attribute name: it doesn't apply to all drags, just selection drags; clamp may be OK, though I kind of like the sound of `selectdirection` or `selectaxis` better than `selectclamp`... dunno, @etpinard any other thoughts?\r\n\r\nNext, we need `layout.selectclamp` (or whatever we call it) to be a recognized attribute [here](https://github.com/plotly/plotly.js/blob/master/src/components/fx/layout_attributes.js) as `valType: 'enumerated'` with values `['h', 'v', '']` (or perhaps `['h', 'v', 'any']`?), coerced from `layout` into `fullLayout` [here](https://github.com/plotly/plotly.js/blob/master/src/components/fx/layout_defaults.js#L19).\r\n\r\nThen, as you anticipated, we should avoid duplication. Something like:\r\n```js\r\nvar selectDirection = fullLayout.selectclamp;\r\nif(!selectDirection) { // or !== 'any' if we go with that\r\n    if(dy < Math.min(dx * 0.6, MINSELECT)) selectDirection = 'h';\r\n    else if(dx < Math.min(dy * 0.6, MINSELECT)) selectDirection = 'v';\r\n}\r\n\r\nif(selectDirection === 'h') {\r\n   // existing code\r\n}\r\nelse if(selectDirection === 'v') {\r\n    // ...\r\n}\r\nelse {\r\n    // ...\r\n}\r\n```\r\n\r\nLastly we'll need a test that covers the new functionality, probably [here](https://github.com/plotly/plotly.js/blob/9a79056bb223e13995be8debd22f60c9d56cbef0/test/jasmine/tests/select_test.js#L141) by dragging a diagonal (that would normally give a box constraining both dimensions) after having `relayout` into each mode and verifying (`assertRange(selectedData.range, ...)`) that you only constrain the expected dimension.",
    "created_at": "2018-03-27T02:59:25Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2498#issuecomment-376380586",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2498",
    "updated_at": "2018-03-27T02:59:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ha, good catch, wonder how we missed that? This will only show up with `%A` in a custom format, and we don't test every possible day and month in each format. We have some related tests in [lib_date_test](https://github.com/plotly/plotly.js/blob/9a79056bb223e13995be8debd22f60c9d56cbef0/test/jasmine/tests/lib_date_test.js#L523) - would you mind adding one that covers all the weekdays?",
    "created_at": "2018-03-27T01:56:18Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2490#issuecomment-376369964",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2490",
    "updated_at": "2018-03-27T01:56:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I'm assuming what's happening here is the margins are larger than the plot area - ie `margin.l + margin.r > width`, either because `width` is very small or we can't determine it at all (invisible node cc @n-riesco ). These situations are going to arise from time to time, and we shouldn't barf of course... if width or height is <=0 we should bail out of plotting entirely (and early), and if the margins are too big to display anything... dunno what makes most sense here, either shrink the margins so we still have plotting space, or just display the title and bail?",
    "created_at": "2018-03-26T22:40:29Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2482#issuecomment-376334940",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2482",
    "updated_at": "2018-03-26T22:40:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Hmm, trying to figure out why this works I stumbled on another problem with ordered categories, the categories cease to be subplot-specific (though we *do* differentiate x/y):\r\n```js\r\nPlotly.newPlot(gd, [\r\n    {x: ['a', 'c', 'e', 'g']},\r\n    {x: ['b', 'd', 'f', 'h'], xaxis: 'x2'}\r\n], {\r\n    xaxis: {categoryorder: 'category ascending', domain: [0, 0.4]},\r\n    xaxis2: {categoryorder: 'category ascending', domain: [0.6, 1]},\r\n    width: 700, height: 400\r\n})\r\n```\r\n<img width=\"659\" alt=\"screen shot 2018-03-26 at 6 14 41 pm\" src=\"https://user-images.githubusercontent.com/2678795/37936023-ef6aa5e6-3121-11e8-98eb-3825c06dfca5.png\">\r\nDo you want to address that here or separately?",
    "created_at": "2018-03-26T22:19:07Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2489#issuecomment-376330483",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2489",
    "updated_at": "2018-03-26T22:19:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Fantastic- really whittling down the overhead! :dancer: :racehorse:",
    "created_at": "2018-03-26T21:42:22Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2487#issuecomment-376321677",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2487",
    "updated_at": "2018-03-26T21:42:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yes, please do include the whole shape in autorange. But don't use `ax.p2c` to do it - that assumes the axis scaling (ie range & length) is already known, and a) that's what we're trying to *calculate* with `Axes.expand`, and b) we'd like this calculation to not need to be redone when the plot changes size, margins, etc.\r\n\r\nFortunately we DO have this built into `Axes.expand`, in the form of `ppad` (pixel padding) and its asymmetric variants `ppadplus` and `ppadminus` -\r\n https://github.com/plotly/plotly.js/blob/master/src/plots/cartesian/autorange.js#L228-L230",
    "created_at": "2018-03-21T16:34:16Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2193#issuecomment-375008225",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2193",
    "updated_at": "2018-03-21T16:34:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard check it out, I added click-to-select for ordinal ranges. Should be ready to go.",
    "created_at": "2018-03-19T01:08:47Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2415#issuecomment-374074170",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2415",
    "updated_at": "2018-03-19T01:08:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "- [X] memory leak fixed -> https://github.com/plotly/plotly.js/pull/2415/commits/2911ae699a82b173be63be6f241d2f03fb9326a3 and cleaner create/update pattern in https://github.com/plotly/plotly.js/pull/2415/commits/fa1a436daa5621e6dd4addca6752724531136a57\r\n- [X] click on/near an ordinal value to toggle it (perhaps `cursor: pointer` to indicate this?) -> https://github.com/plotly/plotly.js/pull/2415/commits/a7bd6860e23b6b06cf9b435ae14c7fe22ada8631",
    "created_at": "2018-03-16T22:17:38Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2415#issuecomment-373860043",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2415",
    "updated_at": "2018-03-19T00:21:03Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I've reproduced the memory issue - it clearly behaves like a real leak, building up to multiple GB after 1000 or so lines are added in sequence, not dropping after you stop adding points and wait (so it's not just slow garbage collection) until you purge the plot with eg `Plotly.newPlot`.\r\n![screen shot 2018-03-16 at 12 11 24 am](https://user-images.githubusercontent.com/2678795/37503417-abbe4ec2-28ae-11e8-9c91-b08f1a8930e1.png)\r\n\r\nGenerated using this code - note CPU usage never went above ~20% during this test, but I couldn't leave the console open or the console process would eat 100% CPU and grind to a halt, though the plot would keep going just fine:\r\n```js\r\nvar trace = {type: 'parcoords', dimensions: []};\r\nfor(var i = 0; i < 5; i++) {\r\n  trace.dimensions.push({values: [Math.random()], label: i, range: [0, 1]});\r\n}\r\nPlotly.newPlot(gd,[trace]);\r\nvar add = setInterval(function() {\r\n  trace.dimensions.forEach(function(d) { d.values.push(Math.random()); });\r\n  gd.layout.title = String(trace.dimensions[0].values.length);\r\n  Plotly.redraw(gd);\r\n}, 500);\r\n```\r\n Will look into this more tomorrow - perhaps looking back at older plotly.js versions to see where the leak was introduced (which is why I used `redraw` instead of `react`).",
    "created_at": "2018-03-16T04:20:59Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2415#issuecomment-373599311",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2415",
    "updated_at": "2018-03-16T04:20:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I can’t figure out what’s going on with these tests. Seems like since I `@noCi`’d my new tests and it’s still hanging, perhaps the increased resource needs from multiselect are just reducing the threshold we can run before hanging. I guess I can look for the memory leak and see if fixing that allows more tests to run, or we can break the tests up further - shift more tests to `@flaky`, or even make a totally new tag... ",
    "created_at": "2018-03-16T01:20:39Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2415#issuecomment-373573423",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2415",
    "updated_at": "2018-03-16T01:20:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard @dfcreative After playing with this for a while, I think @dfcreative's comment last year was actually 🎯 \r\n\r\n> What is the chance that test images had wrong sign all the time due to rendering in Ubuntu?\r\n\r\nWhen I load the Snowden mocks on my machine, both master and this branch look like the new baselines, so lets do this! (with a published version of `gl-mesh3d`)\r\n\r\nWe still have seriously broken `lightposition` - generally x is left (-) to right (+) and y is bottom (-) to top(+), but z has effects that defy easy categorization other than z=1 being \"special\", and sometimes x and y flip randomly and they don't seem to have the same scales, ie x=y does not put the light at 45 degrees... but that applies to both `mesh3d` and `surface` and isn't new here - I'll make a new issue for it.",
    "created_at": "2018-03-15T23:17:59Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2365#issuecomment-373552982",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2365",
    "updated_at": "2018-03-15T23:17:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Seems like the culprit is `uom.css` -> `.uomcontent svg { width: 100%; }`\r\nYou've got `.uomcontent` wrapping the entire contents of the page, meaning you've reset the defaults for all `<svg>` elements on the page. The first plot is immune because it's in an iframe.\r\n\r\nI suppose we could use our own (more targeted) css to re-reset this attribute, but it seems like a losing battle for us to try and reset *every* attribute that might come up. Any way you can handle that on your end, something like `.uomcontent .plotly svg { width: auto; }`?",
    "created_at": "2018-03-15T15:53:24Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2476#issuecomment-373425893",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2476",
    "updated_at": "2018-03-15T15:53:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard I need to clean up some syntax and other test issues, but calling this reviewable as tests pass locally. Have a look!",
    "created_at": "2018-03-15T04:26:40Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2415#issuecomment-373257097",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2415",
    "updated_at": "2018-03-15T04:26:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "There's also [`document.baseURI`](https://developer.mozilla.org/en-US/docs/Web/API/Node/baseURI) perhaps we can bypass base, just check if\r\n`document.baseURI === window.location.href`",
    "created_at": "2018-03-14T23:12:20Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2372#issuecomment-373205615",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2372",
    "updated_at": "2018-03-14T23:12:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Beautiful! 💃 💃 💃 ",
    "created_at": "2018-03-14T21:37:37Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2474#issuecomment-373183381",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2474",
    "updated_at": "2018-03-14T21:37:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Wow, I would not have guessed that those two were such a big drain, impressive find! Yes please, 🔪 all the `selectAll(...).data([0])`! The name `joinLayer` has never meant much to me though... I suppose I'd get used to it, but what about something like `Lib.ensureSingle`?",
    "created_at": "2018-03-13T21:35:18Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2474#issuecomment-372826564",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2474",
    "updated_at": "2018-03-13T21:35:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Possibly a more robust solution than adding more \"exempt\" strings (would be language-agnostic, for example): count only distinct values for category vs number count; normally you'll only have one \"missing\" value, or possibly 2 if there's one missing *within* the series and a different missing *off the end* of the series, but real category data will have multiple distinct non-numeric categories.",
    "created_at": "2018-03-13T21:32:57Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2473#issuecomment-372825967",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2473",
    "updated_at": "2018-03-13T21:32:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Will that (yaxis: {type: 'linear'}) work for the histograms also?\r\n\r\nYes, pretty much all (cartesian) trace types pass their data into this same autotype routine. If you know the axis type ahead of time, you might as well provide it explicitly, as it avoids this kind of error and will also save the (brief) time needed to run autotype.",
    "created_at": "2018-03-13T21:32:19Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2473#issuecomment-372825797",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2473",
    "updated_at": "2018-03-13T21:32:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This is an artifact of the algorithm we use to infer axis type. I guess you're using the string `'nan'`, rather than the \"number\" `NaN` - it might be smart for us to exclude that (and perhaps related values like `'NaN'` and `'n/a'`) from the string values that don't count toward the categorical data point count [here](https://github.com/plotly/plotly.js/blob/master/src/plots/cartesian/axis_autotype.js#L69) but in the meantime, if you specify explicitly `yaxis: {type: 'linear'}` you'll get the behavior you want.",
    "created_at": "2018-03-13T20:57:16Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2473#issuecomment-372815729",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2473",
    "updated_at": "2018-03-13T20:57:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "`Plotly.extractStyle` looks great - I'm assuming `config` is potential config for the extraction operation itself, as opposed to the plot config as in `newPlot`? I might change the name to `extractTemplate` or `makeTemplate`, which would accommodate future expansion beyond style information.\r\n\r\nI don't think mutation itself (of `data` and `layout`) is a requirement, just the ability to update an existing plot (replacing `gd.data` and `gd.layout`)... so if we use:\r\n```js\r\n// or Plotly.applyTemplate\r\nconst {info, figureWithStyle} = Plotly.applyStyle(gd || {data, layout}, {figureStyle [, config]} [, config])\r\n```\r\nthen we can follow it up with:\r\n```js\r\nPlotly.react(gd, figureWithStyle);\r\n```\r\nIt's less compact to apply the style this way, but it feels to me like it may be preferable as it would give the dev a chance to look at `info` and decide if the templating worked as intended before going ahead and plugging the result into the plot.\r\n\r\n> The config can control whether the data arrays are cloned or referenced.\r\n\r\nI would assume referenced is better and omit cloning until someone explicitly asks.",
    "created_at": "2018-03-13T13:51:13Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2469#issuecomment-372671739",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2469",
    "updated_at": "2018-03-13T13:51:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Just a couple of clarifying questions:\r\n\r\n> `splom` traces have their own `basePlotModule`\r\n\r\nSounds great, just as long as this doesn't restrict us from displaying other data (be it splom or some other trace type) on the same axes.\r\n\r\n> we'll make one regl-scatter2d (or equivalent) call per splom trace\r\n\r\nI'm not really sure what a `regl-scatter2d` call entails, but the key optimization we need over making a million `scattergl` subplots is to only upload the values data for each dimension to the GPU once, even though it will appear in somewhere between N-1 and 2N subplots. Does this strategy do that?",
    "created_at": "2018-03-12T22:05:43Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2372#issuecomment-372478550",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2372",
    "updated_at": "2018-03-12T22:05:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Probably can't actually fix this until v2 -> https://github.com/plotly/plotly.js/issues/420#issuecomment-372338952",
    "created_at": "2018-03-12T14:57:50Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2468#issuecomment-372339230",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2468",
    "updated_at": "2018-03-12T14:57:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "- make parcoords tick label format default to the same as cartesian axes, rather than a fixed `tickformat` - see #2468 ",
    "created_at": "2018-03-12T14:57:07Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/420#issuecomment-372338952",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/420",
    "updated_at": "2018-03-12T14:57:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "You can use `tickformat`, as in https://codepen.io/alexcjohnson/pen/GxJyrV. Its default value `3s` is good for a lot of cases but you're right, ideally we'd use the same default as regular cartesian axes which does not behave the same as pure SI notation.",
    "created_at": "2018-03-11T23:46:08Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2468#issuecomment-372160628",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2468",
    "updated_at": "2018-03-11T23:46:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 from me too!",
    "created_at": "2018-03-09T16:17:15Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2467#issuecomment-371859928",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2467",
    "updated_at": "2018-03-09T16:17:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Reopening - I've lost track of the pattern (if there is one) for which keys need relinking, but as #2375 and #2465 show there are real downsides to the \"relink everything\" approach. I really like the approach of having `clean` handle this, but it still may take a bunch of extra testing to do this safely.",
    "created_at": "2018-03-09T14:14:24Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/749#issuecomment-371823261",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/749",
    "updated_at": "2018-03-09T14:14:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Man, we should just make `closest` the default hovermode - see also #778. But also I guess in this case `compare` should still be able to be `y` (like it is with just a horizontal bar chart), not `x` like I guess it reverts to when you add the scatter trace.",
    "created_at": "2018-03-09T03:16:32Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2463#issuecomment-371700869",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2463",
    "updated_at": "2018-03-09T03:16:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for all the investigation @etpinard - we can continue discussing pack-flat later, but for now this looks great 💃 ",
    "created_at": "2018-03-09T02:31:15Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2464#issuecomment-371693769",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2464",
    "updated_at": "2018-03-09T02:31:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "That's sure annoying - but I can't reproduce this on either my mac or on Browserstack Win7/Chrome64. @dfcreative @etpinard can you see it?\r\n\r\n@daattali thanks for including both the codepen *and* the screen capture!",
    "created_at": "2018-03-08T17:29:46Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2460#issuecomment-371561081",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2460",
    "updated_at": "2018-03-08T17:29:46Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Confirmed. But it doesn't seem like this actually blocks any functionality, just litters the console with errors, is that right?",
    "created_at": "2018-03-08T16:27:22Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2457#issuecomment-371540535",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2457",
    "updated_at": "2018-03-08T16:27:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This also fixes #2309 🎉 ",
    "created_at": "2018-03-08T02:55:01Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2455#issuecomment-371361780",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2455",
    "updated_at": "2018-03-08T02:55:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "related: #2450 ",
    "created_at": "2018-03-08T02:48:43Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2291#issuecomment-371360718",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2291",
    "updated_at": "2018-03-08T02:48:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This seems to have been fixed some time ago, as of v1.30.0 - perhaps #1932. ",
    "created_at": "2018-03-07T20:53:43Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1518#issuecomment-371280936",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1518",
    "updated_at": "2018-03-07T20:53:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "There have been a bunch of histogram-related fixes in the last couple of months (#2413, #2113, #2028, #1944...), it looks to me like one of them fixed this issue but between all the back-and-forth here I can't exactly tell. @andrewkfiedler or @etpinard can you confirm?",
    "created_at": "2018-03-07T20:39:50Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1229#issuecomment-371276874",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1229",
    "updated_at": "2018-03-07T20:39:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Huh, I thought this might have been introduced by #2227 but it still works in 1.32, only breaks at 1.33. Not sure where it came from...",
    "created_at": "2018-03-07T20:09:08Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2452#issuecomment-371268201",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2452",
    "updated_at": "2018-03-07T20:09:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Also:\r\n\r\n> browser-pack-flat does some more things like rewriting top-level variables in modules in case there is another variable with the same name in another module\r\n\r\nThose names probably start getting pretty long in our bundle.\r\n\r\nAnyway anyone who cares about size will use the minified versions, and this is a clear win. 💃 ",
    "created_at": "2018-03-07T02:06:47Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2447#issuecomment-370997277",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2447",
    "updated_at": "2018-03-07T02:06:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice job. 💃 ",
    "created_at": "2018-03-07T02:01:10Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2449#issuecomment-370996222",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2449",
    "updated_at": "2018-03-07T02:01:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Seems like a clear win, and all the choices you made seem right. One question though: why did the raw sizes increase?",
    "created_at": "2018-03-07T00:22:51Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2447#issuecomment-370977784",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2447",
    "updated_at": "2018-03-07T00:22:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 \r\nI'll look at the layering issue and make an issue if it's off.",
    "created_at": "2018-03-06T23:33:09Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2442#issuecomment-370967703",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2442",
    "updated_at": "2018-03-06T23:33:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "(I don't know why that example has `showlegend` in it, we'll take that out... but just to be clear, `showscale` is a trace attribute, not a layout attribute)",
    "created_at": "2018-03-06T21:32:51Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2448#issuecomment-370935916",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2448",
    "updated_at": "2018-03-06T21:32:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "That's because we don't call it a legend, we call it a colorscale, with corresponding `showscale` attribute.",
    "created_at": "2018-03-06T21:31:24Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2448#issuecomment-370935510",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2448",
    "updated_at": "2018-03-06T21:31:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Correct, that issue is to collect the behavior we want to add, and make sure that it's all mutually consistent and compatible, but it's not yet implemented.\r\n\r\nClosing this issue, lets continue the discussion over there.",
    "created_at": "2018-03-06T16:01:28Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2439#issuecomment-370830873",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2439",
    "updated_at": "2018-03-06T16:01:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Per @ IanWorthington in plotly/plotly.py#2439 - we should make sure `yaxis.autorange: 'visible'` or whatever we end up calling it works with range sliders - ie when you zoom in x with the rangeslider, the y rescales to the visible points.",
    "created_at": "2018-03-06T16:00:08Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1876#issuecomment-370830375",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1876",
    "updated_at": "2018-03-06T16:00:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> `layout.filename` would help users affected by https://github.com/plotly/plotly.js/issues/1227\r\n\r\nI doubt it - if we can't set the filename to `newplot.png` we won't be able to set it to the user's choice of name either.",
    "created_at": "2018-03-06T15:39:48Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2444#issuecomment-370822931",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2444",
    "updated_at": "2018-03-06T15:39:48Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "From https://github.com/plotly/plotly.js/pull/2437#discussion_r172549249:\r\n\r\n> In comparison, at `1e5 - 1` pts (i.e. below the big-data threshold), we get:\r\n> \r\n> ![image](https://user-images.githubusercontent.com/6675409/37040298-7f4f737c-2127-11e8-8819-d1c2ba9a1214.png)\r\n> \r\n> \r\n> @alexcjohnson I'll reference https://github.com/plotly/plotly.js/issues/2417 - but honestly feel free to close it if you think `Axes.expand` is satisfactory now. \r\n\r\nAny improvement we make at this point will come with both a performance cost and a loss of generality - so lets close for now, and reopen if we hit a specific use case where the current behavior isn't good enough.",
    "created_at": "2018-03-06T15:33:19Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2417#issuecomment-370820543",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2417",
    "updated_at": "2018-03-06T15:33:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I can't reproduce this on any of my browsers (mac OS 10.13, latest Chrome, FF, Safari) - The OP seems to be on Windows, but I guess you see it on Ubuntu as well @etpinard ?",
    "created_at": "2018-03-06T15:14:26Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2371#issuecomment-370813845",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2371",
    "updated_at": "2018-03-06T15:14:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "It's completely undocumented, but you can set `graphDiv.fn` (for filename - leave off the .png extension) and that will get used for the download. You can use that, but we should be able to do better. Perhaps `layout.filename` or something?",
    "created_at": "2018-03-06T13:52:42Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2444#issuecomment-370787555",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2444",
    "updated_at": "2018-03-06T13:52:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @PavelGolodoniuc - bug confirmed.\r\n\r\n`domain: [..., ...]` is a good idea. We should probably make a separate issue to discuss that though, and keep this issue about the bug.",
    "created_at": "2018-03-06T13:44:24Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2443#issuecomment-370785149",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2443",
    "updated_at": "2018-03-06T13:44:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@IanWorthington Is your intent that on adjusting the range slider, the y axis autoranges to just the data that's visible in the new x range? That's a feature we've had on the list for quite some time... https://github.com/plotly/plotly.js/issues/1876#issuecomment-314913229",
    "created_at": "2018-03-06T03:53:52Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2439#issuecomment-370653957",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2439",
    "updated_at": "2018-03-06T03:53:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I see that error - draw a zoombox and hold it for a couple of seconds, such that a few of these `Plotly.update` calls happen from the `setTimeout`. It's an intentional `Promise.reject` [here](https://github.com/plotly/plotly.js/blob/3bff26f7ef21c8ca43122e86214d268f57b77418/src/plot_api/plot_api.js#L146) added way back in https://github.com/plotly/plotly.js/pull/226. We bail out of redrawing the plot at that point because there's an interaction ongoing, and I guess the returned `Promise` is rejected as a signal to the user that this happened. It's not clear to me that this is a problem though, or if it is a problem what the solution should look like.",
    "created_at": "2018-03-06T03:50:46Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2438#issuecomment-370653564",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2438",
    "updated_at": "2018-03-06T03:50:46Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "`mode` is going to be tough, because it changes what objects need to be created, not just how those objects are styled, so it would need to be a much slower update pathway. Would it work to give unselected text a transparent font color?",
    "created_at": "2018-03-05T18:43:01Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1847#issuecomment-370520319",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1847",
    "updated_at": "2018-03-05T18:43:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 Great work @darabos - thanks!",
    "created_at": "2018-03-05T18:05:36Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2424#issuecomment-370508772",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2424",
    "updated_at": "2018-03-05T18:05:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Interesting - looks like the text gets pushed up to avoid overlap with the orange bar, but the rect doesn't. @rmoestl since you've got your head wrapped around this part of the code, can you hunt this last bit down as well?",
    "created_at": "2018-03-05T17:53:06Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2440#issuecomment-370504886",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2440",
    "updated_at": "2018-03-05T17:53:06Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Can we close #865 now too?",
    "created_at": "2018-03-05T16:49:07Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2440#issuecomment-370484102",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2440",
    "updated_at": "2018-03-05T16:49:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@darabos I haven't looked at the code yet, but from the tests that failed I like it already - four of our test images have multiline y axis labels that changed for the better, so we need to update the baseline images. If you look in the artifacts tab https://circleci.com/gh/plotly/plotly.js/7559#artifacts/containers/0 you can see which ones failed.\r\n<img width=\"588\" alt=\"screen shot 2018-03-05 at 10 33 39 am\" src=\"https://user-images.githubusercontent.com/2678795/36983783-42f6a902-2061-11e8-81d7-69d5932e0323.png\">\r\n\r\n\r\nIf you've got our image tester set up you can run `npm run baseline -- benchmarks` etc to generate the new ones, if not you can just download the relevant ones from the artifacts -> `test_images` directory and overwrite the version in `test/image/baselines`.\r\n\r\n(side note: `world-cals` also changed in my latest PR #2437 - whichever of these is merged last will have to regenerate the baseline again so it gets both changes...)",
    "created_at": "2018-03-05T15:43:13Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2424#issuecomment-370460989",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2424",
    "updated_at": "2018-03-05T15:43:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@rmoestl looks great, beautiful tests. Just the one quick question https://github.com/plotly/plotly.js/pull/2440#discussion_r172212582 and then I think we're ready to 💃 ",
    "created_at": "2018-03-05T15:09:27Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2440#issuecomment-370449212",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2440",
    "updated_at": "2018-03-05T15:09:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Really what we need to do is get rid of the `getBoundingClientRect` calls there altogether. This causes all sorts of problems, see #1988 ",
    "created_at": "2018-03-04T13:36:53Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2434#issuecomment-370229901",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2434",
    "updated_at": "2018-03-04T13:36:53Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I guess what you mean is can we autoscale the y axis to the data that's *visible* given the x axis range? That's a feature we've been discussing here https://github.com/plotly/plotly.js/issues/1876#issuecomment-314913229",
    "created_at": "2018-03-02T19:41:58Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2432#issuecomment-370031026",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2432",
    "updated_at": "2018-03-02T19:41:58Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 💃 💃 ",
    "created_at": "2018-03-02T19:24:30Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2429#issuecomment-370025966",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2429",
    "updated_at": "2018-03-02T19:24:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice job @nicolaskruchten - nothing more from me, looks great! 💃 ",
    "created_at": "2018-03-02T17:48:36Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2243#issuecomment-369997447",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2243",
    "updated_at": "2018-03-02T17:48:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard this is brilliant. Beautiful. Heroic even. Amazing that even with the extra machinery it's a net decrease in LOC.\r\n\r\nJust a few comments, the only substantive one being the [`Registry.call` signature](https://github.com/plotly/plotly.js/pull/2429#discussion_r171728952).\r\n\r\nLove it. End of an era.",
    "created_at": "2018-03-01T23:53:29Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2429#issuecomment-369772530",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2429",
    "updated_at": "2018-03-01T23:53:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@darabos thanks for the PR and no problem, we can discuss it here.\r\n\r\nThe new mock and baseline are great, thanks!\r\n\r\nThe test failures come because we haven't always made sure that `d.text` is actually a string, sometimes it's a number (try loading mock 14, that's the one that failed first in the image tests).\r\n\r\nBut three problems I see make me think we need a different solution: \r\nFirst, `transfn` is used for ticks too, which is not what you want:\r\n![screen shot 2018-03-01 at 10 58 59 am](https://user-images.githubusercontent.com/2678795/36854744-b4e2d1fa-1d3f-11e8-9626-0acddd011b46.png)\r\n\r\nSecond, I don't think splitting on `<br>` is the right way to do it anyway - we also accept `\\n` for example, and in case there are others now or later I wouldn't want to hard-code this here.\r\n\r\nThird, we need to consider how this interacts with `axis.tickangle`. It's not as common for y axes as for x, but it *is* supported, and moreover x axis labels at 90 degrees may also want this correction. Here's how it looks on your branch at 90 degrees - OK:\r\n![screen shot 2018-03-01 at 11 05 01 am](https://user-images.githubusercontent.com/2678795/36854989-6fa7b622-1d40-11e8-8593-c82f25a78c2b.png)\r\nbut at -90 not so good:\r\n![screen shot 2018-03-01 at 11 04 53 am](https://user-images.githubusercontent.com/2678795/36855002-7ccd87a0-1d40-11e8-8e8a-4160215fd715.png)\r\n\r\nI think the solution is going to need to be in [`positionLabels`](https://github.com/plotly/plotly.js/blob/113b3618732f28d1a2158771544bf4e60e00c084/src/plots/cartesian/axes.js#L2041) because that's after we've called `svgTextUtils.convertToTspans` on the text, so we can use `svgTextUtils.lineCount`.",
    "created_at": "2018-03-01T16:13:42Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2424#issuecomment-369643121",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2424",
    "updated_at": "2018-03-01T16:13:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "#2426 fixed the legends part of this.\r\nUpdatemenus *do* have this problem too, so leaving this issue open.",
    "created_at": "2018-03-01T15:30:40Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1859#issuecomment-369628738",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1859",
    "updated_at": "2018-03-01T15:30:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@TomDemulierChevret looking at the image tests, it seems like we lost the second y axis data in the range sliders. To see what failed and how, you can look in the `artifacts` tab and dig in to find `test_images_diff` which has only the failed images shown as diffs, then find those images in `test_images` and compare with the ones in the repo's `test/image/baseline` folder - eg compare https://7347-45646037-gh.circle-artifacts.com/0/var/www/streambed/image_server/plotly.js/build/test_images/range_slider_axes_double.png to https://github.com/plotly/plotly.js/blob/master/test/image/baselines/range_slider_axes_double.png\r\n\r\nIn the jasmine tests, there's one explicit failure (do you see this when you run locally?) and a bunch of timeouts. The timeouts are probably because we forgot to catch errors in the promise chain in these tests - notice the async ones end in just `.then(done);`, compare this to the more robust version eg [here](https://github.com/plotly/plotly.js/blob/f8e7ee4086b1b0920d2fec07a717d9fcc619ff1f/test/jasmine/tests/plot_interact_test.js#L120-L121) where we use `assets/fail_test` - that should turn the timeouts into tracebacks you can see and fix.",
    "created_at": "2018-03-01T14:48:07Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2364#issuecomment-369614703",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2364",
    "updated_at": "2018-03-01T14:48:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Fixed #808 (and https://github.com/plotly/plotly.js/pull/2426#issuecomment-369395487) in https://github.com/plotly/plotly.js/pull/2426/commits/569b37893c7082e9ed43740dd87a2d2fc36ce41b",
    "created_at": "2018-03-01T03:09:06Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2426#issuecomment-369460104",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2426",
    "updated_at": "2018-03-01T03:09:06Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Sure, I'm just worried that in some of the contexts in which we use `nestedProperty` the full state tree may not be available, which would require some more significant refactoring. Nothing we can't do, just trying to predict the scope of this project.",
    "created_at": "2018-02-28T23:39:55Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2418#issuecomment-369422401",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2418",
    "updated_at": "2018-02-28T23:39:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Since this doesn't show up in test images, here's what the new scrollbars look like - a little wider and a lot taller:\r\n![screen shot 2018-02-28 at 4 21 05 pm](https://user-images.githubusercontent.com/2678795/36813714-7990149c-1ca3-11e8-88c9-033ba5375e6d.png)\r\n",
    "created_at": "2018-02-28T21:22:09Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2426#issuecomment-369387272",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2426",
    "updated_at": "2018-02-28T21:22:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Excellent work - should be a big step toward higher performance! 💃 🍾 ",
    "created_at": "2018-02-28T20:16:02Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2388#issuecomment-369368607",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2388",
    "updated_at": "2018-02-28T20:16:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for the report!",
    "created_at": "2018-02-28T14:38:43Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2420#issuecomment-369259116",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2420",
    "updated_at": "2018-02-28T14:38:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I like the idea of `const newContainer = prop.setImmutable(value);`.\r\n\r\nIt'll take a bit of work to get this integrated with plotly.js, and I'd like to have a clear idea how that will work before we add this to the library. My main concern is that `container` often isn't really the root of the state tree - instead of `data` we start at a `trace`; `layout` is often used as the container but sometimes a subcontainer like `layout.xaxis` is used.",
    "created_at": "2018-02-28T14:19:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2418#issuecomment-369253177",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2418",
    "updated_at": "2018-02-28T14:19:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 from me too! 🎉 ",
    "created_at": "2018-02-28T01:34:28Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2404#issuecomment-369089776",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2404",
    "updated_at": "2018-02-28T01:34:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "fixed in #2379 - will be in the next published version.",
    "created_at": "2018-02-27T17:13:53Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2409#issuecomment-368953930",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2409",
    "updated_at": "2018-02-27T17:13:53Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "There are many ways to do this - see eg https://plot.ly/javascript/streaming/\r\nIf you have questions about these examples, please use https://community.plot.ly/c/plotly-js",
    "created_at": "2018-02-26T14:02:35Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2402#issuecomment-368512969",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2402",
    "updated_at": "2018-02-26T14:02:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I never did figure out what was causing the failing test, so I just [marked it `@flaky`](https://github.com/plotly/plotly.js/pull/2399/commits/446f9f95d7539c5dc603b362e900688634eb8b0a) and it runs there. Not exactly the intent of `@flaky`, as this test simply fails in the `@gl` suite now on CI (but not locally, for me anyway). I found an issue with the test suite that I *hoped* would show what was going on - [dropped promise errors](https://github.com/plotly/plotly.js/pull/2399/commits/cd6e8232121b819b1618da9de9975faf9f0b3e86) - but no luck there (did lots of testing on the [grid-ci-test branch](https://github.com/plotly/plotly.js/tree/grid-ci-test)), and I noticed that I forgot to update parcoords for [`Plotly.react`](https://github.com/plotly/plotly.js/pull/2399/commits/1aec7f7aee678161b214d095db2eb857fbcdb2a4)... but never could figure out why that test stalls on CircleCI. I hope you don't mind @etpinard 😓 ",
    "created_at": "2018-02-26T04:28:15Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2399#issuecomment-368387078",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2399",
    "updated_at": "2018-02-26T04:28:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Good catch - the issue is with `ncontours: 1`, should be an easy fix. In the meantime you may be interested in a new feature (to regular contours anyway): constraint-type contours: https://github.com/plotly/plotly.js/pull/2270",
    "created_at": "2018-02-25T04:52:38Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2398#issuecomment-368283304",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2398",
    "updated_at": "2018-02-25T04:52:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The data in the codepen is different from what you've got in your screenshot. You can use `Plotly.Plots.graphJson(graphDiv)` to pull out the exact plot and put that into codepen, see if that shows what you want it to.\r\n\r\nI'm assuming what you mean by \"broken\" is that there are gaps in the line - which implies that some of the data was interpreted as non-numeric. Does the same thing happen if you switch to regular `scatter`, not `scattergl`?",
    "created_at": "2018-02-25T04:34:22Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2397#issuecomment-368282603",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2397",
    "updated_at": "2018-02-25T04:34:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@wangyueming #2379 was only merged 3 days ago. It will be in 1.35, likely next week.",
    "created_at": "2018-02-23T03:42:10Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2247#issuecomment-367901097",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2247",
    "updated_at": "2018-02-23T03:42:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for the report - this seems to fail for a somewhat random set of `[x, 1]`, including 8, 9, and 15-19 (and `[1, x]` fails the reverse way for the same numbers, only showing the 1).",
    "created_at": "2018-02-22T17:23:08Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2393#issuecomment-367755314",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2393",
    "updated_at": "2018-02-22T17:23:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @cldougl - OK @TomDemulierChevret I think we have consensus. Now the question is how to know which y axes to `coerce` inside `rangeslider`... I don't see a pre-made function that does exactly this (kinda unfortunate, @etpinard am I missing something?), but it seems like passing [`subplots.cartesian`](https://github.com/plotly/plotly.js/blob/ce5bc971770daaf3ed60d374f23a8af1bb61fe0b/src/plots/cartesian/layout_defaults.js#L70) to [`Axes.findSubplotsWithAxis`](https://github.com/plotly/plotly.js/blob/ce5bc971770daaf3ed60d374f23a8af1bb61fe0b/src/plots/cartesian/axes.js#L1710), then for each one stripping off the x part, then calling [`Axes.id2name`](https://github.com/plotly/plotly.js/blob/ce5bc971770daaf3ed60d374f23a8af1bb61fe0b/src/plots/cartesian/axes.js#L41) on it - that should give the right set of names.\r\n\r\nWe also have to be careful how we specify this in the `attributes` file, I guess it'll be a container `yaxis` inside `rangeslider.attributes` but we need to do something to make it clear to users that this means any y axis name. @etpinard do we have a precedent for this?",
    "created_at": "2018-02-21T18:05:34Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2364#issuecomment-367416411",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2364",
    "updated_at": "2018-02-21T18:05:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Hmm yeah, we definitely shouldn't do what we're doing now (which it appears is converting to ms since 1970 and adding that on to the base date) but I don't think what you're expecting is consistent with how `base` works on other axis types. `y` is supposed to be the size of the bar, and `base` is where it starts. I suppose we could do either or both of:\r\n- Allow specifying `y` in milliseconds, and use `base` to determine the axis type - this *almost* works right now with explicit axis type, though it seems we make a timezone error - see https://codepen.io/alexcjohnson/pen/eVrPyr\r\n- Make a new attribute like `end` (what's the other end called if the start is `base`?) to use instead of `y` to use when you want to specify absolute values for both ends of the bar rather than base+delta",
    "created_at": "2018-02-21T16:43:43Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2391#issuecomment-367389785",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2391",
    "updated_at": "2018-02-21T16:43:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> By accident pushed 41c067a to master, this should fix that.\r\n\r\nMerging master https://github.com/plotly/plotly.js/pull/2377/commits/115458937b255cf37446aebf0cf8a175999c234f includes the commit where I 🔪 `gl2d_line_select.json`, right? I don't see it generated in https://circleci.com/gh/plotly/plotly.js/7082#artifacts/containers/0. So now we need to add it back into this PR. After that this looks great to me! 💃 ",
    "created_at": "2018-02-21T16:23:28Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2377#issuecomment-367382834",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2377",
    "updated_at": "2018-02-21T16:23:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks, that does seem like a nice feature to add. I'm not sure though that I would know what success looks like, not being familiar with any RTL languages and specifically how they're used on maps. But we would be happy to look at a pull request that includes a test image locking down how it works!",
    "created_at": "2018-02-21T14:31:27Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2390#issuecomment-367344206",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2390",
    "updated_at": "2018-02-21T14:31:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @chubukov - confirmed on my wife's Win7 computer, though I still can't make it happen in Browserstack with Chrome 63 on Win7... I found a related effect on my mac though, if I right-click on the legend, it grabs the legend scroll handle, moves it to where my mouse is, and doesn't let go until I click again. It looks to me as though somehow that's what's happening with left-click on Windows, then the click event isn't done at that point, it gets propagated to the legend item.\r\n\r\nI don't know why that effect (clicking to move the scrollbar handle where your mouse is) exists at all... I suppose if there were a fully drawn scrollbar, not just the handle, it would make sense. But as there isn't, we should just remove that functionality - if it can't happen at all, it won't be able to happen spuriously!",
    "created_at": "2018-02-21T01:53:15Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2387#issuecomment-367187270",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2387",
    "updated_at": "2018-02-21T01:53:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "cc @nicolaskruchten @etpinard",
    "created_at": "2018-02-20T21:46:44Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2389#issuecomment-367131234",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2389",
    "updated_at": "2018-02-20T21:46:44Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Annoying indeed! But if we can't reproduce it on our own computers it's going to be awfully hard to fix. I can't trigger it on my own computer or in various OS/Chrome version combinations on Browserstack. Any more info you can dredge up about the platform where this happens?\r\n\r\nBTW I wouldn't link this to the Dash milestone - you noticed it while using Dash but it's a straight-up plotly.js issue.",
    "created_at": "2018-02-20T20:47:29Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2387#issuecomment-367113781",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2387",
    "updated_at": "2018-02-20T20:47:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "re: `xaxis.rangeslider.oppaxis` vs `xaxis.rangeslider.yaxis`: `oppaxis` seems ambiguous to me - what if the y axes are `yaxis2` and `yaxis4` - are those `oppaxis` and `oppaxis2` or are they `oppaxis2` and `oppaxis4`? If we use actually the same names then it's clear that `xaxis.rangeslider.yaxis2` means \"the xaxis rangeslider's representation of yaxis2.\"\r\n\r\nre: `xaxis.rangeslider` vs `rangesliders[0].xref`: either way this is a separate issue, we wouldn't change that in this PR. But it also seems to me like that would make it harder to find the rangeslider for the axis you're looking at, would make it possible to define two rangesliders for one x axis, which I don't think we want, and would complicate the simple case (adding a rangeslider to your one x axis - why should it need to go in an array?).",
    "created_at": "2018-02-20T16:45:33Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2364#issuecomment-367039885",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2364",
    "updated_at": "2018-02-20T16:45:33Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "(@TomDemulierChevret sorry for the back-and-forth here, attribute specs can be really tricky to get right, especially when we start thinking of all the possible edge cases involved)",
    "created_at": "2018-02-20T16:09:06Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2364#issuecomment-367027661",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2364",
    "updated_at": "2018-02-20T16:09:06Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> After writing the 3 options down, I'd say I prefer option 3 by far.\r\n\r\nI was hoping to avoid something like that, but I just realized there's a use case where we *need* to do it this way. Kinda convoluted, but imagine you have two side-by-side x axes sharing a y axis, each x axis has its own range slider, and you want different range settings for the y axes in the two rangesliders. Would be weird, as the y axes on the main plots are one axis so they *must* share a range... but I guess I can imagine wanting to restrict the range of the y axes in each range slider to just the data on the respective subplot.\r\n\r\nThis is not possible with `yaxis.rangesliderrange` - one way or another the attribute path must include both axis ids/names.\r\n\r\nOption 3 is pretty good, but let me add one more to the mix:\r\n```js\r\nxaxis: {\r\n  rangeslider: {\r\n    yaxis: {range: [/* */], rangemode: ' '},\r\n    yaxis2: {range: [/* */], rangemode: ' '},\r\n  }\r\n}\r\n```",
    "created_at": "2018-02-20T16:05:19Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2364#issuecomment-367026430",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2364",
    "updated_at": "2018-02-20T16:05:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Interesting... looks to me like this happens when you scroll-zoom, there's enough of a delay during the zoom that we `relayout` but you actually keep going with the scroll-zoom after that, and the delayed `restyle` comes in mid-zoom (for completeness, what actually happens during a zoom is we transform the points during the event, but then once the event is done we remove the transform and reposition the points in their new locations).\r\n\r\nIf that's what's going on, then the effect could potentially be triggered by any of the zoom/pan interactions, not just scroll-zoom, if a `restyle` occurred during the event; it's just easier to see with scroll-zoom since you're more likely to trigger multiple `relayouts` that way since it's based on a time delay after wheel events, vs other zoom/pan events where the end is a mouseup.",
    "created_at": "2018-02-20T14:36:51Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2384#issuecomment-366996525",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2384",
    "updated_at": "2018-02-20T14:36:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Good call putting the new attributes into the y axis - originally I was thinking that they belonged in the `rangeslider` container, but that wouldn't support multiple y axes correctly. A couple of tweaks I'd suggest:\r\n\r\n- We should only coerce these attributes if `letter === y`.\r\n- Instead of `rangesliderFixedrange: (true | false | 'auto')` I might suggest `rangeslidermode: ('fixed' | 'match' | 'auto')` - I think that's a bit more descriptive, and we've been moving away from these mixed-type attributes anyway. Also despite this being javascript, for portability we use only lowercase in attribute names (so `rangesliderRange -> rangesliderrange`). @etpinard opinions about this?\r\n- There may be places (`Axes.expand`?) where we need to check for `rangeslidermode: 'auto'` alongside `autorange: true`, in order to make sure the autorange precursor calculations are done. To test this: make a plot where the y axis is NOT autoranged at the beginning, but it IS supposed to be autoranged in the rangeslider, and see if it gets handled correctly.\r\n\r\nI'll try out `plot_api_test` on this branch tomorrow, see if I can figure out what the problem is there.\r\nthe image test failed because we had `master` in an improper state that just got fixed late this afternoon - if you merge in master *again*, that one should work again.",
    "created_at": "2018-02-20T04:49:16Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2364#issuecomment-366866178",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2364",
    "updated_at": "2018-02-20T04:49:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> @alexcjohnson fixed by d604a76\r\n\r\nBeautiful! Here's 1M points now, looks lovely.\r\n<img width=\"877\" alt=\"screen shot 2018-02-19 at 10 47 54 pm\" src=\"https://user-images.githubusercontent.com/2678795/36406744-00faf8e0-15c7-11e8-8a4b-6bc26ec7a8a3.png\">\r\n\r\nIs there an obvious way to test this? I wouldn't want to make a mock with 100k or more points in it, is there a way to trigger the difference at a lower volume? Or perhaps draw something like this programmatically (but not random like in my test) and read a few pixels?",
    "created_at": "2018-02-20T04:07:06Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2377#issuecomment-366861508",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2377",
    "updated_at": "2018-02-20T04:07:06Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Possibly a variant of (solved issue) #2271?",
    "created_at": "2018-02-20T03:29:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2380#issuecomment-366857330",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2380",
    "updated_at": "2018-02-20T03:29:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> @alexcjohnson that is [regl limitation](https://github.com/regl-project/regl/issues/458) of `uint32` buffers, we can't go over `65536` various colors, that is reached at ~91k points.\r\n\r\nMakes sense, but we need to do something reasonable in this case (which should be well within the range that scattergl is expected to support), and not have it break like this. My eyes can't distinguish 65k colors, so we should be able to find a way to discretize the colors to fit within that limit.",
    "created_at": "2018-02-19T22:29:34Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2377#issuecomment-366817697",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2377",
    "updated_at": "2018-02-19T22:29:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I'd like to see a few words in the spikedistance and hoverdistance attribute descriptions about how they only apply to point-like objects.\r\n\r\nGood point. How's https://github.com/plotly/plotly.js/pull/2379/commits/31e4e344fcd55394cc4668a84be2a0fd616ab19f?",
    "created_at": "2018-02-19T21:37:39Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2379#issuecomment-366808549",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2379",
    "updated_at": "2018-02-19T21:37:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Now, this PR almost fixes #2370\r\n\r\nAnd now it *really* does -> https://github.com/plotly/plotly.js/pull/2379/commits/eb98c9159c639457d2ace818443feb68e9bf330f",
    "created_at": "2018-02-19T21:36:31Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2379#issuecomment-366808325",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2379",
    "updated_at": "2018-02-19T21:36:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "We're probably going to need to do this as part of #2372, which is up next, so that the x and y for the same variable can have matched ranges (keeping the diagonal panes diagonal as well). But when we do this it will include matched x and matched y axes as well as x matching y.",
    "created_at": "2018-02-19T03:06:52Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1549#issuecomment-366578565",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1549",
    "updated_at": "2018-02-19T03:06:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> About your `grid` proposal, I'm curious to see if we could combine the numerous  _xy subplot-wide but not graph-wide_ requested settings in them (https://github.com/plotly/plotly.js/issues/1468, https://github.com/plotly/plotly.js/issues/233, https://github.com/plotly/plotly.js/issues/2274 and per subplot `plot_bgcolor` to name a few).\r\n\r\nI suppose we could *let* `grid` provide these settings, the same way `grid` would be providing `domain` values for individual axes. But I wouldn't want this to be the *only* way to provide per-subplot settings, because not every multi-subplot layout can be described as a grid - think of insets, or layouts like\r\n```\r\n+-------+ +---+\r\n|       | |   |\r\n|       | +---+\r\n|       | +---+\r\n|       | |   |\r\n+-------+ +---+\r\n```\r\nI guess ^^ could be massaged into the grid format with concepts like `colspan` / `rowspan`, and maybe we'll do that, but that would still make it awkward to provide per-subplot attributes, and insets would still be difficult to describe this way.\r\n\r\nSo I still think we'll need something like https://github.com/plotly/plotly.js/issues/2274#issuecomment-359310606 but perhaps grid would be allowed to provide defaults to that when the layout *is* conducive to it.\r\n\r\n@dfcreative don't worry about `grid` while implementing `splom` - just use explicitly positioned x and y axes, and I'll work on `grid` separately, then once it and `splom` are both ready we can integrate them.",
    "created_at": "2018-02-17T18:48:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2372#issuecomment-366462693",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2372",
    "updated_at": "2018-02-17T18:48:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard I had a spurious test failure in a gl test - do we want to allow tests to be marked BOTH `@gl` and `@flaky`?\r\n(edit: failure here - https://circleci.com/gh/plotly/plotly.js/6963)",
    "created_at": "2018-02-17T17:30:21Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2379#issuecomment-366457082",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2379",
    "updated_at": "2018-02-17T18:24:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Very nice, relieves one of the big pain points until we really do text in autorange. 💃 ",
    "created_at": "2018-02-16T23:42:32Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2378#issuecomment-366390237",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2378",
    "updated_at": "2018-02-16T23:42:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Playing with this branch - looking great up to 90K points!\r\n![90k points](https://user-images.githubusercontent.com/2678795/36328425-040839ba-1330-11e8-9c89-5accca54bae6.png)\r\nBut then something changes, kind of gradually between 90K and 92K - here's 92K, where it looks like the marker outline colors pick randomly from the marker colors?\r\n![92k points](https://user-images.githubusercontent.com/2678795/36328426-04139cd8-1330-11e8-9f16-b4b45d562e6a.png)\r\nThen go a bit farther and the marker colors also get randomized - here's 100K points.\r\n![100k points](https://user-images.githubusercontent.com/2678795/36328427-041fa992-1330-11e8-9a6c-19f6936d2d80.png)\r\n\r\nThe code I used for this is (basically copied from one of the issue codepens):\r\n\r\n```js\r\nvar x_array = [], color_array = [], opacity = [], size = [];\r\n\r\nfor (var i = 0; i < N; i++){ // N = eg 90000, 92000, 100000\r\n  x_array.push(i);\r\n  color_array.push(Math.random());\r\n  opacity.push(Math.random());\r\n  size.push(Math.random() * 3 + 3);\r\n}\r\n\r\nvar trace1 = {\r\n  x: x_array, y: color_array,\r\n  mode: 'markers',\r\n  marker: {\r\n    size: size, color: color_array, opacity: opacity,\r\n    colorscale: [[0, 'rgb(255, 0, 0)'], [0.5, 'rgb(0, 255, 0)'], [1.0, 'rgb(0, 0, 255)']]\r\n  },\r\n  type: 'scattergl'\r\n};\r\n\r\nvar layout = {\r\n  title: 'Scatter Plot with a Color Dimension'\r\n};\r\n\r\nPlotly.newPlot(gd, [trace1], layout);\r\n```",
    "created_at": "2018-02-16T20:46:56Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2377#issuecomment-366353728",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2377",
    "updated_at": "2018-02-16T20:46:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Also the modebar icons for box & lasso select don't show up with `mode: 'lines'` regardless of whether you've set yourself in one of those modes or not.",
    "created_at": "2018-02-16T19:04:27Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2376#issuecomment-366329017",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2376",
    "updated_at": "2018-02-16T19:04:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> May I add my 50 cents?\r\n\r\nUsually it's 2¢ but we like you so sure :)\r\n\r\n> Why don't we just use existing scatter trace data/naming convention\r\n\r\nTwo things I don't like about this:\r\n1. A given data value isn't x or y, it's used for both in different subplots.\r\n2. We need labels associated with each dimension, and we may want to be able to rearrange dimensions, both of which are a bit awkward if the data are in a 2D array.\r\n\r\nAnyway we do have a precedent for the structure I'm proposing, in `parcoords`. Then the `marker` attributes would be inherited directly from `scatter`",
    "created_at": "2018-02-16T18:07:38Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2372#issuecomment-366313207",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2372",
    "updated_at": "2018-02-16T18:07:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Lovely, this should really help our productivity! 💃 ",
    "created_at": "2018-02-16T17:53:12Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2373#issuecomment-366309418",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2373",
    "updated_at": "2018-02-16T17:53:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "referencing also https://github.com/plotly/plotly.js/issues/2172 - I love the effect here @TomDemulierChevret, just want to make sure we have a path forward when we add potentially stacked multiple axes. I guess it just means we'd end up with multiple clear and shaded regions stacked up, which should be fine.",
    "created_at": "2018-02-16T16:46:16Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2364#issuecomment-366290427",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2364",
    "updated_at": "2018-02-16T16:46:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Mostly I love it, but I'm a little concerned about two things:\r\n- If there really is a test failure you didn't notice locally, it will take 5 times as long before you see it\r\n- At some point we should really fix these tests so they *are* robust, rather than just continuing to throw extra computing power at them. This solution hides the failures so it'll be hard to figure out where they are.\r\n\r\nThere was some discussion about how this could be done within jasmine, to just retry failing tests, they left it as the not very helpful \"I think you should be able to build something that can do this with the existing custom reporter and filter function\" but if we could get this to work that would be the best of all https://github.com/jasmine/jasmine/issues/960\r\n\r\nOne idea though that I think would satisfy my concerns: can we make a tag for known unreliable tests, split those out into a separate task, and only run those ones in the retry loop? That way we would have a place to look to see which tests these are (and fix them when we get a chance), and other test failures wouldn't get slowed down.",
    "created_at": "2018-02-15T20:39:20Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2373#issuecomment-366054415",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2373",
    "updated_at": "2018-02-15T20:39:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I think it's clear we want to encapsulate a `splom` in a single trace, like solution 1. Solution 2 won't give the necessary performance benefits. Solution 3 may give *some* of the performance we need, and may be useful for more generalized trace linking in the future (for example, things like [2dhistogram_contour_subplots](https://github.com/plotly/plotly.js/blob/master/test/image/baselines/2dhistogram_contour_subplots.png) where the x and y data are duplicated in the scatter and histogram2dcontour traces, then x and y each get another copy in the 1D histograms) but will still suffer from duplication at the calc/plot level, that I suspect will be prohibitive for us. Likewise it seems to me it's only reasonable to make this as a WebGL type.\r\n\r\nThe question in my mind is whether we can do it by linking the `splom` trace to regular cartesian axes, and using it to tailor the defaults for those axes, or if we need to have even the axes encapsulated in the trace itself. If we can do the former, then we retain the flexibility to display other traces on those same subplots. Extra data that we only have for one attribute pair, for example, or a curve fit, or some different type of display on the diagonal. Or even another `splom` that might even have a disjoint set of dimensions from the first (might be a huge headache but see below for more thoughts)\r\n\r\n## Preferred option: refer to regular cartesian axes\r\n\r\n```js\r\ntrace = {\r\n  dimensions: [{\r\n    values: [/* */],\r\n    name: 'Sepal Width' // used as default x/y axis titles\r\n    xaxis: 'x' | 'x2' ... // defaults to ith x axis ID for dimension i\r\n    yaxis: 'y' | 'y2' ...\r\n  }],\r\n  marker: {\r\n    // just like scatter, and all the same ones are arrayOk.\r\n    // goes outside the `dimensions` array because the same data point should get\r\n    // the same marker in all subplots.\r\n  }\r\n  // domain settings - not used directly, just fed into the defaults for all the\r\n  // individual x/y axis domains\r\n  domain: {\r\n    // total domain to be divided among all x / y axes\r\n    x: [0, 1],\r\n    y: [0, 1],\r\n    // blank space between x axes, as a fraction of the length of each axis\r\n    // possibly xgutter and ygutter?\r\n    gutter: 0.1\r\n  }\r\n  // some splom-wide options e.g.:\r\n\r\n  // maybe turn these into a flaglist 'upper+lower+diagonal'?\r\n  // these and related attrs will affect the default x/y axis anchor and/or side attributes\r\n  showdiagonal: true || false,\r\n  showupperhalf: true || false,\r\n  showlowerhalf: true || false,\r\n\r\n  // maybe xdirection and ydirection?\r\n  direction: 'top-left-to-bottom-right' || 'bottom-left-to-top-right',\r\n  // ...\r\n};\r\n\r\nlayout = {\r\n  xaxis: { /* overriding any of the defaults set by SPLOM */ },\r\n  xaxis2: { /* */ },\r\n  xaxis3: { /* */ },\r\n  ... ,\r\n  yaxis: { /* */ },\r\n  ...\r\n};\r\n```\r\n\r\nOne variation that might be nice but I'm not sure: separate the list of axes from the dimensions. This could make it easier for example to reorder the dimensions without having to do all sorts of gymnastics with swapping axis attributes (though we might need to swap axis titles still, if they're not inherited from the dimension names):\r\n```js\r\ntrace = {\r\n  dimensions: [{\r\n    values: [/* */],\r\n    name: 'Sepal Width' // used as default x/y axis titles\r\n    // some scatter style props ...\r\n  }],\r\n  xaxes: ['x', 'x2', 'x3', ...], // defaults to the first N x axis IDs. info_array, Not data_array.\r\n  yaxes: ['y', 'y2', 'y3', ...],\r\n  ...\r\n}\r\n```\r\n\r\n## Bonus: layout.grid\r\n\r\nAlso, it might be nice to move the axis arrangement to `layout`, but still have `splom` provide defaults for this. That way we could reuse it for other cases that want a grid of axes, not just `splom`:\r\n\r\n```js\r\n// splom trace would still have axis ids in it but no axis layout info (domain or gutter)\r\nlayout = {\r\n  grid: {\r\n    xaxes: ['x', 'x2', 'x3', ...],\r\n    yaxes: ['y', 'y2', 'y3', ...],\r\n    domain: { x: [0, 1], y: [0, 1] },\r\n    gutter: 0.1\r\n  }\r\n}\r\n```\r\nCases like splom would use a 1D arrays of x/y axes, as all rows share the same x axes and all columns share the same y axes, but we could also allow 2D arrays for when you want a grid of uncoupled axes. And if you put '' in any entry it leaves that row/col/cell blank, and at some point we can make a way to refer to empty cells in other trace/subplot types - so in a `pie` trace or a 3d `scene` etc you could add something like `gridcell: [1, 2]` which would automatically generate the appropriate `domain` for you.\r\n\r\nActually, this would make it easy to support multiple `splom` traces regardless of whether they have the same or different dimensions:\r\n1. At the beginning of `supplyDefaults` we'd look through all `splom` traces and find the full set of `xaxes` and `yaxes` to use as the defaults in `fullLayout.grid` (but the user could override these lists if they wanted) as well as to populate the axis and subplot lists in `fullLayout._subplots`.\r\n2. Since there's now a list of axes in `fullLayout.grid`, we'd coerce `grid.domain` and `grid.gutter`.\r\n3. Then when supplying defaults for the individual axes (as well as other subplots and traces with `gridcell` attributes), default `domain` values would be generated based on `grid`.\r\n4. After the `supplyDefaults` step, `grid` and `gridcell` attributes would be ignored because the appropriate `domain` values would have been filled in already.\r\n\r\nThat way all of this would happen automatically if you just make a `splom` trace with N dimensions and don't say anything about its layout, but you could alter it all at various stages if you want to.\r\n\r\n## Alternative: axes also encapsulated in the trace\r\n\r\nWhat I'm trying to avoid above, but might be even higher performance at the expense of flexibility,\r\nas the axis rendering could be tailored to the `splom` case:\r\n```js\r\ntrace = {\r\n  dimensions: [{\r\n    values: [/* */],\r\n    xaxis: { /* all the x axis attributes like title, tick/grid specs, fonts, etc */ },\r\n    yaxis: { /* same for y - or these could go in xaxes/yaxes arrays but still in the trace */ }\r\n  }]\r\n}\r\n```\r\nor in `trace.xaxes` and `trace.yaxes` which would be arrays of objects rather than arrays of IDs... either way the point is no other traces would be able to use these axes, which means they could use stripped down rendering machinery for better performance but less flexibility.\r\n\r\nMy hope though is that the SVG axis machinery is fast enough, especially if we avoid having `splom` contribute to `fullLayout._subplots.cartesian` or `fullLayout._subplots.gl2d` (which would scale quadratically with number of dimensions, vs the number of x/y axes, `fullLayout._subplots.(x|y)axis`, which scale linearly) so we only draw the axes in SVG, and let `splom` draw gridlines (if required) in WebGL.",
    "created_at": "2018-02-15T20:19:33Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2372#issuecomment-366049231",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2372",
    "updated_at": "2018-02-15T20:19:33Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Question: where should the spikes go for grouped bars? At the bar data position, or where this specific bar was shifted by the grouping?\r\n\r\nRight now my code does either one, data position in compare mode and shifted position in closest mode (both of these are showing spikes for the brown bar in trace 5) but I think it should be consistent. I can see arguments for either one though - the data position is pointing to the real data value, and so links up better to other trace types (like scatter) and other subplots, so that's probably what I'd prefer, but the shifted position makes it clearer which bar the spike is for. Thoughts?\r\n![screen shot 2018-02-14 at 7 39 13 pm](https://user-images.githubusercontent.com/2678795/36235557-5d4acca8-11bf-11e8-8088-85ea9dd5f02f.png)\r\n![screen shot 2018-02-14 at 7 39 42 pm](https://user-images.githubusercontent.com/2678795/36235561-620e7848-11bf-11e8-9709-8c298aaeb220.png)\r\n\r\n",
    "created_at": "2018-02-15T01:15:16Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2336#issuecomment-365797880",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2336",
    "updated_at": "2018-02-15T01:15:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ha nice - broken for years I guess... 💃 ",
    "created_at": "2018-02-15T00:33:30Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2368#issuecomment-365791069",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2368",
    "updated_at": "2018-02-15T00:33:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "hmm, after some more testing I no longer think this is a significant benefit, and the test errors make it clear this was an overly blunt approach anyway - if there *is* a benefit to be had here, it'll be better to target exactly the items known to contain possible circular references, such as `trace._expandedInput` and `trace._fullInput`.",
    "created_at": "2018-02-14T22:19:17Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2366#issuecomment-365763870",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2366",
    "updated_at": "2018-02-14T22:19:17Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "huh, this causes some problems in the tests... will need to investigate.",
    "created_at": "2018-02-14T21:42:37Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2366#issuecomment-365754483",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2366",
    "updated_at": "2018-02-14T21:42:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard this looks great! We'll need to sort out fonts before we can use `image_exporter` for everything (just shows up in the legend font in the `mapbox_0` and `mapbox_connectgaps` images, it's a totally different font, look particularly at the c's and g's), but it's OK for this PR. It might mean that you're the only one who can run that `noci_test` script successfully, but if you're OK with that possibility then so am I 😉 \r\n\r\n💃 after the one last [minor comment](https://github.com/plotly/plotly.js/pull/2361#discussion_r168021403) and tests pass.",
    "created_at": "2018-02-14T02:31:50Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2361#issuecomment-365476366",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2361",
    "updated_at": "2018-02-14T02:31:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This doesn't need to be a different `type`, just a new attribute (`base`?) to change how ticks are drawn. The tricky thing here will be to find a nice algorithm for choosing tick values for arbitrary `range` / `nticks` combinations, and it might be too much to ask that this also work well for an arbitrary `base`, perhaps it's more realistic to make the framework and separate algorithms for each specific base someone needs.",
    "created_at": "2018-02-13T15:54:21Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2362#issuecomment-365309626",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2362",
    "updated_at": "2018-02-13T15:54:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "symlog is a little funny, as it's not a smooth mapping. A variant I've seen before though that *is* smooth is arcsinh (inverse hyperbolic sine) - this one is particularly nice as you can define both the zero and the linear-ish range, using `y' = arcsinh( (y - y0) / yL )`. This is good for situations like a noisy signal with a nonzero base level, where you want to see both small and large peaks popping out with either sign.",
    "created_at": "2018-02-13T15:42:32Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/221#issuecomment-365305581",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/221",
    "updated_at": "2018-02-13T15:42:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I still think clearing the select box on scroll start for all subplot types would be the cleanest way to fix this bug.\r\n\r\n👍 \r\n\r\n> But thinking about #1851, we might have to come up with something more powerful. We can't just describe select box and lasso path in data coordinates (e.g. like data-ref annotations) because on non-cartesian subplot select box and lasso paths are allowed to extend pass the subplot's plot area \r\n\r\nAs part of #1851 we could consider making the selection outline persist through scroll/zoom *for cartesian subplots* but I don't feel like that's a particularly valuable addition, and as you point out it won't work for other subplot types. Extending past the plot area is one issue, though in principle we could sort that out by using the natural extension of the data<->px mapping. But a bigger problem is that for some subplot types - polar and geo at least - a rectangle is no longer necessarily a rectangle after you zoom, straight lines are no longer straight. So even if you were able to properly transform the selection region into one with curved boundaries, we wouldn't be able to use the same UI to modify the region afterward.",
    "created_at": "2018-02-13T15:14:41Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2343#issuecomment-365296620",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2343",
    "updated_at": "2018-02-13T15:14:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> meaning we'll have to _manually_ test mapbox subplot image generation.\r\n\r\nWhat do you mean by this? Just that we have tests that can't run on CI but can run locally, or are there things we have to run in a browser and eyeball? ",
    "created_at": "2018-02-12T23:52:41Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2361#issuecomment-365103516",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2361",
    "updated_at": "2018-02-12T23:52:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "`type: 'sqrt'` doesn't use the `symmetric` attribute, so it should not be part of `_fullData`. I guess ideally we'd design the attributes so that missing (`undefined`) is falsy - which in this case would mean using an attribute `asymmetric` instead of `symmetric`... perhaps we should make that change in v2, but for v1 would it be too much to ask to treat `symmetric=undefined` like `symmetric=true`?",
    "created_at": "2018-02-12T21:00:08Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2359#issuecomment-365060093",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2359",
    "updated_at": "2018-02-12T21:00:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Closed by #2341 ",
    "created_at": "2018-02-12T20:43:44Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1850#issuecomment-365055633",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1850",
    "updated_at": "2018-02-12T20:43:44Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> For dynamic styling, those presentational parameters you identified so far can easily be replaced with equivalent SVG element attributes\r\n\r\nAh there we go, a concrete suggestion 👍Yes, if attributes are allowed we can consider changing all styles to attributes; I'm not sure if that would cover *everything* we need, but it should cover all of the data-linked attributes, ie those that cannot be handled by a static external CSS.\r\n\r\nThis would be a fairly large project; it would also make plotly.js deployment more involved, particularly for behind-the-firewall apps that require there to be no links to non-local resources, we'd need the location of the external CSS resource to be configurable.",
    "created_at": "2018-02-11T18:02:38Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2355#issuecomment-364772582",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2355",
    "updated_at": "2018-02-11T18:02:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@lambone see #2336 - I will include `scattergl` in the fix.",
    "created_at": "2018-02-11T15:06:33Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2247#issuecomment-364758213",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2247",
    "updated_at": "2018-02-11T15:06:33Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I assumed it was clear, the solution would be to use external CSS as a subresource\r\n\r\nRight, but that's exactly what, as I said [above](https://github.com/plotly/plotly.js/issues/2355#issuecomment-364464377), we cannot do:\r\n\r\n> Many of these style attributes encode data values so it would not be possible to refer to some (static) style sheet to apply this styling.\r\n\r\nI suppose *theoretically* one could 1) figure out all the styles (colors, line widths, etc - could be many thousands of distinct values) needed for the data in your plot, 2) proxy that through some server to generate a style sheet, 3) apply classes instead of inline styles... but that would be a huge infrastructure cost (we're no longer a pure javascript library but it needs to be connected to a server) and performance cost, and frankly I don't see how that would be more secure - if the concern is that users might find some way to meddle with the javascript to generate malicious styles, this potential system seems like it would offer *more*, not fewer, opportunities for meddling.",
    "created_at": "2018-02-11T15:04:31Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2355#issuecomment-364758070",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2355",
    "updated_at": "2018-02-11T15:04:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Working on this now...\r\n\r\n> Perhaps the easier way to _fix_ this would be the state that `hoverdistance` and `spikedistance` don't apply to trace features that use `Fx.inbox`?\r\n\r\nI think that's right - `hoverdistance` and `spikedistance` should only apply to point-like objects we're hovering on (and I guess line-like, when we implement that #1960). Hovering on areas - be they bars, boxes, scatter fills, heatmaps, contour maps... the rules I think I distill from our existing implementations of this are:\r\n- There's no \"distance\", you're either inside or outside the region.\r\n- Area hovers can't override point hovers.\r\n\r\nCurrently this is done by giving these areas a fictitious distance value that's bigger than `MAXDIST` (still treated as a constant, that needs to change now that `hoverdistance` is variable) but still returning the point. That's fine for hover, but not going to work as expected when this distance is reused for spikes. Also it seems like most of these area hovers should support spikes but some (I'm specifically thinking of scatter fills but perhaps there are others) should not. We'll have to be a little more careful about what these distances mean in order to support these cases.",
    "created_at": "2018-02-11T00:59:59Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2336#issuecomment-364709607",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2336",
    "updated_at": "2018-02-11T00:59:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "FWIW that python example has a bug - looks like the fill is perhaps it's making a convex hull rather than just filling below the line? I haven't looked in enough detail to know whether this is a problem on the python or plotly.js side.\r\n<img width=\"336\" alt=\"screen shot 2018-02-10 at 7 21 10 pm\" src=\"https://user-images.githubusercontent.com/2678795/36067972-dc1fa902-0e97-11e8-912a-623cc167c661.png\">\r\n",
    "created_at": "2018-02-11T00:24:19Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2352#issuecomment-364707830",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2352",
    "updated_at": "2018-02-11T00:24:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Good idea, seems useful. Would it work for you if we added this information to the existing event data, rather than making a new event? So in addition to `points` we'd have `pointsAdded` and `pointsRemoved` perhaps.\r\n\r\nThinking about `plotly_selecting` vs `plotly_selected` - I suppose they should independently manage their added/removed lists, ie `plotly_selecting` would show one point added or removed at a time, but `plotly_selected` would show all changed points since the previous `plotly_selected` event. Sound right?",
    "created_at": "2018-02-11T00:18:01Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2357#issuecomment-364707541",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2357",
    "updated_at": "2018-02-11T00:18:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Likewise, 💃 on the `--` fix and `d3-strict` test 🎉 ",
    "created_at": "2018-02-09T21:29:20Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2339#issuecomment-364573590",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2339",
    "updated_at": "2018-02-09T21:29:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> AFAIK you aren’t restricted to inline CSS even in SVG objects\r\n\r\nI can't tell from that comment what you're proposing we should do?",
    "created_at": "2018-02-09T17:44:29Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2355#issuecomment-364505723",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2355",
    "updated_at": "2018-02-09T17:44:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@chriddyp \r\n\r\n> 1. If the `datarevision` remains the same, can the user omit the data?\r\n> i.e.\r\n> ```\r\n> newPlot(gd, [{'x': [1, 2, 3], 'y': [3, 1, 2]}], {'datarevision': 1})\r\n> react(gd, [{'marker': {'color': 'blue'}}], {'datarevision': 1})\r\n> ```\r\n> Would that work? If so, then Dash users could potentially omit their data from even being transported if it remained the same.\r\n\r\nSounds dangerous to me. In some cases this would work, *if* you insert empty arrays for the data (if you don't even do that, we'll see no array vs used-to-be-an-array and do a recalc regardless of `datarevision`). But if anything else in the diff triggers a `recalc` (like, for example, changing the overall plot size, or autoranging an axis), we'll pick up the omitted data anyway and you're hosed.\r\n\r\n> 2. Does `plotly.react` keep the zoom layer or reset it? i.e. if the user zooms in on a map, and then changes a dropdown, will the graph reset or not? I believe that it should (since that is what `newPlot` currently does).\r\n\r\n`Plotly.react` itself does nothing about the reverse data flow - UI-driven changes to the plot pushing back up into the plot state you're holding onto elsewhere - though since these UI-driven changes mutate `gd.data` and `gd.layout` and *most* of the time these are the same objects you provided with `Plotly.newPlot` (or `Plotly.react`), you may in fact have these changes in your state whether you wanted them or not (probably not with Dash though, as I'm assuming a new plot state coming from Python would generate new `data` and `layout` objects). If you've picked up these changes and included them in the new state you send to `Plotly.react`, then you'll see them persist on the plot. If you haven't, you won't.\r\n\r\n> 3. Do you imagine that `datarevision` will eventually allow specificity of which trace's data changed?\r\n\r\nYes, as mentioned in the opening comment:\r\n\r\n> Note that right now there's no difference in the pathway we'd take for one vs all data arrays changing, but in the future if we implement partial recalc we can make a similar flag for each array, or perhaps each trace.",
    "created_at": "2018-02-09T15:32:51Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2341#issuecomment-364466798",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2341",
    "updated_at": "2018-02-09T15:32:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> neither apply CSS inline in attributes\r\n\r\nThat's the one I'm worried about - if that means that we can't add `style` attributes to our elements, like:\r\n```\r\n<path d=\"M143.61,620V325.5H169.72V620Z\"\r\n    style=\"vector-effect: non-scaling-stroke; opacity: 1; stroke-width: 0px; fill: rgb(31, 119, 180); fill-opacity: 1;\"\r\n></path>\r\n```\r\nthen there's simply no possibility of plotly satisfying this requirement, ever. Many of these style attributes encode data values so it would not be possible to refer to some (static) style sheet to apply this styling.\r\n\r\nWe could get rid of `Lib.addStyleRule` but if that just pushes the error down to element style attributes, there's no point.",
    "created_at": "2018-02-09T15:24:20Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2355#issuecomment-364464377",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2355",
    "updated_at": "2018-02-09T15:24:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "`histfunc` needs a second data array (provided as `y` in this case) to aggregate within each bin. Thanks for mentioning it, we should clarify this in the docs.",
    "created_at": "2018-02-09T14:36:55Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2356#issuecomment-364450787",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2356",
    "updated_at": "2018-02-09T14:36:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "It's not entirely clear to me\r\na) what risks this rule is trying to mitigate, and\r\nb) exactly which practices of ours would need to change to satisfy this rule.\r\nCan you clarify?\r\n\r\nIf it's just using javascript to create and fill a `<style>` tag that's a problem (that's what [`Lib.addStyleRule`](https://github.com/plotly/plotly.js/blob/master/src/lib/index.js#L601) is about) we could presumably stop using this - there's a [fairly small](https://github.com/plotly/plotly.js/blob/master/build/plotcss.js) set of rules we apply - and just apply these styles directly to the elements that need them.",
    "created_at": "2018-02-09T14:32:29Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2355#issuecomment-364449535",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2355",
    "updated_at": "2018-02-09T14:32:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Re: image diffs - I can't tell why [`gl3d_ribbons`](https://6629-45646037-gh.circle-artifacts.com/0/var/www/streambed/image_server/plotly.js/build/test_images/gl3d_ribbons.png) [changed](https://6629-45646037-gh.circle-artifacts.com/0/var/www/streambed/image_server/plotly.js/build/test_images_diff/diff-gl3d_ribbons.png)... looks like a subpixel change but I don't know what caused it. But I think `gl2d_axes_labels2` was incorrect before and is more correct now ([diff](https://6629-45646037-gh.circle-artifacts.com/0/var/www/streambed/image_server/plotly.js/build/test_images_diff/diff-gl2d_axes_labels2.png) / [new](https://6629-45646037-gh.circle-artifacts.com/0/var/www/streambed/image_server/plotly.js/build/test_images/gl2d_axes_labels2.png)) (it has fill to zero so the autorange should go to zero. The autorange actually goes a little past zero now, rather than ending exactly at zero as it does with regular `scatter`, but the x axis is also a little different in the two cases. Again I'm not sure what I did that changed it though...",
    "created_at": "2018-02-08T23:10:05Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2341#issuecomment-364280378",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2341",
    "updated_at": "2018-02-08T23:10:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@saimaparveen you can use `layout.hovermode: 'closest'`. We should really just make that the default (see #778) but you're right that in this particular case, there's no reason `hovermode: 'x'` should move the hover label way out there. I'll make a new issue for it so it doesn't get lost in this closed issue.",
    "created_at": "2018-02-07T14:49:38Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/80#issuecomment-363791924",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/80",
    "updated_at": "2018-02-07T14:49:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for the report. This specific manifestation indeed came in with #2227 though I suspect you could have caused the same failure in other ways before that.",
    "created_at": "2018-02-07T14:38:52Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2347#issuecomment-363788622",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2347",
    "updated_at": "2018-02-07T14:38:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "- change `showlegend` to `legend.visible` in line with most of our other containers. So the rule would be: if attributes are grouped in a container describing an object, the container should have a `visible` attribute inside, but visibility of features without their own containers continue to get `show*` attributes. (As mentioned in #2341)",
    "created_at": "2018-02-07T14:09:23Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/420#issuecomment-363779742",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/420",
    "updated_at": "2018-02-07T14:09:23Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard I still don't understand why I have this big `package-lock` diff - I can remove it from the PR, but I'd much rather get to a situation where I'm *not* constantly generating a different one from what's in the repo...",
    "created_at": "2018-02-07T03:50:02Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2341#issuecomment-363648426",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2341",
    "updated_at": "2018-02-07T03:50:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice - slowly getting all these trace types up to par with each other. 💃  ",
    "created_at": "2018-02-06T19:36:14Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2327#issuecomment-363539558",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2327",
    "updated_at": "2018-02-06T19:36:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> should `hovermode: 'x'` for subplot types without and x-axis behave like `hovermode: 'closest'` or like `hovermode: false`?\r\n\r\nI think anything that's not explicitly `hovermode: false` should behave like `'closest'` on subplots where compare mode doesn't make sense.",
    "created_at": "2018-02-06T19:09:27Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2339#issuecomment-363531321",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2339",
    "updated_at": "2018-02-06T19:09:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Great, was hoping it would be that simple - does this fix the hover labels too?\r\n\r\nA `d3-strict` test could work - if setting `transform` check that `--` doesn't appear in the string?",
    "created_at": "2018-02-06T18:54:17Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2339#issuecomment-363526552",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2339",
    "updated_at": "2018-02-06T18:54:17Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for the report. Seems to happen as soon as the legend gets a scrollbar.",
    "created_at": "2018-02-06T13:49:42Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2337#issuecomment-363427403",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2337",
    "updated_at": "2018-02-06T13:49:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for the report. `bar` with `spikelines` works through v1.32 but breaks in v1.33",
    "created_at": "2018-02-06T13:39:34Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2336#issuecomment-363424743",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2336",
    "updated_at": "2018-02-06T13:39:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for the report.\r\ncc @dfcreative - overlaid scatter and scattergl is beautiful - you can't do *that* in v1.31, but you *can* have horizontal and vertical lines...",
    "created_at": "2018-02-05T22:36:13Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2335#issuecomment-363245023",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2335",
    "updated_at": "2018-02-05T22:36:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "https://github.com/plotly/plotly.js/commit/8ae2d0e0acc669f8e097cc4e9353e85e3e34ed1c looks great, thanks for the tests 🔒 \r\nDo you want to extend `surface` to support `text` as a single string now too, so it matches the new `mesh3d.text`, or leave that in an issue?",
    "created_at": "2018-02-05T20:31:56Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2327#issuecomment-363212130",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2327",
    "updated_at": "2018-02-05T20:31:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Would this replace the existing system entirely, or only be used on multirange selection axes while the existing system continues to be used for a single selection range?\r\n\r\nYour proposal is totally fine for UI-driven selection (which is 99% of the usage anyway, right?), as well as API selection on categorical axes. The only case that bothers me a little is API selection on continuous axes, as it would be possible to include or exclude points near the edge improperly. But if we could keep the existing higher-precision version on single-range axes - which is normally all you use on continuous axes anyway - and use the pixel-based version only for the axes using multirange selection, I'd have no qualms about it.\r\n\r\nThat said it's a fairly unusual case and a fairly minor effect I'm discussing, so if it's not possible or too big a performance hit to do both, I'd also be OK with just explicitly documenting the limitation.",
    "created_at": "2018-02-04T22:04:17Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2331#issuecomment-362943859",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2331",
    "updated_at": "2018-02-04T22:04:17Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yes, this is intentional. Thanks for pointing it out, we'll clarify this in the docs. The event data for `restyle` and `relayout` events shows exactly what was sent to `Plotly.restyle`/`Plotly.relayout` - that is, only the quantities we directly changed. Anything we didn't change (in your case, the xaxis range) will not show up, nor will anything that changed *indirectly* as a result (for example, when `yaxis.range` changes, `yaxis.autorange` is automatically set to `false` but this is not reported in the event data either).",
    "created_at": "2018-02-04T19:16:16Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2330#issuecomment-362931684",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2330",
    "updated_at": "2018-02-04T19:16:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Not sure how much you want to let this PR expand, but here's a definitely-a-bug that popped up as I was trying out your PR: `hoverinfo` has the wrong `editType`:\r\n`Plotly.restyle(gd,{hoverinfo:'x+y'})`\r\ndoes not update the displayed hover info for mesh3d. If you follow it with\r\n`Plotly.redraw(gd)`\r\nor include something else in the restyle though, it does, like\r\n`Plotly.restyle(gd,{hoverinfo:'x+text',text:'AAAAAAAH'})`\r\n\r\nAlso it looks like `surface` doesn't support `text` as a single string (only as an array) and both `surface` and `scatter3d` have the same `hoverinfo` restyle problem as `mesh3d`.",
    "created_at": "2018-02-04T18:57:04Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2327#issuecomment-362930305",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2327",
    "updated_at": "2018-02-04T18:57:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Very nice - 💃 . Some good cleanup in here as well 🎁 ",
    "created_at": "2018-02-04T18:14:51Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2329#issuecomment-362927107",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2329",
    "updated_at": "2018-02-04T18:14:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃  once we figure out package-lock. Very nice test cases!",
    "created_at": "2018-02-04T17:55:44Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2314#issuecomment-362925760",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2314",
    "updated_at": "2018-02-04T17:55:44Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Here's a default header for the dragging interactions. If the approach looks good, please tell me and I'll add a test case for it.\r\n\r\n😍 ",
    "created_at": "2018-02-03T21:43:14Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2314#issuecomment-362856798",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2314",
    "updated_at": "2018-02-03T21:43:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice! So previously we had:\r\n```\r\nExecuted 2382 of 2454 (skipped 72)\r\n```\r\n\r\nNow we have:\r\n```\r\nExecuted 2326 of 2452 (skipped 126)  // jasmine\r\nExecuted 81 of 2452 (skipped 2371)   // jasmine2, (gl)\r\n```\r\nie total 45 skipped, or 27 more tests than we used to run on CI 🎉 \r\n\r\nMost of those are mapbox, so there are just a few that we might want to continue to investigate later.\r\n\r\nNo changes from me, this looks great! 💃 ",
    "created_at": "2018-02-02T22:34:37Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2328#issuecomment-362727995",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2328",
    "updated_at": "2018-02-02T22:34:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks great, lets do it! 💃 ",
    "created_at": "2018-02-01T23:58:58Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2323#issuecomment-362441958",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2323",
    "updated_at": "2018-02-01T23:58:58Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Missing headers can certainly be handled in a separate PR, up to you whether to do that here or separately. I do think we want that done before we roll out the new editor to the workspace, but aside from that there's probably no rush.",
    "created_at": "2018-01-31T22:20:19Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2314#issuecomment-362090564",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2314",
    "updated_at": "2018-01-31T22:20:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I definitely think we should be able to show a table with no header - I don't know why people would do it, but I'm sure they will at some point 😈 \r\n\r\nIdeally I feel like it should not even show the header, just the cells, though since the header also has a UI function that we don't want to lose, perhaps we could just make it blank and reduce its height to something like 5 px?",
    "created_at": "2018-01-31T21:27:23Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2314#issuecomment-362076181",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2314",
    "updated_at": "2018-01-31T21:27:23Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yes, this is a good way to handle it. Are there any other attributes that might cause problems if they're missing? Is it OK to have cells with no header?\r\n\r\nCan you add a test for this? Just that no errors are thrown and the headers are displayed?",
    "created_at": "2018-01-31T21:03:43Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2314#issuecomment-362069699",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2314",
    "updated_at": "2018-01-31T21:03:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "LGTM! Only thing that occurs to me is we could balance the containers a bit more, perhaps taking the bundle tests out of jasmine and lumping with syntax, that would save another minute or two. But not a big deal, this is already a big win! 💃 ",
    "created_at": "2018-01-31T14:35:40Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2310#issuecomment-361950429",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2310",
    "updated_at": "2018-01-31T14:35:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> One additional comment: why did the airfoil baseline change exactly?\r\n\r\nBecause the streamlines and pressure contours weren't supposed to have legend entries at all, they're regular contours, not constraints. I suppose we could make it possible to give legend entries for contour plots with no colorscale, but that's not in scope here.",
    "created_at": "2018-01-30T19:25:03Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2270#issuecomment-361705560",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2270",
    "updated_at": "2018-01-30T19:25:03Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> It seems that test \"select box and lasso per trace\" fails. I have no idea why.\r\n\r\nSeems to be a bad day for that test. You didn't break it, it's just glitchy.\r\n\r\n💃 - once tests pass I'll merge this. Thanks for your work @krassowski!",
    "created_at": "2018-01-30T17:43:33Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2305#issuecomment-361674361",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2305",
    "updated_at": "2018-01-30T17:43:33Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "- [x] tests\r\n- [x] verify manually on an actual iPad\r\n\r\nAlso two questions:\r\n- we have `event.preventDefault()` in a few places, but then we also have `Lib.pauseEvent(event)` which does other things as well... are there browsers that still need this (in which case we should use it everywhere) or is `preventDefault` now sufficient on every platform we support?\r\n  - Corollary to that, and nothing to do with this PR but I'm curious - why do I see a couple of `d3.event.preventDefault()` but other places `d3.event.sourceEvent.preventDefault()` - is one pattern broken, are these different in some way that we need the different syntax, or can we simplify the latter?\r\n- Is `gl2d/camera` still in use anywhere, and if so, does it need this treatment as well?",
    "created_at": "2018-01-25T23:32:24Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2296#issuecomment-360636115",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2296",
    "updated_at": "2018-01-30T01:03:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "OK great. Sorry for the trouble, I didn't realize anyone was using axes this way...",
    "created_at": "2018-01-29T19:19:46Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2301#issuecomment-361355574",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2301",
    "updated_at": "2018-01-29T19:19:46Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @LiteracyFanatic - This seems to have been broken for a while, prior to v1.28 it works. Possibly broke in #1783?",
    "created_at": "2018-01-29T13:52:41Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2303#issuecomment-361251392",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2303",
    "updated_at": "2018-01-29T13:52:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "ugh, thanks @krassowski - I'd be in favor of just dropping timezone. @etpinard OK?",
    "created_at": "2018-01-29T13:47:37Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2302#issuecomment-361250015",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2302",
    "updated_at": "2018-01-29T13:47:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for the codepen examples! Looks like you're referring to the titles for `xaxis3` and `xaxis5` being ignored? I'm afraid this is an intentional result of #2227 - you don't reference these axes with any traces, and as of that change we simply stop creating any subplots for axes that don't have any data (or other components like annotations or shapes) referencing them; with no subplots, we don't create any titles, ticks, or tick labels either.\r\n\r\nIf you're using these axes just to get labels positioned where you want them, can you make them with annotations instead? Those should actually be quite a bit easier to use (and more flexible) for this purpose anyway. Something like:\r\n```js\r\nvar layout = {\r\n    ...\r\n    annotations: [{\r\n        text: 'By Radius',\r\n        xref: 'paper',\r\n        yref: 'paper',\r\n        xanchor: 'center',\r\n        yanchor: 'bottom',\r\n        x: 0.875,\r\n        y: 1.01,\r\n        showarrow: false,\r\n        font: {size: 14}\r\n    }]\r\n};\r\n```",
    "created_at": "2018-01-28T03:41:38Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2301#issuecomment-361035870",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2301",
    "updated_at": "2018-01-28T03:41:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @SafwanAhmad - seems to me this is also problematic as we need MathJax to render SVG, while nbconvert wants HTML. I guess we will need to do some gymnastics to figure out whether anyone else on the page needs MathJax, and work around that. It's not obvious to me how to tell whether MathJax is configured for SVG or some other output, but I assume there's a way...\r\n\r\nOne possible short-term workaround, if you want LaTeX in your page but don't need it in your plotly plots, we could try and find a way to short-circuit Plotly's MathJax config, or at least defer it until it's actually invoked.",
    "created_at": "2018-01-26T23:09:09Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2300#issuecomment-360930176",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2300",
    "updated_at": "2018-01-26T23:09:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 ",
    "created_at": "2018-01-26T22:04:55Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2295#issuecomment-360917169",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2295",
    "updated_at": "2018-01-26T22:04:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Right, it's a little difficult, but if we're fixing a bug we really should *try* to find a way to test it. Two ideas come to mind:\r\n- attach an event handler to some parent element for the event (touchmove?) that would have led to scrolling, and verify that this handler is not called (but before the fix it is called)\r\n- hold on to the touchmove event we generate, inspect it afterward and make sure it had preventdefault called on it.\r\n\r\nThanks for looking into `pauseEvent` - indeed it looks safe to 🔪 , wouldn't need to happen in this PR but you're welcome to if you feel like it.",
    "created_at": "2018-01-26T22:01:01Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2296#issuecomment-360916337",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2296",
    "updated_at": "2018-01-26T22:01:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I pulled the latest and it does seem to fix this bug in heatmaps. However it seems to have introduced a new bug.\r\n\r\nYikes, that's no good! Please open a new issue though, as it does not look related to the heatmap issue, must have been introduced by something else that happened in the same release.",
    "created_at": "2018-01-26T13:59:29Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2233#issuecomment-360791632",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2233",
    "updated_at": "2018-01-26T13:59:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Interestingly `Plotly.restyle(gd, {\"marker.opacity\": 0.1});` seems to work fine, as does the `trace.opacity` attribute on the initial draw - it's just `Plotly.restyle(gd, {\"opacity\": 0.1});` that fails.\r\n\r\n@dfcreative you probably just have to explicitly define `opacity` in `scattergl/attributes`, like we do in eg [`surface/attributes`](https://github.com/plotly/plotly.js/blob/f48d03ec5da0219419faac55366646479931d65d/src/traces/surface/attributes.js#L226) so you can get `editType: 'calc'` instead of `editType: 'style'` that you get from the base [opacity attribute](https://github.com/plotly/plotly.js/blob/f48d03ec5da0219419faac55366646479931d65d/src/plots/attributes.js#L55). And assuming that fixes it, take a quick spin through the rest of those base attributes and see if anything else is broken the same way.",
    "created_at": "2018-01-25T23:53:59Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2299#issuecomment-360640129",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2299",
    "updated_at": "2018-01-25T23:53:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice, can't argue with the 🐎 ! Only suggestion would be 🌴  something like\r\n```js\r\nselectedOptions = makeModifiedMarkerOptions(trace.selected.marker, markerOpts);\r\nunselectedOptions = makeModifiedMarkerOptions(trace.unselected.marker, markerOpts);\r\n```",
    "created_at": "2018-01-25T23:11:34Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2295#issuecomment-360631780",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2295",
    "updated_at": "2018-01-25T23:11:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃  from my side, but I'd like to hear from @nicolaskruchten whether this accomplished the goal.",
    "created_at": "2018-01-25T22:46:35Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2293#issuecomment-360626268",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2293",
    "updated_at": "2018-01-25T22:46:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@nicolaskruchten @dfcreative you guys have been tweaking our webpack compatibility - care to comment here?",
    "created_at": "2018-01-25T20:35:36Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2294#issuecomment-360592301",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2294",
    "updated_at": "2018-01-25T20:35:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@jackparmer we have `layout.colorway` now https://github.com/plotly/plotly.js/pull/2156 - not separate colorways for each pie, but I think this is clearer anyway 99% of the time. Feel free to reopen if you think this isn't sufficient.",
    "created_at": "2018-01-25T20:21:05Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1617#issuecomment-360588562",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1617",
    "updated_at": "2018-01-25T20:21:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "closed, probably by #2218 ",
    "created_at": "2018-01-25T20:07:18Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/779#issuecomment-360584929",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/779",
    "updated_at": "2018-01-25T20:07:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "fixed, probably by #2218 ",
    "created_at": "2018-01-25T20:04:21Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/803#issuecomment-360584157",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/803",
    "updated_at": "2018-01-25T20:04:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "(cleaning up old bugs)\r\n\r\n@fhurta is correct here - `data.xvals` is the cursor position (on whatever x axes exist on this subplot) whereas `data.points` shows the point(s) we found in data traces to hover on. I don't think there's a bug here.",
    "created_at": "2018-01-25T19:54:00Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/912#issuecomment-360581205",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/912",
    "updated_at": "2018-01-25T19:54:00Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This seems to have been solved, partially by #2227 and partially by something before it.",
    "created_at": "2018-01-25T19:27:05Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1218#issuecomment-360573256",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1218",
    "updated_at": "2018-01-25T19:27:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Still a problem as of FF58",
    "created_at": "2018-01-25T17:30:21Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1628#issuecomment-360539567",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1628",
    "updated_at": "2018-01-25T17:30:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Seems to have been solved, probably by #2227 ",
    "created_at": "2018-01-25T16:54:38Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1760#issuecomment-360528729",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1760",
    "updated_at": "2018-01-25T16:54:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I can't reproduce this bug anymore, even in FF55. Can we close it? Of course the goal of removing `getBoundingClientRect` still stands, but the other issues should serve as impetus for that.",
    "created_at": "2018-01-25T16:50:21Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2003#issuecomment-360527450",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2003",
    "updated_at": "2018-01-25T16:50:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "We hit a snag actually publishing to npm and our CDN (may not happen until Monday), but if you just want the built files, these have been updated and you can download them from https://github.com/plotly/plotly.js/tree/master/dist",
    "created_at": "2018-01-25T02:18:45Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2233#issuecomment-360339594",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2233",
    "updated_at": "2018-01-25T02:18:45Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "v1.33.1 will be published later this afternoon including this fix. Until then you can build your own bundle from the master branch.",
    "created_at": "2018-01-24T20:37:18Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2233#issuecomment-360265448",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2233",
    "updated_at": "2018-01-24T20:37:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Not relevant to this PR, but is that fine that hover labels appear at different positions than with `contour`\r\n\r\nI believe this behaves as expected. For a heatmap, the hover label should not point to the data value but to the edge of the brick, whereas contour map labels should point exactly to the data value.\r\n\r\nHeatmaps you're defining, either implicitly or explicitly, bricks of a certain value, and you're saying \"this is the value that applies to this brick\". That metaphor gets a little bit muddied by smoothing the heatmap, but that's the idea anyway. Whereas with contour maps, you're implying that there's some continuous function and you've only sampled it at certain locations, the data points, but it has a distinct value at every (x,y) pair. But we don't extrapolate beyond the range of the data, even as far as the edge of the corresponding heatmap brick.",
    "created_at": "2018-01-24T19:39:57Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2288#issuecomment-360249631",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2288",
    "updated_at": "2018-01-24T19:39:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> is that ok that we see `NaN` in empty blocks?\r\n\r\nI think so - it's certainly better than saying `0`. Might be nice to be able to customize what NaN displays as, but this is a reasonable default I think. See also #975",
    "created_at": "2018-01-24T19:30:08Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2288#issuecomment-360246781",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2288",
    "updated_at": "2018-01-24T19:30:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Is there an issue for implementing the full autoranging behaviour for carpet axes titles/labels?\r\n\r\nGood point, no, but now there is -> https://github.com/plotly/plotly.js/issues/2289",
    "created_at": "2018-01-24T15:44:18Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2285#issuecomment-360176217",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2285",
    "updated_at": "2018-01-24T15:44:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I'm guessing you are in the default \"compare data on hover\" mode (`layout.hovermode: 'x'`), which only pays attention to the X position of the mouse so it can compare multiple traces at that same X value. \"show closest data on hover\" (`layout.hovermode: 'closest'`) is probably what you want.\r\n\r\nThis has generated a lot of confusion, we've long talked about making a smarter default - eg #778 ",
    "created_at": "2018-01-24T15:08:07Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2287#issuecomment-360164462",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2287",
    "updated_at": "2018-01-24T15:08:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yes, definitely in scope. We may not get to it for a while but we'd happily review a PR to add it!",
    "created_at": "2018-01-24T01:45:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2286#issuecomment-359992896",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2286",
    "updated_at": "2018-01-24T01:45:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@bpostlethwaite ready for review",
    "created_at": "2018-01-24T01:36:00Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2285#issuecomment-359991389",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2285",
    "updated_at": "2018-01-24T01:36:00Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "ah shoot, the failing `airfoil` mock pointed out that this doesn't work with `showticklabels: 'none'` - hold on, a little more work to do...",
    "created_at": "2018-01-23T22:06:04Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2285#issuecomment-359947352",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2285",
    "updated_at": "2018-01-23T22:06:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": ">  is that correct that the legend shows an empty trace?\r\n\r\nYes, trace 1 has `mode: 'lines', line: {width: 0}`, rendering it invisible (could have just done `mode: 'none'` like trace 2 but without the `fill`, but this works too)",
    "created_at": "2018-01-23T18:43:41Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2280#issuecomment-359889258",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2280",
    "updated_at": "2018-01-23T18:43:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "good catch 💃 ",
    "created_at": "2018-01-23T18:36:35Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2283#issuecomment-359887098",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2283",
    "updated_at": "2018-01-23T18:36:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for the very clear report @ChristofferHS 🏆  I used it almost verbatim in testing my fix -> #2280 ",
    "created_at": "2018-01-23T03:52:43Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2271#issuecomment-359668451",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2271",
    "updated_at": "2018-01-23T03:52:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@dfcreative 5th time's a charm 🙃  Lets get #2278 or some squashed version merged ASAP and 🙏  our tests get more reliable!",
    "created_at": "2018-01-23T03:11:17Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2279#issuecomment-359661245",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2279",
    "updated_at": "2018-01-23T03:11:17Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃  - hope this helps!\r\nThis includes #2267 right? If you want to make one squashed PR that supersedes both of these, that's fine by me.",
    "created_at": "2018-01-22T22:11:29Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2278#issuecomment-359586493",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2278",
    "updated_at": "2018-01-22T22:11:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @step42 - this is indeed #2265 (`fixedrange`) as I mentioned in my first comment - click is emitted if you remove `xaxis.fixedrange` (`yaxis.fixedrange` is set `true` by default since you have a `rangeslider`)\r\n\r\nYou can load old versions from the CDN like:\r\n`<script src=\"https://cdn.plot.ly/plotly-1.31.0.min.js\"></script>`",
    "created_at": "2018-01-22T20:35:05Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2272#issuecomment-359556073",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2272",
    "updated_at": "2018-01-22T20:35:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Beautiful, thanks! 💃 ",
    "created_at": "2018-01-22T18:00:47Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2267#issuecomment-359510624",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2267",
    "updated_at": "2018-01-22T18:00:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "If it's purely a plotly.js issue, it should be possible to recreate it from the plot's `data`, `layout`, and if necessary `config`. You can pull these out in the console and insert them in a codepen:\r\n```js\r\n// get the graph DOM element (if you only have one Plotly plot on the page)\r\nvar gd = document.querySelector('.js-plotly-plot')\r\n\r\n// get the data and layout - this is basically equivalent to:\r\n// JSON.stringify({data: gd.data, layout: gd.layout})\r\nconsole.log(Plotly.Plots.graphJson(gd))\r\n\r\n// if you gave the plot a custom config parameter, we may need that too\r\nconsole.log(JSON.stringify(gd._context))\r\n\r\n// you can copy both of those into a codepen and remake the identical plot\r\nvar fig = {\"data\": [...], \"layout\": {...}}\r\nvar config = {\"staticPlot\": false, ...}\r\nPlotly.newPlot(gd, fig.data, fig.layout, config)\r\ngd.on('plotly_click', function(e) { console.log('click', e) });\r\n```\r\n\r\nIf the problem still shows up, then great! I can take a look at it. If not, this is also useful, it shows that there's something interfering at the application level.",
    "created_at": "2018-01-22T17:30:47Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2272#issuecomment-359501449",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2272",
    "updated_at": "2018-01-22T17:30:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Or maybe merge the whole `Modules` section with `dist/README.md` into a file dedicated to building & bundling the library ?\r\n\r\nI like the idea of pulling build info out into a separate file. I'd leave `dist/README.md` as it is, since it's all about the pre-built, ready-to-use files, and I'd leave the note/link about partial bundles in the main readme (might even reorganize to bring that and the CDN links a little higher up, but that's a separate issue). But a separate file on making custom builds and using them with various pipelines would be great, then we can go into all necessary details without getting people bogged down while they're perusing the top-level readme. How about just `/BUILDING.md`?",
    "created_at": "2018-01-22T17:07:52Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2260#issuecomment-359494619",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2260",
    "updated_at": "2018-01-22T17:07:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Good catch, thanks!",
    "created_at": "2018-01-22T14:07:12Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2276#issuecomment-359432886",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2276",
    "updated_at": "2018-01-22T14:07:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@TomDemulierChevret looks great - thanks for the fixes, and the new test covers it all nicely.\r\n\r\nI'm re-running the tests - we've had a lot of spurious failures lately just when running the tests on CI, we're working on making those more robust - assuming it passes (eventually) I think this is ready to go! 💃 \r\n\r\nI'm going to wait a few days before merging, in case we need a patch release since we just put out several major new features. But yes, this will be in `1.34.0` 🎉 ",
    "created_at": "2018-01-22T13:48:44Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2261#issuecomment-359428041",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2261",
    "updated_at": "2018-01-22T13:48:44Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The `_` attributes are derived items for internal use, not to be used as part of the API, so we wouldn't directly extend any of those.\r\n\r\nThere's nothing ordered about the subplots so we could make a data structure like:\r\n```js\r\nsubplots: {\r\n    xy: {bgcolor: 'red', hovermode: 'closest'},\r\n    xy2: {bgcolor: 'green', hovermode: 'x'},\r\n    x2y: {bgcolor: 'blue', hovermode: 'y'}\r\n}\r\n```\r\n\r\nAlternatively we could make it an array, which would be a little easier to square with our validation system:\r\n```js\r\nsubplots: [\r\n    {id:'xy', bgcolor: 'red', hovermode: 'closest'},\r\n    {id: 'xy2', bgcolor: 'green', hovermode: 'x'},\r\n    {id: 'x2y', bgcolor: 'blue', hovermode: 'y'}\r\n]\r\n```\r\nThat said, we do have variable-name attribute containers (`xaxis2`, `scene4`) so we should be able to make the first one work, and I like the simplicity and inherent freedom from duplication. For example, to change the background color of `xy2` you would just do:\r\n`Plotly.relayout(gd, {'subplots.xy2.bgcolor': 'red'})`\r\nrather than having to know which entry is `xy2` and do\r\n`Plotly.relayout(gd, {'subplots[1]bgcolor': 'red'})`\r\n\r\nBefore you do much work on this though, I'd like to get @etpinard 's opinion on the API, and he's out for the next week.",
    "created_at": "2018-01-22T02:45:49Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2274#issuecomment-359310606",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2274",
    "updated_at": "2018-01-22T02:45:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I guess `hovermode` actually controls two pieces of behavior:\r\n- Can you get multiple labels, or at most only one? (`x/y`: multiple, `closest`: one)\r\n- Which coordinates are used to determine distance to data points? (`x`: x, `y`: y, `closest`: both)\r\n\r\nIf we wanted this to be a per-trace attribute, we'd have to split those two apart, as the former isn't about the behavior of a single trace at all. But it strikes me as potentially confusing to have each trace behave differently in this regard.\r\n\r\nWe have discussed possible per-*subplot* control over hovermode, though we have no concrete plans to implement it. For example this plot might want `closest` in the main subplot, `x` on top, and `y` on the right:\r\n![screen shot 2018-01-21 at 1 29 29 pm](https://user-images.githubusercontent.com/2678795/35197575-3f0246a4-feaf-11e7-8661-83b481d1dff1.png)",
    "created_at": "2018-01-21T18:39:02Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2274#issuecomment-359269961",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2274",
    "updated_at": "2018-01-21T18:39:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Oh sure - please don't take my closing the issue as an indication you were wrong to open it, just that it has the same cause as another issue so I combined them. This is a tricky one, so I'm glad @cldougl steered you here.",
    "created_at": "2018-01-21T04:39:15Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2275#issuecomment-359223524",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2275",
    "updated_at": "2018-01-21T04:39:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Is this using the default `hovermode='x'` (\"Compare data on hover\" in the modebar)? You may have better luck with `hovermode='closest'` (\"Show closest data on hover\"), which I'm starting to think should be often or always the default...\r\n\r\nWhen you use horizontal *bar* traces, we turn compare into `hovermode='y'`, ie compare values with the same y value across multiple traces - which behaves as you seem to have in mind. We don't do that for scatter traces - I'm not sure we could find a robust condition indicating that we should make this switch. You can enable it explicitly with `Plotly.relayout(gd,{hovermode: 'y'})`, though if the user changes hovermode from the modebar it would revert.",
    "created_at": "2018-01-21T03:47:44Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2274#issuecomment-359221665",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2274",
    "updated_at": "2018-01-21T03:47:44Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @LarryMartell - I believe this is another manifestation of #2233 - see specifically https://github.com/plotly/plotly.js/issues/2233#issuecomment-355374410 - we're confusing the brick center and the data point, when bricks are nonuniform sizes.",
    "created_at": "2018-01-21T03:27:01Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2275#issuecomment-359220939",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2275",
    "updated_at": "2018-01-21T03:27:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Great, I'll merge it. As the whole initial render of any chart happens in our image tester and test dashboard with `d3.event=null`, I can't see much that we could be missing by allowing this exception as it is here, and I'd rather not accidentally break any other acceptable uses by trying to be overly cautious.",
    "created_at": "2018-01-21T03:07:38Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2273#issuecomment-359220295",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2273",
    "updated_at": "2018-01-21T03:07:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "OK, I'm going to need a bit more information than that - generally as far as I can tell bar charts do still support `plotly_click`. Please see if you can demonstrate the issue in a codepen or some other platform where I can see it in action.",
    "created_at": "2018-01-20T01:22:08Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2272#issuecomment-359132915",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2272",
    "updated_at": "2018-01-20T01:22:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@step42 What's on your plot? I'm aware of #2265 if you've got fixed range axes. There's also a new version 1.33 out yesterday, can you check with the latest release?",
    "created_at": "2018-01-19T22:42:41Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2272#issuecomment-359110240",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2272",
    "updated_at": "2018-01-19T22:42:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "cc @JonasGutermuth @jdugge - at some point we'll need a more formal process for communicating new translation keys, but for now since we only have a few languages this'll do. Care to translate \"Click to enter radial axis title\" (new with polar 2.0 #2200) and \"new text\" (for blank annotations, I missed this in my initial string wrapping push) to German?",
    "created_at": "2018-01-19T22:36:31Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2268#issuecomment-359109007",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2268",
    "updated_at": "2018-01-19T22:36:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @dfcreative - is there a test we can add that shows that this fixes the bug?",
    "created_at": "2018-01-19T21:28:40Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2267#issuecomment-359094020",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2267",
    "updated_at": "2018-01-19T21:28:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Good call @n-riesco - the first part we have (`npm run find-strings`, it's part of the build process too, so [translation-keys.txt](https://github.com/plotly/plotly.js/blob/master/dist/translation-keys.txt) is updated with every new release) but we don't have a way to compare that to existing translations and see what's missing, that would be really nice to have.",
    "created_at": "2018-01-19T20:45:41Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2269#issuecomment-359084138",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2269",
    "updated_at": "2018-01-19T20:45:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ah yep, that probably came in with #2241 - thanks for the report.",
    "created_at": "2018-01-18T23:57:16Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2265#issuecomment-358821975",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2265",
    "updated_at": "2018-01-18T23:57:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Very impressive @dfcreative - that's a lot of issues closed in one PR #2258!\r\n\r\nI still think there's a discussion to be had about whether we want selection in one subplot to clear selections in another, but that's for another time.",
    "created_at": "2018-01-18T23:55:27Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2262#issuecomment-358821646",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2262",
    "updated_at": "2018-01-18T23:55:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "nonblocking https://github.com/plotly/plotly.js/pull/2264#discussion_r162461911, looks great 💃 ",
    "created_at": "2018-01-18T20:37:12Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2264#issuecomment-358774067",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2264",
    "updated_at": "2018-01-18T20:37:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I'm not 100% sure what the right behavior is here, it may be that we need several different ways for this to work. For example, if you have independent data in each subplot, it would be nice to be able to select points from different subplots together. But if the subplots are coupled (like a SPLOM showing slices of higher-dimensionality data eg https://rreusser.github.io/plotly-mock-viewer/#18) it can be nice to have one subplot in control of the others - whether we do it automatically or through some layered-on crossfilter functionality. Though even in that case being able to multiselect across subplots could be cool, as a way to select a sub-population that might not be disjoint within any single subplot.\r\n\r\nAnyway, it's clear that this is going to be a bit of a complex issue if we want to fully exploit the possibilities. We could certainly start with a bugfix that doesn't allow multi-subplot select, and just clears any selection in other subplots when you start a new selection, along with fixing the transform issue that kicked this off.",
    "created_at": "2018-01-18T19:53:14Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2262#issuecomment-358762337",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2262",
    "updated_at": "2018-01-18T19:53:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice find! For perf though, I suspect this just needs to be moved outside the `enter()` where we had it [originally](https://github.com/plotly/plotly.js/pull/2263/files#diff-8c5d8f688f2bb41a18d35397e5f58864L71), to just `outlines.attr('transform', ...)` like you added, but doesn't need to be called in `moveFn` (which is called repeatedly on mousemove).\r\n\r\nAlso we may want to leave #2262 open until we figure out what we want to do with https://github.com/plotly/plotly.js/issues/2262#issuecomment-358737387",
    "created_at": "2018-01-18T18:32:50Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2263#issuecomment-358739255",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2263",
    "updated_at": "2018-01-18T18:32:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Good catch @paulsputer ! Looks though like the problem is a bit deeper than that - points selected in one subplot keep their selected/deselected styling until you explicitly double click in *that* subplot. I don't think that's what we want, unless you multi-select, right?\r\n\r\n![subplot selection](https://user-images.githubusercontent.com/2678795/35114463-db8e3b4a-fc52-11e7-9c5b-d2838fd79224.gif)\r\n\r\n\r\ncc @etpinard @dfcreative ",
    "created_at": "2018-01-18T18:26:25Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2262#issuecomment-358737387",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2262",
    "updated_at": "2018-01-18T18:26:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@TomDemulierChevret are you able to get the tests to run locally? It looks like [`axes_test`](https://github.com/plotly/plotly.js/blob/master/test/jasmine/tests/axes_test.js) and [`lib_date_test`](https://github.com/plotly/plotly.js/blob/master/test/jasmine/tests/lib_date_test.js) are both failing, @etpinard probably had the right idea there. We should also add a couple of explicit tests in [`localize_test`](https://github.com/plotly/plotly.js/blob/master/test/jasmine/tests/localize_test.js) to cover the newly added fields.\r\n\r\nYou can run just these three suites with the command:\r\n`npm run test-jasmine -- axes lib_date localize`",
    "created_at": "2018-01-18T18:11:02Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2261#issuecomment-358732952",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2261",
    "updated_at": "2018-01-18T18:11:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This kind of question is better asked at [community.plot.ly](https://community.plot.ly), but the easiest options are to explicitly set `xaxis.range` or if you want it to stay autoranged but always put zero on the left, perhaps `xaxis.rangemode: 'tozero'` would work for you.",
    "created_at": "2018-01-17T15:07:26Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2256#issuecomment-358333022",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2256",
    "updated_at": "2018-01-17T15:07:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for your help @i-mozo 🎁 ",
    "created_at": "2018-01-17T14:57:51Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2249#issuecomment-358329887",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2249",
    "updated_at": "2018-01-17T14:57:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> hmm.. some test is failing but I can't reproduce it locally. Is it possible to re-run tests without commits?\r\n\r\nMmm, I think I've seen that one fail sporadically. *You* can't rerun the test, but *we* can...",
    "created_at": "2018-01-17T14:45:44Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2247#issuecomment-358325862",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2247",
    "updated_at": "2018-01-17T14:45:44Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "A hard-fought 💃  - excellent work.",
    "created_at": "2018-01-16T22:27:17Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2200#issuecomment-358128897",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2200",
    "updated_at": "2018-01-16T22:27:17Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @AfroMetal - candlestick is showing a bit more of its box plot roots than it should. Possibly came in with localization #2195 ?",
    "created_at": "2018-01-16T14:58:57Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2253#issuecomment-357986553",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2253",
    "updated_at": "2018-01-16T14:58:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard Fantastic work! Aside from the three quick comments above (at least I hope the interaction bugs are quick 😅 ) the only thing I'd like to see before merging is an issue collecting open items, so we can point people to that when questions arise, and use it to prioritize future additions.",
    "created_at": "2018-01-16T03:04:47Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2200#issuecomment-357841078",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2200",
    "updated_at": "2018-01-16T03:04:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Two problems I just encountered with interaction effects, both while looking at the polar_direction mock:\r\n- Rotating the plot by dragging the angular axis: seems like this is centered on the wrong point (though dragging the radial axis around has the correct center now)\r\n- Dragging the radial axis around: *sometimes* after I've done this once, it doesn't seem to allow it anymore, I can only change the outer limit of the radius no matter which direction I start the drag. But sometimes it still works indefinitely... I can't really figure out the pattern.",
    "created_at": "2018-01-16T02:38:09Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2200#issuecomment-357837311",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2200",
    "updated_at": "2018-01-16T02:38:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Digging into this a little in relation to #2243 - the background:\r\n- Legends are positioned in paper-referenced coordinates - those are the coordinates where the bottom left of the plotting area (excluding the margins in which we draw axis labels etc) is (0,0)\r\n- The default position is `x=0, y=-0.1, xanchor='left', yanchor='top'` - so the left edge aligned with the left edge of the plotting area, and the top in the margin, one tenth of the y axis length below the plotting area, on the theory that axis labels typically fit within that gap - but of course that's not always true!\r\n- So if you know the size of the plot AND the area needed for axis labels and title, you can choose `legend.y` such that there will be no overlap.\r\n- But if you need this to work with dynamic plot size or axis label length, the auto-margin mechanism we have (which is used right now to increase the margin in order to keep the legend from extending outside the visible area and will soon be used to ensure long axis labels are always visible, see #2243), CANNOT be used as is to keep the legend from overlapping axis labels.\r\n\r\nI see two possible ways to go here. The first is less of an addition to what we currently have, but the second I think would be more powerful and probably easier to implement too:\r\n1. Have the auto-margin system automatically change `legend.y`. When `legend.y` is not explicitly set, it would have to have an `'auto'` value or something, then the auto-margin system would have to figure out how to combine space needed for the axis labels with space needed for the legend. But this is still problematic: what if you want it at the top and you have a top x axis whose labels it needs to avoid? Would we need `'auto-top'` and `'auto-bottom'`? That sounds awkward, and there may be other possibilities I'm not thinking of.\r\n2. Alternatively, allow the legend to be positioned in other coordinates - I'm thinking of the `'container'` coordinates as proposed in #882 for chart titles, in which (0,0) is the absolute bottom left corner *including* margins. Then we could default a horizontal legend to `x=0, xanchor='left', xref='paper'` (that wouldn't change) and `y=0, yanchor='bottom', yref='container'` (that part is new, though the result would be about the same as what we have now. In addition we could add `pad` attributes as also suggested in #882, which would add a pixel buffer between the legend and the edge of the div, and between the legend and the plot or axis labels) - and at that point, the auto-margin system could simply reserve space for anything container-referenced (including the title 🎉 ) before fitting the other things in.",
    "created_at": "2018-01-15T22:36:16Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1199#issuecomment-357804538",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1199",
    "updated_at": "2018-01-15T22:36:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ah, I see - so basically this is just attaching the event in a different way that allows us to tell the browser \"yes, we know this isn't passive, stop bugging us\"?\r\n\r\nI like the `_onwheel` etc solution. LGTM! 💃 ",
    "created_at": "2018-01-15T21:16:11Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2251#issuecomment-357790841",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2251",
    "updated_at": "2018-01-15T21:16:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @n-riesco ! Are there any of the translations you're not confident in? Any other Spanish speakers you can ping to review?\r\n\r\nAlso, I'm reminded by #2246 - does Spanish use different decimal and thousands separators than English?",
    "created_at": "2018-01-15T20:52:33Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2249#issuecomment-357786603",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2249",
    "updated_at": "2018-01-15T20:52:33Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @jdugge - just added a lint commit (our linter requires single quotes) and will merge when tests pass.",
    "created_at": "2018-01-15T20:45:18Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2246#issuecomment-357785217",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2246",
    "updated_at": "2018-01-15T20:45:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "related issue I noticed while reviewing #2200 - we should either not emit the second `click` or do so before the `doubleclick` event.\r\n\r\nHaving the `doubleClick` handled before `click` (in `Fx.click`) is both different from native events (which always seem to put the `doubleClick` last, though some browsers - [*cough* IE *cough*](https://stackoverflow.com/questions/5497073/how-to-differentiate-single-click-event-and-double-click-event) - don't emit the second `click` at all) AND potentially incorrect: if `Plotly.relayout` is synchronous, then `Fx.click` will make it look like you clicked on whatever point happens to be under your cursor after autoranging, rather than the one you actually clicked on.",
    "created_at": "2018-01-13T00:58:34Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1546#issuecomment-357395665",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1546",
    "updated_at": "2018-01-13T00:58:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Another day, another polar zoombox attempt, I think this is by far the best version so far.\r\n\r\nLove it, I think we have a winner! 🏆 Particularly nice how if you start at one end, there's no snap to the other end - because, really, why would you do that, it would be a noop. That gets around my concern about not being able to make a small change to the inner radius. Very very nice.\r\n\r\nI could imagine decreasing the snap length a little bit, at least for small plots. But we can play with that later, the hard part is the mechanics and I think you've nailed it.",
    "created_at": "2018-01-13T00:41:15Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2200#issuecomment-357393518",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2200",
    "updated_at": "2018-01-13T00:41:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yes, we've discussed a mode that does this, but it's not implemented yet. See https://github.com/plotly/plotly.js/issues/1876",
    "created_at": "2018-01-12T06:44:54Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2248#issuecomment-357156546",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2248",
    "updated_at": "2018-01-12T06:44:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice! I'll check out the other changes later tonight, but re: drag interactions:\r\n- Angular - love it. Only addition I'd like at some point is snap to NSEW (for both the angular orientation and radial line orientation) but that can go in a TODO issue.\r\n- Radial - definite improvement but I still find it confusing. I don't love the statefulness, ie if you start dragging inward it behaves one way, outward a different way, crossing the origin changes what you can do later... I feel like we can find a solution that only depends on the start and end points of the drag. Also wonder if we can get away from all angular dependence and only care about initial and final radii? It just always seems like angular dependence will give weird invisible boundaries with unexpected effects when you cross them. Sorry to be a pain about this one, it's a hard problem I don't have real clear answers on, just kind of thinking out loud and I'm probably going to contradict some suggestions I made earlier:\r\n\r\nThere are four radial range change you might want: zoom to a range, give just a new outer bound, give just a new inner bound, or abort.\r\n- Abort: can we just say `Math.abs(r1 - r0) < MINDRAG` means abort?\r\n  - The limitation this imposes is that you can't zoom straight to a tiny slice of the original radial range. But you can always zoom multiple times if that's what you want, and that's the same limitation we have with cartesian zoom.\r\n- New outer bound: how about starting OR ending the drag within a certain region around the center (perhaps again `MINDRAG` px? Or that might be too small, we might want `2 * MINDRAG`)? So then you could either drag from the center outward to your new outer bound, or start at your new outer bound and drag to the center.\r\n  - The limitation this imposes is that you can't make a very small tweak to the minimum bound, because it'll snap to the existing minimum. That doesn't strike me as a big deal though, it's a fairly weird case. And once we have `hole` as an available option (which is mostly when you'd want a variable inner bound anyhow!), we can remove snapping for the drag endpoint because any endpoint inside the hole counts as \"no change to the minimum\". So you can drag from the outside inward to an arbitrary number of pixels away from the edge of the hole without snapping to the edge. Seems though like the start of the drag will still need to snap to the hole edge, otherwise you can't ever hit the edge exactly.\r\n- New inner bound: similar to new outer bound, either drag from the new edge you want all the way to (beyond) the outer edge, or drag from near the outer edge (snap to the edge) to the new edge you want.\r\n- Zoom to a range is anything not covered by the above: your starting and ending radii are the new range.",
    "created_at": "2018-01-12T01:35:01Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2200#issuecomment-357117251",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2200",
    "updated_at": "2018-01-12T01:35:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for the deep dive @monfera - the reason we made this rule was to ensure you could render a chart into an unattached `<div>`, and then attach that `<div>` to the DOM sometime later when it should become visible. This logic doesn't apply to interaction effects, since if you're interacting with a plot it must be visible!\r\n\r\nWe could drop `strict-d3` from devtools, but keep it only for image tests. But there's something nice about having that check in devtools in order to catch problems earlier. Could we perhaps override `d3.svg.brush` to disable this prohibition while inside `brush`, and re-enable it when `brush` exits? Kind of hacky but maybe it would work, and would have no effect on prod code.",
    "created_at": "2018-01-11T15:45:13Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2244#issuecomment-356967089",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2244",
    "updated_at": "2018-01-11T15:45:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This trace also seems to suffer from misplaced hover ala #2208 ",
    "created_at": "2018-01-10T20:57:30Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2242#issuecomment-356734310",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2242",
    "updated_at": "2018-01-10T20:57:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "#2241 adjusted `dragElement` to take care of `click` events as well. This has a number of benefits: it simplifies all the `click` vs (drag)`done` logic, and ensures that you do exactly one of those - a mousedown/up must be either a click or a drag. It also allows us to capture right clicks. Some TODOs came up in that PR:\r\n- Any trace type that uses `selection.on('click', clickHandler)` would benefit from being converted to `dragElement`, for the above mentioned reasons. This includes at least `geo`, `mapbox`, `parcoords`, `pie`, `sankey`, `table`. `geo` has a couple of additional issue: right-click starts a pan/select, which then  you have to click again to get out of; it also needs to have hover effects removed when you start selecting or panning.\r\n- Annotations have a `plotly_annotationclick` event that should also be extended to support right-click.\r\n- Possibly create a config parameter to manage right-click behavior. Right now the hacky behavior that some users depend on is that if you attach a `contextmenu` handler to `gd`, and call `preventDefault()` in it, this prevents the native context menu from appearing, and then a right click (for those traces using `dragElement` anyway) get a `plotly_click` event and the dev can look at `button(s)`, `ctrlKey`, etc to determine what kind of a click it was. But we don't want this to always, as mostly devs won't be thinking about what kind of click they're getting, and folks may want to keep the native context menu accessible. A config option seems like a clean way to expose this.\r\n",
    "created_at": "2018-01-10T18:56:44Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2057#issuecomment-356701414",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2057",
    "updated_at": "2018-01-10T18:56:44Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "- remove the `plotly_selected` event with `undefined` data that gets emitted when clicking on the plot area in a select mode - see #2241 ",
    "created_at": "2018-01-10T17:54:38Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/420#issuecomment-356682922",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/420",
    "updated_at": "2018-01-10T17:54:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ah great. FWIW there may be simpler ways to manage your title too. Re:\r\n> I need multi-line titles and plotly doesn't support that at the moment. \r\n\r\nIn fact it does, though for the moment anyway the user needs to know how to do it. We support a subset of HTML including `<br>` among other things: https://help.plot.ly/adding-HTML-and-links-to-charts/",
    "created_at": "2018-01-10T04:46:59Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2237#issuecomment-356498732",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2237",
    "updated_at": "2018-01-10T04:46:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Wow, that's an \"interesting\" effect. @etpinard is regl going to fix this?",
    "created_at": "2018-01-10T04:41:59Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2240#issuecomment-356498138",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2240",
    "updated_at": "2018-01-10T04:41:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for the report @endymonium - you're correct, I don't see any workaround without altering the code. This is a tricky section of code, due to the risk of XSS, but seems to me there are two things we can do, either one of which would give you a workaround:\r\n1. Allow already-escaped `href` attributes to be used verbatim - perhaps this would be as easy as replacing [this line](https://github.com/plotly/plotly.js/blob/0d9941177661cbddfccd0fd3e3dbf75ad75baade/src/lib/svg_text_utils.js#L472) `nodeSpec.href = encodeURI(href);` with `nodeSpec.href = encodeURI(decodeURI(href));` since the `decodeURI` is a noop if the URI is already decoded, but would prevent double encoding.\r\n2. Be smarter about [`SPLIT_TAGS` and `ONE_TAG`](https://github.com/plotly/plotly.js/blob/0d9941177661cbddfccd0fd3e3dbf75ad75baade/src/lib/svg_text_utils.js#L235-L237) to allow `<` and `>` inside attribute strings, which does seem like it would match the permissiveness of browsers, at least as far as `href` is concerned. This we would need to be very careful about though, security-wise, as these characters could be dangerous in other attributes that we don't explicitly sanitize later.\r\n\r\nOption 1 seems fairly straightforward, and would just need to be paired with a test or two in [svg_text_utils_test.js](https://github.com/plotly/plotly.js/blob/master/test/jasmine/tests/svg_text_utils_test.js) of the kind of links this allows us to support. Feel like giving it a try?",
    "created_at": "2018-01-10T04:37:26Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2239#issuecomment-356497602",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2239",
    "updated_at": "2018-01-10T04:37:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@ricazhang can you post a codepen/jsfiddle showing this? I don't see that when using the latest cartesian bundle from the CDN: https://codepen.io/alexcjohnson/pen/aEqrEY.\r\n\r\nThat's normally what happens when you use config `{editable: true}`, then you can click on that title and type in a new one. It's weird that you would see this without explicitly adding that config flag.",
    "created_at": "2018-01-10T03:56:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2237#issuecomment-356492841",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2237",
    "updated_at": "2018-01-10T03:56:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Duplicate of #2154 (and likely #865 by extension) I believe. Feel free to reopen if I'm missing something.",
    "created_at": "2018-01-08T18:21:21Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2236#issuecomment-356049973",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2236",
    "updated_at": "2018-01-08T18:21:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @jbampton - It does seem like the wider web world is getting rid of these tags. For reference, see https://stackoverflow.com/a/23254634/9188800 - since that was posted in 2014, google and amazon have both joined facebook getting rid of it, linkedin and instagram still have it.",
    "created_at": "2018-01-08T16:25:14Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2235#issuecomment-356015859",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2235",
    "updated_at": "2018-01-08T16:25:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Also happy new year! We'll need to merge master to get tests to pass, with the new year in file headers.",
    "created_at": "2018-01-05T22:00:58Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2217#issuecomment-355677154",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2217",
    "updated_at": "2018-01-05T22:00:58Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@JonasGutermuth looking great! Just two final comments but I'll leave them to your judgment. Let me know if you'd like to make further changes or if you're happy as it is, and I'll merge.",
    "created_at": "2018-01-05T20:25:40Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2217#issuecomment-355656599",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2217",
    "updated_at": "2018-01-05T20:25:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "It wasn't obvious to me at first that `pan` mode meant \"rotate the plot\" - I just stumbled on rotating and wondered why I couldn't zoom anymore. Maybe that's OK, but alternatively, perhaps you could grab in the ring of the angular axis labels to rotate, without going into a separate pan mode? Also it would be neat if it would snap to straight orientations, ie with zero angle at N, S, E, or W.",
    "created_at": "2018-01-05T05:26:23Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2200#issuecomment-355475955",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2200",
    "updated_at": "2018-01-05T05:26:23Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I find the radial zoom effect a lot of fun but a bit confusing to operate. I always know what's going to happen when I mouse up, that part is great - but I don't always know where to put my cursor to get what I want. It sometimes swaps between keeping the donut, keeping the hole, and keeping the whole thing, and it's not obvious to me when and why it's going to change. Might help to have some kind of handle for the starting point, where you moused down? And possibly some sort of guides delineating regions with different results, or just a clearer rule about which is which? \r\n\r\nPerhaps it could be as simple as: take the ray from the center toward where you moused down; the 180 degree sector clockwise from that ray gives you the donut between mouse down and mouse up, the sector ccw from that ray gives you a new outer radius only (set by where you mouse up, ignoring where you moused down).\r\n\r\nIt's also not obvious to me how to cancel the zoom in case I discover I've started it badly or something - which in cartesian I can do by making the box very small so it disappears. Sometimes I can't find any place to put the cursor to do this. Perhaps if there was a starting handle, I would be tempted to do the same thing as in cartesian, bring my cursor close to that point and the box would disappear?",
    "created_at": "2018-01-05T04:43:46Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2200#issuecomment-355471804",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2200",
    "updated_at": "2018-01-05T04:43:46Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I don't see where you're generating fractions of Pi, but at some precision (denominator >= 100?) it should switch to decimal - decimal fractions of Pi? Also should hovertext have these Pi fractions/decimals too instead of raw decimal numbers?\r\n![screen shot 2018-01-04 at 10 29 16 pm](https://user-images.githubusercontent.com/2678795/34594422-ef538cf2-f19e-11e7-8198-f2786e237220.png)\r\n",
    "created_at": "2018-01-05T03:32:54Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2200#issuecomment-355464632",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2200",
    "updated_at": "2018-01-05T03:32:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Radial axis dragging seems to be circling the wrong point:\r\n![kapture 2018-01-04 at 21 46 18](https://user-images.githubusercontent.com/2678795/34593461-fc301324-f198-11e7-855a-6a2f5d3889fa.gif)\r\nAlso we need a cursor or something (`move`? `grab` with fallbacks for IE?) to show its grabber.",
    "created_at": "2018-01-05T02:52:49Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2200#issuecomment-355459879",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2200",
    "updated_at": "2018-01-05T02:52:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Currently if you zoom so some points are below the minimum radius, points disappear (as they should) but so do lines and fills (this is the polar_categories mock):\r\n![screen shot 2018-01-04 at 8 17 32 pm](https://user-images.githubusercontent.com/2678795/34591564-7eea68f8-f18c-11e7-9c42-2950fd5c8ec3.png)\r\nSeems like the lines and fills should continue into the center, right? That would be as analogous as we can get to how cartesian handles off-plot points.",
    "created_at": "2018-01-05T01:21:12Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2200#issuecomment-355447371",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2200",
    "updated_at": "2018-01-05T01:21:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Actually the problem is deeper than just hover labels - consider what happens when you set `zsmooth: 'best'` in that same plot (that triggers automatic `connectgaps`) - you can see that the color is ascribed to the brick center as well, and not to the data point as desired.\r\n![screen shot 2018-01-04 at 2 16 52 pm](https://user-images.githubusercontent.com/2678795/34580233-3dc6e496-f15a-11e7-93a7-5708a08fd069.png)\r\nAnd it spills over into `contour` traces too: the contour lines themselves are fine, as are the hover labels, but `coloring: 'heatmap'` puts the colors in the wrong places again.\r\n![screen shot 2018-01-04 at 2 21 18 pm](https://user-images.githubusercontent.com/2678795/34580377-ca76e224-f15a-11e7-9cb9-58b1d1f39da1.png)\r\n",
    "created_at": "2018-01-04T19:23:45Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2233#issuecomment-355374410",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2233",
    "updated_at": "2018-01-04T19:23:45Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yes, you're right - thanks! We don't handle nonuniform brick sizes correctly. We've labeled the center of the *brick*, but as the brick boundaries are drawn halfway between adjacent data values, the brick center is not the same as the data values that created the brick in the case of nonuniform bricks.",
    "created_at": "2018-01-04T18:54:43Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2233#issuecomment-355366898",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2233",
    "updated_at": "2018-01-04T18:54:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "🍾  💃 🕺 🎉 ",
    "created_at": "2018-01-03T17:53:38Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2231#issuecomment-355079216",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2231",
    "updated_at": "2018-01-03T17:53:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "closed by #2227 ",
    "created_at": "2018-01-03T17:12:05Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1396#issuecomment-355068202",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1396",
    "updated_at": "2018-01-03T17:12:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Do you have any thoughts on how a sample count could be supported in an enhanced parcoords trace?\r\n\r\nYes, that's a great use case, and we have done similar things in for example histogram traces (`histfunc: 'sum'`). I suspect we would only want to do this in conjunction with fat-line rendering, so we don't need to restrict the data to small-ish integers, the weights could be any (positive) numbers.",
    "created_at": "2018-01-03T14:35:36Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2229#issuecomment-355026407",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2229",
    "updated_at": "2018-01-03T14:35:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for the detailed writeup @monfera \r\n\r\nYou're right that there are a lot of possible extensions and convergence opportunities, but before we resort to those heavier (in terms of development) solutions, lets see what we can get out of extending the existing plot types.\r\n\r\nTo me, @jmmease's problem is fairly simple, and extremely common: `parcoords` is basically the right data model (and `sankey` is not), but it doesn't show the weight of entries passing through (and connecting) categorical variables.\r\n\r\nWhat I had in mind for the `parcoords` extension is a decidedly *non*-random offset for category dimensions - so that each line through the same category gets offset by a small amount from the next. My gut reaction is that we should (at least by default) keep the line width at 1px but allow the per-point offsets to scale as needed (to larger than 1px so there are gaps between the lines, OR smaller than 1px so the lines merge into a band but its width is still proportional to its weight) to fill up a pleasant fraction of the available space. Then we also would want to do some sorting to try and minimize crossings in category-category connections. I'm thinking this could be as simple as taking the middle category, sort first by that, next by its neighbors, and so on until we get to the end of category dimensions. The result would be something like this (in the >1px offset case - pardon the sketchiness, it could certainly get niceties like horizontal segments within the category bars but hopefully this gets the idea across):\r\n\r\n<img width=\"431\" alt=\"screen shot 2018-01-02 at 3 15 30 pm\" src=\"https://user-images.githubusercontent.com/2678795/34498743-fcf4d0e8-efd0-11e7-8352-a6a709f09617.png\">\r\n\r\nThen as a second extension, we could implement fat-line rendering, possibly also with per-line thicknesses, which would end up looking exactly like parallel categories/sets. @monfera this would only be a relevant option when the total row count is low, so performance should not be an issue. It would also reduce precision when you're trying to interpret a continuous dimension, so I'd keep it optional anyway. Or perhaps fat lines for categorical dimensions, dropping to 1px for continuous? That might actually be a pleasing effect...\r\n\r\n@jmmease perhaps what I've drawn is similar to what you had in mind with your two sticking points? (1) I think is a matter of taste, that we can deal with in various ways as I already mentioned. (2) is a good point, though with sufficient visual cues (ie boxes instead of an axis line) it feels to me like it's easy to intuitively distinguish, and the flip side is that when you're exploring via selection the category dimensions can help bring out density information pertaining to the continuous variables. My worry with using random jitter is that it still wouldn't necessarily indicate density, particularly as the sample size gets larger.",
    "created_at": "2018-01-02T21:09:36Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2229#issuecomment-354875894",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2229",
    "updated_at": "2018-01-02T21:09:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "- Let all traces - even those marked `visible: false` - increment default colors. Currently we have a kind of strange situation where traces that the *user* marks `visible: false` do NOT increment the default color (it's like they don't exist at all) but traces that plotly invalidates (eg for lacking data arrays) DO increment the default color. Seems kind of weird to hide and show traces and have that effect the color of other traces. See https://github.com/plotly/plotly.js/pull/2227#discussion_r159031147",
    "created_at": "2017-12-29T22:49:27Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/420#issuecomment-354509483",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/420",
    "updated_at": "2017-12-29T22:49:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@JonasGutermuth thanks for kicking this off! Any other German speakers care to weigh in or help with the remaining items? Anyone used an OHLC or violin plot in German?\r\n\r\nPlease pay close attention to whitespace and punctuation: No translation keys or values should start or end with spaces, and if a key ends in a colon `:` that means we will display a data value after this, so the translation value should also end with a colon or other appropriate label/data separator.",
    "created_at": "2017-12-20T20:42:49Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2217#issuecomment-353177120",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2217",
    "updated_at": "2017-12-20T20:42:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> using date strings over Date objects seems terribly inefficient. Obviously, Plotly has to convert these into Date objects somewhere, so that just adds overhead.\r\n\r\nInternally, we actually *don't* use `Date` objects except as an intermediary during string conversion. We use plain numbers which, among other things, give us a bit more precision than a `Date` object, and play nicer with WebGL. Our other key consideration here is portability - unfortunately JSON has no concept of a date, so strings are the clear choice for storage and communicating with other languages.\r\n\r\nIf your app sends an array of `Date` objects to Plotly, it will likely be faster than sending in date strings. I haven't benchmarked this myself, but we certainly don't do anything as roundabout as converting to a string and then back to a `Date` - [Here](https://github.com/plotly/plotly.js/blob/82f4c161cfa2035a4de18c0e2071ab7d6ab6f7f1/src/lib/dates.js#L138-L144) is where that happens (notice the timezone hack, we can't do anything about that until v2). If you do any benchmarking of string vs `Date` inputs I'd love to see the results!",
    "created_at": "2017-12-20T16:36:27Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1532#issuecomment-353113794",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1532",
    "updated_at": "2017-12-20T16:36:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Closing, as this is by now an obsolete browser version and we haven't been able to reproduce. I was able to use this codepen with FF45 on a mac in browserstack, and it worked fine. On Win10 and Win7 (in browserstack) FF46 and below do not seem to support WebGL, FF47 handles it just fine.\r\n\r\nFeel free to reopen if the bug can be demonstrated in a publicly accessible form.",
    "created_at": "2017-12-19T21:54:22Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/677#issuecomment-352897873",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/677",
    "updated_at": "2017-12-19T21:54:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@JonasGutermuth great!\r\n\r\nI think we should handle each translation as a separate PR directly to the main repo:\r\n- Give the PR the label `type: translation` (that I just created 😉 )\r\n- Please @ mention a few other speakers of this language who can help review your translations. If Plotly staff can't review this language we will wait for comments and approval from someone who can.\r\n- If you've omitted any keys from [dist/translation_keys.txt](https://github.com/plotly/plotly.js/blob/master/dist/translation-keys.txt) - which means they will fall back on the US English text - just make a short comment about why in the PR description: the English text works fine in your language, or you would like someone else to help translating those, or whatever the reason.\r\n- And just to be clear, you need only update the files in `lib/locales/`, not the ones in `dist` - those will be automatically updated when we build and publish.",
    "created_at": "2017-12-19T15:46:55Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/856#issuecomment-352797815",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/856",
    "updated_at": "2017-12-19T15:46:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@florianleger sorry, what I meant was, can you use plotly.js as of the current `master` branch - which has not yet been published to npm - WITHOUT forking it? I just want to know if the changes in #2195 and #2207 satisfy your needs (and replace your fork) or if there is anything else we need to consider before publishing this.",
    "created_at": "2017-12-19T14:40:35Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/856#issuecomment-352775152",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/856",
    "updated_at": "2017-12-19T14:40:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I believe that between #2195 and #2207 this issue on i18n can be closed - but before I do so, I'd love some 👍 /👎  on the framework from folks who've weighed in here.\r\n\r\nI'd also ❤️  if folks who need localization for their own purposes would be willing to PR those back into the main repo - filling in the translations, verifying the date formats, and adding `decimal`/`thousands` to the files in [lib/locales](https://github.com/plotly/plotly.js/tree/master/lib/locales). The full list of strings we need to translate is in [dist/translation_keys.txt](https://github.com/plotly/plotly.js/blob/master/dist/translation-keys.txt). The locale files we have currently are auto-generated from [world-calendars](https://github.com/alexcjohnson/world-calendars/tree/master/dist/regional) which is itself a descendant of https://github.com/kbwood/calendars - but we're certainly happy to accept any other locales you might want to contribute!\r\n\r\n@florianleger thanks for pointing out your fork - I did some things the same way, other things differently, but it was very helpful to see what you had done. Does the current master branch of plotly.js work for your purposes now?",
    "created_at": "2017-12-18T21:51:41Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/856#issuecomment-352569124",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/856",
    "updated_at": "2017-12-18T21:51:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I'm thinking we should make a pinned post on https://community.plot.ly/ like @chriddyp did to advertise the Dash workshops to attract potential contributors.\r\n\r\nThat's a great idea - wait until this is published (`1.32`), then start including localizations in `1.33`? I'll try to get @stelajohnson to help me fill in the dictionary for `sq` (Albanian) so potential contributors have a complete example to work off, @etpinard perhaps you want to do (or find someone to do) `fr`? Is `fr-QC` different enough to be noticed in plotly.js?",
    "created_at": "2017-12-18T20:58:13Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2207#issuecomment-352555500",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2207",
    "updated_at": "2017-12-18T20:58:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Any objections?\r\n\r\nIf it works for @AlexVvx that's a great start. I'd love a 👍 /👎  from @Melmoth-the-Wanderer \r\n\r\nAre there any other specific conditions folks depend on that we could add a test for, so we're not back here again next release? How many of the propositions in https://github.com/plotly/plotly.js/issues/2101#issuecomment-339528108 have we tested, and do they all behave as proposed?",
    "created_at": "2017-12-18T19:37:29Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2101#issuecomment-352535309",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2101",
    "updated_at": "2017-12-18T19:37:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "closed by #2212 ",
    "created_at": "2017-12-18T16:25:47Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2197#issuecomment-352477923",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2197",
    "updated_at": "2017-12-18T16:25:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Related: if you zoom in on the plot some other way, and change the right edge, that new value gets used as the \"now\" end of the range selector, rather than referencing the latest data. This aspect too would get fixed by folding range selectors into autorange.",
    "created_at": "2017-12-18T15:22:16Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2209#issuecomment-352457033",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2209",
    "updated_at": "2017-12-18T15:22:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Good point @davidjb - we hadn't considered padded ranges like you get with markers in the behavior of range selectors, but it's pretty useless this way. See also #1876 - the right way to solve the issue here probably needs to be a new autorange mode (which can account for data) rather than a calculation based on the current range as we have now (which knows nothing about the data). This would also be useful for streaming plots where you always want to see for example the last 15 minutes of data.",
    "created_at": "2017-12-16T04:23:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2209#issuecomment-352159800",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2209",
    "updated_at": "2017-12-16T04:23:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> > Fixes #1264 - and incidentally\r\n>\r\n> I didn't see a new test case for this specifically\r\n\r\nGood call -> https://github.com/plotly/plotly.js/pull/2207/commits/2a8d38f2f05e6e9f8b472aa17fc215547106d0fc",
    "created_at": "2017-12-16T00:12:55Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2207#issuecomment-352142903",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2207",
    "updated_at": "2017-12-16T00:24:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Coming back to this in the context of #2207 and my comment that we may consider removing `separators` altogether in v2 https://github.com/plotly/plotly.js/issues/420#issuecomment-352099689 and supporting only `config.locale`:\r\n\r\n@ndabAP seems like you're concerned with interpreting numeric strings being passed into your system with different separators - potentially several different formats within the same graph? In principle this isn't even just per-axis OR per-trace, but per-data-array - so we'd need something like `trace.xseparators` and `trace.marker.line.widthseparators` etc etc... which makes me think that this doesn't really belong in plotly.js but at a higher level of application logic (ie sanitize the data before passing it to plotly.js) - kind of like how we don't accept dates in any string form besides (potentially truncated) ISO 8601 format.\r\n\r\nAnd then as far as display (tick and hover labels) - even if we *did* support parsing different arrays within a plot differently, I think we want a single *display* format throughout the plot - whether based on `layout.separators` or `config.locale` - otherwise we're just inviting confusion.",
    "created_at": "2017-12-15T20:35:07Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1842#issuecomment-352105362",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1842",
    "updated_at": "2017-12-15T20:35:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "- remove `layout.separators` and only support locales (#2207)",
    "created_at": "2017-12-15T20:07:39Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/420#issuecomment-352099689",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/420",
    "updated_at": "2017-12-15T20:07:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Sounds reasonable, probably as a `config` parameter rather than `layout`. I've always wished browsers would let you query the system's doubleclick time so you could match how the user has configured their own environment...\r\n\r\nProbably not something we'll get to very soon, but it should be pretty easy and we'd be happy to review a PR about it 😉 ",
    "created_at": "2017-12-15T16:15:18Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2206#issuecomment-352045899",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2206",
    "updated_at": "2017-12-15T16:15:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> skip over empty arrays\r\n\r\nWorries me a bit, empty arrays can, in some cases, be different from non-arrays or missing values.",
    "created_at": "2017-12-14T20:35:54Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2205#issuecomment-351828551",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2205",
    "updated_at": "2017-12-14T20:35:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@flyingBurman in the end I don't see a bug or feature request here, after we clarified what plotly.js is doing. Feel free to reopen if I'm misinterpreting or missing something.",
    "created_at": "2017-12-14T20:24:18Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2203#issuecomment-351825796",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2203",
    "updated_at": "2017-12-14T20:24:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Possible other cases to worry about:\r\n```\r\n$ ag \"dflt: \\[\\]\"\r\ntraces/sankey/attributes.js\r\n103:            dflt: [],\r\n161:            dflt: [],\r\n198:            dflt: [],\r\n204:            dflt: [],\r\n209:            dflt: [],\r\n\r\ntraces/ohlc/attributes.js\r\n67:        dflt: [],\r\n74:        dflt: [],\r\n81:        dflt: [],\r\n88:        dflt: [],\r\n\r\ntraces/parcoords/attributes.js\r\n125:            dflt: [],\r\n\r\ntraces/table/attributes.js\r\n72:            dflt: [],\r\n83:            dflt: [],\r\n152:            dflt: [],\r\n163:            dflt: [],\r\n\r\ntransforms/groupby.js\r\n32:        dflt: [],\r\n```\r\n\r\nA lot of these cases the trace wouldn't make sense without the attribute but... then what's the point of filling in an empty array?",
    "created_at": "2017-12-14T20:18:38Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2205#issuecomment-351824391",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2205",
    "updated_at": "2017-12-14T20:18:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> would it make sense to add axis type \"String\" as a new feature ?\r\n\r\n`type: 'category'`",
    "created_at": "2017-12-14T18:32:41Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2203#issuecomment-351797173",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2203",
    "updated_at": "2017-12-14T18:32:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> If so, is it reliable to assume that 2016/02/29 is not going to be interpreted as date ?\r\n\r\nCorrect. We will interpret `'yyyy-mm-dd HH:MM:SS.ssssss'` or any truncation of that as a date, with a couple of extensions (`'T'` instead of a space in the middle, negative years, timezone info at the end), but we make no attempt to account for other separators, orderings, etc. So what you've given there will create a categorical axis, with all the caveats that entails (ordering, spacing, etc.)",
    "created_at": "2017-12-14T18:31:52Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2203#issuecomment-351796967",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2203",
    "updated_at": "2017-12-14T18:31:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@vmagalhaes I can't really tell from this description what symptoms you're encountering, but offhand it doesn't look like a *problem* with plotly.js (a bug you've found or a feature we could add) - more of a usage question. Questions like that are best asked at community.plot.ly",
    "created_at": "2017-12-14T16:19:22Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2204#issuecomment-351759140",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2204",
    "updated_at": "2017-12-14T16:19:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Why is Plotly's default behavior to do label (grid lines as well) the next day after the date instead of the current date ? Is there a parameter to turn it off ?\r\n\r\nPlotly doesn't look at the data at all when deciding where to put ticks. It just looks at the axis range and finds the \"roundest\" values it can place a reasonable (or the requested) number of ticks at. We consider the first of the month (at the very beginning of the day) to be the roundest values on this plot, so we put the ticks there. And we consider midnight Jan 1, 2017 to be \"Jan 2017\" - I recognize that this can be confusing in some contexts as the entire month of January comes *after* this tick, but if it's any help, this is consistent with how numeric axes work: the entire span of \"2.xxxx\" comes after the number \"2\" for example.\r\n\r\nIf you'd like ticks on the last day of the month, you can do this:\r\n```js\r\nPlotly.relayout(gd, {\r\n    // the year doesn't matter, just put the canonical tick at the last day of any month\r\n    // there's some annoying logic here, as it can't always be the 31st of every month...\r\n    // suffice it to say this works :)\r\n    'xaxis.tick0': '2000-12-31',\r\n    // currently when you specify tick0, automatic dtick is also affected\r\n    // we might be able to improve this algorithm, but for the moment you have to\r\n    // explicitly specify 1-month tick spacing again.\r\n    'xaxis.dtick': 'M1'\r\n})\r\n```\r\n<img width=\"1249\" alt=\"screen shot 2017-12-14 at 10 51 08 am\" src=\"https://user-images.githubusercontent.com/2678795/34000969-c7aa1fa6-e0bc-11e7-9d8b-70380d865ce6.png\">\r\nAnd then if you still want it to say \"Jan 2017\" you can do that with `xaxis.tickformat: '%b %Y'`\r\n<img width=\"1243\" alt=\"screen shot 2017-12-14 at 10 53 49 am\" src=\"https://user-images.githubusercontent.com/2678795/34001102-18c539d4-e0bd-11e7-8cb3-e28a97e4b3f8.png\">\r\n",
    "created_at": "2017-12-14T15:54:41Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2203#issuecomment-351751479",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2203",
    "updated_at": "2017-12-14T15:54:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Sorry if I look annoying\r\n\r\nNot at all! It's really important that we get the goals right before going any further.\r\n\r\n> I would expect hover labels and spikelines are drawn for the same points. \r\n\r\nYes, that's certainly desirable! I think we're pretty close though in your first gif above (with the green circle and grey rectangle). You really have to go looking for situations where the spikes and hover labels disagree. What about a small tweak to the behavior to cover that case:\r\n- Hover points get calculated first, then if `spikesnap='data'`:\r\n- If we FOUND hover points, restrict the spikes to only choosing among those points (so if none of those points is close enough, no spikes are drawn even though another, non-hovered, point may be close enough)\r\n- If we DID NOT FIND hover points, spikes can choose any point (always in \"closest\" mode).\r\n\r\nNote that this way there is still no explicit coupling between hovermode and spike mode, just a coupling between the points chosen by each feature.",
    "created_at": "2017-12-14T15:22:50Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2155#issuecomment-351741708",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2155",
    "updated_at": "2017-12-14T15:22:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@apalchys neat effect with the grey and red/green lines, really makes it easy to see what's going on!\r\n\r\nI think spikelines should *always* behave like what you have for `closest` mode, regardless of `hovermode`. It seems weird to have the x and y spikes point to different points, so their crossing point is not a data point.\r\n\r\nThis will mean sometimes spikelines will appear or disappear independently of the hover labels - sometimes we'll have only hover labels, sometimes only spike lines - but especially with the distinction between `spikedistance` and `hoverdistance` that kind of decoupling is inevitable.",
    "created_at": "2017-12-13T17:52:35Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2155#issuecomment-351469759",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2155",
    "updated_at": "2017-12-13T17:52:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Re: zooming interaction: I think we may need two different modes, eventually if not right away, because there are two very different ways polar plots get used. One is where you're drawing a real 2D space (where zero is a unique point and shapes have meaning) just in polar coordinates. That's where you would want zoombox-type interactions that I was thinking of. I notice though that none of your examples are of this type (except maybe the cardioid). Your examples all have independent R and Theta variables, just mapped onto a polar space mostly to show periodicity. Incidentally, this points to another way the behavior may want to depend on this distinction: what do you do with negative R? If you're mapping a real space, then it should show up as a positive R in the opposite direction, but if you're not it should disappear at the origin.\r\n\r\nSo how should zooming work in the independent-variable case? I still need to look at some more example plots with the question \"how would I want to zoom this to explore THIS data set\", but as a first cut, I feel like the most useful for people would be to independently move each of the axis ends - so min and max radius (dragging them like you drag an axis end in cartesian? @etpinard points out that this is ambiguous with interacting with data near the origin though... not sure how to handle that.), and for angle I guess initial angle (rotating the whole plot) and period (so points at the initial angle would stay put, points at initial angle + period would move with the cursor, points at initial angle + twice the period would move twice as fast as the cursor... per private discussion with @etpinard this interaction should NOT happen when the period is physically significant, like 360 degrees or 2Pi - perhaps we can have an attribute to enable/disable it, with a smart default set depending on whether an explicit period is provided or not)?\r\n\r\nI also liked the way our old polar plots had the radial axis on top of the data, with an outline around the text in the background color. Perhaps it could be configurable whether this axis is above or below the data?",
    "created_at": "2017-12-12T17:42:08Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2200#issuecomment-351127938",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2200",
    "updated_at": "2017-12-12T17:42:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@apalchys I think this is making it too complicated, and *somewhere* in there it will lead to undesirable behavior. I haven't looked at it in enough detail to know where, though it seems like a) you've brought a bunch of `scatter/hover` functionality into `fx/hover`, that really needs to be left to the individual trace modules; and b) seems like you've added two new loops through the data, one for each axis - I think we can get away with 1 or in some cases 0 (see below).\r\n\r\nI think as far as spikelines are concerned, we SHOULD just select one point for drawing both spikelines, and do this process completely independently from selecting hover data. Hover data makes one loop through the data, using `hovermode` and `hoverdistance`. Then spikelines, when `spikesnap='data'` result in a second loop through the data, using a \"hovermode\" of `closest` and a limit of `spikedistance`.\r\n\r\nI suppose when `hovermode='closest'` and either `hoverdistance === spikedistance`, `hoverdistance < spikedistance` and we found a point, or `hoverdistance > spikedistance` and we DIDN'T find a point, we could short-circuit the second loop and just use the results of the first loop. Might be a nice optimization but I'd make sure the behavior is correct and well-tested before getting into details like that.",
    "created_at": "2017-12-11T17:39:19Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2155#issuecomment-350799167",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2155",
    "updated_at": "2017-12-11T17:39:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "See below: Red is `'container'`, it's the entire area of the plot `<div>` including margins. Black is `'paper'`, it's the coordinate system used to lay out subplots, the legend, and paper-referenced components (shapes, annotations, images), and is basically red minus margins. Be careful because occasionally the margins are increased beyond what was originally specified - use `fullLayout._size`, it already knows about this.\r\n\r\nYou're right, it would be weird to put the title in the middle, though maybe there would be uses for it - like if you make a donut chart and want the title in the hole? The main use for `'paper'` in title positioning would be sitting on the subplots like the \"Paper-referenced title\" below. This would look like:\r\n```js\r\ntitle: {\r\n  text: 'Paper-referenced title',\r\n  xanchor: 'left', // or 'auto', which matches 'left' in this case\r\n  yanchor: 'bottom',\r\n  x: 0,\r\n  y: 1,\r\n  xref: 'paper',\r\n  yref: 'paper'\r\n}\r\n```\r\n\r\n<img width=\"709\" alt=\"screen shot 2017-12-08 at 10 05 36 am\" src=\"https://user-images.githubusercontent.com/2678795/33771976-182b799a-dc01-11e7-9d00-75fb32063754.png\">\r\n\r\n\r\n",
    "created_at": "2017-12-08T15:23:58Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/882#issuecomment-350289945",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/882",
    "updated_at": "2017-12-08T15:23:58Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@AlexVvx apologies, I missed these pieces earlier:\r\n\r\n> I wonder about pad, if xanchor and yanchor is center/middle, should it respect paddings?\r\n\r\nIn this case since there's no border or fill (yet?) paddings are only going to be relevant on the same side as the anchor, so you're right, it's moot for center and middle.\r\n\r\n> What is the difference between 'auto' and 'center', 'auto' and 'middle'?\r\n\r\nFrom @etpinard above:\r\n> I think both `xanchor` and `yanchor` should support an `'auto'` values so that the common `title.x: 0` automatically gets `xanchor: 'left'` [just](https://github.com/plotly/plotly.js/blob/master/src/components/legend/anchor_utils.js) like legends.\r\n\r\nie the anchor shifts to match the nearest third of the plot.",
    "created_at": "2017-12-07T20:58:37Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/882#issuecomment-350092313",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/882",
    "updated_at": "2017-12-07T20:58:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "- more visible and well-documented way to set logging level (than `Plotly.setPlotConfig`) - @etpinard suggests a top-level method for it like `Plotly.setLogLevel`",
    "created_at": "2017-12-07T20:24:02Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/420#issuecomment-350083770",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/420",
    "updated_at": "2017-12-07T20:24:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The dataviz purist in me is a little squeamish - the area of the bar, the most important component of its visual weight, loses proportionality with the data value, and lacking a straight line at the end it's hard to compare two similar bars and tell which is bigger. But you're right that it's a pleasant effect, we'd entertain a PR about this.",
    "created_at": "2017-12-07T16:32:55Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2196#issuecomment-350021639",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2196",
    "updated_at": "2017-12-07T16:32:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> xref: \"container\" | \"plot\"\r\n\r\nI know it doesn't make the most sense considering only this context, but I think we should match the other `xref` instances and use `'container'` and `'paper'`. Perhaps in v2 we could change `'paper'` to `'plot'`.",
    "created_at": "2017-12-07T15:15:23Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/882#issuecomment-349996886",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/882",
    "updated_at": "2017-12-07T15:15:23Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 ",
    "created_at": "2017-12-07T15:11:01Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2164#issuecomment-349995567",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2164",
    "updated_at": "2017-12-07T15:11:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@john-at-satlantic feel free to reopen if ^^ does not capture what's happening here.",
    "created_at": "2017-12-06T20:51:49Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2189#issuecomment-349770816",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2189",
    "updated_at": "2017-12-06T20:51:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> xref, yref: not sure about this, since title is not related to any axis\r\n\r\nRight, not axes but whether x/y refer to the plot area (excluding margins) or the whole container (including margins). By default it should be the whole container, for backward compatibility and because that seems like the more common usage anyhow, for both centered and left-aligned titles.\r\n\r\n> Backward compatibility, skip new features if title is string\r\n\r\nWe should use [`cleanLayout`](https://github.com/plotly/plotly.js/blob/master/src/plot_api/helpers.js#L34) to massage the old format into the new container.\r\n\r\nThe only issue I see with this is that applications using `relayout`/`update` to change the title (or its font) will break and need to update to the new structure. I suppose in principle we could do the same `cleanLayout` translation inside `relayout` - we haven't done that in the past but most of the stuff inside `cleanLayout` and `cleanData` are pre-open-source so it wouldn't matter, it's only relevant to plots saved on the plot.ly cloud. This part might be a little tricky to get right, so I'd be happy to do this (after you get the rest of the PR ready) if it's not obvious to you what I'm going for.\r\n\r\nAlso, from a private convo with @etpinard - it might be nice to have `cleanLayout` (and `cleanData`) call `Lib.warn` whenever they make changes, to alert developers about the format change. I'd be happy to take that one too.",
    "created_at": "2017-12-06T19:05:31Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/882#issuecomment-349741685",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/882",
    "updated_at": "2017-12-06T19:05:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Same test failure twice - do you see this locally @apalchys?\r\n\r\n```\r\n\tExpected 2.010335917312661,7.24031007751938 to be close to 1.41,7.42 xaxis4\r\n\t    at assertRanges (/tmp/tests/annotations_test.js:603:0 <- /tmp/56b7c3186b48d6f36aba40253c5487ac.browserify:250698:41)\r\n\t    at /tmp/tests/annotations_test.js:641:0 <- /tmp/56b7c3186b48d6f36aba40253c5487ac.browserify:250736:13\r\n```",
    "created_at": "2017-12-06T16:46:57Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2164#issuecomment-349700406",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2164",
    "updated_at": "2017-12-06T16:46:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> As for `pad`, perhaps we should :recycle:  Ricky's [`pad_attributes`](https://github.com/plotly/plotly.js/blob/master/src/plots/pad_attributes.js) currently used in sliders and updatemenus and start standardize it.\r\n\r\nGood call. It feels awfully verbose to me, but it's going to come up at some point so better to standardize.\r\n\r\nOK, I think we've got a good attribute set, @AlexVvx does this make sense? Care to take a stab at incorporating this into your PR?",
    "created_at": "2017-12-06T16:25:07Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/882#issuecomment-349692625",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/882",
    "updated_at": "2017-12-06T16:25:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@apalchys nice job, I really like the image tests. Is the test failure we're seeing right now an intermittent issue, CI-only, or do you see it locally too? Otherwise I think my only (small) blocker is https://github.com/plotly/plotly.js/pull/2164#discussion_r155282168",
    "created_at": "2017-12-06T16:19:31Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2164#issuecomment-349690755",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2164",
    "updated_at": "2017-12-06T16:19:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for taking this on @AlexVvx! I'm torn about the right way to specify alignment. I'm going to continue the discussion here for a bit until we get the right attributes. The closest precedent we have is to use plot fraction, like legend & annotations. But it's hard to match the current behavior:\r\n- Vertically, we just split the top margin (after accounting for anything that may have auto-expanded that margin, such as a legend)\r\n- Horizontally, we center on the whole container, so if for example the right margin is much bigger due to a colorbar, the title will *not* be centered on the plot area.\r\n\r\nThe most common alternative title placement is in the top left corner (also whole-container referenced), but occasionally you want the left edges of the title and plot area aligned.\r\n\r\nAlso keep in mind dynamic sizing, so pixel positioning isn't so great, unless perhaps we have a way to anchor to various plot features (left edge, left plot area edge, center, plot area center, right edge, right plot area edge...)\r\n\r\nSo the most general is perhaps:\r\n- `xref` and `'yref'`: `'container'` (including margins) `'paper'` (plot area only, not so great a name in this context but matches our usage elsewhere)\r\n- `x` and `y`: 0 is the left / top edge of the container or plot area, 1 is the right / bottom edge. Might need an `'auto'` value for `y` to match the current behavior?\r\n- `xanchor`: `'left'`, `'center'`, `'right'` - like for annotations, could also do an auto like we have there, so eg if you set `x: 0` you get `'left'` anchor by default? Auto is particularly nice if we allow the title to be dragged around, otherwise it's easy to get strange alignment that makes a mess when you resize the plot.\r\n- `yanchor`: `'top'`, `'middle'`, `'bottom'` (auto?)\r\n- `pad`: like `borderpad` for annotations, move the text away from the anchor point by this many pixels (so you can position 5px away from the container edge, for example). Do we need `xpad` and `ypad`?\r\n\r\nThoughts? Does this miss anything important? Could it be simplified?",
    "created_at": "2017-12-06T15:35:11Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/882#issuecomment-349675932",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/882",
    "updated_at": "2017-12-06T15:35:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Cool idea, and there are a lot of variants of this that could be useful. Even for (fully or partially) paper-referenced shapes, it might be nice to be able to size them in px, like if you want to draw your own arrow pointing to a particular axis value, or you have a logo or something that you want a fixed size even if the plot resizes.\r\n\r\nSeems to me the most flexible way to do this would be adding attributes like:\r\n```js\r\nxmode: 'scaled' | 'pixel' // scaled (dflt) -> x0/x1 are data vals or plot units, anchorx is ignored\r\n                          // pixel -> x0/x1 are pixels relative to anchorx\r\nanchorx: (any) // data val or plot fraction, depending on `xref`\r\nymode, anchory: same for y\r\n```\r\n\r\nNot sure about the naming, but that would leave the flexibility to do things like make a shape off to the side of a data point, like `(x|y)shift` for annotations, not just centered.",
    "created_at": "2017-12-05T20:08:52Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2193#issuecomment-349425615",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2193",
    "updated_at": "2017-12-05T20:08:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "OK. Closing as this does seem covered by the other two issues I mentioned.",
    "created_at": "2017-12-04T19:35:14Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2191#issuecomment-349079949",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2191",
    "updated_at": "2017-12-04T19:35:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "BTW just because I notice it in your post - your line:\r\n`Plotly.restyle(obj, {line: {color: \"#000\"}}, 0)`\r\nis probably better written:\r\n`Plotly.restyle(obj, {'line.color': \"#000\"}, 0)`\r\nThe former will overwrite the whole `line` object, so will clear other properties (`line.width`, `line.dash`, `line.shape`) that might have been set previously. The latter will ONLY change `line.color`.",
    "created_at": "2017-12-04T19:32:57Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2192#issuecomment-349079251",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2192",
    "updated_at": "2017-12-04T19:32:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The tonext fills (and some other conditions like stacked bars) automatically set the layout property `legend.traceorder` to `reversed` so that in the most common case, the legend items show up in the order the traces appear on the plot. But you can revert this by adding `legend: {traceorder: 'normal'}` to your layout.",
    "created_at": "2017-12-04T19:25:36Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2192#issuecomment-349076919",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2192",
    "updated_at": "2017-12-04T19:25:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@radumas from the fact that half a day showed up in autorange for the overlay graph it definitely looks like you've got a 1-ms-wide bar there. Did you try my suggestion of adding an explicit width to the orange trace? I guess if you go that route you need to explicitly account for the gap, which by default is 20%, so it would be `width=1000*60*60*24*0.8`",
    "created_at": "2017-12-04T19:11:43Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2191#issuecomment-349072328",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2191",
    "updated_at": "2017-12-04T19:11:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This is probably covered by #1308 and #1346 - the issue is that with no other information (such as a second bar) to provide a scale we can't figure out a reasonable width automatically. So we default to 1, which for dates means 1 millisecond (so your single bar probably *is* being displayed, just invisibly thin).\r\n\r\nI suppose 1 day might be more useful as a default (it would work for you anyway) but I don't think it's appropriate to use the axis range as part of the default logic, that would make the meaning of the trace dependent on how you happen to be viewing it (zoom). Normally in overlay mode we don't allow subsequent bar traces to influence each other, because comparing traces with differing bar widths is an important use case for overlay mode. I suppose we could make an exception for single-bar traces, but the cleanest solution is to use the `width` attribute. Here you want a width of 1 day, which is `1000*60*60*24` (in milliseconds).",
    "created_at": "2017-12-04T16:36:43Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2191#issuecomment-349019372",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2191",
    "updated_at": "2017-12-04T16:36:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 ",
    "created_at": "2017-12-04T16:16:24Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2183#issuecomment-349012213",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2183",
    "updated_at": "2017-12-04T16:16:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@bcdunbar in #2190 brought up that this is a pretty easy problem to encounter with date axes. The good news is gl2d doesn't have this limitation (see [gl2d_date_axes.png](https://github.com/plotly/plotly.js/blob/master/test/image/baselines/gl2d_date_axes.png)), so (presumably?) we know exactly what's needed to fix it in gl3d.",
    "created_at": "2017-12-01T22:07:57Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/551#issuecomment-348627200",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/551",
    "updated_at": "2017-12-01T22:07:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Probably another manifestation of #551\r\n\r\nYep, this is below the resolution of Float32:\r\n```js\r\nd1=Date.UTC(2016,11,31,16,30,10)\r\n> 1483201810000\r\nd2=Date.UTC(2016,11,31,16,30,20)\r\n> 1483201820000\r\nd2 - d1\r\n> 10000\r\na=new Float32Array([d1,d2])\r\n> Float32Array(2) [1483201839104, 1483201839104]\r\na[1] - a[0]\r\n> 0\r\n```\r\nLooks like at the present distance from the unix epoch, 32-bit resolution is ~2 minutes (2^17 = 131072 msec). In 2001 we were closer to the epoch so the exponent floats down 1 and we get, ~1 minute resolution (2^16 = 65536 msec).\r\n",
    "created_at": "2017-12-01T21:55:59Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2190#issuecomment-348624753",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2190",
    "updated_at": "2017-12-01T21:55:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "My impression was PNGs use [lossless compression](https://en.wikipedia.org/wiki/Portable_Network_Graphics#Compression) so if your viewer can comprehend the image at all, it will get it perfectly correct, right? PNG compression really just seems to be an optimization process potentially trading file size for CPU cycles, but without changing the outcome.\r\n\r\nI wonder if the difference here is just how these different applications choose to display scaled-up pixels. Applications meant for editing (Paint, and seems like this has spilled over into MS Photo Viewer) might opt to show each pixel as a brick of constant color, while applications tuned more for viewing (Irfanview) smooth this out and may even try to infer subpixel information from neighboring pixels.\r\n\r\nIf that's the case, this issue is not within the purview of plotly.js at all. If not, can you give an example of another application that performs better when compared at the same zoom level in Irfanview vs MSPV?",
    "created_at": "2017-12-01T21:36:16Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2189#issuecomment-348620631",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2189",
    "updated_at": "2017-12-01T21:36:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I just noticed that the new start* arrow attributes don't currently have an effect on the autorange calculations\r\n\r\nGood catch @etpinard - this one is a little tricky, we need to cover two cases:\r\n- If `a(x|y)ref` is [data-referenced](https://github.com/plotly/plotly.js/blob/accae1afb647f7525835716e3cefc0556691b8c0/src/components/annotations/calc_autorange.js#L59) then we could do it by modifying the [textbox padding](https://github.com/plotly/plotly.js/blob/accae1afb647f7525835716e3cefc0556691b8c0/src/components/annotations/calc_autorange.js#L66) to include both the textbox and the start arrowhead - will probably look something like\r\n```js\r\nppadplus: Math.max(ann._xpadplus, startHeadPlus),\r\nppadminus: Math.max(ann._xpadminus, startHeadMinus)\r\n```\r\nwhere `startHead(Plus|Minus)` I guess would be calculated as `head[Plus|Minus]` are, but using the start head size and width.\r\n- If `a(x|y)ref` is [in pixels](https://github.com/plotly/plotly.js/blob/accae1afb647f7525835716e3cefc0556691b8c0/src/components/annotations/calc_autorange.js#L71) then we probably need a third item in the `Math.max` calculations, which I'm guessing will be something `startHeadPlus + ann.a(x|y)` and `startHeadMinus - ann.a(x|y)`\r\n\r\nThese will need a little bit of testing with the strange edge cases where the start arrowhead actually does poke out farther than anything else, like:\r\n<img width=\"93\" alt=\"screen shot 2017-11-29 at 3 22 34 pm\" src=\"https://user-images.githubusercontent.com/2678795/33397275-3095e860-d519-11e7-900a-5f6a04dff487.png\">\r\nThis is going to in general overestimate the padding needed for the pointy arrowheads (as opposed to the circle and square which are centered on the target point) but that's already how we do it for the end arrowhead, and doing better than that would be complicated enough that I would vote to ignore it until someone complains.",
    "created_at": "2017-11-29T20:33:23Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2164#issuecomment-347987437",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2164",
    "updated_at": "2017-11-29T20:33:23Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I feel like the range slider should *always* mirror exactly the y layout of the subplots it's controlling - seems like it would be nonintuitive to see traces overlaid there but not on the main plot.\r\n\r\nThe only case I can see where you might not want the y *ranges* in the range slider to match what's on the main plot is if we implement autorange to visible data (see https://github.com/plotly/plotly.js/issues/1876#issuecomment-314913229) - then you might want the range slider to keep the full y autorange (because that's the visible data there) even as the main plot zooms in to smaller y ranges.",
    "created_at": "2017-11-27T18:34:47Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2172#issuecomment-347279990",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2172",
    "updated_at": "2017-11-27T18:34:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "True, the question then is what to do instead?\r\n- Allow these labels to overflow the bar?\r\n- Don't show labels we would have to shrink?\r\n- Shrink *all* labels to the same font size?\r\n\r\nI suppose this should in principle be configurable (along with whether or not to allow rotation to minimize shrinkage), the question is just which options would be most useful and how to encode them. @radumas tick labels already have quite a bit of configurability - they will at times rotate unless you ask them not to, but they will never alter the font size. If you find anything missing there after playing with it feel free to make a new issue.",
    "created_at": "2017-11-27T18:23:19Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2180#issuecomment-347276388",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2180",
    "updated_at": "2017-11-27T18:23:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Strings are, for better or worse, the preferred format for dates in plotly.js. There are a couple of reasons for this:\r\n- We do not, at present, support time zones. All datetimes are treated as UTC but for backward compatibility we do a bunch of gymnastics to convert `Date` objects and epoch ms to the UTC time that *looks* the same as the local time indicated by the given input. This, however, is not portable across time zones so is discouraged (note that `Date` is not a JSON data type).\r\n- We can support *a little* more precision with our own string-to-number conversion than js allows with its `Date` objects. Doesn't get all the way to nanoseconds that some folks would like but it helps in some cases.\r\n- World calendar support\r\n\r\n> along with range values, pass also all the r2X functions, so that the user can be convert range values to another format.\r\n\r\nTrue, these are available directly in the event data for hover and click events, but not for relayout. Since relayout events might not even relate to axes, it's a little hard to figure out when to include them. You can get the conversions fairly easily though from `graphDiv._fullLayout.xaxis.r2c` etc. @mperrando does that work for you?",
    "created_at": "2017-11-27T18:13:17Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2176#issuecomment-347273522",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2176",
    "updated_at": "2017-11-27T18:13:17Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@jamienunez right, the docker setup is a bit finicky even on *nix systems. Anyway I've fixed the syntax and added the baseline image, will merge when tests pass. Thanks for adding cividis!",
    "created_at": "2017-11-27T17:33:08Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2178#issuecomment-347259857",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2178",
    "updated_at": "2017-11-27T17:33:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Or maybe `'Edit in Chart Studio'`? That gives you some indication of *why* you'd want to send it there.",
    "created_at": "2017-11-27T17:05:59Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2183#issuecomment-347250701",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2183",
    "updated_at": "2017-11-27T17:05:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The test failure is just from using hard tabs - I'm surprised that this is breaking at the build step rather than syntax checking, but whatever, we use 4 spaces as a tab.\r\n\r\nI guess `Cividis` is this: http://forum.imagej.net/t/new-lut-for-fiji-cividis/7467 - looks useful, I'd be happy to have it in plotly.js. We'll need a test image for it, ala https://github.com/plotly/plotly.js/blob/master/test/image/mocks/viridis_heatmap.json and baseline image https://github.com/plotly/plotly.js/blob/master/test/image/baselines/viridis_heatmap.png",
    "created_at": "2017-11-21T16:10:15Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2178#issuecomment-346075895",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2178",
    "updated_at": "2017-11-21T16:10:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> calendars made this a little trickier than expected\r\n\r\nAs always...\r\n\r\nLooks great, nice simplifications, despite the extra trickiness you actually ended up -3 LOC in `src` 🎉 \r\n\r\n💃 ",
    "created_at": "2017-11-21T15:55:49Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2177#issuecomment-346071146",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2177",
    "updated_at": "2017-11-21T15:55:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Tons of great stuff here, nice job! 💃 ",
    "created_at": "2017-11-20T18:07:31Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2135#issuecomment-345779449",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2135",
    "updated_at": "2017-11-20T18:07:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I'm tempted to say we could add this if/when we create separate data and trace definitions, but the way plotly.js works at present this would be tricky and a bit ambiguous.\r\n\r\nAlso note that plotly cloud does this already - I realize that this is a few extra steps and not possible in all cases, but I bring it up because a) it may be useful in some cases, and b) knowing what went into its system for splitting the data out makes me more hesitant to build this into plotly.js.",
    "created_at": "2017-11-20T16:03:03Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2171#issuecomment-345740927",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2171",
    "updated_at": "2017-11-20T16:03:03Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yep, that would be cool!",
    "created_at": "2017-11-20T03:46:28Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2173#issuecomment-345584133",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2173",
    "updated_at": "2017-11-20T03:46:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice and easy 🍹 💃 ",
    "created_at": "2017-11-17T22:30:35Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2169#issuecomment-345383576",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2169",
    "updated_at": "2017-11-17T22:30:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> as well as 'startstandoff'\r\n> though I don't think this one needs to inherit its\r\n> default from 'standoff'\r\n\r\nAgreed - standoff is specific to the item you're pointing at, so a different item will in general want a different standoff, and inheriting this would more often hurt than help.\r\n\r\n@apalchys check out some of the other `'flaglist'` [attributes](https://github.com/plotly/plotly.js/blob/master/src/traces/scatter/attributes.js#L107) for how `arrowside` should work. Do we want a `'none'` setting (in `extras`) here? You can get that behavior with `arrowhead` but it might be convenient to be able to do it with `arrowside` as well?",
    "created_at": "2017-11-17T16:05:09Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2164#issuecomment-345285206",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2164",
    "updated_at": "2017-11-17T16:05:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ha, nice. That functionality was halfway built years ago but never finished. A couple of comments:\r\n\r\n- The word anchor is used elsewhere in plotly.js for a very different purpose. What can we call this then? `arrowends`? `showarrowheads`? @etpinard thoughts?\r\n\r\n- What if someone wants different heads on each end? Say a circle on one end and an arrow on the other? One way to do this would be to have a new attribute maybe `startarrowhead` that applies to the start, and inherits from `arrowhead` if not supplied.\r\n\r\n- Similarly, should there be a `standoff` for the start? `startstandoff`?\r\n\r\n- Do we allow text AND a starting arrowhead?",
    "created_at": "2017-11-16T22:50:25Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2164#issuecomment-345088525",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2164",
    "updated_at": "2017-11-16T22:50:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 ",
    "created_at": "2017-11-16T19:06:35Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2163#issuecomment-345029764",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2163",
    "updated_at": "2017-11-16T19:06:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@SaucePan1 @Dantalion have you tried the `tickvals`/`ticktext` suggestion @cpsievert [mentioned](https://github.com/plotly/plotly.js/issues/1516#issuecomment-289139760) and demonstrated in http://codepen.io/cpsievert/pen/bqKJoe ? I feel pretty strongly that we cannot make an axis type where data do not map 1:1 to position, it just causes unending headaches when you try to do anything beyond a single trace.\r\n\r\nOne current limitation I see of this approach is that we always show every tick when using `tickvals`/`ticktext`. That's a more general problem that has its own issue https://github.com/plotly/plotly.js/issues/1812",
    "created_at": "2017-11-16T13:51:15Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1516#issuecomment-344928267",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1516",
    "updated_at": "2017-11-16T13:51:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@kratzert the second part of your question (labels across all subplots) is the subject of a separate issue https://github.com/plotly/plotly.js/issues/2114",
    "created_at": "2017-11-16T13:36:30Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2155#issuecomment-344924328",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2155",
    "updated_at": "2017-11-16T13:36:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@kratzert `spikemode: 'across'` already works as you suggest for stacked coupled subplots.\r\n\r\n![screen shot 2017-11-16 at 8 32 46 am](https://user-images.githubusercontent.com/2678795/32893783-c2d3c524-caa8-11e7-9657-41794cf08a7b.png)\r\n",
    "created_at": "2017-11-16T13:33:23Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2155#issuecomment-344923584",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2155",
    "updated_at": "2017-11-16T13:33:23Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> it looks amcharts has a version of this feature\r\n\r\nInteresting... per one of the pieces of #2026:\r\n> Allow hovering on arbitrary points on the plot, irrespective of whether there is data there or not. \r\n\r\nIn the amcharts version, the vertical spike is pinned to the data point while the horizontal is pinned to the cursor, even though the hover label is pinned to the data - to support that, we'd need spike positioning to be a per-axis configuration independent of hover label positioning.",
    "created_at": "2017-11-16T03:46:13Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2155#issuecomment-344806986",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2155",
    "updated_at": "2017-11-16T03:46:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> The behavior of the line should be similar to the behavior of the spikes feature, but there are several differences:\r\n\r\nIt's similar enough that we should really try to extend the spikes feature rather than add a new competing one.\r\n\r\n> The line shouldn't depend on hovermode (as spikes do at the moment), moreover it can be used in 'x' or 'y' hovermode to compare data on hover.\r\n\r\nTBH I'm not sure it's desirable for spikes to depend on `hovermode`, the current behavior is probably just what was most convenient to implement. I guess there's a question of what to do with horizontal spikes when you're comparing multiple points at the same x value (my gut reaction: show only one, the closest to the pointer), and we currently can't show spikes if `hovermode=false` because they're calculated after the hover data is determined, but that we can get around. So lets just define the behavior we want and make spikes do that.\r\n\r\n> This line should be always drawn over the nearest x/y point, regardless of whether this point is within the max hover distance or not.\r\n\r\nDo you mean this to be linked to hover behavior (ie there's no limit to max hover distance as far as hover data AND spikes) or do you mean spikes should show up all the time (based on the nearest point) but hover data should only show up when you're within our predefined max distance? The former seems clearer to me (and notice that it would encompass spikes-only mode, if used with `hovermode=false`) and also very easy to implement. But if there's a good reason we can do the latter instead. Seems like we should have a `layout` parameter like `hoverdistance` the defaults to the current range but can be set to any other value (including perhaps 0 to mean no cutoff). Then if the latter behavior is necessary we could make a `spikedistance` as well, which normally inherits from `hoverdistance`. Note that these are top-level layout attributes, *not* per-axis attributes, as in the general case that wouldn't make any sense.\r\n\r\n> For the api, does it make sense to match the existing `shapes` API for lines\r\n\r\nIn retrospect we probably should have put spike styling into a sub-container, but at this point I don't think we want to change the existing spike styling API until v2.0",
    "created_at": "2017-11-16T03:32:07Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2155#issuecomment-344805221",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2155",
    "updated_at": "2017-11-16T03:32:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yes, this will definitely be included when we address #1876 - closing it here, @apalchys feel free to contribute to the discussion over there.",
    "created_at": "2017-11-15T18:18:51Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2158#issuecomment-344681661",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2158",
    "updated_at": "2017-11-15T18:18:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @alexbyj - specifically the problem here is with the centered label: when there isn't enough room to put the label either entirely to the right or entirely to the left of the object it's labeling, we center it; but the text is not positioned properly in this case. This situation doesn't arise very often, which is why it's not well tested I guess.\r\n\r\nProbably duplicate of #865",
    "created_at": "2017-11-15T18:15:03Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2154#issuecomment-344680635",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2154",
    "updated_at": "2017-11-15T18:15:03Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@apalchys this is really interesting functionality. I think @etpinard is right that the implementation you have here is a bit too specific for us to want to include it in the library - there are so many other cool things people may want to do, such as adding a dropdown to change the data or styles, moving between more than two axes, autoscale to one trace, add curve fits... the sky's the limit!\r\n\r\nWe should figure out how to add the part that *needs* to be in the library - telling plotly.js to reserve space in the legend for these buttons and providing a hook to external code that will actually draw them - while leaving the actual button drawing and functionality on the outside. You're right BTW to make this a config option, since it would not be portable if the figure is exported or copied to another environment. I'm not quite sure what the API would need to look like, but I'd suggest we take a stab at that before doing too much coding on it 😅 ",
    "created_at": "2017-11-15T18:08:57Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2161#issuecomment-344678973",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2161",
    "updated_at": "2017-11-15T18:08:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The reorganization I'm doing as part of #2125 will simplify `Axes.list` substantially, so requiring it directly may become viable, but we can discuss that when I get that PR up, might not even be necessary at that point. I'm sure @etpinard would approve if we can avoid exposing innards like that!",
    "created_at": "2017-11-11T14:08:14Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2152#issuecomment-343667126",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2152",
    "updated_at": "2017-11-11T14:08:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> and the same logic works for groupby transforms?\r\n\r\ngroupby maps *points* 1:1 - but the output points can be in different traces even though the input points are all from the same trace. So I don't think there's any issue there, it's only aggregate transforms and self-aggregating traces that cause problems.",
    "created_at": "2017-11-03T20:10:11Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2135#issuecomment-341813408",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2135",
    "updated_at": "2017-11-03T20:10:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I think we should start out (this PR) with my original suggestion: if *any* input point in a given aggregated output point is selected, the whole output point is selected. But then we should have a discussion about how best to display partial selections going forward.\r\n\r\n@chriddyp (and @jackparmer you may have opinions here too): with transforms (and a few non-transformed types like histogram and now pie #2117) a single displayed element may correspond to multiple input points. So if you ask to select some input points, but not all the points in a given displayed element, how is that displayed element drawn?\r\n\r\nSeems like this may need to be trace-type-dependent - and maybe even configurable. For example, scatter points might just have three states they can be drawn in: deselected, selected, and partially-selected; seems like continuously variable selectedness for scatter is unlikely to make sense. But in some cases (like if the point shows the average of a bunch of data, with size being the count or sum of sizes) you might want to show the selected and deselected components as two separate points.\r\n\r\nFor histograms, or aggregated bars or pies, seems like generally you'd want to show the aggregation results for just the selected points, overlaid on the full results - which most of the time would mean the bar/slice gets divided into a selected and a deselected part, but for some aggregations (min, max) the result could be the whole bar even if it's partially selected. And for others still (avg) the result could be bigger than the original bar.\r\n\r\nPartially-selected choropleth regions? Dunno... try to fill it up from the bottom to the required area fraction?",
    "created_at": "2017-11-03T20:03:17Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2135#issuecomment-341811820",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2135",
    "updated_at": "2017-11-03T20:03:17Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> > I think selectedpoints should correspond to the pre-transform indices. What do you think?\r\n\r\n> But perhaps making `selectedpoints` match post-transform indices would be best from a performance :racehorse: standpoint.\r\n\r\nI think we should try to get back to the input indices. Determining the input indices shouldn't be too hard - `calcdata` should have that information now. Efficiently getting back from input indices to the post-transform indices may require caching something about the mapping in that direction though.\r\n\r\nThis raises a question though of what to do when only one or a few of the indices that led to an aggregated point are selected - if you set `selectedpoints` via crossfilter or something. I guess at this point if any part is selected, the result is selected?",
    "created_at": "2017-11-03T18:01:14Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2135#issuecomment-341781897",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2135",
    "updated_at": "2017-11-03T18:01:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "It's an interesting idea, not one we'll be working on in the near future but worth keeping open.",
    "created_at": "2017-11-03T13:37:01Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2118#issuecomment-341705130",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2118",
    "updated_at": "2017-11-03T13:37:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard sounds great! The only change I'd suggest is instead of `containerArrayMatch`, factor out `isDeletable` - there's more plotly.js-specific logic in there than just `containerArrayMatch`. That said, this logic is fairly obtuse and always makes me wonder how much would really be lost if we ditched it or at least simplified it...",
    "created_at": "2017-11-01T20:00:56Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2138#issuecomment-341222786",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2138",
    "updated_at": "2017-11-01T20:00:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Beautiful! 🎵  Now we really have some music for our 💃 !",
    "created_at": "2017-11-01T17:01:57Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2116#issuecomment-341169728",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2116",
    "updated_at": "2017-11-01T17:01:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I'd vote to fill the ends of cell columns to equal length as well. This doesn't *break* (or hide data) right now, but does look a little odd:\r\n\r\n![screen shot 2017-11-01 at 11 06 33 am](https://user-images.githubusercontent.com/2678795/32281320-e6b4331c-bef4-11e7-8d4c-93b7c4ceab61.png)\r\n",
    "created_at": "2017-11-01T15:08:21Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2133#issuecomment-341134305",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2133",
    "updated_at": "2017-11-01T15:08:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "cc @monfera - should be an easy one, perhaps combined with #2133 when you get a chance.",
    "created_at": "2017-11-01T15:04:20Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2130#issuecomment-341133036",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2130",
    "updated_at": "2017-11-01T15:04:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@cixzhang Great PR! @etpinard and I had a discussion about this offline though, and we concluded it actually should be a [top-level layout attribute](https://github.com/plotly/plotly.js/blob/master/src/plots/layout_attributes.js), not a config option. The advantage of this is that the result is portable (on plot.ly for example `data` and `layout` get saved with the plot but `config` is context-dependent), and easier to change (via `relayout` / `update`) - which can be useful for example if you want to try out a bunch of different themes / templates for your plot (cc @bpostlethwaite )\r\n\r\nWe're thinking `layout.colorway` - sound reasonable?",
    "created_at": "2017-11-01T14:51:51Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2136#issuecomment-341129091",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2136",
    "updated_at": "2017-11-01T14:51:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "scatter and some other types have a `style` method, and a corresponding `editType: 'style'` that gets picked up by `restyle` to short-circuit a full redraw. I'd think it would be pretty good performance just to use that pathway - and that would make it easy to put deselected points back to the normal style.",
    "created_at": "2017-10-31T19:06:25Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2135#issuecomment-340874582",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2135",
    "updated_at": "2017-10-31T19:06:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Can we just allow these style attributes (fill and text colors) to be interpreted as periodic? So if you want even-odd you give length-2 arrays, but then if you want some other period you can do that too. Granted it would be awkward in the workspace if we want these to *sometimes* not be treated as data arrays but instead get set in the style panel, but I'm sure we can sort that out. Seem nicer than adding a bunch of new special-purpose attributes that restrict you to pure even-odd.",
    "created_at": "2017-10-30T04:08:50Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2130#issuecomment-340339037",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2130",
    "updated_at": "2017-10-30T04:08:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@gdkrmr no problem, I'd much rather have reports that turn out to be easy to solve, than have real problems go unreported!",
    "created_at": "2017-10-27T17:51:21Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2129#issuecomment-340040102",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2129",
    "updated_at": "2017-10-27T17:51:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This is actually just over-broad targeting of the CSS - you've made it so every `<div>` that Plotly makes expands to 100% of its parent - and the problem that causes here is that the modebar (the buttons that usually sit in the upper right corner) are in a `<div>` so they cover up the plot. If you change your css to something more specific like:\r\n```js\r\n#myDiv {\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n```\r\nthen it all works fine.\r\n\r\nI suppose we could in principle `!important` or override with high specificity every attribute of any HTML elements we make but that doesn't seem desirable either.",
    "created_at": "2017-10-27T15:23:34Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2129#issuecomment-340002669",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2129",
    "updated_at": "2017-10-27T15:23:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "closed in #2121 ",
    "created_at": "2017-10-27T15:05:46Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2119#issuecomment-339997875",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2119",
    "updated_at": "2017-10-27T15:05:46Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@niclasmattsson thanks! Those indeed look like exactly what we would want for monotonic splines - they have small differences but all behave quite nicely.",
    "created_at": "2017-10-26T16:47:37Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/993#issuecomment-339728238",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/993",
    "updated_at": "2017-10-26T16:47:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> the drop down menu shows below the legend\r\n\r\nGreat, #2121 fixes that.",
    "created_at": "2017-10-26T15:41:39Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2119#issuecomment-339708495",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2119",
    "updated_at": "2017-10-26T15:41:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> btw: the same happens with legends.\r\n\r\n@gdkrmr Do you mean updatemenus go below legends (which, if so, will be fixed by #2121) or that legends go below colorscales (for which neither option will satisfy everyone, normally you just want to keep them from overlapping each other)?",
    "created_at": "2017-10-26T14:19:05Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2119#issuecomment-339681341",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2119",
    "updated_at": "2017-10-26T14:19:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Fixed in #2117 ",
    "created_at": "2017-10-26T14:11:05Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2048#issuecomment-339678888",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2048",
    "updated_at": "2017-10-26T14:11:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Note that pie event data changed a fair amount with #2117 - should all be for the better but if anyone was using all the various internal-use coordinates that were being reported previously you will have to find another way to retrieve them 🙈 ",
    "created_at": "2017-10-26T14:10:19Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1456#issuecomment-339678648",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1456",
    "updated_at": "2017-10-26T14:10:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "closed by #2117 ",
    "created_at": "2017-10-26T14:08:26Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2073#issuecomment-339678034",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2073",
    "updated_at": "2017-10-26T14:08:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This should work the same way as SQL `GROUP BY COL1, COL2, COL3, ...` - gives one output row per unique combination of values in all N columns.\r\n\r\nTo be clear, this is an extension of a single `aggregate` transform, and is not possible through chaining N `aggregate` transforms - in fact it's kind of the opposite effect, as adding more columns to one `aggregate` transform generates *more* output rows, whereas chaining can only give *fewer* output rows.",
    "created_at": "2017-10-26T03:37:42Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2123#issuecomment-339541742",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2123",
    "updated_at": "2017-10-26T03:37:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@AlexVvx thanks for the PR and apologies for the delay in discussing it. Your solution looks promising, but I think what we need at this point is a clear set of tests covering all the situations people can encounter with right clicks, and how they are expected to behave. Otherwise whatever we do is going to bother somebody and we'll be back here again.\r\n\r\nSeems to me the most flexible (though not necessarily the easiest to use) is maybe:\r\n- right-click on any data point/element - we should emit a `plotly_click` event and you can look at `e.event.button(s)` to determine if it was a right click\r\n- right-click over a subplot but away from data points (@etpinard help me out, I swear we already had an issue for regular left clicks this way?) - ideally we still emit an event, but maybe it can't be `plotly_click` or maybe it can be, just with empty `e.points`? Either way you look at `e.event.button(s)` to determine if it's a right click.\r\n- right-click on annotations - `plotly_clickannotation`, `e.event.button(s)`\r\n- right-click on legend (see #65)\r\n- right-click off of subplots (axes, margins...) - passes through to `graphDiv.oncontextmenu`?\r\n- anything else?",
    "created_at": "2017-10-26T02:05:32Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2101#issuecomment-339528108",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2101",
    "updated_at": "2017-10-26T02:05:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "To add some more detail to \"better, more consistent event data\":\r\n- pie events were straight out of `calcdata` before. #2117 fixed a lot of that but left `v` and `i` in place for backward compatibility - remove them.\r\n- sankey events are also still straight out of calcdata, so probably also aren't very standardized.\r\n- there are almost certainly others. We need to develop a very clear spec of what event data should look like, independent of trace/subplot type, and make sure it's implemented consistently everywhere.",
    "created_at": "2017-10-25T21:23:07Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/420#issuecomment-339475968",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/420",
    "updated_at": "2017-10-25T21:23:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "If this is a numeric x axis you should be able to get what you want by adding `null` or `''` between the segments\r\n```js\r\n{\r\n    x: [0.6, 1.4, null, 1.6, 2.4, null, 2.6, 3.4],\r\n    y: [65, 65, null, 20, 20, null, 50, 50],\r\n    mode: 'lines'\r\n}\r\n```\r\n\r\nThat won't extend to categorical axes though (see also https://github.com/plotly/plotly.js/issues/2004) and I can see various other uses for markers that scale with the data axes, so it's definitely a feature worth considering.",
    "created_at": "2017-10-25T18:06:11Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2118#issuecomment-339419076",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2118",
    "updated_at": "2017-10-25T18:07:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Good catch, these should definitely go on top.",
    "created_at": "2017-10-25T17:51:46Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2119#issuecomment-339414732",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2119",
    "updated_at": "2017-10-25T17:51:46Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@niclasmattsson thanks! Maybe the most useful way to share it is as a [gist](https://help.github.com/articles/creating-gists/) - and if a gist is formatted right with some example usage, it can be shared in action via [blocks](https://bl.ocks.org/-/about)\r\n\r\nPlotly staff are pretty swamped for the next few months, but if anyone is itching to get this into plotly.js soon we'd happily review a PR :)",
    "created_at": "2017-10-25T15:41:50Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/993#issuecomment-339373880",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/993",
    "updated_at": "2017-10-25T15:41:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "closed by #2113 ",
    "created_at": "2017-10-25T13:23:54Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2086#issuecomment-339328255",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2086",
    "updated_at": "2017-10-25T13:23:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "closed by #2113 ",
    "created_at": "2017-10-25T13:23:09Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2071#issuecomment-339328019",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2071",
    "updated_at": "2017-10-25T13:23:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Pie event data is currently very different from most other plotly event data. I'm going to clean this up as part of #2073.",
    "created_at": "2017-10-24T14:55:33Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1456#issuecomment-339018752",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1456",
    "updated_at": "2017-10-24T14:55:33Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Good idea, and you're absolutely right that the docs are unclear (or perhaps just plain wrong 🙈 ) on this point.\r\n\r\nJust to be clear though: you can already set the point color different from the box color by using both `marker.color` and `line.color`, but it's only when `boxpoints = 'suspectedoutliers'` that you can have two different colors for the sample points: one for the suspected outliers (less than 3 interquartile ranges from 1Q or 3Q), another for the full outliers (farther out).\r\n\r\nIn principle it would be nice to be able to:\r\n- separately color *all three groups* differently: non-outliers, suspected outliers, full outliers\r\n- alter other pieces of their styles - size, symbol, opacity...\r\n\r\nI suspect this means we should ditch `marker.[line.]outlercolor` and `marker.line.outlierwidth` and just make two new containers that provide everything in `marker`, one for full outliers and another for suspected outliers (only used if `boxpoints = 'suspectedoutliers'`, otherwise these get styled like outliers). Can these just be `marker`, `outliers`, and `suspectedoutliers`?",
    "created_at": "2017-10-23T20:38:44Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2112#issuecomment-338789303",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2112",
    "updated_at": "2017-10-23T20:38:44Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Good call, looks like even `layer: 'above'` shapes are still below pies and webgl plots. I suspect we could just move [`layer-above`](https://github.com/plotly/plotly.js/blob/c69aeb19a6f137b60d462244874c420cc675c91b/src/plot_api/plot_api.js#L2835) into `_toppaper` - though it should stay below [`infolayer`](https://github.com/plotly/plotly.js/blob/c69aeb19a6f137b60d462244874c420cc675c91b/src/plot_api/plot_api.js#L2851) so annotations will still be above shapes (which means the legend will also still be above shapes, unless and until we make another `layer` option.\r\n\r\nBTW @monfera I don't see a place for sankey and table traces here - I guess they will end up on top of pies (ie on the top of `_fullLayout._paper`) but seems like their relative ordering might be uncontrolled? We really need to refactor this section to more flexible while still yielding a consistent layer structure (including within one trace type if traces are added out of order)...",
    "created_at": "2017-10-23T14:00:20Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2110#issuecomment-338668296",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2110",
    "updated_at": "2017-10-23T14:00:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@talgalili this is separate from #1946 and #1965, as mentioned in https://github.com/plotly/plotly.js/issues/1812#issuecomment-335348104\r\n\r\nWe need to resurrect #303 and incorporate this into it. Unfortunately Plotly folks are extremely busy for the next few months so I don't see this getting addressed in the near future without a community volunteer to spearhead it.",
    "created_at": "2017-10-20T21:47:52Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1812#issuecomment-338330233",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1812",
    "updated_at": "2017-10-20T21:47:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "`circle-dot` with `marker.color` and `marker.line.color` set differently does have a distinct appearance, but it's generally not as useful as `circle-open-dot`, I'd say.\r\n![screen shot 2017-10-20 at 10 50 59 am](https://user-images.githubusercontent.com/2678795/31826986-a3ee1076-b584-11e7-99d0-e5c423c78ca8.png)\r\n",
    "created_at": "2017-10-20T14:51:54Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2108#issuecomment-338229342",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2108",
    "updated_at": "2017-10-20T14:51:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "another option you might find useful is `symbol: 'circle-open-dot'` which can give a similar effect, but not with different colors like this.",
    "created_at": "2017-10-20T13:52:32Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2108#issuecomment-338212919",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2108",
    "updated_at": "2017-10-20T13:52:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ha, strange. I guess it's not well-defined what browsers should do when the line width is greater than the diameter of the circle, and they handle it differently.\r\n\r\nI don't think there's anything we can do to get them to behave the same way, but it will be more flexible for you anyway if you simply use two traces with the same data, one with markers and lines and one with only markers.",
    "created_at": "2017-10-20T13:49:54Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2108#issuecomment-338212196",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2108",
    "updated_at": "2017-10-20T13:49:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks great! 💃 ",
    "created_at": "2017-10-19T18:15:51Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2094#issuecomment-337992818",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2094",
    "updated_at": "2017-10-19T18:15:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@Melmoth-the-Wanderer we'll make sure you don't get stuck! Can you show a code snippet of how your custom contextmenu works? Then we can see if that works for @AlexVvx's use case and/or figure out if we can't make something cleaner and easier for everyone.",
    "created_at": "2017-10-19T18:14:38Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2101#issuecomment-337992450",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2101",
    "updated_at": "2017-10-19T18:14:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@monfera the idea is that the only reason `node3` would not be set is if the trace is not visible. So if we filter invisible traces out before even calling `selectPoints`, we don't have to worry about this kind of error in any of the individual modules.",
    "created_at": "2017-10-18T18:08:50Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2099#issuecomment-337679196",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2099",
    "updated_at": "2017-10-18T18:08:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Good catch @Melanie-M - and thanks for the clear codepen.",
    "created_at": "2017-10-18T16:18:31Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2097#issuecomment-337645994",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2097",
    "updated_at": "2017-10-18T16:18:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Likely duplicate of #1807 ?",
    "created_at": "2017-10-17T12:16:35Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2095#issuecomment-337212471",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2095",
    "updated_at": "2017-10-17T12:16:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ah crap - it's not that simple 😢 \r\n![screen shot 2017-10-16 at 1 54 32 pm](https://user-images.githubusercontent.com/2678795/31626963-9514f046-b279-11e7-830f-5ef9479d5e8e.png)\r\n",
    "created_at": "2017-10-16T17:55:15Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2091#issuecomment-336971174",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2091",
    "updated_at": "2017-10-16T17:55:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "closed by @AlexVvx in https://github.com/plotly/plotly.js/pull/2087",
    "created_at": "2017-10-16T17:00:49Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/248#issuecomment-336952967",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/248",
    "updated_at": "2017-10-16T17:00:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Fantastic @AlexVvx - thanks for the PR and updates! 💃  - we're calling this a bug fix, so it can go in the release we're planning later today.",
    "created_at": "2017-10-16T16:59:13Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2087#issuecomment-336952475",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2087",
    "updated_at": "2017-10-16T16:59:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "(and since the `y` axis is categorical, the bar traces should be horizontal)",
    "created_at": "2017-10-16T16:45:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2089#issuecomment-336947690",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2089",
    "updated_at": "2017-10-16T16:45:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "You might be able to hack it out using `marker.line.width`, but perhaps better (in terms of zoom behavior particularly) would be overlaid `bar` charts using explicit `width`, `offset`, and `base`. Would that work?",
    "created_at": "2017-10-16T16:42:13Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2089#issuecomment-336946779",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2089",
    "updated_at": "2017-10-16T16:42:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "It turns out to be super easy to have this report the *actual* data range in each bin, and there's something nice about this from a theoretical standpoint as it gives you more real information about your data, rather than just clarifying the meaning of what you can already see on the plot.\r\n\r\nIf the data in the bin span a range, you see that range:\r\n![screen shot 2017-10-13 at 2 47 25 pm](https://user-images.githubusercontent.com/2678795/31561326-832b60fa-b025-11e7-877b-71e38de2b19d.png)\r\n\r\nIf the data in the bin are all at the same value, you just see that value:\r\n![screen shot 2017-10-13 at 2 47 40 pm](https://user-images.githubusercontent.com/2678795/31561378-a504a86c-b025-11e7-8be6-e77c0218dcd8.png)\r\n\r\nOn the other hand I suspect a lot of users are more interested in clarification, but also when you see `Jan 1, 2012 .. Jan 5, 2012, 13:45` it could be confusing to know what the bin size actually *is*, or be interpreted to mean that a sample before Jan 1 would go in the previous bin, even though that bin really goes back to mid December.\r\n\r\nFiguring out what to display as the range for a bin otherwise - ie to get `0 .. 0.99` rather than `0 .. 1` (which would make it ambiguous which bin 1 goes into) - is a little bit tricky, but I think we can do it directly from the data without asking the user to specify it. In our algorithm a value at the bin start is included in that bin, and at the bin end is excluded, so basically my thought is: what we need is to find how many digits (or date parts) you need such that the range from bin start (rounded to that value) to bin end minus that value (again rounded to that value) always encompasses the min and max values within that bin. We'd also notice if all data is at bin center and fall back on the current behavior.\r\n\r\nA disadvantage of that scheme is that it doesn't allow you to express increments other than full digits or date parts. So if you data is on ten-minute increments, you'd get one-minute precision from the bin, and if your data has increments of 0.05, you'd see 0.01 precision from the bin. I feel like this is acceptable for a first cut though, and if people want more control we can add an attribute for it later.\r\n\r\nThoughts @chriddyp @etpinard (and @mewalig if you're still interested)?\r\n\r\nAnd a separate question: thoughts on the format, `0 .. 0.99` vs `0 - 0.99`?",
    "created_at": "2017-10-13T19:53:41Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2086#issuecomment-336551560",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2086",
    "updated_at": "2017-10-13T19:53:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Sounds great! `hoveron` and its values sound perfect. Only question is about:\r\n> 'boxes' would take precedence when cursor is over a box\r\n\r\nI'd probably have gone the other way, since the box is large and has a permissive hover region, give the points small hover regions (reuse the way scatter does it) but let them take precedence within that region.",
    "created_at": "2017-10-13T16:48:36Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/192#issuecomment-336506698",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/192",
    "updated_at": "2017-10-13T16:48:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Actually might be natural for me to tackle this alongside #2071 ",
    "created_at": "2017-10-13T13:47:38Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2086#issuecomment-336457241",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2086",
    "updated_at": "2017-10-13T13:47:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Closing in favor of #2086",
    "created_at": "2017-10-13T13:36:31Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/69#issuecomment-336454405",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/69",
    "updated_at": "2017-10-13T13:36:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Closing #69 and bringing the important comments here.\r\n\r\nI said:\r\n> What I'd prefer to do is make smarter hover text for histograms. So the axis labels (which may or may not correspond to bins) can stay as they are, unless you use `ticktext`, but the hover text will be smarter - perhaps even showing the actual range of data aggregated in the bin, which would provide more useful information than just what the precise edges of the bin are.\r\n\r\n@mewalig replied:\r\n> in case it is helpful to know, in my experience documenting ranges for financial services transactions, being able to show the ranges in the form of \"x.00 - y.99\" (to however many zeros and nines the creator wants/needs) is the most useful, because it shows not only the exact range, but also conveys the rounding approach that was used (e.g. \"first round to two decimal places, then put in the corresponding bin\"). I'm not saying that is what this library should default to, but it would be great if it was able to support a way to achieve that.",
    "created_at": "2017-10-13T13:36:13Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2086#issuecomment-336454325",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2086",
    "updated_at": "2017-10-13T13:36:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "related: #69 - this would be nice for all histograms, not just on date axes.",
    "created_at": "2017-10-13T00:03:52Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2086#issuecomment-336313958",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2086",
    "updated_at": "2017-10-13T00:03:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Good idea, similar to the `selecting` vs `selected` events. I imagine it would be very easy to slow the system down unbearably this way (panning & live zooming take shortcuts to adjust the plots much faster than a normal `relayout` with a changed range) but there are cases where this would work fine, or other things you might want to do with those ranges besides updating other plots.",
    "created_at": "2017-10-12T21:00:12Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2082#issuecomment-336265489",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2082",
    "updated_at": "2017-10-12T21:00:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I'd vote for merging it with #1876\r\n\r\n[sure](https://github.com/plotly/plotly.js/issues/1876#issuecomment-336255376)",
    "created_at": "2017-10-12T20:25:32Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2083#issuecomment-336255611",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2083",
    "updated_at": "2017-10-12T20:25:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "From plotly/plotly.py#2083 - certain trace types (bars, fill to zero) currently force the axis autorange to include zero. We should let the user override that.",
    "created_at": "2017-10-12T20:24:44Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1876#issuecomment-336255376",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1876",
    "updated_at": "2017-10-12T20:24:44Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "From @Animus451 in #2085:\r\n\r\n> Whatever method is used to generate the spline often distorts the data set to which the curve is being fit. [Some graphs can show] false extrema as a result of the spline.\r\n> While this kind of spline may work for some situations, a more generally useful spline would be a monotonic polynomial regression. This specifically prevents distorted representations of extrema.\r\n\r\n@rreusser's response:\r\n\r\n> A good suggestion! Current behavior is actually 2D catmull-rom splines. That means there's no favored independent variable or axis. Which in turn means, I guess, monotonic _with respect to what_? Which then means this would perhaps take the form of `shape: 'spline' | 'monotonicx' | 'monotonicy'`. Or `shape: 'spline', monotonic: false | 'x' | 'y'`, though the latter makes the 'smoothing' parameter unused for that case, which is just a bit awkward.\r\n> \r\n> Paths are computed for use [here](https://github.com/plotly/plotly.js/blob/master/src/traces/scatter/plot.js#L218-L241) and step paths (perhaps most similar to this case) are computed [here](https://github.com/plotly/plotly.js/blob/master/src/components/drawing/index.js#L547-L577). It would then be a matter of computing a monotonic path (in screen coordinates, I believe). The math is [here](https://en.wikipedia.org/wiki/Monotone_cubic_interpolation).\r\n> \r\n> It certainly seems reasonable and perhaps not even that difficult, though I don't believe it's currently on the radar. A PR would be gladly accepted though. Glad to help think it through, otherwise those are my thoughts on what it would take.\r\n\r\nI'd probably vote for all of these options to become different `line.shape` values, despite the fact that they're all splines so it's a little weird in retrospect to call only Catmull-Rom a spline.\r\n\r\nI'll note that the monotone algorithm implemented by d3 is a bit funny - it can still give extrema that aren't *quite* data values (if it did, each local extreme data point would need to have the curve pass through it with exactly zero derivative), and has some strangely unstable behavior as points pass each other in y value. So we may want to revisit exactly how that should work before we blindly copy or use it.\r\n![monotone](https://user-images.githubusercontent.com/2678795/31517085-cb1bec76-af68-11e7-8dac-a8d7cfb40078.gif)",
    "created_at": "2017-10-12T20:22:11Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/993#issuecomment-336254751",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/993",
    "updated_at": "2017-10-12T20:22:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for pointing to #993 - it is indeed a duplicate, lets keep the discussion contained over there.",
    "created_at": "2017-10-12T20:04:40Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2085#issuecomment-336250327",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2085",
    "updated_at": "2017-10-12T20:04:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yes, the current behavior is intentional - the idea being that if you're filling to zero, the absolute magnitude is important to represent visually, similarly to a bar chart. But I can certainly understand the interest in modifying that behavior. See also #1876 ",
    "created_at": "2017-10-12T19:39:27Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2083#issuecomment-336243939",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2083",
    "updated_at": "2017-10-12T19:39:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Good catch @monfera - I don't care exactly what route you take, but as long as the event always has a `points` array (even if it's empty) and it's robust against missing inputs, I'm happy.",
    "created_at": "2017-10-12T14:57:50Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2081#issuecomment-336163776",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2081",
    "updated_at": "2017-10-12T14:57:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "duplicate of https://github.com/plotly/plotly.js/issues/1346",
    "created_at": "2017-10-11T15:14:22Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2079#issuecomment-335844888",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2079",
    "updated_at": "2017-10-11T15:14:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "For context, the relevant code is in [legend/style](https://github.com/plotly/plotly.js/blob/master/src/components/legend/style.js#L121)\r\n\r\nThat line bounds the size to between 2 and 16 px. I gather you'd like the 2 to be bigger? It's often helpful to have them different for different traces, particularly when size is a constant per trace. I suppose there would be an argument though that when size is an array we should choose some constant for all of them... But I also see two other problems here:\r\n- we should adjust this range based on the legend font size.\r\n- the size we pick doesn't account for `sizemin`, `sizemode`, or `sizeref` - the latter in particular can mean the legend size has no relation to the actual marker size. So we don't need to reinvent the wheel there, I'll note that the `calcdata` points contain `mrc` (marker radius calculated) which we can convert back to a diameter-based reference-1 size easily (just doubling it, I think)",
    "created_at": "2017-10-11T15:11:18Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2080#issuecomment-335843934",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2080",
    "updated_at": "2017-10-11T15:11:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@AlexVvx interesting, thanks for the PR! I wonder though if there isn't a simpler solution - we probably don't really want to trigger `dragelement` if you right click no matter what. Can we just look at `e.button` and/or `e.buttons` and bail out of `onStart` if it's not a left-click? If we do that, your own `contextmenu` event handler should pick up the event, right?\r\n\r\nI haven't looked at browser support of the button attributes - note that we target IE9+ in addition to current versions of Chrome, FF, Edge, and Safari.\r\n\r\nTouch interactions are an interesting case, you generally get `contextmenu` on a long press there, right? But might this already work correctly, since in touch environments we don't create a `coverSlip` at all (which I'm assuming is what interferes with the expected `contextMenu` on desktop)?",
    "created_at": "2017-10-10T19:57:32Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/248#issuecomment-335589462",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/248",
    "updated_at": "2017-10-10T19:57:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@apalchys great, thanks for the changes! I linted and updated the baseline image for the new \"first\" logic. I think this is ready to go (assuming tests pass this time - ignore appveyor) but we're going to wait a few days to merge to master, so we can give v1.31 any bugfixes it needs before adding features (which will go in v1.32.0)",
    "created_at": "2017-10-10T15:29:10Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1965#issuecomment-335511681",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1965",
    "updated_at": "2017-10-10T15:29:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I asked the question in case we could have locked down some behavior in a meaningful test.\r\n\r\nI thought about that a little and didn't see anything. Our own [mouse_event](https://github.com/plotly/plotly.js/blob/master/test/jasmine/assets/mouse_event.js#L27) helper will fail outside the window (`document.elementFromPoint` returns `null`) so I don't really see a way to trigger the browser's internal behavior.\r\n\r\nFortunately the new behavior is actually simpler on our side than the old, as it doesn't need to worry about `mouseOut`.",
    "created_at": "2017-10-10T14:42:18Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2075#issuecomment-335495637",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2075",
    "updated_at": "2017-10-10T14:42:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> So I would either rename #699 or close and open a new issue named: toImage in Edge.\r\n\r\nA new issue seemed clearest -> #2077 ",
    "created_at": "2017-10-10T14:17:07Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2068#issuecomment-335487334",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2068",
    "updated_at": "2017-10-10T14:17:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "superseded by #2077 for clarity",
    "created_at": "2017-10-10T14:16:16Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/699#issuecomment-335487042",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/699",
    "updated_at": "2017-10-10T14:16:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Looks good to me. \r\n\r\nis that a 💃 ?\r\n\r\n> I'm curious though, what made you investigate `document` mouse events on drag in the first place?\r\n\r\nJust noticed that google maps allows dragging like that and wondered how 🤔 ",
    "created_at": "2017-10-10T14:09:29Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2075#issuecomment-335484787",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2075",
    "updated_at": "2017-10-10T14:09:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "As discussed in https://github.com/plotly/plotly.js/pull/1965#issuecomment-335346105 I think this is a different issue, and might be solved by something like #303 which we could generalize for the `tickmode = 'array'` case like \"iterate through the array and display each tick iff it's more than n pixels away from all the others we've already drawn\"",
    "created_at": "2017-10-10T03:16:33Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1812#issuecomment-335348104",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1812",
    "updated_at": "2017-10-10T03:16:33Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "TBH I'm not sure what the goal is with adding `category` axes here.\r\n- `category` axes DO use `dtick` (see eg [category_dtick_3](https://github.com/plotly/plotly.js/blob/master/test/image/mocks/category_dtick_3.json) that has enough categories we don't show them all, we automatically drop to every third one)\r\n- `category` axes [DO NOT](https://github.com/plotly/plotly.js/pull/1965/files#diff-c30c6b02252b22e7980a1adfffa7c9c3R42) use `tickformat` - what would it do? Categories are already explicit strings. so `tickformatstops` also seems to me not to apply.\r\n- `tickvals` and `ticktext` can be used with any axis type, but it would frankly be kind of weird to use them with `category`, why wouldn't you just use the label you want as the category? They're normally for putting specific ticks on other axis types.\r\n\r\n@talgalili mentioned:\r\n> the ability to have something like `nticks` to be respected when `tickmode='array'`\r\n\r\nThat to me seems like a separate issue from what we're dealing with here. This PR is about how to *format* the ticks, not about which ticks to show. There's another long-neglected PR #303 that may be what you're interested in for this purpose: setting a minimum pixel distance between ticks. I think that's probably the only way you can solve this for the `tickmode='array'` case: nothing is guaranteed about their spacing otherwise so solutions like \"display every nth tick\" wouldn't work, but \"iterate through the array and display each tick iff it's more than n pixels away from all the others we've already drawn\" would work. @talgalili do you want to take this part of the discussion over there and see if we can revive that PR? Plotly staff may not be able to get to it any time soon though, but maybe someone else wants to pitch in...",
    "created_at": "2017-10-10T03:02:17Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1965#issuecomment-335346105",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1965",
    "updated_at": "2017-10-10T03:02:17Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> If ranges overlaps, the code takes max applicable range\r\n\r\nI would actually prefer to take the *first* matching entry. Seems to me this is easier for users to parse, easier and more flexible to generate (you can start from the lowest and specify `[null, max]` for each of the `dtickrange` settings if you want, or start from the top and specify `[min, null]`) and more efficient in our code (we can bail out of the loop at the first match).",
    "created_at": "2017-10-10T02:25:31Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1965#issuecomment-335340717",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1965",
    "updated_at": "2017-10-10T02:25:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> As a sidenote, I don't think this really affects #699. This change only fixes a regression to do with SVG files generated in IE/Edge.\r\n\r\nAh good read - seems that issue morphed after it was originally posted, as the initial report did deal with a regression introduced in v1.13.0 but later on a discussion of possible improvements for Edge specifically was added. Good, I will leave #699 open after this gets merged.",
    "created_at": "2017-10-10T02:11:19Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2068#issuecomment-335338773",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2068",
    "updated_at": "2017-10-10T02:11:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I do like those mocks a bit better, but now I'm rather confused... parcoords plots look fine in IE11 but according to a quick check on browserstack neither `alignment-baseline` nor `dominant-baseline` works there? How is that possible? Suffice it to say it doesn't seem to me like these attributes (or styles?) are really ready for prime time. How hard would it be to 🔪  them entirely?\r\n\r\ndominant baseline chrome - http://bl.ocks.org/eweitnauer/7325338 (assumed to be the authority)\r\n![dominant baseline chrome](https://user-images.githubusercontent.com/2678795/31362904-fff9b136-ad28-11e7-879f-cd04b5036c53.png)\r\n\r\ndominant baseline ff - seems to work but somewhat differently (baseline-shift fails, dominant-baseline has small differences)\r\n![dominant baseline ff](https://user-images.githubusercontent.com/2678795/31362909-0b2dd578-ad29-11e7-8487-60a1a8688826.png)\r\n\r\ndominant baseline ie11 - fail\r\n![dominant baseline ie11](https://user-images.githubusercontent.com/2678795/31362913-0edb6e92-ad29-11e7-9f2d-5952e4f6b23f.png)\r\n\r\nalignment baseline chrome - https://bl.ocks.org/emmasaunders/0016ee0a2cab25a643ee9bd4855d3464\r\n![alignment baseline chrome](https://user-images.githubusercontent.com/2678795/31362920-12bfea88-ad29-11e7-9530-fbff68814f55.png)\r\n\r\nalignment baseline ff - fail\r\n![alignment baseline ff](https://user-images.githubusercontent.com/2678795/31362924-151a45bc-ad29-11e7-8346-140e8fffdfe2.png)\r\n\r\nalignment baseline ie11 - fail\r\n![alignment baseline ie11](https://user-images.githubusercontent.com/2678795/31362928-18978538-ad29-11e7-902a-19fcf6895a40.png)\r\n",
    "created_at": "2017-10-09T23:43:30Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2076#issuecomment-335318828",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2076",
    "updated_at": "2017-10-09T23:43:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@apalchys apologies for letting this languish. I'm looking at the open pieces now. In merging master it looks like the issue you encountered with `strict_d3` was also solved independently by #1994 - looked to me as though they both would work fine, I elected to keep #1994 but with your added comment. Does it still work correctly for you?",
    "created_at": "2017-10-09T19:42:48Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1965#issuecomment-335265921",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1965",
    "updated_at": "2017-10-09T19:42:48Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Good catch, thanks! 💃 ",
    "created_at": "2017-10-09T19:00:12Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2074#issuecomment-335255910",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2074",
    "updated_at": "2017-10-09T19:00:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @arbscht - and thanks again for the fix that got us most of the way there! I'm going to wait for a review from @etpinard or @bpostlethwaite before merging - which with any luck will NOT come today 🇨🇦 🦃 ",
    "created_at": "2017-10-09T11:58:38Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2068#issuecomment-335136793",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2068",
    "updated_at": "2017-10-09T11:58:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@ricazhang here's a hacky way to get the effect you want, using unicode symbols. As tick marks are supposed to guide the eye along a line to data points, and circles subvert that goal, I might be inclined to leave it at this hack.\r\n\r\n```js\r\nPlotly.newPlot(gd, [{x:[2010, 2013, 2016, 2019], y: [0, 5, 2, 7]}], {\r\n    xaxis: {tickprefix: '\\u25cf<br>', color: '#888'},\r\n    yaxis: {ticksuffix: ' \\u25cf', color: '#888'},\r\n    width: 600, height: 400\r\n})\r\n```\r\n![screen shot 2017-10-08 at 12 13 34 am](https://user-images.githubusercontent.com/2678795/31313866-2fd5314e-abbe-11e7-9e6f-e6c1541550ce.png)\r\n",
    "created_at": "2017-10-08T04:21:36Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2051#issuecomment-334982082",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2051",
    "updated_at": "2017-10-08T04:21:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@ricazhang interesting, not a style I've ever seen before, what's the motivation for it?\r\n\r\nWe would happily accept a pull request adding this feature.",
    "created_at": "2017-10-06T19:51:10Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2051#issuecomment-334853559",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2051",
    "updated_at": "2017-10-06T19:51:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "closed by #2069 (for Chinese anyway, something like @n-riesco's suggestion would be nice if we get these reports for any other languages. ",
    "created_at": "2017-10-06T18:15:41Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1630#issuecomment-334831543",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1630",
    "updated_at": "2017-10-06T18:15:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks! I bet for compatibility with any arbitrary language we could do something even more permissive like `/\\(([^\\(\\)]*\\)\\)/` - or even drop the timezone, it's not the most crucial bit of info there. But I'm glad this fixes it for Chinese anyway. 💃 ",
    "created_at": "2017-10-06T18:12:46Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2069#issuecomment-334830860",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2069",
    "updated_at": "2017-10-06T18:12:46Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "That's not a syntax we intend to support.\r\n\r\nYou can use this though:\r\n```js\r\nPlotly.restyle(graphDiv, {\r\n    marker: [\r\n        {color: [\"green\", \"red\", \"blue\", \"yellow\"]},\r\n        {color: [\"yellow\", \"blue\", \"red\", \"green\"]},\r\n        {color: [\"blue\", \"blue\", \"green\", \"green\"]}\r\n    ]\r\n});\r\n```\r\nNote though that `{'marker.color': ...}` and `{marker: {color: ...}}` behave differently: the latter replaces the whole `marker` container with the new one, so you lose size etc. This is in fact the *reason* we have the `marker.color` syntax.",
    "created_at": "2017-10-06T17:36:45Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2066#issuecomment-334821899",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2066",
    "updated_at": "2017-10-06T17:36:45Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "possibly related to (or duplicate of even) #699 ?",
    "created_at": "2017-10-06T13:58:27Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2063#issuecomment-334762693",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2063",
    "updated_at": "2017-10-06T13:58:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "closed by #2060 ",
    "created_at": "2017-10-05T20:05:01Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1660#issuecomment-334576942",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1660",
    "updated_at": "2017-10-05T20:05:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Take a look at https://github.com/plotly/plotly.js/pull/2055/commits/7f2604a6987925e0f211fe1f35b0821f0832dafb#r142793932 but other than that I'm happy - patching a functionality hole while DRYing up a bunch of things -> 💃 !",
    "created_at": "2017-10-04T21:28:38Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2055#issuecomment-334294903",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2055",
    "updated_at": "2017-10-04T21:28:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> is it decided that plot state will be fully specified? That'd include things like zoom level, pan position, the use of a selection box or even the contours of a lasso.\r\n\r\nYes. Specify all the things.\r\n\r\n> I guess the key part is that we somehow avoid feeding UI scrolling from feeding back into controlled UI updates.\r\n\r\nWe can certainly throttle these events (wooo we have a [util](https://github.com/plotly/plotly.js/blob/master/src/lib/throttle.js) for that 🎉 ) but we definitely want users to be able to watch the scroll state, and for example highlight points on a separate plot corresponding to the visible rows, and vice versa - click a point and scroll to that row in the table (hmm, those are a little more involved, as they require not only the pixel scroll, which is required to fully specify the state, but also some way to translate that bidirectionally to row numbers). Anyway my more immediate concern is other edits not resetting the table scroll - like the issues @etpinard fixed for geo plots in #2030.\r\n\r\n________________________\r\n@monfera edit here, as we don't have threading and topic locality is nice: added the need for full representation as an item to the follow-up issue https://github.com/plotly/plotly.js/issues/2056",
    "created_at": "2017-10-03T19:18:49Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2052#issuecomment-333949519",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2052",
    "updated_at": "2017-10-03T22:20:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks to me like `shape-rendering: crispEdges` is getting inherited in a few places it shouldn't: the scroll handle and MathJax are where I notice it.",
    "created_at": "2017-10-03T19:24:02Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2052#issuecomment-333950868",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2052",
    "updated_at": "2017-10-03T19:24:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "thinking ahead to `Plotly.react`, we'll probably need an attribute for scroll position, so the trace attributes fully specify the view. Also for export, people may want to be able to snapshot at the current view.",
    "created_at": "2017-10-03T16:32:06Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2052#issuecomment-333902632",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2052",
    "updated_at": "2017-10-03T16:32:06Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nothing to do with the precision, we're just showing the full bar now (down to the \"zero\" of dates ie 1970) and we weren't before. Seems like an easy fix to replace the old behavior, leaving aside the fact that this is a strange way to use a bar chart, and has some other odd side-effects - like if you set y before 1970 it'll be an upside-down bar - I guess if we want to support this we should really have the bars extend down to `-Infinity`?",
    "created_at": "2017-10-02T16:35:46Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2049#issuecomment-333590033",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2049",
    "updated_at": "2017-10-02T16:35:46Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "No more comments from my side - nicely done! 💃 ",
    "created_at": "2017-10-02T15:44:31Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2045#issuecomment-333574883",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2045",
    "updated_at": "2017-10-02T15:44:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I believe this happens because the [coverslip](https://github.com/plotly/plotly.js/blob/master/src/components/dragelement/index.js#L197) is appended to `document.body`, rather than `gd` or one of its children. We do this so that the coverslip can cover the whole window, which lets you do things like drag off the edge of the plot while zooming or panning. I suppose we could imagine a config option to allow you to append the coverslip to something else, that might fix it.",
    "created_at": "2017-09-29T18:52:14Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/999#issuecomment-333208797",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/999",
    "updated_at": "2017-09-29T18:52:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ha crazy - you can't call `d3.select(node).style('stroke-width')` or any other attribute for that matter before the element is part of the DOM. I guess it makes sense that d3 can't call `getComputedStyle` in this case (though apparently FF and Chrome disagree on whether it makes sense) even though `node.style['stroke-width']` is available. Oh well, it was only a shortcut to read styles back anyway rather than just pass the style info in from above.",
    "created_at": "2017-09-29T18:00:47Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/992#issuecomment-333196396",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/992",
    "updated_at": "2017-09-29T18:00:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@brechmos-stsci late reply here, I'm just combing through old bugs.\r\n\r\nYou've got two points with identical x values and one with a slightly different x. What we try to do in this case is use the full x range (`1.9743192951795587 - 1.9743192951795583 = 4e-16`) to scale the x axis, then here because there are markers we add 5% to the range on either side so nothing is squished on the edge. But you're really close to the limit of javascript's double precision floating point here, so that we can't actually change the range by 5% - that rounds down to no change at all. This is also why the tick labels fail on that plot.\r\n\r\nI suppose we could do something like limit the minimum fractional span of an axis `(range[1] - range[0]) / ((range[1] + range[0]) / 2) > 1e-14`. That would probably be better than letting things break like this. See also #1320.",
    "created_at": "2017-09-29T17:29:03Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1070#issuecomment-333188048",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1070",
    "updated_at": "2017-09-29T17:29:03Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Just to be clear what @etpinard means by \"poor user input object management\" - the issue is that we mutate the `layout` object you pass in, so the workaround is to create a new `layout` object for each `newPlot` call.\r\n\r\nWe can only fix this in v2, at which point we can clone `data` and `layout` and mutate those rather than the ones you pass in.",
    "created_at": "2017-09-29T17:02:24Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1231#issuecomment-333181879",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1231",
    "updated_at": "2017-09-29T17:02:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Not noticeable for me on FF55 on Ubuntu 16.04.\r\n\r\nGreat - I'm going to close then, as \"fixed by Firefox.\"",
    "created_at": "2017-09-29T16:36:34Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/573#issuecomment-333175737",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/573",
    "updated_at": "2017-09-29T16:36:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "A quick check on Browserstack shows:\r\n- on win 7+ this fails with FF 51 and below but was fixed in FF 52.\r\n- on win XP the latest FF (49) does not show the bug.\r\n- on various mac OS's all FF versions seem OK.\r\n\r\nDebugging in FF is nearly impossible for our code, for some reason (really hoping Quantum fixes this)... @etpinard or @dineshu07 can you confirm that in recent linux FF versions this is fixed? And if so can we close this issue?",
    "created_at": "2017-09-29T16:04:18Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/573#issuecomment-333167961",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/573",
    "updated_at": "2017-09-29T16:04:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard I'm not seeing errors in that codepen - can we close this?",
    "created_at": "2017-09-29T15:49:24Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/515#issuecomment-333163989",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/515",
    "updated_at": "2017-09-29T15:49:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This seems to have been fixed - probably by #1194. Feel free to reopen if you still see the problem.",
    "created_at": "2017-09-29T15:47:25Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/482#issuecomment-333163470",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/482",
    "updated_at": "2017-09-29T15:47:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard Is #1972 going to make this upgrade possible?",
    "created_at": "2017-09-29T15:17:16Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2029#issuecomment-333155194",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2029",
    "updated_at": "2017-09-29T15:17:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃  from my side. I have more thoughts about `scrollZoom` but we can discuss that more in the v2 issue #420 ",
    "created_at": "2017-09-28T22:11:06Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2041#issuecomment-332978155",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2041",
    "updated_at": "2017-09-28T22:11:06Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard I had to do (as expected) a fair amount of work pruning merge conflicts in [`select_test`](https://github.com/plotly/plotly.js/blob/6da3cfa39e88697f1db57f20bd76debc201706c9/test/jasmine/tests/select_test.js) - would you mind giving it a look to make sure I preserved your intentions?",
    "created_at": "2017-09-28T21:45:09Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2040#issuecomment-332972744",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2040",
    "updated_at": "2017-09-28T21:45:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 🕺 💃 🕺 \r\n\r\nFantastic work - so much more solid and well-reasoned!",
    "created_at": "2017-09-28T17:53:16Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2030#issuecomment-332914223",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2030",
    "updated_at": "2017-09-28T17:53:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> > If I do Plotly.relayout(gd,{coastlinewidth:10}) (still using geo_orthographic), occasionally (I really can't figure out when  ) the viewport shrinks:\r\n\r\n> There might be other situations where `clipPath: 1e-2` will fail too. Maybe setting it to `0.1` would be safer. Oh well, I couldn't get geo to break with `clipPath: 1e-2`. \r\n\r\nI'm uncomfortable with this solution. For example, what if you zoom in sufficiently that 0.1 (or even 0.01) is a noticeable fraction of the range? I think we need to step back and look into where this is coming from a little closer.\r\n\r\nThe bug exists on master (in fact it's worse, you just get the top or bottom half of the viewport rather than a centered half, see below) so lets ignore it for this PR and make a new bug report for it.\r\n![screen shot 2017-09-28 at 12 32 09 pm](https://user-images.githubusercontent.com/2678795/30978641-1d85ffc2-a449-11e7-995b-db67b42f33df.png)\r\n",
    "created_at": "2017-09-28T16:33:07Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2030#issuecomment-332892220",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2030",
    "updated_at": "2017-09-28T16:33:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Can you clarify the last point? For me when scrollZoom: false,\r\n> - scatter: no mousewheel zoom\r\n> - scattergl: mousewheel zoom \r\n> - scatter3d: mousewheel zoom\r\n\r\nI think scatter and scattergl should match, but scatter3d should have wheel zoom enabled always.",
    "created_at": "2017-09-28T13:46:03Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2041#issuecomment-332841108",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2041",
    "updated_at": "2017-09-28T13:46:03Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice, definitely better parity this way. Playing with it now though, I wonder if something a little slower (maybe half this speed?) might be best for both versions. I still think you're right not to have it configurable though.\r\n\r\nAlso, we decided long ago that 3D should have scroll zoom on always, but for SVG you need to have `config.scrollZoom: true` to enable it. Seems like gl2D should respect this as well, right?",
    "created_at": "2017-09-28T13:39:43Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2041#issuecomment-332839286",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2041",
    "updated_at": "2017-09-28T13:39:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard and I discussed bubble opacity a bit more - I was on the fence but he won me over with keeping symmetry with regular `scatter`. So the behavior introduced here is great.",
    "created_at": "2017-09-27T16:02:56Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2030#issuecomment-332571262",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2030",
    "updated_at": "2017-09-27T16:02:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "More detail: horizontal and vertical lines can't be reshaped, only moved. Diagonal lines *can* be reshaped, but only within the quadrant they start in. Sounds like they're using the same algorithm as shapes with area, which isn't really appropriate there. They should use something closer to what annotations use - which also includes invisible handles which are wider than the line itself, particularly at the end, to make it easier to grab.\r\n\r\nA question: should we snap to horizontal and vertical, and/or the original angle the line had? Most of the time this is useful, but on occasion you really do want slightly off-angle lines. Annotations currently have no snapping. I suppose one option would be no snapping at first, but some time later add snapping at the same time as we add the ability to *select* just one endpoint/corner and move it pixel-by-pixel with arrow keys.",
    "created_at": "2017-09-26T18:35:43Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2038#issuecomment-332293882",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2038",
    "updated_at": "2017-09-26T18:35:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> `marker.opacity` wasn't applied properly on `scattergeo` bubbles\r\n\r\nWas it just the default being applied improperly, or was opacity not supported before?\r\n\r\nI'm a bit torn about whether this is the right default for scattergeo or not. On one hand, transparency lets you see borders behind the bubble, so it's clearer where it is. On the other hand, all those extra lines (and colors, if you color the water or something) make it harder to quickly gauge the bubble size and/or color. It's also a behavior change people might not want in their existing plots. Thoughts @jackparmer @chriddyp @cldougl ?",
    "created_at": "2017-09-22T21:20:57Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2030#issuecomment-331563482",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2030",
    "updated_at": "2017-09-22T21:20:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "re: https://github.com/plotly/plotly.js/pull/2030/commits/eaf44a8fb898e55a3f8679469425ab1ade7d6f7b - [geo_scattergeo-out-of-usa.png](https://github.com/plotly/plotly.js/blob/eaf44a8fb898e55a3f8679469425ab1ade7d6f7b/test/image/baselines/geo_scattergeo-out-of-usa.png) looks the same as https://plot.ly/~jackp/17904/ and the errors @jackparmer mentioned were appearing on hover, so just running the image test won't catch them, will it?",
    "created_at": "2017-09-22T21:04:57Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2030#issuecomment-331560323",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2030",
    "updated_at": "2017-09-22T21:04:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "If I do `Plotly.relayout(gd,{coastlinewidth:10})` (still using `geo_orthographic`), occasionally (I really can't figure out when ☹️ ) the viewport shrinks:\r\nbefore:\r\n![screen shot 2017-09-22 at 4 27 30 pm](https://user-images.githubusercontent.com/2678795/30763509-7fc5c760-9fb4-11e7-82b4-52d427217196.png)\r\n\r\nafter:\r\n![screen shot 2017-09-22 at 4 28 13 pm](https://user-images.githubusercontent.com/2678795/30763513-861233d8-9fb4-11e7-947d-ad55dc5674d8.png)\r\n\r\nAnd then when I do a restyle the viewport expands again.\r\nDoesn't seem to happen on master... but it's a different system there because any relayout there resets the zoom.",
    "created_at": "2017-09-22T20:44:25Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2030#issuecomment-331556004",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2030",
    "updated_at": "2017-09-22T20:44:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Both of these seem to have been fixed some time ago...",
    "created_at": "2017-09-21T20:24:01Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/391#issuecomment-331270941",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/391",
    "updated_at": "2017-09-21T20:24:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks good, thanks - 💃 \r\n\r\nI'll also make an issue over in streambed for us to stop diving into sub-elements of the plot `<div>` to reduce the chances of stuff like this in the future.\r\n\r\nNote though that at some point we need to find alternatives to all of these `getBoundingClientRect` calls - see eg https://github.com/plotly/plotly.js/issues/2003#issuecomment-329210376 and the other issues it points to.",
    "created_at": "2017-09-20T23:27:58Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2027#issuecomment-331008755",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2027",
    "updated_at": "2017-09-20T23:27:58Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This sounds to me like three? related feature requests:\r\n- Allow you to always split the `x` hover label from the `y` (which currently we only do when displaying multiple labels - and following that example, I guess anything else that might be displayed in the label stays with `y`)\r\n- Allow the `y` hover label to be positioned on the axis, like the `x` common label, rather than at the point\r\n- Allow hovering on arbitrary points on the plot, irrespective of whether there is data there or not. At first I was curious how this should work when you *are* near a data point - would the hover info snap to the data point or not? But I think we already have what's needed to control that: normally the data point would win, but if you don't want that you can turn off hoverinfo for that trace entirely (`hoverinfo: 'none'` or `hoverinfo: 'skip'`).",
    "created_at": "2017-09-20T20:20:31Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2026#issuecomment-330969060",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2026",
    "updated_at": "2017-09-20T20:20:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "#2021 addresses my comment, so this should be good to go! 💃 ",
    "created_at": "2017-09-20T19:59:14Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2017#issuecomment-330963544",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2017",
    "updated_at": "2017-09-20T19:59:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice, I like it, thanks! 💃  once tests pass.",
    "created_at": "2017-09-20T19:56:18Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2021#issuecomment-330962844",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2021",
    "updated_at": "2017-09-20T19:56:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "- are there any of the \"special\" restyle/relayout keys we need to keep or can we 🔪  all of them? In addition to `axis.reverse` [mentioned above](https://github.com/plotly/plotly.js/issues/420#issuecomment-323435082), there's `orientationaxes`, `swapxy`, and `swapxyaxes` [here](https://github.com/plotly/plotly.js/blob/cb5a465ff6a17f0943b22f52c590dd07f60ee524/src/plot_api/plot_api.js#L1644) - seems like these should be dropped and just managed by editing apps.\r\n- along with this, `orientation` has special handling to swap the x/y attributes. We should probably drop this special handling too, and just let the user/editor do the swapping they want.\r\n\r\nfrom https://github.com/plotly/plotly.js/pull/1999#issuecomment-329318166",
    "created_at": "2017-09-20T16:01:41Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/420#issuecomment-330899476",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/420",
    "updated_at": "2017-09-20T16:01:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "No, there's no way to do this. I can only suggest setting these colors manually. If you want to use Plotly's defaults (glad you like them!) I don't believe they're exposed anywhere normally but you can grab them from [here](https://github.com/plotly/plotly.js/blob/cb5a465ff6a17f0943b22f52c590dd07f60ee524/src/components/color/attributes.js#L13-L24).\r\n\r\nIn principle we could add this as a feature (`textfont.color: 'inherit'`?), but it strikes me as a fairly uncommon edge case - most of the time it seems to me you *need* text to have a different color so it's still legible when it overlaps other markers/lines.",
    "created_at": "2017-09-19T20:04:36Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2018#issuecomment-330657422",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2018",
    "updated_at": "2017-09-19T20:04:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Super - thanks for the quick turnaround! 💃 ",
    "created_at": "2017-09-19T19:52:04Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2016#issuecomment-330654112",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2016",
    "updated_at": "2017-09-19T19:52:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@monfera I see what you're talking about with regular (non-tiny) nodes, and I can see why you did it the way you did. I think the normal case is fine, strikes a good balance between the competing visual requirements. But the new tiny one really seems to be hanging off the bottom of the link. I think it's worth spending a few minutes fixing it just in this special case.",
    "created_at": "2017-09-19T16:17:37Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2017#issuecomment-330592543",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2017",
    "updated_at": "2017-09-19T16:17:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "though - just a nitpick, but it doesn't look like the node is aligned quite properly with the link in this case?",
    "created_at": "2017-09-19T14:18:20Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2017#issuecomment-330554611",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2017",
    "updated_at": "2017-09-19T14:18:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Good catch, and really nice test!\r\n💃 ",
    "created_at": "2017-09-19T14:16:45Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2017#issuecomment-330553982",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2017",
    "updated_at": "2017-09-19T14:16:45Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard may have more to say about this, but I don't think we have a way around this right now, and I suspect we only set `legendgroup` originally because we didn't have a way to address the groups independently. But with the generic `styles` attribute it should be doable with explicit groupby handling, similar to #1919.",
    "created_at": "2017-09-19T13:59:20Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2013#issuecomment-330548013",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2013",
    "updated_at": "2017-09-19T13:59:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Hi @Kurairaito - try this:\r\n```js\r\nwidth: fill(10, () => Math.random()*1000*3600*24)\r\n```\r\n\r\nDate axes are internally converted to milliseconds, so differences on a date axis need to be represented as milliseconds as well - of which there are `1000*3600*24` in a day.",
    "created_at": "2017-09-15T13:26:12Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2008#issuecomment-329781961",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2008",
    "updated_at": "2017-09-15T13:26:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "oof, I hate to say it but I'm not sure we have a good way to do this within the current framework. You simply can't have data points on a category axis that don't point to exact categories. So the options I see are:\r\n- build some sort of shim into scatter to allow shifting points away from their data values (cf #299)\r\n- build a hook to allow transforms to alter `gd.calcdata` after it's been created\r\n- rebuild OHLC as a native trace without transforms\r\n\r\nAm I missing some simpler option?",
    "created_at": "2017-09-14T18:56:57Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2004#issuecomment-329577127",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2004",
    "updated_at": "2017-09-14T18:57:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "FYI even unrelated traces have their hover labels messed up by the colorbar title.\r\n```js\r\nvar data1 = [{\r\n\t  type: \"heatmap\",\r\n\t  z: [[10, 32], [55, null]],\r\n\t  colorbar: {title: \"\"}\r\n}, {y:[0, 1]}]; // that's a scatter trace\r\n```\r\nGives me even more reason to think ^^ would fix it.",
    "created_at": "2017-09-13T15:50:08Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2003#issuecomment-329211662",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2003",
    "updated_at": "2017-09-13T15:50:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I'm tempted to just get rid of all the `getBoundingClientRect` calls in [fx/hover](https://github.com/plotly/plotly.js/blob/master/src/components/fx/hover.js) (use `Drawing.bBox` where necessary) and hope it fixes #888, #1902, and this.",
    "created_at": "2017-09-13T15:46:07Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2003#issuecomment-329210376",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2003",
    "updated_at": "2017-09-13T15:46:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Wow, this is the weirdest one I've seen in a while. Simply calling `Plotly.newPlot` twice (with the same data into the same `<div>`) is enough to trigger this bug. Seems specific to heatmap, contour, and the 2d histogram types.\r\n\r\nSadly the FF debugger still can't seem to load our source files and nearly crashes my whole machine if I try...\r\n\r\nSomehow it seems that the **colorbar title** is necessary to trigger the issue. Minimal example:\r\n```js\r\nvar data1 = [{\r\n\t  type: \"heatmap\",\r\n\t  z: [[10, 32], [55, null]],\r\n\t  colorbar: {title: \"X\"}\r\n}];\r\nPlotly.newPlot(graphDiv1, data1);\r\nPlotly.newPlot(graphDiv1, data1);\r\n```\r\nTake out the title and it works correctly.",
    "created_at": "2017-09-13T15:28:17Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2003#issuecomment-329204828",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2003",
    "updated_at": "2017-09-13T15:28:17Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Adding `d2r()` should do the trick.\r\n\r\nWill probably have to be `d2c` for `x/y` and `r2c` for `range` (can we trust `ax._rl` to exist?) but yeah. And calendars 🙄 ",
    "created_at": "2017-09-13T14:48:26Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2002#issuecomment-329191942",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2002",
    "updated_at": "2017-09-13T14:48:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Merging #2001 -> ensure our solution works for both scatter and bar traces.",
    "created_at": "2017-09-13T14:27:22Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2000#issuecomment-329185175",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2000",
    "updated_at": "2017-09-13T14:27:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yes, this is the same issue as #2000 - closing this one, we will make sure the fix handles both scatter and bar traces.",
    "created_at": "2017-09-13T14:26:03Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2001#issuecomment-329184750",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2001",
    "updated_at": "2017-09-13T14:26:03Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "[Known issue](https://github.com/plotly/plotly.js/blob/master/src/plot_api/plot_api.js#L268) but doesn't look like we have an issue for it - thanks for bringing this up @RedShift1 \r\n\r\nI was going to suggest `cliponaxis: false` #1861 (your leftmost text item would overlap the tick labels but at least would be visible) but I notice that has problems with date axes... another bug report coming :)",
    "created_at": "2017-09-13T14:13:00Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/2000#issuecomment-329180788",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2000",
    "updated_at": "2017-09-13T14:13:00Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@petergaultney thanks for the note - we definitely intend to make all of this more configurable. But another (fairly new) option that might be useful to you is plotly/plotly.py#1861 - `cliponaxis: false`, perhaps in conjunction with the layout option `margin.pad`.",
    "created_at": "2017-09-11T17:25:08Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1876#issuecomment-328599296",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1876",
    "updated_at": "2017-09-11T17:25:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I am refering to the horizontal alignment of the barchart and linechart. the 0-line of the line is higher then the 0-line of the bars.\r\n\r\nThat's a separate issue. You have two autoranged axes, one with bars (so it doesn't pad the axis past zero unless you have negative bars) and one with a line (so it always pads the axis vertically). If you want the right-side axis to behave like the left, you can do something like `yaxis2: {rangemode: 'tozero'}` which forces the axis autorange to reach down to zero, but also won't go past it unless there's actually negative data.",
    "created_at": "2017-09-08T18:48:35Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1434#issuecomment-328184763",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1434",
    "updated_at": "2017-09-08T18:48:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@FinnFrotscher this issue was about alignment of tick labels with their own gridlines - which to my eye looks good in the image you posted... perhaps you're concerned about the ranges of your two y axes being mismatched? Like https://github.com/plotly/plotly.js/issues/1962 perhaps? Can you clarify what you're interested in?",
    "created_at": "2017-09-08T18:15:05Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1434#issuecomment-328176822",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1434",
    "updated_at": "2017-09-08T18:15:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for the detailed report @flyingBurman \r\n\r\nProblem 1 does look like a bug - it seems to also be related to the uniform data in 2017M06, and I can confirm it in pure javascript. Note that what I would consider the \"correct\" behavior here is for all zeros to be trimmed from the edges, so the automatic x axis range would be `[-0.01, 0.05]` in order to give the largest possible view of the data you provided. If you want the x axis range to be the full allowed bin range instead, just specify it explicitly:\r\n```\r\n'xaxis': {'range': [starting_value, ending_value]}\r\n```\r\n\r\nProblem 2 is a bit trickier. For other modes we recently fixed this issue (#1944) but when you use `barmode: 'overlay'` we don't want the separate traces to interact with each other, so for each trace we decide on automatic bin width & offset purely based on the data in that trace. This is based on the use case of very different distribution widths, where forcing bin widths to match could result in unduly small or sparse bars in the wider distribution, or if we went with the wider bins, a loss of detail in the narrower distribution.\r\n\r\nSo with that in mind, what do we do when we see a distribution with no width at all? There's nothing to base our bin width estimate on (which is also why `nbinsx` can't help you), so we just fall back on a bin width of 1. I suppose when there are multiple traces we could have the fallback be the smallest value chosen by any of the other overlaying histograms... it's a bit complicated for what's presumably a fairly rare case, but I suspect the machinery to do it is already present from #1944 so I'm happy to give it a shot.",
    "created_at": "2017-09-07T14:59:00Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1978#issuecomment-327826187",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1978",
    "updated_at": "2017-09-07T14:59:00Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@flyingBurman I think you've got workarounds to solve your particular use case, yes? I agree that it's a bit confusing, but I don't think it's a bug nor do I see a clear feature we could consider adding. I'm going to close this issue, but feel free to open a new one if you can clarify your use case as a feature request.",
    "created_at": "2017-09-07T14:20:35Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1973#issuecomment-327814299",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1973",
    "updated_at": "2017-09-07T14:20:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @MichaelMonashev - confirmed in Chrome on XP. It looks though as if chrome has disabled WebGL (for security?) - see https://superuser.com/questions/958238/how-to-enable-webgl-on-chrome-on-xp. Version 49 is also fairly old at this point, but is apparently the last version to support XP (as well as Mac OS Mountain Lion and below).\r\n\r\nI'm curious how https://get.webgl.org/ gets around this for you (when I try it in Browserstack I see \"Hmm. While your browser seems to support WebGL, it is disabled or unavailable.\") but I can't get `canvas.getContext('webgl')` to return anything. If you can figure out what it's doing (if there's some modification of `canvas.getContext` or similar that does work, for example) we could try to support it as long as it behaves the same way as a regular context.",
    "created_at": "2017-09-07T13:37:08Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1992#issuecomment-327801447",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1992",
    "updated_at": "2017-09-07T13:37:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I have not been able to reproduce this. @MichaelMonashev can you say more? Which OS are you on? Which Chrome version?\r\n\r\nOne thing I do see is if I open https://plot.ly/javascript/3d-scatter-plots/ with Chrome/win7 on browserstack I get an odd color bug whenever my mouse is NOT over the plot:\r\n![screen shot 2017-09-06 at 6 40 43 pm](https://user-images.githubusercontent.com/2678795/30137820-28f97522-9333-11e7-8792-49c824ac364e.png)\r\nand occasionally:\r\n![screen shot 2017-09-06 at 6 58 00 pm](https://user-images.githubusercontent.com/2678795/30138299-812c2d78-9335-11e7-9368-469a678cad62.png)\r\nvs the expected:\r\n![screen shot 2017-09-06 at 6 42 48 pm](https://user-images.githubusercontent.com/2678795/30137836-3a2d6fba-9333-11e7-8562-1dd34a459599.png)\r\nCan someone with a similar setup check whether this is just a failure of browserstack or a real issue with Chrome on Windows?",
    "created_at": "2017-09-06T22:45:50Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1992#issuecomment-327632651",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1992",
    "updated_at": "2017-09-06T22:59:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "considering this closed by #1991 and many before it",
    "created_at": "2017-09-06T22:30:39Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/76#issuecomment-327630023",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/76",
    "updated_at": "2017-09-06T22:30:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> To make sure (sure), I'll manually rebuild this branch on CI a few times.\r\n\r\nOne unrelated error, but the mathjax part succeeded 4/4 times on circle and all the times we've done it locally - looks pretty solid to me, ready to go?",
    "created_at": "2017-09-06T22:02:37Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1991#issuecomment-327624686",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1991",
    "updated_at": "2017-09-06T22:02:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks fantastic - thanks for testing positions. 💃 ",
    "created_at": "2017-09-05T19:58:10Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1980#issuecomment-327285929",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1980",
    "updated_at": "2017-09-05T19:58:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Right, there are a few error bar attributes that would be nice to support as `arrayOk` - `color`, but also `width` and `thickness`. For that matter, it would be nice to make `value` and `valueminus` support `arrayOk` and get rid of `array` and `arrayminus` but that may need to wait for v2 - https://github.com/plotly/plotly.js/issues/420#issuecomment-327266480",
    "created_at": "2017-09-05T18:49:16Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1985#issuecomment-327268152",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1985",
    "updated_at": "2017-09-05T18:49:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "- drop errorbar `traceref` and `tracerefminus` - which are already unused within plotly.js but may still be used by the old workspace.",
    "created_at": "2017-09-05T18:46:13Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/420#issuecomment-327267345",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/420",
    "updated_at": "2017-09-05T18:46:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "- drop errorbar `array` and `arrayminus` attributes in favor of `arrayOk` versions of `value` and `valueminus`",
    "created_at": "2017-09-05T18:43:05Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/420#issuecomment-327266480",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/420",
    "updated_at": "2017-09-05T18:43:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "right, we had already discussed removing histogram colorscale functionality, at least as implemented now - see https://github.com/plotly/plotly.js/issues/420#issuecomment-287809360 and #1500 - because it only works accidentally and depends on you explicitly making the correspondence between bins and color values. But I could certainly see supporting a histogram-specific colorscale functionality, where probably you would specify it similarly to `#histogram_colorscale` but instead of a `color` array you'd connect the color to either the `x` or the `y` values.\r\n\r\n@chriddyp the issue with doing it the way you tried is, as @etpinard alluded, the values you want to color don't match up with the values you're binning... so it's redundant (and ambiguous - what happens when two values that get binned together have different colors?) and also generally you'd want to color by either the bin value or the bin height rather than the pre-binned values.",
    "created_at": "2017-09-05T18:07:39Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1984#issuecomment-327257177",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1984",
    "updated_at": "2017-09-05T18:07:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "man, `axid === 'redraw'` makes me cringe but... yeah, all my doing. Looks great, and if we ever clean up that hack the test will make sure we get this right.\r\n\r\n💃 ",
    "created_at": "2017-09-05T15:54:22Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1981#issuecomment-327220304",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1981",
    "updated_at": "2017-09-05T15:54:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks solid to me. Might want to calculate the rest of the bbox attributes just so people can pretend it's a real bbox (I see one caller that looks for `.height` for example).",
    "created_at": "2017-09-01T21:16:40Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1980#issuecomment-326685594",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1980",
    "updated_at": "2017-09-01T21:16:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Brilliant. 💃  after https://github.com/plotly/plotly.js/pull/1979#discussion_r136489977",
    "created_at": "2017-09-01T02:55:53Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1979#issuecomment-326474730",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1979",
    "updated_at": "2017-09-01T02:55:53Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks like this is https://github.com/plotly/plotly.js/blob/master/src/plots/cartesian/transition_axes.js#L18\r\n-> matches `'x2axis'` instead of `'xaxis2'` - I'm abstracting all these regexes right now, should fix this but I'll include a test to confirm.",
    "created_at": "2017-08-31T22:46:13Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1325#issuecomment-326440324",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1325",
    "updated_at": "2017-08-31T22:46:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "you can make a transparent first trace:\r\n```js\r\nPlotly.newPlot(gd, [{\r\n    y: [1, 2, 3],\r\n    marker: {color: 'rgba(0, 0, 0, 0)'},\r\n    type: 'bar'\r\n}, {\r\n    y: [1, 2, 1],\r\n    type: 'bar'\r\n}, {\r\n    y: [2, 2, 3],\r\n    type: 'bar'\r\n}], {barmode: 'stack'})\r\n```\r\n![screen shot 2017-08-31 at 10 11 45 am](https://user-images.githubusercontent.com/2678795/29927594-d4a28156-8e34-11e7-93f9-de183f562718.png)\r\n\r\nYou might also be interested in the `hoverlabel` attribute to control the styling of the label for the transparent trace https://plot.ly/javascript/reference/#bar-hoverlabel",
    "created_at": "2017-08-31T14:18:36Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1973#issuecomment-326309733",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1973",
    "updated_at": "2017-08-31T14:18:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@AdnanBoota you might just need `layout.bargap`\r\n```js\r\nPlotly.newPlot(gd, [{\r\n    x: ['2017-01-02', '2017-01-03', '2017-01-04'],\r\n    y: [2, 4, 3],\r\n    type: 'bar'\r\n}], {bargap: 0})\r\n```\r\n\r\nbut if you really do need explicit widths on a date axis, you can specify them as milliseconds:\r\n```js\r\nPlotly.newPlot(gd, [{\r\n    x: ['2017-01-02', '2017-01-03', '2017-01-04'],\r\n    y: [2, 4, 3],\r\n    type: 'bar',\r\n    width: 1000*3600*23 // 23 hours\r\n}])\r\n```",
    "created_at": "2017-08-31T14:04:26Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/80#issuecomment-326305495",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/80",
    "updated_at": "2017-08-31T14:04:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The issue is not with the type of shape, it's adding a shape to an overlaying axis. Thanks for the report!\r\n\r\nSide note @acats-dkolev - I notice you're using milliseconds for the path coordinates. That will work, but it's fragile - it will shift if you change timezones. Better is to use date strings like you do in the `rect`, the only complication is that if there's a time part you need to separate with an underscore instead of a space, like:\r\n`path: \"M 2016-09-30_12:34:56.78 1.524 H 2016-10-14 V 1.303 Z\"`",
    "created_at": "2017-08-30T15:08:35Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1974#issuecomment-326020936",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1974",
    "updated_at": "2017-08-30T15:08:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "1-line fix - I'll get it.",
    "created_at": "2017-08-30T14:56:57Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1974#issuecomment-326017237",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1974",
    "updated_at": "2017-08-30T14:56:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@flyingBurman I see what you're going for, and while we could certainly create something like this, it strikes me as a misleading way to display such data, normally it would be shown using `barmode: 'group'`. Orangutans in this plot looks like it has 1 + 1 + 1 items when they're overlaid this way. As a more extreme example, consider two traces with `y` values `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]` and `[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]` - using a sorted overlay you'd end up with something like:\r\n![screen shot 2017-08-29 at 5 53 20 pm](https://user-images.githubusercontent.com/2678795/29846002-fc736cd4-8ce2-11e7-897f-1d22e09f1c93.png)\r\nthe middle two bars are almost identical data (5 & 6 vs 6 & 5) but visually there's a huge mismatch between the amount of blue and orange in each one. Bar charts are built on the (visual) size of each bar representing its data value, and I'm really reticent to break this correspondence.\r\n\r\nNormally `barmode: 'overlay'` is used with `trace.opacity` so you can see the full size of each bar (though the mixed colors get confusing if there are more than 2 traces).\r\n\r\nSide note: `barmode: 'stack'` with both positive and negative values also breaks the visual size correspondence... that's why we added `barmode: 'relative'` which separately stacks positive and negative values.",
    "created_at": "2017-08-29T22:08:40Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1973#issuecomment-325818945",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1973",
    "updated_at": "2017-08-29T22:08:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "related: #1785 ",
    "created_at": "2017-08-28T11:16:17Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1968#issuecomment-325326534",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1968",
    "updated_at": "2017-08-28T11:16:17Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "An alternative that has some interesting (good and bad) side effects: diff `fullData` and `fullLayout`, which we already clone all the time. We'd still need to figure out something to do with data arrays which we don't clone...",
    "created_at": "2017-08-24T00:27:35Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1850#issuecomment-324498688",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1850",
    "updated_at": "2017-08-24T00:27:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "You can make this happen manually (set `yaxis2.dtick` and if necessary `yaxis2.tick0`) but that will only last until the viewer changes the y/y2 ranges independently (or even the two ranges together assuming you're using automatic ticks on `yaxis`). If you're in an environment where you can attach event handlers you could listen to `plotly_relayout` events and update these values whenever either range changes. There's no way to automatically do it.\r\n\r\nI suppose it would be possible to add a setting like `yaxis2.tickmode = 'match overlay'` (assuming you also have `yaxis2.overlaying = 'y'`) that would match pixel positions of ticks/grids between the two. It would in general not look that great though - unless you've set it up specifically, you're likely to end up with ticks at 12.33333 or the like.\r\n\r\nAnother solution you may be interested in is turning the gridlines off and using [`showspikes` and `spikemode: across`](https://github.com/plotly/plotly.js/pull/1461/files#diff-0e41c2e162564438ff091d0ed6b5b455R315)",
    "created_at": "2017-08-18T19:45:02Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1962#issuecomment-323444671",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1962",
    "updated_at": "2017-08-18T19:45:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "- drop the strange functionality `relayout(gd, {'xaxis.reverse': true})` and change the handling of [`axis.autorange: 'reversed'`](https://github.com/plotly/plotly.js/blob/b98aac2269a307dc04a27e0759b70824811d2487/src/plots/cartesian/axes.js#L273-L278) from a weird disappearing setting to regular behavior where `autorange: true` always results in an increasing range and `autorange: 'reversed'` is always reversed. Would also require the doubleclick interactions to choose whether to set `autorange` to `true` or `'reversed'` in order to behave the way they do today, but editing behavior would be more intuitive.",
    "created_at": "2017-08-18T18:59:42Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/420#issuecomment-323435082",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/420",
    "updated_at": "2017-08-18T18:59:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "related: #1847 ",
    "created_at": "2017-08-17T22:29:09Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1961#issuecomment-323211543",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1961",
    "updated_at": "2017-08-17T22:29:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Could \"scatterlines\" just behave as lines for the most part?\r\n\r\nThe reason these are all lumped under one trace type is lines, points, point text, and fills are all independently togglable elements - so I suspect by default we're always going to want them to be treated identically. And for backward compatibility I don't think we can change that until v2 anyway. \r\n\r\nBut in my first comment I had forgotten that we already implemented something similar with `hoveron: 'fills'` in #673 - seems like the right approach will be to add `'lines'` as another option to `hoveron`, which will help answer some of my questions above.",
    "created_at": "2017-08-17T21:39:08Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1960#issuecomment-323201727",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1960",
    "updated_at": "2017-08-17T21:39:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yeah, makes sense, I can certainly see wanting this, and it would be nice to couple it with a line highlighting mode (where all other line traces fade out when you hover on one line). Relevant to all the scatter types in fact.\r\n\r\nIt'll be a bit tricky to figure out how this should work:\r\n- What data do you report (both endpoints of the segment? the exact nearest-point-on-the-line?)\r\n- Is it the same event type or a different event type from regular `plotly_hover`?\r\n- Do you fire a point-hover AND a line-hover event when you're over a point?\r\n- What do you do in \"compare\" hover mode?",
    "created_at": "2017-08-17T21:19:35Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1960#issuecomment-323197398",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1960",
    "updated_at": "2017-08-17T21:19:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@chriddyp have you seen [`showspikes` and `spikemode: across`](https://github.com/plotly/plotly.js/pull/1461/files#diff-0e41c2e162564438ff091d0ed6b5b455R315)? A great community PR this spring from @rpaskowitz ",
    "created_at": "2017-08-17T15:54:54Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1959#issuecomment-323115659",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1959",
    "updated_at": "2017-08-17T15:54:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "- drop the undo/redo queues that we have built into `restyle` and `relayout` and our other API methods - we used these in our old workspace, but this is really not the right level to be managing this issue, as plots may be coupled to other application state (ie changes in data arrays) and using our queue would muck up that correspondence.",
    "created_at": "2017-08-16T19:25:26Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/420#issuecomment-322873840",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/420",
    "updated_at": "2017-08-16T19:25:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "To be precise (and yes, we're aware that this is a mess), Plotly ONLY shows dates in UTC (you'll notice every day on a plotly plot has 24 hours, for example), but if you feed in native js Date objects or milliseconds to mean dates (rather than date strings) we assume what you really wanted was the (UTC) date with the same representation as the date you provided has in the local timezone.\r\n\r\nSee #1532 for more info - one of these days we will need to build in real time zone support, but that's a substantial project (largely due to DST issues)",
    "created_at": "2017-08-16T19:10:39Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1956#issuecomment-322870372",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1956",
    "updated_at": "2017-08-16T19:10:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Just thinking about how this might get used... seems reasonable to attach this to each module - trace and transform, and as we discussed, it could be cache-on-first-call - but the key use case will be on `data` traces that don't have `_module` - so a `plot_schema.js` function `findAllowedArrayAttributes(trace)` would tie it all together, compiling the complete list from `module.allowedArrayAttributes` for the trace and any transforms in it.\r\n\r\nAnd, as we also discussed... we might be able to speed up the regular `findArrayAttributes` by looking only at the already known list of allowed attributes.",
    "created_at": "2017-08-16T18:59:35Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1958#issuecomment-322867569",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1958",
    "updated_at": "2017-08-16T18:59:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "That's exactly the issue, the triangulation *is* 2D, having ignored the `delaunayaxis` coordinate. Precisely colinear projected vertices are kind of a trivial edge case, so I suspect this is simply an issue we need to call out in the docs. Correctly inferring the intended axis from the data seems like it would be extremely difficult to do in any sort of a robust way.\r\n\r\nAlternatively I suppose we could default to some other algorithm besides delaunay triangulation - though it seems like as we have it now these also do not appreciate completely coplanar points. This does not work (with `alphahull: 0` or `0.1` - anything on `(0,1.15]` seems equivalent, `>~1.16` everything disappears no matter what):\r\n```js\r\nvar data=[\r\n    {\r\n      opacity:0.8,\r\n      color:'rgb(300,100,200)',\r\n      type: 'mesh3d',\r\n      x: [1, 1, 1, 1],\r\n      y: [0, 1, 1, 0],\r\n      z: [0, 0, 1, 1],\r\n      alphahull: 0\r\n    }\r\n];\r\n```\r\n\r\nbut change to `x: [1, 1, 1, 0.99]` and you get a very thin tetrahedron. I doubt this is the generally desirable outcome (particularly in the case where `x` is NOT uniform, ie is representing some real data - there's a big difference between a hull and a layer), I think we should leave it as is and just deal with it as a documentation issue.",
    "created_at": "2017-08-16T18:29:35Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1948#issuecomment-322859384",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1948",
    "updated_at": "2017-08-16T18:29:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks great to me! 💃 ",
    "created_at": "2017-08-16T18:04:19Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1945#issuecomment-322852483",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1945",
    "updated_at": "2017-08-16T18:04:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "That's a bit more complicated than marker gradients #1620 \r\n- It's connected to a colorscale with multiple stops (rather than a single color for each end of the gradient as we did for markers)\r\n- Each trace gets a different segment of that colorscale depending on its range... though I have to say that seems a heck of a lot more *useful* than a purely aesthetic gradient that maps the color variation to the extent of the shape, whatever that extent happens to be (but of course if we implement this, people will ask for the aesthetic version).\r\n\r\nHopefully we can do it without the subpixel lines ggplot introduces there (which in fairness are nontrivial to avoid eg when constructing bar charts or colorscales)",
    "created_at": "2017-08-15T22:45:49Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1918#issuecomment-322609970",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1918",
    "updated_at": "2017-08-15T22:45:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "setting `layout.hovermode` to `'y'` in this case mucks up hover for the rug trace, so that's not a good option. But I think what this points to is that \"compare\" mode is only a good default hover mode in certain (albeit very common) cases - where there are multiple traces of the same type with monotonic data mostly in common for the \"compare\" axis. What we should really do is default to `'closest'` if any of those conditions is not met. That would help in even relatively simple cases like one or more scatter traces with nonmonotonic points (and perhaps we could even figure out if it's `y` that's monotonic instead of `x` and switch to `hovermode: 'y'`). Renaming this issue accordingly.",
    "created_at": "2017-08-15T22:28:14Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/778#issuecomment-322607013",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/778",
    "updated_at": "2017-08-15T22:28:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I'm going to close this issue - I copied the interests expressed here in #277 which has even more generality - @PPPW feel free to chime in there if I missed anything - and the hover issue I noticed turns out to have been reported in #778 ",
    "created_at": "2017-08-15T22:18:49Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1953#issuecomment-322605340",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1953",
    "updated_at": "2017-08-15T22:18:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "see also #1953 - one of the options should be max/min (which I guess would count as 0/100th percentile?) - and then rather than the current hard-coded dependence on `boxpoints`, `boxpoints` should just affect the default value of this setting.",
    "created_at": "2017-08-15T22:05:40Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/277#issuecomment-322602954",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/277",
    "updated_at": "2017-08-15T22:05:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃  (again 😄)",
    "created_at": "2017-08-15T21:58:12Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1919#issuecomment-322601342",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1919",
    "updated_at": "2017-08-15T21:58:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "all manner of interesting effects here...\r\n`xb = [0.99, 1, 0.99, 1]`\r\n<img width=\"381\" alt=\"screen shot 2017-08-15 at 5 39 21 pm\" src=\"https://user-images.githubusercontent.com/2678795/29337824-d3d11040-81e0-11e7-85da-21629997911e.png\">\r\nThe issue is `delaunayaxis` - triangulation fails because everything is colinear in xy for the default `delaunayaxis='z'`, works fine if you change it to `'x'` - so dunno if we really want to consider this a bug, if we do we need to somehow automatically choose a `delaunayaxis`.",
    "created_at": "2017-08-15T21:53:05Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1948#issuecomment-322600349",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1948",
    "updated_at": "2017-08-15T21:53:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Good point @monfera - I did notice this when putting together selections initially but ignored it. Perhaps it's time to revisit...\r\n\r\nI really like the effect of a point popping on/off as it crosses the selection boundary - which would change to a slow fade in/out with a mask - both less appealing and less useful as you can't really tell which points will be included/excluded.\r\n\r\nIt's probably also worth mentioning that if there are a lot of traces, the trace opacity approach will fall down in the same way.\r\n\r\nWhat if instead of changing opacity, we blend each deselected point with the background color, such that they all get the same color as a solo point does now, regardless of overlap?",
    "created_at": "2017-08-15T21:31:42Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1943#issuecomment-322595699",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1943",
    "updated_at": "2017-08-15T21:31:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Two things:\r\n- `boxpoints` has options `'all', 'outliers', 'suspectedoutliers', false` - so `true` actually reverts to the default `'outliers'`\r\n- The algorithms we used to calculate the whiskers are consistent with, for example http://www.physics.csbsju.edu/stats/box2.html:\r\n> If either type of outlier is present the whisker on the appropriate side is taken to 1.5×IQR from the quartile (the \"inner fence\") rather than the max or min\r\n\r\nie if we're displaying outliers, the outliers show the min/max so the whiskers show what might be expected for a typical spread within the main distribution. But if we're NOT displaying outliers, it's useful to know what the full min/max of the distribution are - especially since the fence values are simply calculated from other metrics of the distribution that are already displayed.\r\n\r\nI suppose we could add a mode like `boxpoints: 'hidden'` to omit outliers but not include them in the whiskers. A workaround is to include `marker: {opacity: 0}` in your trace, though if you do this the full max/min will still be included in the autorange (and hover, though I notice we have a problem with hover for horizontal boxes, we don't show all the information as we do for vertical boxes)",
    "created_at": "2017-08-15T21:19:24Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1953#issuecomment-322592655",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1953",
    "updated_at": "2017-08-15T21:19:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The `cliponaxis: true` trace with `axis.layer: 'below traces'` in the new test image looks funny, how the markers cover up half the axis line. But I think trying to solve that - moving the edge of the clip path back to the edge of the axis line, for example - would cause more problems than it solves. This combination doesn't have a use case that's obvious to me, but if you moved the clip path back it would make a subpixel gap so the more common use case `cliponaxis: true` and `axis.layer: 'above traces'` would look bad.\r\n\r\nSo lets keep it as is. No more comments, the one above is arguably not even an improvement 🙈\r\n💃 ",
    "created_at": "2017-08-15T20:12:59Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1952#issuecomment-322575469",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1952",
    "updated_at": "2017-08-15T20:12:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> just confirm: `range` is an 2-item array of **spans** (dticks), right?\r\n\r\nYes. I suppose that could be confusing though if it's named `range`, people might think it should look like a range - should it be called `dtickrange`?\r\n\r\n@apalchys I think we're agreed on the structure anyway - so go for it, looking forward to this!",
    "created_at": "2017-08-15T18:12:59Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1946#issuecomment-322544941",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1946",
    "updated_at": "2017-08-15T18:12:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "closed by #1944 ",
    "created_at": "2017-08-15T03:12:15Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1864#issuecomment-322366173",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1864",
    "updated_at": "2017-08-15T03:12:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Haha you noticed my pattern 🥂 Some of them are getting a liiittle too old. ",
    "created_at": "2017-08-15T02:27:41Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1944#issuecomment-322360436",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1944",
    "updated_at": "2017-08-15T02:27:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "`range` - love it.\r\nAnother good call by @etpinard - aka the-one-who-remembers-every-idea-anyone-has-ever-had-about-plotlyjs 🌟 🥇 🌟 ",
    "created_at": "2017-08-15T01:47:39Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1946#issuecomment-322355161",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1946",
    "updated_at": "2017-08-15T01:47:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> `Plotly.purge` is an exception.\r\n\r\nMakes sense, though... what *would* happen if you purge with promises still pending? I guess the hope would be that it just throws an error inside the callback, which doesn't affect anything in the wider app... or perhaps it can still act on the now-removed plot elements and doesn't even throw an error? I guess mostly it will be fine but perhaps there are cases this would pollute `gd` by reattaching some variables to it or something. ",
    "created_at": "2017-08-15T01:40:59Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1693#issuecomment-322354371",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1693",
    "updated_at": "2017-08-15T01:40:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Love it. 💃 ",
    "created_at": "2017-08-14T20:36:26Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1939#issuecomment-322302243",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1939",
    "updated_at": "2017-08-14T20:36:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Is there a rule of thumb on which API functions should wait for previousPromises to finish?\r\n\r\nOffhand I'd say anything that can modify the plot should wait for `previousPromises` *and* return a promise itself. which is... basically the whole top-level API? Below that level we're basically not exposing anything new anyway, and we'll probably de-expose all of those in v2, so nothing to worry about.\r\n\r\n> even though it's a sequence of promises, do they all resolve synchronously?\r\n\r\nAre you talking about `gd._promises` or `Lib.syncOrAsync`? `gd._promises` is an array of whatever async stuff happened during plotting, so you could always call `Promise.all` on it if you *need* a promise, but `Plots.previousPromises` will return `undefined` if it's empty so that a `syncOrAsync` call will stay sync. `syncOrAsync` is called with a sequence, but it never creates promises, only waits for promises that its items return before continuing the sequence. If no items return a promise, the whole thing is sync, ie it's done before it returns and it does not return a promise.",
    "created_at": "2017-08-14T17:43:45Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1693#issuecomment-322258078",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1693",
    "updated_at": "2017-08-14T17:43:45Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@rreusser there's not all that much that plotly.js does async, so it's not surprising that you can't pin this down. Mathjax rendering, `geo` and `mapbox` plots fetching data, fetching images... that might be it.\r\n\r\nNote that `Lib.syncOrAsync` doesn't, on its own, wait for the existing promise queue to complete; it just ensures proper sequencing of items in its own arguments. It also doesn't necessarily do anything async or promise related, in fact it keeps things sync whenever possible.\r\n\r\nIf your goal is to wait for the plot to finish anything else it's been doing - which I think is a good goal, and probably important in some cases (a map or a plot with mathjax that animates on load?) then I think you just need to add `Plots.previousPromises`:\r\n```js\r\nreturn Lib.syncOrAsync([\r\n    Plots.previousPromises, // only async if there *are* promises in the queue\r\n    function() {\r\n        return new Promise(...)\r\n    }\r\n], gd); // gd is just passed along to previousPromises, it's not needed for your own fn\r\n```\r\nthen if everything is sync, `done` will just be `undefined`, but since you're making a new promise, it will just be that promise (having chained it onto previous ones if necessary). In other places we've had to [generate](https://github.com/plotly/plotly.js/blob/master/src/plot_api/plot_api.js#L387) a [promise](https://github.com/plotly/plotly.js/blob/f42802689a99cba4057434664853e848c75625d6/src/plot_api/plot_api.js#L1873) to keep the API consistent, but you already know you have one.",
    "created_at": "2017-08-14T17:01:07Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1693#issuecomment-322247197",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1693",
    "updated_at": "2017-08-14T17:01:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I like the concept!\r\n\r\nTrying to pin down exactly what `span` really means - is it the biggest `dtick` to use this format with? The smallest? The \"closest\"? In principle we could also base this on `Math.abs(range[1] - range[0])` rather than `dtick` as our internal autorounding does, though the goal of this is really to distinguish ticks from each other so `dtick` seems more appropriate. Otherwise you could get a situation where you change the number of ticks and suddenly you get multiple identical labels. But also, it occurs to me it might be more useful to have:\r\n```js\r\ntickformatstops: [{\r\n  min:  number, // optional: minimum span to use this format\r\n  max: number, // optional: maximum span to use this format\r\n  value: string // tick format string\r\n}]\r\n```\r\nAnd then we take the first format that satisfies the min/max criteria, falling back on default formatting if none match. That way you could do things like:\r\n```js\r\ntickformatstops: [{max: 100, value: '.2f'}, {value: 'e'}]\r\n```\r\nwhich would mean `'.2f'` if `dtick <= 100`, otherwise `'e'`\r\nOr:\r\n```js\r\ntickformatstops: [{min: 1, max: 100, value: '.2f'}]\r\n```\r\nwhich would mean `'.2f'` for `dtick` between 1 and 100, otherwise use default formatting.\r\n\r\nNow, as to `number` vs `number|string` for spans - first lets assume this is only for date axes, we might use it with log axes to talk about the linear span vs the exponent span but... that opens all sorts of cans of worms! For dates: we want something that can be specified granularly, ie not just \"year\" but 2 years, 5 years, 31.52 years... `dtick` already supports `'M<n>'` for [`n` months](https://github.com/plotly/plotly.js/blob/f42802689a99cba4057434664853e848c75625d6/src/plots/cartesian/layout_attributes.js#L242) which also handles years (make `n` a multiple of 12 - see caveat in #1241 for world calendars). This is the only one we really *need* for `dtick`, since months (and years) are nonuniform so you can't specify them as milliseconds. For the purposes here it seems like we should support at least the `'M<n>'` format to correspond with `dtick` but we'll have to convert to approximate numbers anyway to tell which is bigger, probably like I do in https://github.com/plotly/plotly.js/pull/1944/files#diff-e02f19bac6aa5dbda7a48a07b3ad45fdR327\r\n\r\nThe question then is whether we support *more* than we do for `dtick`. Non-integer months? Other prefixes for years, weeks, days, hours, minutes, seconds? My gut reaction would be no, not at first, but we can make a later PR that adds this support for both `tickformatstops` and `dtick` simultaneously. These other codes are not necessary to get the effect you want, they're just conveniences so you don't have to write out `1000 * 60 * 60 * 24 * 7` to get a week, for example.",
    "created_at": "2017-08-14T16:18:46Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1946#issuecomment-322236174",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1946",
    "updated_at": "2017-08-14T16:18:46Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice, looks good to me! 💃 ",
    "created_at": "2017-08-07T20:43:32Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1934#issuecomment-320775171",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1934",
    "updated_at": "2017-08-07T20:43:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "That mock is thing of beauty 😻 \r\n\r\n💃 ",
    "created_at": "2017-08-07T18:40:11Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1933#issuecomment-320746044",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1933",
    "updated_at": "2017-08-07T18:40:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "To put my mind at ease, can you also either make some of these segments 3+ points so spline is visibly different from straight, and/or change to one of the stepped shapes (ideally `'hv'` or `'vh'` so it's asymmetric)?",
    "created_at": "2017-08-07T18:13:31Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1933#issuecomment-320739040",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1933",
    "updated_at": "2017-08-07T18:13:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@rreusser looks great! To play devil's advocate, can you include a test with some other `line.shape` values and `fill: 'tonexty'` between traces that both include isolated end and mid points? I don't think it will apply the line shape to the connections across null values - and that seems fine to me - but I do want to make sure that the lines and fills all still follow each other.",
    "created_at": "2017-08-07T17:35:30Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1933#issuecomment-320729279",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1933",
    "updated_at": "2017-08-07T17:35:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I think @rreusser is right to point to discoverability in touch environments. Seems like in general then we should leave it as is. I guess if anyone feels strongly that they'd STILL like the modebar hidden until you tap the plot, we could add a config option like `displayModeBar: 'hover-touch'` but I'll wait until this idea gets a few 👍 's before doing that.",
    "created_at": "2017-08-07T16:36:35Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1889#issuecomment-320714449",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1889",
    "updated_at": "2017-08-07T16:36:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "haha @cldougl when I open your [working example](https://codepen.io/plotly/pen/BzqwbE) I sometimes get it \"working\"\r\n![screen shot 2017-08-07 at 11 33 16 am](https://user-images.githubusercontent.com/2678795/29033837-50237828-7b64-11e7-9a62-034759e68790.png)\r\n\r\nAnd sometimes it automatically offsets one of the traces (presumably via the [edge-avoidance algo](https://github.com/plotly/plotly.js/blob/master/src/plots/cartesian/axes.js#L667) though I'm a bit surprised that this would be so unstable):\r\n![screen shot 2017-08-07 at 11 33 01 am](https://user-images.githubusercontent.com/2678795/29034312-f1788780-7b65-11e7-9ec3-177bcbf2314d.png)\r\n\r\nAnd in fact sometimes your [non-working example](https://codepen.io/plotly/pen/owPQqg) does this and \"sort of works\":\r\n![screen shot 2017-08-07 at 11 36 12 am](https://user-images.githubusercontent.com/2678795/29034091-21c8bf28-7b65-11e7-8dae-15fa9a2ee939.png)\r\n\r\nI say \"sort of works\" because this is still not the outcome we want. Yes, the orange trace gets stacked on the blue, but the bin width used for the orange trace is not what's displayed as the bar widths.\r\n\r\nI think in the end this may be the same as https://github.com/plotly/plotly.js/issues/50 - currently our oldest open bug! 🏆  So I'm pretty sure this is not a regression, just a hazard of using `random` in a bug report!",
    "created_at": "2017-08-07T15:52:59Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1864#issuecomment-320702935",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1864",
    "updated_at": "2017-08-07T15:52:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "FYI you're definitely right to consider this a bug @taranovalexander but there are several things that make this difficult to fix:\r\n\r\n- What happens if the endpoint of `trace 1` does not match a data point in `trace 0` but rather between two data points? For straight line joins we can fairly easily find the intersection, but we will need to calculate it differently for each `line.shape` value (and `'spline'` is particularly annoying)\r\n- What if `trace 0` is not monotonic in x? Which in fact can happen even if the `trace0` `x` *data* is monotonic with `line.shape='spline'`, but there are some truly horrible things that can happen if `x` is not monotonic.\r\n- What if `trace 1` starts *before* `trace 0`? Then we need to fill down to zero, then up the side of `trace 0`... and this gets even more convoluted if `trace 1` starts after `trace 0` as in your example, but then you add a `trace 2` on top that starts before both of them.\r\n\r\nOne way we could think of solving this would be to draw these fills to zero but then clip them with the previous fills. That seems like it would give decent results - a bit weird looking in some of the non-monotonic cases but since those probably don't have much physical meaning we may not care.\r\n\r\nBut I hesitate to do that because I'd also like to solve the problem of *stacked* area charts - ie the filled-line analog of stacked bar charts, where we're not just filling between traces but actually adding them together. That requires knowing what the previous total is, which hits all the same issues but can't be solved by SVG machinery. It also adds another issue: if you go over a step between two points in the upper trace, the line needs to know to include this step. As a simple example, if you add: `{x: [0, 10], y: [1, 1]}` to `{x: [5, 10], y: [5, 5]}` - the upper trace should end up as `x: [0, 10], y: [1, 6]` but it needs to know not to draw a straight line between them (which would cut right through the lower trace!) but rather draw horizontally to `(5, 1)`, then step up to `(5, 6)` and finish horizontally.\r\n\r\nWe could solve these issues in various ways - but however we handle #1205 it needs to take into account stacking.",
    "created_at": "2017-08-07T15:28:51Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1205#issuecomment-320696047",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1205",
    "updated_at": "2017-08-07T15:28:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "#1205 is an independent, and trickier, issue - I'll add a comment over there.",
    "created_at": "2017-08-07T14:46:09Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1933#issuecomment-320684137",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1933",
    "updated_at": "2017-08-07T14:46:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Lets just call it a bug in the interior case as well - if we consider this behavior to be as intended:\r\n```\r\nPlotly.newPlot(gd,[{y: [1, 3, null, 2, 4, null, 3, 5], fill: 'tozeroy'}], {width: 400, height: 400})\r\n```\r\n![screen shot 2017-08-07 at 10 33 33 am](https://user-images.githubusercontent.com/2678795/29031355-fa89cd02-7b5b-11e7-9e8b-8e851cd42a6a.png)\r\n\r\nThen it makes little sense that dropping the middle segment to 1 point would disconnect it from the fill as it does now:\r\n```\r\nPlotly.newPlot(gd,[{y: [1, 3, null, 2, null, 3, 5], fill: 'tozeroy'}], {width: 400, height: 400})\r\n```\r\n![screen shot 2017-08-07 at 10 35 14 am](https://user-images.githubusercontent.com/2678795/29031405-2ce3604c-7b5c-11e7-9765-e1b25c486673.png)\r\nIt should really look like:\r\n![screen shot 2017-08-07 at 10 37 06 am](https://user-images.githubusercontent.com/2678795/29031490-6bbb2de0-7b5c-11e7-9d06-6a732f54dad2.png)\r\n",
    "created_at": "2017-08-07T14:38:20Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1933#issuecomment-320681910",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1933",
    "updated_at": "2017-08-07T14:38:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks great. I had also suggested expanding to fill the bar gap for outside text in stacked mode or with only one bar, but that seems a good deal tricker to implement and this is already a big win, so 💃 ",
    "created_at": "2017-08-05T03:27:23Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1931#issuecomment-320392754",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1931",
    "updated_at": "2017-08-05T03:27:23Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks good to me. I could imagine with `showexponent: 'none'` wanting the hover labels to have no exponents either - but that's a weird case and I could equally imagine wanting the exponents *only* on hover in that case. If you want that kind of control you can make your own hover text :)\r\n\r\nThis whole system of `formatLinear`/`formatLog`/`numFormat` is a bit of a palimpsest at this point and probably should be completely refactored... but for now this is great.\r\n\r\nI took the liberty of merging #1930 first, so you can fix these tests 🎉  and then 💃 ",
    "created_at": "2017-08-05T03:01:26Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1932#issuecomment-320390930",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1932",
    "updated_at": "2017-08-05T03:01:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Perhaps this constraint should not be applied if you've explicitly provided a font size.\r\n\r\nSeems reasonable. We could also probably :hocho: the [text padding for outside bars](https://github.com/plotly/plotly.js/blob/master/src/traces/bar/plot.js?utf8=%E2%9C%93#L345), and in the case of a single trace or grouped bars, allow outside text to expand up to the full bar spacing (including the gap between bars). If we did those two, the text in this case (omitting `outsidetextfont.size`) should automatically get the same size as the axis labels, but on zoom it would still avoid overlaps. But even so there will be edge cases where you want explicit sizing, so I think we should do both.",
    "created_at": "2017-08-04T21:25:30Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/34#issuecomment-320356750",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/34",
    "updated_at": "2017-08-04T21:25:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice catch, nice fix! 💃 ",
    "created_at": "2017-08-04T17:02:29Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1928#issuecomment-320301012",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1928",
    "updated_at": "2017-08-04T17:02:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@eiymba thanks for the clarification. That's weird - you run your pen and the modebar doesn't hide, but then you run mine - which is identical to yours, I just added \r\n```\r\ndocument.write(matchMedia('(hover: none)').matches +\r\n    ' (should be false in a desktop browser, true on touch)')\r\n```\r\nat the end - and the modebar *does* hide but the message at the bottom indicates that it *shouldn't*.\r\n\r\n@dfcreative dunno if you have any thoughts on how this could happen - `matchMedia` responding differently to the same query within one session? Perhaps during loading the page couldn't decide whether the trackpad was present or not?\r\n\r\nBut I'm frankly not sure we really want the modebar to hide on a hybrid device like a surface - using it without a keyboard/trackpad is a totally valid mode of operation, and in that case a hidden modebar would simply be inaccessible so the plot would not function as expected. See eg http://www.stucox.com/blog/the-good-and-bad-of-level-4-media-queries/#multiplicity - `hover` is only supposed to be truthy if you have a mouse *and* no touch interface.",
    "created_at": "2017-08-03T21:57:41Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1889#issuecomment-320101227",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1889",
    "updated_at": "2017-08-03T21:57:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@eiymba strange, I cannot reproduce this with your codepen. What kind of hardware & OS are you using? Can you try https://codepen.io/alexcjohnson/pen/yoaxBw and tell me what message you see at the bottom? Should be:\r\n\r\n> false (should be false in a desktop browser, true on touch)\r\n",
    "created_at": "2017-08-03T10:57:00Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1889#issuecomment-319937024",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1889",
    "updated_at": "2017-08-03T10:57:00Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "True, `exponentformat: 'power'` can fix it in this case - @AndiMD the default is `'B'` ie SI prefixes except for billion - but I do think there's a good argument to be made that continuing to round the exponent to a factor of 3 when we're beyond the range of SI prefixes (the range we've deemed common enough to use anyway, ie femto to tera) serves no purpose and can be misleading, so we can consider this a bug.",
    "created_at": "2017-08-02T23:13:16Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1920#issuecomment-319824060",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1920",
    "updated_at": "2017-08-02T23:13:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice catch and nice fix! 💃 ",
    "created_at": "2017-08-02T22:54:51Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1926#issuecomment-319821076",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1926",
    "updated_at": "2017-08-02T22:54:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@domoritz \r\n\r\n> Will there be a way to provide custom aggregators like user defined aggregates in databases?\r\n\r\nUnlikely - for portability & security we do not allow any code in the plot JSON. But I definitely would not be averse to adding more functions. Can you give me examples of the kind of thing people do with this? [All the custom aggregator docs](https://docs.microsoft.com/en-us/sql/t-sql/statements/create-aggregate-transact-sql), seem to talk about \"concatenate\" - that we seems generally useful enough that we should add it (would require an additional parameter for the join string), @rreusser suggested some others (median, mode, variance), I could throw in RMS... what else? I know we're not going to cover all edge cases this way but we should try to grab all the semi-common ones.\r\n\r\nI was also imagining adding some special ones for x/y/z coordinates to generate error bars automatically (min/mean/max or mean +/- std. dev).",
    "created_at": "2017-08-02T12:00:17Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1924#issuecomment-319651671",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1924",
    "updated_at": "2017-08-02T12:00:17Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks great! 💃 ",
    "created_at": "2017-07-26T19:01:32Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1892#issuecomment-318150790",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1892",
    "updated_at": "2017-07-26T19:01:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "My chrome just updated from v59 to v60 and these artifacts (along with a bunch of related antialiasing failures I've noticed) seem to have been fixed. So the `y=\"-1\"` issue and crisp rendering change are still open but unless other people report these missing lines and other failures I think this is no longer urgent.",
    "created_at": "2017-07-25T21:34:22Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/970#issuecomment-317879472",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/970",
    "updated_at": "2017-07-25T21:34:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃  🎉 ",
    "created_at": "2017-07-25T14:32:39Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1910#issuecomment-317756760",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1910",
    "updated_at": "2017-07-25T14:32:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "possibly - `crispEdges` is what I was going to do to fix the other part of this anyway - just worried that this will lead to other instances where the line gets completely deleted too - typically that's even *easier* to do crisp than non-crisp.",
    "created_at": "2017-07-24T19:22:22Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/970#issuecomment-317527660",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/970",
    "updated_at": "2017-07-24T19:22:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "![screen shot 2017-07-24 at 3 16 26 pm](https://user-images.githubusercontent.com/2678795/28540376-1ffce26a-7083-11e7-8d12-8083fa0c8522.png)\r\n@rreusser Yep, I see the missing lines there too.",
    "created_at": "2017-07-24T19:17:12Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/970#issuecomment-317526421",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/970",
    "updated_at": "2017-07-24T19:17:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "A somewhat urgent aspect of this: lines in the colorbar with the default width of 0.5 just started to disappear for me:\r\n![screen shot 2017-07-24 at 1 37 14 pm](https://user-images.githubusercontent.com/2678795/28536343-55422e16-7075-11e7-879c-3812c4eeedb4.png)\r\n\r\nThis only seems to be happening in Chrome on mac on my non-retina second screen. (I can't reproduce this even in ostensibly the same version of chrome on browserstack...) The lines still appear on my retina screen, and in other browsers. And they reappear if I give the lines *any* tilt away from horizontal, a somewhat different alignment relative to the edge of a pixel, or a width > 0.5px (even 0.51px). [Another overly eager optimization](https://github.com/plotly/plotly.js/pull/1861#issuecomment-314260313) by chrome? Or perhaps it somehow came in with the latest [Mac OS update](https://support.apple.com/en-us/HT207835) that I installed this morning? I don't think chrome updated in the last few days, and I'm quit confident this looked fine at the end of last week for me.\r\n\r\n",
    "created_at": "2017-07-24T18:36:53Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/970#issuecomment-317515210",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/970",
    "updated_at": "2017-07-24T18:36:53Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks like the original issue is masked in v1.29.0 - I suspect the tweaks in #1854 result in the outline covering the out-of-place bar - but there's still a `y=\"-1\"` bar sometimes so I suspect it could become visible in certain cases. Frankly the whole concept of constructing our colorbars from 256 overlapping bars (regardless of how many pixels tall the bar is) seems a bit silly, I'm going to try to replace it with a simple gradient fill.",
    "created_at": "2017-07-24T17:15:37Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/970#issuecomment-317491512",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/970",
    "updated_at": "2017-07-24T17:15:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for ferreting this out @etpinard \r\n\r\nIn the case where this fallback is needed, `labelStandoff` [doesn't actually get used](https://github.com/plotly/plotly.js/blob/fe206949211942b9c687bebc39b623cea8f869da/src/plots/cartesian/axes.js#L1783), right? So can we just include `&& ax.showticklabels` in the [conditional](https://github.com/plotly/plotly.js/blob/fe206949211942b9c687bebc39b623cea8f869da/src/plots/cartesian/axes.js#L1708)?",
    "created_at": "2017-07-24T16:49:18Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1910#issuecomment-317483491",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1910",
    "updated_at": "2017-07-24T16:49:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard pointed out this issue when I mentioned a related one during #1906, so I might as well combine them and tackle them simultaneously:\r\n\r\n> we're not doing crisp rendering of colorbars - particularly the outlines, but line levels should probably be crisp too\r\n",
    "created_at": "2017-07-24T15:34:40Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/970#issuecomment-317461834",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/970",
    "updated_at": "2017-07-24T15:34:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "We can at least apply [`break-inside: avoid`](https://css-tricks.com/almanac/properties/b/break-inside/) and its vendor variants to `gd` to prevent chopping the svg as in @rreusser 's second comment.\r\n\r\nWhat this shows though is that the browser is doing something strange with `getBoundingClientRect` after the first column - see eg this [ancient bug](https://bugs.webkit.org/show_bug.cgi?id=99959) webkit seems to have ignored. I don't see where So I suspect that the complete fix is going to require getting rid of *all* invocations of `getBoundingClientRect` on elements inside `gd` and only using the off-screen tester - which is also needed for #888 and probably some un-reported issues around plotting certain trace types in hidden `<div>`s.\r\n\r\nAlso notice that the modebar jumps down below the plot momentarily when you mouse over from one plot to the next... not sure why that would happen as it's absolutely positioned wrt its parent... but might be related to all this.",
    "created_at": "2017-07-21T22:51:45Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1902#issuecomment-317130241",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1902",
    "updated_at": "2017-07-21T22:51:45Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "#1906 fixes this for SVG, but there's something strange still happening with webGL - the browser still locks up with an unending cascade of these errors:\r\n![screen shot 2017-07-21 at 4 56 06 pm](https://user-images.githubusercontent.com/2678795/28484291-833ed8a6-6e3f-11e7-951b-0a27cc5a0cc2.png)\r\n",
    "created_at": "2017-07-21T22:09:10Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/179#issuecomment-317124245",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/179",
    "updated_at": "2017-07-21T22:09:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ha, for colorscales it turns out we [already do](https://github.com/plotly/plotly.js/blob/master/src/components/colorscale/calc.js#L57-L65) what I was about to propose here: if you explicitly specify `*auto: false`, then it will fill in the auto values but leave it looking like `*auto: false` so that future changes will not re-invoke the autoscaling; but if you don't specify an explicit `*auto` value it defaults to `true` since the explicit ranges are missing.\r\n\r\nSo for example:\r\n```\r\nvar x1 = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4];\r\nvar y1 = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4];\r\nPlotly.newPlot(gd, [{type: 'histogram2d', x: x1, y: y1, zauto: false}]);\r\n```\r\n![screen shot 2017-07-20 at 12 35 48 pm](https://user-images.githubusercontent.com/2678795/28428654-00eb88ce-6d48-11e7-8c97-a776fc9b1892.png)\r\n\r\nand then:\r\n```\r\n// move the last point so we have one bin that gets 1 sample, another gets 3\r\nPlotly.restyle(gd,'x', [[1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 3]])\r\n```\r\n![screen shot 2017-07-20 at 12 37 17 pm](https://user-images.githubusercontent.com/2678795/28428715-324ecab6-6d48-11e7-89f0-c17554d82a26.png)\r\nrange is still 1.5->2.5\r\n\r\nBut if you don't specify `zauto: false` in the first place, the initial plot is identical but after `restyle` you get:\r\n![screen shot 2017-07-20 at 12 38 56 pm](https://user-images.githubusercontent.com/2678795/28428771-6c4e1b2c-6d48-11e7-9509-ffbc1c45af81.png)\r\nrecalculated autocolor: 1->3\r\n\r\nSo I think it's *only* in the context of histogram bins that this is a change - and therefore I'd consider it an inconsistency, a bug, not a breaking change, and I should implement the same logic with explicit `autobin*: false` values in histograms.",
    "created_at": "2017-07-20T16:45:00Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/24#issuecomment-316762860",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/24",
    "updated_at": "2017-07-20T16:45:00Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This is officially our oldest open bug! At more than a year and a half, it needs to go.\r\n\r\n> this issue only affects restyle/extendTraces calls with new data outside the computed [ `xbins.start` , `xbins.end` ] interval.\r\n\r\nGenerally true, but `size` also depends on the number of samples, and `start` and `end` can get shifted due to the precise values - for example if most are or are not integers.\r\n\r\nAnd copying over some comments from @etpinard in #149:\r\n\r\n> Times where the calc or plot step adds attributes to user `data`:\r\n> - `histogram` and `histogram2d` calc step: `xbins` and `ybins` when `autobin?` is true\r\n> - `contour` calc step: `contours` when `autocontours` is true\r\n> - `contour` plot step: `zmin` and `zmax` when `zauto` is true and `coloring` set to `'heatmap'`\r\n> - `heatmap` calc step: `zsmooth` when data can't be smooth using the `'fast'` algorithm. \r\n> - colorscale calc: `zmin` / `zmax` or `cmin` / `cmax` + `colorscale` when `zauto` or `cauto` is true \r\n> \r\n> Updating histogram data should clear the computed xbins and ybins,  but the other cases aren't as obvious. \r\n> \r\n> Should updating contour data clear the computed contours attributes? I'd vote for no. \r\n> \r\n> Should the updating data linked to a colorscale update the bounds of the colorscale? I'd vote for no also. \r\n> \r\n> So, looks like xbins ans ybins are in a league of their own. \r\n\r\nI would actually argue that in all of these cases the update should reset the derived attributes - for example if new colorscale or contour data expands the range, you would want to see that information unless you had explicitly hidden it. Us putting attributes back into `data` and `layout` (in this case `xbins`) is basically a convenience to avoid unnecessary repeated calculations and shouldn't affect the behavior the user sees - so a `Plotly.plot` followed by a `Plotly.restyle` should behave exactly as if the edits were incorporated in the original `Plotly.plot` call. I hesitate to make this a completely blanket statement, but if there are good exceptions to this I'd like to see them!\r\n\r\nThe fix I'd propose then is - perhaps counterintuitively - to *also* copy the inferred `auto...` values back to the input figure. This is what we do with axis ranges, and `restyle` / `relayout` make sure to clear them when the user manually edits the range.",
    "created_at": "2017-07-20T14:44:57Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/24#issuecomment-316725793",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/24",
    "updated_at": "2017-07-20T14:44:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> maybe switching to is-plain-obj would solve this issue.\r\n\r\n[doesn't look like it](https://github.com/sindresorhus/is-plain-obj/blob/master/index.js#L6) - `is-plain-obj` explicitly looks for prototype to be missing. I notice though that we are already including it at least via [`color-parse`](https://github.com/colorjs/color-parse/blob/master/index.js#L12) - I wonder if we will need to alter this behavior all the way down our dep tree? that could be painful...\r\n\r\nI don't *think* there's anything wrong with omitting the prototype check - hey, it works for [`imagetest`](https://github.com/plotly/plotly.js/blob/756bd69e5908d7da414b4a444ed7a9633bdca0d6/src/lib/is_plain_object.js#L20), right? I imagine people could find a way to construct something that would cause errors, but in general it seems like simple prototyped objects work fine in our framework, and they seem to `JSON.stringify` fine for portability too. If we can write some end-to-end tests with some of the prototyped objects people really want to use I'd be OK with just loosening up the condition.",
    "created_at": "2017-07-19T21:07:53Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1405#issuecomment-316517812",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1405",
    "updated_at": "2017-07-19T21:07:53Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "No comments from me, very nice! 💃 ",
    "created_at": "2017-07-19T20:37:35Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1896#issuecomment-316509523",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1896",
    "updated_at": "2017-07-19T20:37:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> You'll need to add `'arrayOk'` to this [list](https://github.com/plotly/plotly.js/blob/9ab907fc277123fb84f5cb2c2069702812610407/src/lib/coerce.js#L97) to get the plot-schema tests to pass.\r\n\r\nhah, first place we have an integer array, really? 😎  https://github.com/plotly/plotly.js/pull/1822/commits/e9375192e3675f5902bbd0012642018ce1bc949c",
    "created_at": "2017-07-19T19:58:40Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1822#issuecomment-316499245",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1822",
    "updated_at": "2017-07-19T19:58:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "open items collected in https://github.com/plotly/plotly.js/issues/1899",
    "created_at": "2017-07-19T19:56:03Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1897#issuecomment-316498538",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1897",
    "updated_at": "2017-07-19T19:56:03Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@ckiss I hope you don't mind, I took the liberty of finishing this up so we can get it in the next minor release. I switched to -1 for \"no truncation\", fleshed out the `arrayOk` support, and added a test of all these behaviors. Also, I realized that lengths 1-3 would have been meaningless as we had them, as it would be only ellipsis, so for those short lengths I omit the ellipsis and just show the leading characters. Sound reasonable?\r\n\r\n@etpinard any comments?",
    "created_at": "2017-07-19T19:24:19Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1822#issuecomment-316490681",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1822",
    "updated_at": "2017-07-19T19:24:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 ",
    "created_at": "2017-07-19T18:03:14Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1887#issuecomment-316468829",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1887",
    "updated_at": "2017-07-19T18:03:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> should we scale back contour labels that same what we do for scatter text nodes?\r\n\r\nWe could consider it. The space available for the labels will not scale back though, so when you zoom out the labels will start to overlap the lines, and when you zoom in they'll get disconnected.",
    "created_at": "2017-07-19T15:35:32Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1897#issuecomment-316426194",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1897",
    "updated_at": "2017-07-19T15:35:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I'd just convert the *one* that was edited into `groupvals`/`groupnames` and consider those overrides. To get rid of it, you'd delete the text and it'd revert to the automatically named format.\r\n\r\nThat could work. I wonder if there's some smart way we could figure out to have the *first* edit set `nameformat` (*if* the appropriate target value is in the name) and then subsequent edits generate overrides? Dunno though, I can think of a bunch of edge cases where that would be unhelpful so maybe not.",
    "created_at": "2017-07-18T20:42:58Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1893#issuecomment-316191566",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1893",
    "updated_at": "2017-07-18T20:42:58Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "My first reaction would be to do something analogous to `tickvals`/`ticktext`:\r\n\r\n```json\r\n\"type\": \"groupby\",\r\n\"target\": [\"morning\", \"morning\", \"evening\", \"evening\"],\r\n\"groupvals\": [\"morning\", \"evening\"],\r\n\"groupnames\": [\"kale - morning\", \"kale - evening\"]\r\n```\r\n\r\nA more concise but restricted way would be a custom string substitution:\r\n```json\r\n\"type\": \"groupby\",\r\n\"target\": [\"morning\", \"morning\", \"evening\", \"evening\"],\r\n\"nameformat\": \"kale - %t\"\r\n```\r\n\r\nBut yeah, that wouldn't allow editing via the legend, that would have to break out of the substitution format and convert it to the `groupvals`/`groupnames` version.",
    "created_at": "2017-07-18T19:50:23Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1893#issuecomment-316177607",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1893",
    "updated_at": "2017-07-18T19:50:23Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Maybe it would be best to _manually_ skip `colorbar.ticktext` and `colorbar.tickvals` in [`PlotSchema.findArrayAttributes`](https://github.com/plotly/plotly.js/blob/f56e07161cb90f729c4bda925f4ddc4f09dcc9f6/src/plot_api/plot_schema.js#L144)?\r\n\r\nGood idea to handle this in `PlotSchema.findArrayAttributes`. But I'd much prefer to do it via the schema, so it will scale to other potential such attributes later. And reflect this in at least the docstring for `findArrayAttributes`, and possibly in the name - `findCorrelatedArrayAttributes`? At the moment I don't see any more arrays that are *not* correlated, except for 1D `x` an `y` arrays with a 2D `z` (which in principle are correlated to one or the other dimension of `z` but not both), though these seem to be already taken care of almost accidentally since they're part of the hover data before we even get to the generic array attributes.",
    "created_at": "2017-07-18T19:00:06Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1891#issuecomment-316164481",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1891",
    "updated_at": "2017-07-18T19:00:06Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Alright - I'm willing to assume there's something funny going on with browserstack in that regard, since it seems to work on all the devices we can actually get our hands on. Thanks @rreusser and @dfcreative ! 💃 ",
    "created_at": "2017-07-18T17:25:20Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1890#issuecomment-316135991",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1890",
    "updated_at": "2017-07-18T17:25:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Can someone with an android phone try this out? It fails for me for Chrome on the android devices I tried on browserstack, but works on my wife's google pixel. Everywhere else I've tried it seems to work great.",
    "created_at": "2017-07-18T17:08:27Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1890#issuecomment-316131316",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1890",
    "updated_at": "2017-07-18T17:08:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Hmm, this will work to exclude 1D arrays from getting picked up alongside 2D arrays - so if you want to include it as a quick bug fix I'm OK with it. But there are going to be cases where the aux arrays have the same dimensionality as the main array and yet still shouldn't be included. Like `colorbar.ticktext` on a scatter trace using `marker.color`. I think your \"more evolved fix\" may be the only way to handle this in the long run. So, another optional schema attribute like `uncorrelatedArray`?\r\n\r\nTBH I'm not sure what `filter` and `sort` even *mean* for 2D data... but that's a discussion for another time and you're absolutely right that if we *do* support this in some way it will require this \"more evolved fix\".",
    "created_at": "2017-07-18T16:17:32Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1891#issuecomment-316116599",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1891",
    "updated_at": "2017-07-18T16:17:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "nice and clean. 💃 ",
    "created_at": "2017-07-17T22:46:44Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1883#issuecomment-315906988",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1883",
    "updated_at": "2017-07-17T22:46:44Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Works for me! 💃 ",
    "created_at": "2017-07-17T21:38:19Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1884#issuecomment-315892796",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1884",
    "updated_at": "2017-07-17T21:38:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Makes sense, the fix for #484 is going to be very similar. But, like my comment there https://github.com/plotly/plotly.js/issues/484#issuecomment-315094312 I wonder if we still want to have some hard-coded upper bound on the total number, even if it's super high like 1e6?",
    "created_at": "2017-07-17T21:33:26Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1887#issuecomment-315891608",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1887",
    "updated_at": "2017-07-17T21:33:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Closed by #1854 ",
    "created_at": "2017-07-14T15:37:12Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1434#issuecomment-315391534",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1434",
    "updated_at": "2017-07-14T15:37:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Also, similar to calendars #1220 - if your users are providing this data as *text*, not numbers, we currently only support parsing with `'.'` as the decimal separator. If we need to support other text formats (which may be independent of how you want to display the data in tick & hover labels) we'll need separators as a *trace* property too.",
    "created_at": "2017-07-13T23:41:43Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1842#issuecomment-315230798",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1842",
    "updated_at": "2017-07-13T23:41:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This one has some interesting theoretical implications: It's not just a matter of displaying the histogram on a log axis (showing a heatmap or bar trace on a log axis works fine). You also need to space the bins logarithmically, and if there's normalization it amounts to something like \"counts per decade\" instead of whatever units are on the axis.\r\n\r\nAlso this would give us more motivation to include the bounds of the bin in hover labels, not just the center - see #69. Or, even better, the bounds of the data in the bin... for example if your bin is 1.5 - 3.5 but your data is all integers, it should say 2 - 3.",
    "created_at": "2017-07-13T23:28:41Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1844#issuecomment-315229046",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1844",
    "updated_at": "2017-07-13T23:28:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> you could argue that axis lines for free axes should map exactly to the extent of the plot area, to help the viewer map far-away data points onto the axis.\r\n\r\nI tried this out, and I think it both looks good and best represents the data. https://github.com/plotly/plotly.js/pull/1854/commits/739c9988cd1f8c44126d627bbb25b592f05ff159\r\n\r\nAlso I included `margin.pad` in that test image. It's not shown this way, but `cliponaxis: false` #1861 suddenly makes `margin.pad` a much more useful feature, since you can use it to set the axes back from the plot area (to give extra room so these non-clipped markers will not cover lines and labels) without increasing the axis ranges. cc @geocosmite",
    "created_at": "2017-07-13T23:06:05Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1854#issuecomment-315225790",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1854",
    "updated_at": "2017-07-13T23:06:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Hmm. By _extent of the plot area_, you mean spanning exactly `axis.range`?\r\n\r\ndomain, but yeah - the idea is to have it exactly match the x or y pixel range on which we display data.",
    "created_at": "2017-07-13T15:47:49Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1854#issuecomment-315119131",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1854",
    "updated_at": "2017-07-13T15:47:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Were you aware of #484 when working on this branch?\r\n\r\nWhen I first saw the title of that issue \"Axis labels on very tall graph don't reach end of axis\" I thought it might be related to the axis line being (sometimes) longer than the subplot (and therefore you can't have ticks/labels all the way to the end) - see my \"aesthetic question\" in https://github.com/plotly/plotly.js/pull/1854#issuecomment-314982882. That's one way in which it actually isn't a purely aesthetic consideration, you could argue that axis lines for free axes should map exactly to the extent of the plot area, to help the viewer map far-away data points onto the axis.\r\n\r\nI think I buy that argument actually, so I'd be inclined to make this change. Any objection?",
    "created_at": "2017-07-13T14:47:46Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1854#issuecomment-315100410",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1854",
    "updated_at": "2017-07-13T14:47:46Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Oh that's just a failsafe against [infinite loops](https://github.com/plotly/plotly.js/blob/master/src/plots/cartesian/axes.js#L810-L811) - we could be smarter about that, perhaps just check to see that each label is closer to the end than the previous one was, though I do think we need *some* sort of upper bound to prevent locking the browser - this can happen easily for example if you specify an explicit tick spacing and then zoom out a lot.",
    "created_at": "2017-07-13T14:27:36Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/484#issuecomment-315094312",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/484",
    "updated_at": "2017-07-13T14:27:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Just spent a bit of time playing with this in various browsers - I think you've nailed it! 💃 \r\nOne thing I noticed while playing is `vector-effect: non-scaling-stroke` hasn't made its way to errorbars yet. We can address that separately though.",
    "created_at": "2017-07-13T14:22:03Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1861#issuecomment-315092636",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1861",
    "updated_at": "2017-07-13T14:22:03Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard this is ready for a look. I ended up changing nearly all the baseline images, so let me explain (and please look closely at the new images, let me know if you think these changes are positive AND acceptable in terms of compatibility).\r\n\r\n- #1855 did partially fix this, as I hoped it would: at least after that each axis received its own line width, but the positioning still was off.\r\n\r\n- The first few commits are a stab at cleaning up the ancient tangle of code that draws axis lines. The functional changes are all in https://github.com/plotly/plotly.js/pull/1854/commits/eb48a9d15c7d52ee2703021c43ec441d692e0ecf\r\n\r\n- I started out fixing how axis lines are drawn, which was broken in a number of multiple-axis situations (interestingly there was a [TODO](https://github.com/plotly/plotly.js/blob/294e5f6c9d2e352c208d355b0e78ba7010afa90a/src/plot_api/subroutines.js#L193) about it dating from 4 years ago when we first added multiple axes!) - see test image 20 https://github.com/plotly/plotly.js/pull/1854/commits/eb48a9d15c7d52ee2703021c43ec441d692e0ecf#diff-2355db501d595161704e15acbd3a9960 where I extended this to all combinations of anchored / free / mirror axes, all with different line widths, to make sure the lines all abut correctly at corners.\r\n- Along the way I discovered we were doing weird things with tick label and title positioning as a function of axis line width - which became blazingly obvious in mock 20 with its super fat lines. Rationalizing that behavior moved the ticks on a substantial fraction of our mocks.\r\n- Then since I was staring at label positions and had modified a bunch of the mocks, I thought it would be a good time to address #1434 - not the part where we proposed making it configurable, just the misalignment. I suppose I could have made that a separate commit, but it's really just [this line](https://github.com/plotly/plotly.js/pull/1854/commits/eb48a9d15c7d52ee2703021c43ec441d692e0ecf#diff-f6d5ed25a5d6f57c70063e1e1bbc407dR1799) which is a bit of a magic number but looks good to me across a wide range of fonts and font sizes. I suppose a better way to handle it would be to use bounding boxes but... there are tons of edge cases around that with tick labels, and this is far simpler (and faster) for a result that will only be minutely different. I'll also note that if you look *very* closely, you'll see the tick labels are not quite consistent in how they align with the ticks. In fact their coordinates *are* consistently aligned, I believe, but the ticks are rendered with `crispEdges` so their positions get rounded while the text is antialiased instead. We could round the text positions manually, but we'd have to turn that off for export... big mess. Lets just leave it as is.\r\n\r\n- I only put the baseline for mock 20 in the code commit, as that's got the key features I was fixing. All the other baselines are in the next commit.\r\n\r\nAnd an aesthetic question for you: Notice in mock 20 and the [x line](https://github.com/plotly/plotly.js/pull/1854/commits/eb48a9d15c7d52ee2703021c43ec441d692e0ecf#diff-07cd4d425af26971d4a589aaac8ea059R258) and [y line](https://github.com/plotly/plotly.js/pull/1854/commits/eb48a9d15c7d52ee2703021c43ec441d692e0ecf#diff-07cd4d425af26971d4a589aaac8ea059R275) comments about how we handle free axes: if a free axis is aligned with an opposite-letter anchored axis, I opted to extend its line out the same way as if both axes are anchored - but perhaps it would be better to leave free axes always ending at the edge of the subplot? That would mean for example that the green, yellow, purple, and brown axes in 20 would be shortened to the same span as the blue and red axes.",
    "created_at": "2017-07-13T06:20:35Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1854#issuecomment-314982882",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1854",
    "updated_at": "2017-07-13T06:20:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 ",
    "created_at": "2017-07-12T22:16:27Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1871#issuecomment-314913531",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1871",
    "updated_at": "2017-07-12T22:16:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "One other idea we've discussed is autoranging one axis based on only the data that's *visible* on the opposite axis or axes - for example zoom in on a particular x range and autorange y based only on the x data in that range. Perhaps `autorange: 'visible'`?",
    "created_at": "2017-07-12T22:14:51Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1876#issuecomment-314913229",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1876",
    "updated_at": "2017-07-12T22:14:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I won't add a workaround patch for the cartesian line clip path problems on pan (see #1861 (comment)) nor will I fix the IE / Edge issues from #1861 (comment).\r\n\r\nThat's fine, I'll make an issue for the IE/Edge one since it's not new. For the chrome issue since it IS new, can you investigate a little (perhaps reduce it to a static SVG bug in codepen?) and then either make an internal issue or report it to chromium?",
    "created_at": "2017-07-12T13:23:52Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1871#issuecomment-314767623",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1871",
    "updated_at": "2017-07-12T13:23:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Good timing @ruxeom - this is actually something we're working on right now.",
    "created_at": "2017-07-12T13:17:15Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1872#issuecomment-314765929",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1872",
    "updated_at": "2017-07-12T13:17:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Along with this transition - or perhaps even better *before* it - we should find a way to test webgl plots in iOS - perhaps using https://www.browserstack.com/screenshots/api ? We need to make sure that bugs we've fixed before - such as #280, #1868 (any others that are iOS-specific?) - don't come back with this rewrite.",
    "created_at": "2017-07-11T21:18:16Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/949#issuecomment-314575014",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/949",
    "updated_at": "2017-07-11T21:18:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I'm not a big fan of the `aboveaxis` attribute name. If it remains a boolean, it does not allow us to add other axis _levels_. Moreover, I don't see it play well with a future attribute to would determine if grid lines are drawn above traces. Any thoughts on this thing? Maybe an enumerated `axislevel: 'above-traces'` attribute would be better?\r\n\r\nGood idea. I can see for example wanting to layer the axis either above or below shapes, which are themselves above or below the data... Not sure about `axislevel` though, that sounds kind of data-related. `axislayer`? And can we use a space instead of `'-'`, ie `'above traces'`? Matches for example `textposition: 'top left'`. Do we have `'-'` used like this elsewhere?\r\n\r\n> Essentially, the `aboveaxis` default value is `true` on `master` as all traces are drawn below axis lines and subplots. @alexcjohnson argued for making the `aboveaxis` default be `false` except for `position: 'free'` axes. I'm a little more reticent on the subject as this generate sub-pixel diffs in  _all_ our cartesian mocks (see test [branch](https://github.com/plotly/plotly.js/compare/trace-above-axis-layers)). To note, matplotlib drawn axes above traces by default. I'd vote  for making the `aboveaxis` default `true` for now and perhaps revisit this topic in `v2`.\r\n\r\nSeems reasonable. If we're accidentally drawing axis lines somewhat underneath the data and giving them a thinned or ragged look, that could give us a subtly unpolished look for no apparent reason, whereas markers dropping underneath the axis are obvious and easy to fix - just make sure to mention `cliponaxis` and `axislayer` (or whatever) in each others `description` fields.",
    "created_at": "2017-07-11T17:58:47Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1861#issuecomment-314523923",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1861",
    "updated_at": "2017-07-11T17:58:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> should `cliponaxis: false` override all auto range options passed to `Axes.expand` or should it only have an effect with traces `mode: 'markers'`? I'd vote for the former. I wouldn't mind a second opinion here.\r\n\r\nLets step back and look at what these options do and why, and what we're trying to accomplish with the changes we're making now. The options to `Axes.expand` are:\r\n- `vpad(plus|minus)?` - \"value padding\" ie give more space around the data points in data units. Not really needed, currently only used for convenience by box traces (where the box and jitter position and width are set in data units), we should probably just fold this into the expand data, as we must have already done for bars.\r\n- `ppad(plus|minus)?` - \"pixel padding\" ie give more space around the data points in pixels. Used to make sure markers, annotations, and shape borders fit within the plot boundaries.\r\n- `padded` - a generic 5% padding on both sides. Used to give some more context - implicitly I guess means that either we assume this axis has measured data (which is why for example line charts get padding on the y axis but not x) - or because we think it would generally look bad to squish the data right up against the axis (eg markers & error bars)\r\n- `tozero` - bars & area charts use this to ensure the axis goes to zero - so you see the whole bar/fill - but also this eliminates padding on the other side of zero (whichever side that is!) if the data all has the same sign.\r\n\r\n`cliponaxis: false` serves a very specific purpose: to ensure that we give each point (marker) the correct visual weight without needing to expand the axis range beyond its data value - either to avoid meaningless axis values or just to ensure that the axis range reflects the data range. To me this seems to only apply to the `ppad*` and `padded` options associated with markers, and using `cliponaxis: false` to signify a more generic \"keep autorange tightly bounded around these data\" seems like it would be an unexpected result.\r\n\r\nBut that rationale brings up another way to do this, something like `xaxis.maxautorange` that would say \"never let autorange go beyond this range regardless of the data\" (for example percentage data would get `maxautorange: [0, 100]`, that would let you constrain the autorange routine to physically meaningful values without us needing to monkey with the `Axes.expand` routine at all - if the data don't bump up against these limits we still pad them with this tried-and-true mechanism. We already offer one common variant of this with `rangemode: 'nonnegative'` to prevent autoranging past zero.",
    "created_at": "2017-07-11T17:39:37Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1861#issuecomment-314518657",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1861",
    "updated_at": "2017-07-11T17:39:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": ">  The cartesian pan issue described in the same https://github.com/plotly/plotly.js/pull/1861#issuecomment-313755166 seem to be caused by a Chrome bug. That is, the issue isn't reproducible in FF. We can fix this issue by wrapping each scatter `<path>` node with `<g>` and clipping that `<g>` instead of those `<path>`. I'm not sure it's worth it though.\r\n\r\nJust played with this a bit on browserstack: the chrome bug came in between versions 31 and 32. That's pretty ancient, If we decide not to work around it (which I guess I'd be OK with, it's fairly obscure), we should at least lock down when it happens and make sure it's on their radar to fix.\r\n\r\nThat said, IE and Edge have a substantially worse problem with this type of panning, they don't seem to translate the clip path correctly:\r\n![screen shot 2017-07-10 at 6 43 57 pm 2](https://user-images.githubusercontent.com/2678795/28043510-352bf434-65a0-11e7-98fb-75e1eff16520.png)\r\nI'll note though that this is a problem with IE and Edge on master too... so could be dealt with as a separate bug, whereas the chrome bug seems to not affect us on master.",
    "created_at": "2017-07-10T22:55:02Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1861#issuecomment-314272905",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1861",
    "updated_at": "2017-07-10T22:55:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Very nice - you can address `DESELECTDIM` now or just wait for #1847, up to you. 💃 ",
    "created_at": "2017-07-10T19:55:47Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1836#issuecomment-314216908",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1836",
    "updated_at": "2017-07-10T19:55:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Very nice. 💃 ",
    "created_at": "2017-07-07T21:53:04Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1830#issuecomment-313801989",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1830",
    "updated_at": "2017-07-07T21:53:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This seems to have broken the last codepen on the hover event docs page https://plot.ly/javascript/hover-events/\r\n\r\nhttps://codepen.io/plotly/pen/eJOyej\r\n\r\nFYI @cldougl ",
    "created_at": "2017-07-07T21:02:50Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1467#issuecomment-313792244",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1467",
    "updated_at": "2017-07-07T21:02:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> attribute in traces that don't have a `dflt` field set\r\n\r\nDoes `coerce` complain if it sees either zero or two defaults? Either if the attribute has a `dflt` but we override it in the `coerce` call, or if neither the attribute nor the `coerce` call contains a default? Should it? That would make this distinction more robust.\r\n\r\nAnd even if we decide this is a good idea, not sure if we want it to happen all the time or just patch it in during testing somehow.",
    "created_at": "2017-07-07T18:37:48Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1830#issuecomment-313760760",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1830",
    "updated_at": "2017-07-07T18:37:48Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Even better, I think we don't even have to add another attribute field: all `valType: 'color'` attribute in traces that don't have a `dflt` field set should --- in theory --- be `useExpandedTraceDefaultColor: true`.\r\n\r\nInteresting - I *think* this is valid (in traces only, of course, not in layout, but we're only crawling trace modules anyway) so yeah, go for it!",
    "created_at": "2017-07-07T18:28:25Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1830#issuecomment-313758684",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1830",
    "updated_at": "2017-07-07T18:28:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yep, the changes are pretty minor - and in fact I notice that the change you highlighted actually swaps one instance of crossing contours for another... so it's basically a wash until we make an altogether different interpolation algorithm.",
    "created_at": "2017-07-07T18:17:27Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1856#issuecomment-313756053",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1856",
    "updated_at": "2017-07-07T18:17:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Feels great panning with these plots @etpinard - watching the points pop in and out of view! Two strange things I'm seeing right now while panning (both of which are fixed on mouseup, the issue is only during the pan interaction):\r\n- in ternary (using the `ternary_markers` mock), the clip path for lines seems to translate along with the pan:\r\n![screen shot 2017-07-07 at 1 55 45 pm 2](https://user-images.githubusercontent.com/2678795/27970608-76e2386e-631d-11e7-833c-17c2568384e8.png)\r\n\r\n- in cartesian (using the `cliponaxis_false` mock) everything looks perfect for a while:\r\n![screen shot 2017-07-07 at 2 07 24 pm 2](https://user-images.githubusercontent.com/2678795/27970788-0e5d6f2e-631e-11e7-88f8-85f65378cdbc.png)\r\nbut when I pan a bit farther, the lines and fills abruptly disappear:\r\n![screen shot 2017-07-07 at 2 07 32 pm 2](https://user-images.githubusercontent.com/2678795/27970792-13199790-631e-11e7-8a89-95f1ae7de57b.png)\r\nand then they're fixed again on mouseup:\r\n![screen shot 2017-07-07 at 2 07 35 pm 2](https://user-images.githubusercontent.com/2678795/27970799-17fe6420-631e-11e7-9ad7-242428ea2f9c.png)\r\n",
    "created_at": "2017-07-07T18:13:30Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1861#issuecomment-313755166",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1861",
    "updated_at": "2017-07-07T18:13:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@finger563 that doesn't give us a whole lot to go on - can you make a runnable example (preferably in codepen or some such) that shows this error?",
    "created_at": "2017-07-07T17:49:17Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1532#issuecomment-313749214",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1532",
    "updated_at": "2017-07-07T17:49:17Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> 👍 👍 for wrapping our current updatemenu/legend scrolling logic into a reusable component (I can help with that)\r\n\r\nI doubt it will make sense to combine that with table scrolling - since the scale is very different, legends and updatemenus don't need the dynamic rendering that will be crucial to tables. Anyway for the scrollbar handle specifically I made an issue #1859 - if we want to roll that into componentizing scroll, that would be great, I'm sure it will see additional uses in the future!",
    "created_at": "2017-07-07T16:27:42Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1834#issuecomment-313729498",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1834",
    "updated_at": "2017-07-07T16:27:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> but on\r\n>\r\n> https://github.com/plotly/plotly.js/blob/master/src/traces/heatmap/hover.js#L38\r\n>\r\n> we set\r\n>\r\n> ```js\r\n> ny = index[1]\r\n> nx = index[0]\r\n> ```\r\n\r\n@etpinard looks consistent to me?\r\n```\r\nnx = Math.round(pointData.index[1]);\r\nny = Math.round(pointData.index[0]);\r\n```\r\n\r\nAnyway, the convention is meant to match the way a matrix is printed:\r\n```\r\n[\r\n  [1, 2, 3],\r\n  [4, 5, 6],\r\n  [7, 8, 9]\r\n]\r\n```\r\nso the first index is row (y) and the second index is column (x)\r\n\r\n@dfcreative the `pointData.index !== false` case may be for manually triggering hover - ala https://plot.ly/javascript/hover-events/#triggering-hover-events (note you have to scroll the iframe to see the \"go\" button)\r\n\r\nHow about covering the relevant cases with tests, then we don't have to argue about this!",
    "created_at": "2017-07-07T15:41:32Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1833#issuecomment-313717656",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1833",
    "updated_at": "2017-07-07T15:41:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @n-riesco - It's not super high priority (I called it a bug not because it's broken, but because it's different from basically every other scrollbar out there), but do you want to take this one when you need a break from other work? Should be easy...",
    "created_at": "2017-07-07T15:14:09Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1859#issuecomment-313710317",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1859",
    "updated_at": "2017-07-07T15:14:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks great to me! One more question though: Are there other trace types that make sense with groupby that we should include `useExpandedTraceDefaultColor` in (and test)? The ones that look like they should be groupable to me are bar, box, choropleth, histogram (perhaps not 2d histogram? grouping makes sense but the presentation is tricky), and all the other scatter types.",
    "created_at": "2017-07-07T14:53:39Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1830#issuecomment-313704685",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1830",
    "updated_at": "2017-07-07T14:53:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ah, the infinite revolver is a cool idea, with the two panes trading order!\r\n\r\nDunno if @jackparmer or @etpinard have other opinions, but from my perspective scrolling is worth it if:\r\n- It can work just like we have it for legends, for example the `legend_scroll` mock: wheel scroll with the same inertia as regular page scrolls, and a permanently visible drag handle (though I notice the legend scroll handle doesn't have a size proportional to the visible fraction, we should fix that).\r\n- It's not going to add more than a couple of days work vs. pagination",
    "created_at": "2017-07-07T05:37:20Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1834#issuecomment-313591446",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1834",
    "updated_at": "2017-07-07T05:37:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I agree that pagination will likely be easier to implement - and I'm not particularly strongly opinionated about which we go with - but to your points:\r\n\r\n> page height will be overly variable, and the pagination buttons must be kept at place, i.e. there would be too much variance in the gap above the pagination buttons, and a large gap sends the misleading message: I'm the last page!\r\n\r\nThis will be an issue - at least in edge cases - no matter what for a paginated table. But scrolling tables can just show partial rows and fill whatever space they are allotted (unless the *whole* table is smaller than the given space, which is also fine).\r\n\r\n> limited, bounded DOM element count; the mere element count is a big factor in interaction performance, even if we don't translate stuff after the initial render\r\n\r\nIn principle I would imagine a *container* big enough for all the rows, but then only *rendering* the visible ones... so then the element count would be only marginally larger for scrolling than for pagination, though the frequency of changing which ones are rendered would be much larger.\r\n\r\n> not straying from plotly.js patterns (I don't think we have scrolling widgets)\r\n\r\nWe do have scrolling [legends](https://github.com/plotly/plotly.js/pull/243) and [dropdowns](https://github.com/plotly/plotly.js/pull/1214)...\r\n\r\n> column reordering is much simpler (the header would need to stay in place while normal rows would scroll past)\r\n\r\nNot sure I follow... I guess with pagination we could make each column (header included) a group, and move them together, whereas with scrolling it would be easier to make the headers inside one container and the data inside another container, so there would be two things to move in sync whenever a column moves? So pagination does seem simpler but I wouldn't characterize it as *much* simpler.\r\n\r\n> wrapping, while it sounds innocent as a _feature request_\r\n\r\nYah for sure, all sorts of issues around wrapping. Just to be clear though, it's not just automatic wrapping that triggers this, but also `<br>` in the text if we support pseudo-html, and also font size if that's allowed to be variable.",
    "created_at": "2017-07-06T22:43:19Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1834#issuecomment-313539225",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1834",
    "updated_at": "2017-07-06T22:43:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Given that we'll have pagination, and the table may have a lot of rows, probably heterogeneous row heights would provide a better user experience as a single outlier long line would make the entire table look weird, pls. let me know if you see otherwise. (I wasn't shooting for broken lines ie. the cells of a specific line would be of equal height, as per the max wrap count in the row).\r\n\r\nAh great, I thought I must have misunderstood you, thanks for clarifying! Yes, I think you're correct that each row should size to its own contents, not the tallest of all contents. I wouldn't bother making that an option, at least not initially. Raises a question about how pagination should work with these variable-length rows, do you go for constant number of rows or (as close as possible) constant total height? If the latter, there will still be a possibility that a single row is bigger than the allotted size. To me that kind of consideration kind of argues for scrolling instead of pagination - and personally I think I kind of prefer scrolling anyway, but it's probably a good deal harder to implement in a performant way.\r\n\r\n> An aside is that HTML tables are rather sophisticated for text wrapping and I'm not currently shooting for feature parity with it.\r\n\r\nWay too sophisticated, I've always been confused by the decisions HTML layout engines make there. Simple and explicit is way better for our purposes.",
    "created_at": "2017-07-06T22:09:57Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1834#issuecomment-313533097",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1834",
    "updated_at": "2017-07-06T22:09:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "- [ ] It wasn't obvious to me how to change modebar modes - that you basically have to double-tap on a modebar icon to select a new mode. The first tap brings up the tooltip, and the second one selects the mode, but then the tooltip stays visible until you do something else. Could we change that to a single tap that selects the mode, brings up the tooltip, and then lets it fade after a few seconds?\r\n- [ ] Sporadically when zooming in via zoombox, the area outside the plot is still dimmed after the zoom finishes. Can't quite figure out how to reproduce this though...\r\n- [ ] It's tricky to find and use the single-axis and corner zoom draggers. Do we even want to support these?\r\n- [ ] In zoom or pan mode, double-tap to autorange?",
    "created_at": "2017-07-06T21:51:42Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1858#issuecomment-313529458",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1858",
    "updated_at": "2017-07-06T21:51:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks great to me! FWIW I played with it at https://github.com/plotly/plotly.js/pull/1804/commits/473f72afe69e8bc1cdc5752b8fe37b7b58d8eacd on desktop, and I saw the issues that led to the creation of the `coverSlip` in the first place - like if you start a pan and drag off the edge of the plot, it stops dragging, cursor changes, etc. But at https://github.com/plotly/plotly.js/pull/1804/commits/e215ffc43f7821574268a8180951f496db16e096, dragging off the edge on both mobile and desktop works as desired.",
    "created_at": "2017-07-06T21:43:14Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1804#issuecomment-313527711",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1804",
    "updated_at": "2017-07-06T21:43:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Kind of annoying to have to do this, but looks great. Nice tests! 💃 ",
    "created_at": "2017-07-06T18:54:50Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1855#issuecomment-313487113",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1855",
    "updated_at": "2017-07-06T18:54:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> heterogeneous row heights (needed if text is wrapped); maybe option for keeping rows of homogeneous height? e.g. only one row needs to increase its height to fit multiple rows; should the other rows increase in height?\r\n\r\nI don't think we need an option for this (if I'm understanding you right) - this should work just like regular html tables, ie all rows get the same height, which is enough to fit the tallest contents. Otherwise items in a row lose connection to each other.\r\n\r\n> breaking text to multiple rows at spaces; breaking too long words nevertheless if space based breaking is not enough; perhaps truncation (with or without an ellipsis) as a boolean option?\r\n\r\n> links (if needed) and perhaps other content types?\r\n\r\nLets use `svgTextUtils.convertToTspans` so we get all the pseudo-html features. And perhaps we can work wrapping into that routine so it can be used elsewhere too? 👼  Truncation as an option is a good idea, but I'd think for tables wrapping should be the default.\r\n\r\n",
    "created_at": "2017-07-06T18:47:07Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1834#issuecomment-313485106",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1834",
    "updated_at": "2017-07-06T18:47:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yeah, looks great! What would it take to test this?",
    "created_at": "2017-07-06T15:58:26Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1804#issuecomment-313439767",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1804",
    "updated_at": "2017-07-06T15:58:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Oh interesting - thanks for pointing me to this. It's NOT the known issue with neighboring contour lines crossing when they have different topologies... looks like contours break with data to zero on a log axis. It works fine if I change the zeros to 0.1 for example.",
    "created_at": "2017-07-06T00:46:14Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/641#issuecomment-313264820",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/641",
    "updated_at": "2017-07-06T00:46:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> keeping the _first view_ when animating is more desirable\r\n\r\nDoesn't that mean the rendered plot will be out of sync with the input state? I know we push ranges back to the input state, but `autorange: true` is supposed to mean that it will recalculate the ranges to fit the given data, and indeed if you copy the figure json and make a new plot with it that will happen. Or if you change the data using `restyle` for that matter.\r\n\r\nPerhaps we need a new `autorange` setting (`autorange: 'once'`?) that will run autorange once and then revert to `false` (pushed back to the input state), to account for all these desires.",
    "created_at": "2017-07-05T21:59:40Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1849#issuecomment-313238840",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1849",
    "updated_at": "2017-07-05T21:59:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I like `columnWidth`, good idea! Makes it clear that it's not the overall table width, and can be an array.",
    "created_at": "2017-07-05T16:16:47Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1834#issuecomment-313152193",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1834",
    "updated_at": "2017-07-05T16:16:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Lets go with (2) - separate spec for the header row, and yes, single-row headers. This is a very common use case so shouldn't require turning all the styles into arrays. Also fits in with the analogous heatmap case - in which axis labels are specified independently from the data.",
    "created_at": "2017-07-05T16:06:47Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1834#issuecomment-313149346",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1834",
    "updated_at": "2017-07-05T16:06:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> One nitpick is that `-5.0` and `5.0` are sometimes hard to distinguish since the `-` tends to blend into the surrounding contour.\r\n\r\nHmm, interesting - I suppose we could either add some extra space ahead of a leading `-`, or replace it with a different unicode symbol that's raised up a bit, perhaps? I'll leave it as is for the first iteration but will take a look at it later.",
    "created_at": "2017-06-30T18:12:26Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1815#issuecomment-312337152",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1815",
    "updated_at": "2017-06-30T18:12:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ha nice find! Can't decide if I should be relieved or sad that nobody reported this in the year it's been broken... but great fix and beautiful tests (with a bonus type `scattercarpet` no less!)\r\n💃 ",
    "created_at": "2017-06-28T20:58:20Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1831#issuecomment-311788589",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1831",
    "updated_at": "2017-06-28T20:58:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> > Since this applies only to markers I'd put it in the marker container,\r\n>\r\n> I guess you didn't see the part about text nodes and error bars.\r\n\r\nAh right, sorry. Text should work this way for sure, so the attribute doesn't belong in `marker`.\r\n\r\nI'm not sure about error bars though (apologies for not noticing the [comments on this](https://github.com/plotly/plotly.js/issues/1385#issuecomment-310166352) last week) - my gut reaction is to *not* include them outside the clip area, since (unlike markers and text) their ends correspond to actual axis values, so if the axis value at the end of an error bar is not displayed, then the bar should not be displayed either. I suppose you could argue that the *caps* should not be clipped, in the direction perpendicular to the errors, but that's adding a whole other layer of complexity for what seems like little benefit.",
    "created_at": "2017-06-28T01:06:57Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1824#issuecomment-311528141",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1824",
    "updated_at": "2017-06-28T01:06:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "re: attribute name: Since this applies only to markers I'd put it in the `marker` container, but I'm not sure what to call it. Just to throw some things out there:\r\n`marker.edgeeffect: 'clip'/'hide'` (`'hide'`: never clip, only hide out of range markers)\r\n`marker.overflow: true/false` (`true`: allow markers to overflow the subplot bounds)",
    "created_at": "2017-06-27T22:58:38Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1824#issuecomment-311509391",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1824",
    "updated_at": "2017-06-27T22:58:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Right now the layering depends on `cliponaxis` - I think we need to preserve the previous behavior, which probably means keeping the layer structure as it was but pushing the clipping down to the level of point groups and line groups. One simple example where this is not desired:\r\n\r\n```js\r\nPlotly.newPlot(gd,[\r\n    {y: [1,1,1,1,1], mode:'markers+lines', marker: {size: 20}},\r\n    {x:[0, 1.5, 2.5, 4], y: [0, 2, 0, 2], mode: 'markers+lines', marker: {size: 20}}\r\n],\r\n{width: 400, height: 400, xaxis: {range: [0, 4]}, yaxis: {range: [0, 2]}})\r\n```\r\n<img width=\"349\" alt=\"screen shot 2017-06-27 at 6 24 09 pm\" src=\"https://user-images.githubusercontent.com/2678795/27612748-ff8c31de-5b65-11e7-9082-c4dbeff9193e.png\">\r\n\r\n```js\r\nPlotly.restyle(gd,'cliponaxis',false)\r\n```\r\n<img width=\"349\" alt=\"screen shot 2017-06-27 at 6 24 35 pm\" src=\"https://user-images.githubusercontent.com/2678795/27612763-0f38e726-5b66-11e7-824c-7ab8c26e4318.png\">\r\nThe blue points are no longer behind the orange lines.\r\n\r\nI guess if you have two marker traces there would be an even more dramatic effect if you made the first one `cliponaxis: false` and the second `true`: the markers of the first would jump on top of the second. And if you had a dense field of markers from one trace, with a sparse `'lines+markers'` in front of it, both `cliponaxis: false`, the top trace would lose its lines and have disconnected markers visible...\r\n\r\nAlso: we should recalculate visible markers during zoom/pan (as well as during animation, which you already mentioned), so we don't get situations like these (dragging the top right corner out and then in):\r\n<img width=\"352\" alt=\"screen shot 2017-06-27 at 6 36 33 pm\" src=\"https://user-images.githubusercontent.com/2678795/27613131-e108f664-5b67-11e7-92d6-7f735c60d3b2.png\">\r\n<img width=\"347\" alt=\"screen shot 2017-06-27 at 6 36 43 pm\" src=\"https://user-images.githubusercontent.com/2678795/27613133-e52565b6-5b67-11e7-9dc1-d714af839b62.png\">\r\n",
    "created_at": "2017-06-27T22:42:46Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1824#issuecomment-311506665",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1824",
    "updated_at": "2017-06-27T22:42:46Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "👍 for SVG with an eventual plan to automatically wrap text. So many places this would be useful, I'd like to see it built into to `svgTextUtils.convertToTspans` so we can reuse it in axis labels, annotations, legends, colorbar labels, etc etc.\r\n\r\nIt sounds a bit complicated to implement, but with selective rendering and aggressive caching of dimensions I'd imagine we could get reasonable performance...",
    "created_at": "2017-06-27T15:58:17Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/991#issuecomment-311403541",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/991",
    "updated_at": "2017-06-27T15:58:17Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I'm just curious, if we do add configurability down the road, how would it fit with this first version?\r\n>\r\n> Maybe adding, `labelmode: 'auto' || 'manual'` where `'manual'` would be coupled with an array of boolean (e.g. `labels: [true, false, true]`) one value per contour level. I guess some users would want to control to number of labels per contour and the total number of labels per trace (e.g. with an `nlables` attribute similar to `nticks`).\r\n\r\nGood question. My feeling is to control which contours to label, the most intuitive way would be to specify an array of levels, which could even be making an array form of `showlabels`, like `showlabels=[10, 20, 50, 100]` And then to control how many labels to show per contour, I'd probably just make some parameter like `labeldensity` that adjusts a few of the now constants (perhaps `LABELDISTANCE`, `LABELMAX`, and `MAXCOST`?) to more or less linearly increase or decrease the number we display (with the current constants what you get with the default `labeldensity=1`), without trying to explicitly specify a number. Partly I say that because of the heuristic nature of the placement algorithm, which would make it hard to arrive at a specific number, and partly because when you zoom and pan you probably don't want the number of labels displayed to be constant.\r\n\r\nBut I'd like to do major/minor contours first, as we might have different ideas after implementing that.",
    "created_at": "2017-06-27T01:29:04Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1815#issuecomment-311226958",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1815",
    "updated_at": "2017-06-27T01:29:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks good. Referencing #804 and #835 for why we're only concerned with these few entities. I may hunt around for a performant way to support *all* entities, but in the meantime this gets a 💃 !",
    "created_at": "2017-06-26T19:17:53Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1820#issuecomment-311155494",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1820",
    "updated_at": "2017-06-26T19:17:53Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Haha I guess just because we *have* tests, doesn't guarantee they're testing the correct result!\r\n\r\n💃 ",
    "created_at": "2017-06-26T18:50:24Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1819#issuecomment-311148643",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1819",
    "updated_at": "2017-06-26T18:50:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@rreusser \r\n\r\n> Since plotting is pretty trace-specific, I think it might have to be duplicated, though it's probably possible to factor out the code since there's nothing really contour-specific.  I'll try to throw together a POC (though probably not much work required beyond that).\r\n\r\nawesome, that'll help with [your previous comment](https://github.com/plotly/plotly.js/pull/1815#discussion_r123851404) too 🍰 ",
    "created_at": "2017-06-26T18:13:00Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1815#issuecomment-311138498",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1815",
    "updated_at": "2017-06-26T18:13:00Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@rreusser what plot did you see those labels on tiny loops? There is a minimum of 3x the label length but perhaps we need to increase that. ",
    "created_at": "2017-06-26T16:15:30Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1815#issuecomment-311107650",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1815",
    "updated_at": "2017-06-26T16:15:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nothing's too minor @monfera 🔍 🏆 \r\n\r\nSeems to me the simplest way to keep this from happening is to add `overflow:hidden` to `.svg-container` - which cuts off the pleasant curve on the edge of the tooltip, but that's better than overstepping our bounds! Then secondarily we can look for a way to push it back on screen, curves and all.",
    "created_at": "2017-06-22T20:48:30Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1810#issuecomment-310498267",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1810",
    "updated_at": "2017-06-22T20:48:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Ok. In this case, the adding a fallback for undefined `_arrayAttrs` would be safest and best.\r\n\r\nThat's the simplest solution... but that'll mean transformed traces will lose access to these attributes, exactly when they're most useful, won't it? Would it be better to recalculate `_arrayAttrs` after running the transforms?",
    "created_at": "2017-06-22T20:30:36Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1807#issuecomment-310493998",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1807",
    "updated_at": "2017-06-22T20:30:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @geocosmite - I've thought about major/minor contours, I agree it would be a nice feature, and coupled somewhat to the use of labels. But to keep the feature focused I'm planning to leave that out of the first stage.\r\n\r\nThen as long as major/minor contours are in the roadmap, I'd rather not include a label interval. It would be fairly easy to add, but major/minor is more flexible, doesn't miss any capabilities of interval (that I can think of anyway - can you?) and there's at least one complication to the interval approach that major/minor avoids: choosing the right starting point. For example, if your contour interval is 10, your first contour is at 30, and you set a label interval of 5: naturally you're asking to label contours 50, 100, and 150, not 30, 80, and 130. Major/minor would automatically default to round numbers for the major values while still allowing unusual starting points, without adding any additional attributes.",
    "created_at": "2017-06-21T21:45:27Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1395#issuecomment-310214298",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1395",
    "updated_at": "2017-06-21T21:45:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@geocosmite interesting idea to bring the axis length (or perhaps the diagonal) into the calculation, I like it. I still think the distance to the next contour will need to play a role - imagine doubling the number of contours you show: that will make it harder to follow the contours that were already present, even though those contours didn't change. But there may well be a place for both, something like the max or quadrature combination of the two results.",
    "created_at": "2017-06-21T03:40:56Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1395#issuecomment-309954220",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1395",
    "updated_at": "2017-06-21T03:40:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Interesting... I'll have to take a look at this and play with it, but to answer your question:\r\n\r\n> Is there any particular reason we don't use `document` for catching mouse events? What makes `dragCover` different from `document`?\r\n\r\nWe wanted users to be able to drag off the edge of the plot, but without interacting with other things they might be dragging over until they mouse up. So for example put two plotly plots next to each other, and pan one of them (or zoom by dragging one axis end) until the cursor is over the other - there should be no hover effects in the second one.",
    "created_at": "2017-06-20T20:17:59Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1804#issuecomment-309878749",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1804",
    "updated_at": "2017-06-20T20:17:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Some more observations as I start to work on this:\r\n\r\n- I'm not a big fan of trying to make the text follow the curve. I think it hinders readability, and could imagine in extremely jagged cases it would make a total mess.\r\n- I like @rreusser 's clip path idea. That would also handle the case of multiple nearby contours, we wouldn't want to cut a segment out of the contour we're measuring only to have a different contour obscure the label. So to be clear, *all* labels would contribute to a clip-path exclusion against *all* contours. (side note: `getPointAtLength` is OK to use, we use it elsewhere, the issue flagged in the docs just amounts to changing what class it's defined on, ie to generalize it, not to remove support.)\r\n- Looking around online as well as at my collection of paper topo maps, it doesn't seem like there's a consensus even among professional mapmakers on where to place labels relative to each other. \r\n  - Some line up a whole series of labels near each other - not overlapping of course, but almost looking like the labels on a color bar.\r\n  - Others seem to want to disperse them as much as possible.\r\n  - It seems to me the latter approach is generally the best, based on what you're trying to accomplish with labels: typically you'll be focusing on one particular region of the plot and then you ask yourself \"which contour is this one?\" If that very contour is labeled near enough that you can follow along and clearly see it, that's great, but if not it would still be helpful if one of the neighboring contours had a label nearby that you can increment from.\r\n- I've seen a few examples where the text can be placed completely upside down. Presumably the rationale is to show which way is up (higher z), by ensuring it's always at the top of the text. I suppose there's something to say for that, if you could get viewers sufficiently trained up to make use of it, but I don't intend to do that, and may even try to bias the algorithm toward placing the labels closer to horizontal than purely on the straightest section of the curve.\r\n- At least to start, I'm only going to include the numbers, no units or other prefix / suffix. We can add that later if people want it, but in the cases I've seen it (even if it's just `'` for feet) it seems horribly redundant, and particularly so in our case since we have hover labels, colorbar, plot title... all of which give you that info with less clutter.\r\n- Sometimes you'll see multiple labels on one curve. Intuitively, it seems like when it gets hard to follow from the point you're looking at to a label (potentially for a nearby contour as mentioned above) we should add another label, but not so many that it gets cluttered or you lose a significant fraction of the line length... I'm not quite sure how to quantify that, perhaps something like distance between labels (along the contour) should be some multiple of the average distance to the next contour?",
    "created_at": "2017-06-20T18:11:19Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1395#issuecomment-309842126",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1395",
    "updated_at": "2017-06-20T18:11:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "fixed by #1792 ",
    "created_at": "2017-06-19T14:47:28Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1773#issuecomment-309462766",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1773",
    "updated_at": "2017-06-19T14:47:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Text placement was always a tricky part of adding new layout components. This PR will make that so much easier. 🎉\r\n\r\nI hope so! One piece that's still pretty tricky is mathjax (because you have to support async rendering, and any bbox calls need to look for the mathjax group), and I'll try to address that later. In the meantime, we should make a practice of including `data-notex` (as I did with existing components in this PR) anytime we call `convertToTspans` if it hasn't been explicitly tested with tex. That way not only will it work consistently, but we'll have an easy tag to look for when someone wants to upgrade a component with tex compatibility.",
    "created_at": "2017-06-19T14:46:22Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1792#issuecomment-309462393",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1792",
    "updated_at": "2017-06-19T14:46:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Beautiful. Gotta love it when all these extra edge cases pop out on fixing related issues.\r\n💃 ",
    "created_at": "2017-06-16T22:14:56Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1791#issuecomment-309146680",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1791",
    "updated_at": "2017-06-16T22:14:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> > For :racehorse: I need to either convert them to their base nodes or find an alternate way to give them a robust cache key:\r\n> \r\n> I suppose this will wait for a future PR?\r\n\r\nI'm going to take a stab at making the ones in `titles` cacheable for this PR, as I think that's actually a big part of the speedup in #1772 that we're losing at the moment. The ones in `colorbar` though I'll probably leave for later.",
    "created_at": "2017-06-16T20:33:36Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1792#issuecomment-309127512",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1792",
    "updated_at": "2017-06-16T20:33:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ah good catch @etpinard - yes, fix is included in #1792 (specifically https://github.com/plotly/plotly.js/pull/1792/files#diff-5d20f0f113b3fa06526a5ae593b7de34R640)- and we have tests that were previously testing the **incorrect** behavior and are now testing the correct behavior, such as https://github.com/plotly/plotly.js/pull/1792/commits/3b293ace4fe24f36466ba63a6ce8e4757b86559c :tada:",
    "created_at": "2017-06-16T20:30:21Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/973#issuecomment-309126785",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/973",
    "updated_at": "2017-06-16T20:30:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice and simple, and this actually seems like it's the logical way for `ax.r2c` to work. No problem about splitting off the mock - you're right to include both x and y, shapes and annotations (what about images?) - though at some point I feel like a bit of consolidation may be in order.\r\n\r\nBut did that mock fail before the patch? The coordinates that lead to the shape and annotations bumping out the autorange didn't come from category names. For annotations we can use a category that's already in the data and let the text box or arrow add extra pixel padding, for shapes it seems like we may need to use a category that's not in the data, so `ax.categoryarray`?",
    "created_at": "2017-06-15T23:54:32Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1791#issuecomment-308896018",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1791",
    "updated_at": "2017-06-15T23:54:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This is great @etpinard - really thorough, nice to get all these harmonized with each other! 💃 ",
    "created_at": "2017-06-15T01:59:18Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1770#issuecomment-308606996",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1770",
    "updated_at": "2017-06-15T01:59:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The mock to include this in is `annotations-autorange.json` - make one of the axes categorical and use the category names for a couple of the positions on that axis.",
    "created_at": "2017-06-14T20:47:26Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1768#issuecomment-308553351",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1768",
    "updated_at": "2017-06-14T20:47:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 💃 💃 !",
    "created_at": "2017-06-14T20:44:41Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1781#issuecomment-308552632",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1781",
    "updated_at": "2017-06-14T20:44:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Actually I made a mistake in 033bee3 - fixed in b0d1af2 - that means it's likely MathJax will work fine on CI after all. But I found a bunch of other issues when developing a more complete MathJax test mock so I'm going to defer that to a separate PR if you don't mind.",
    "created_at": "2017-06-14T20:09:26Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1788#issuecomment-308543908",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1788",
    "updated_at": "2017-06-14T20:09:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Hmm. Looks like CI doesn't like MathJax intermittently.\r\n\r\nAnnoying. I guess this is probably the same sporadic delay we saw in https://github.com/plotly/streambed/issues/9508\r\n\r\nI guess what I'll do is take MathJax out of the annotations mock, and make one MathJax mock that we skip in CI for now but tries to cover *everywhere* we support MathJax at present.",
    "created_at": "2017-06-14T17:32:58Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1788#issuecomment-308503385",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1788",
    "updated_at": "2017-06-14T17:32:58Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@simoneb definitely, making this attribute an integer seems like the way to go. I'd put it in [hoverlabel](https://github.com/plotly/plotly.js/blob/master/src/components/fx/attributes.js#L15), perhaps `hoverlabel.trimname` or `hoverlabel.namelength`? Then a value of `0` would mean \"no trimming\" (or perhaps `false` would be clearer? It's not an integer but we do mix types for purposes like that elsewhere) and the `dflt` would be `15`.",
    "created_at": "2017-06-14T05:09:46Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1777#issuecomment-308321146",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1777",
    "updated_at": "2017-06-14T05:09:46Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Interesting, definitely seems doable, but is the numpy buffer format accessible from other languages? It looks like a fairly straightforward encoding, so seems like even if it's not natively available elsewhere we could likely generate it - hopefully just translating headers from whatever *is* natively available.",
    "created_at": "2017-06-14T04:58:37Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1784#issuecomment-308319857",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1784",
    "updated_at": "2017-06-14T04:58:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard nice work! just the one more question about how we calculate border widths https://github.com/plotly/plotly.js/pull/1781/files#r121820798 and we should be ready to go. The available symbols are looking really good now. Thanks for bearing with all my nitpicks, I just want to get this all as final as possible so we don't need to come back to it again...",
    "created_at": "2017-06-13T23:25:15Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1781#issuecomment-308276668",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1781",
    "updated_at": "2017-06-13T23:25:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Oh crap, the bbox part *is* from #1772 though - because I used `innerHTML` to generate the node hash. OK, I'm on it.",
    "created_at": "2017-06-13T15:33:38Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1782#issuecomment-308156487",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1782",
    "updated_at": "2017-06-13T15:33:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I was concerned the bbox part might have to do with premature caching - from #1772 - but no, it isn't fixed if you `relayout` one of the annotations to totally different text.",
    "created_at": "2017-06-13T15:29:22Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1782#issuecomment-308155073",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1782",
    "updated_at": "2017-06-13T15:29:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "OK - just trying to get closer to parity. Lots of good additions here, but I don't think we should include symbols that don't match fairly closely what we do in SVG. To my eye the red ones below are not close enough as shown, and the green ones could probably be used unfilled but not filled.\r\n![gl2d-markers](https://user-images.githubusercontent.com/2678795/27061797-c505235c-4fb4-11e7-82a9-9eafd9080dd7.png)\r\n",
    "created_at": "2017-06-13T01:22:56Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1781#issuecomment-307979384",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1781",
    "updated_at": "2017-06-13T01:22:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Could we make some of the markers be rotated characters? So like ➕  could rotate 45 degrees to make ✖️  rather than having to use letter X.",
    "created_at": "2017-06-13T00:46:06Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1781#issuecomment-307974513",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1781",
    "updated_at": "2017-06-13T00:46:06Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Alright, I suppose I could write some sort of feature detection to enable or disable this behavior... but I think the better solution (which with any luck will be even faster as well as cross-browser!) will be to just build elements like we do for everything else, rather than building a text string and turning that into elements. Going to give that a shot.",
    "created_at": "2017-06-12T15:12:38Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1776#issuecomment-307819827",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1776",
    "updated_at": "2017-06-12T15:12:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "(offline weekend 💃  from @etpinard )",
    "created_at": "2017-06-11T16:07:08Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1772#issuecomment-307638990",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1772",
    "updated_at": "2017-06-11T16:07:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Some profiling on small charts: All results from Chrome on my mac with no profiles running. Running profiles adds ~5% to these times with no screenshots, ~10% with screenshots (interestingly the profiling penalty seems bigger even *fractionally* before the change). All results are averaging ~10 runs of `Plotly.newPlot` on the same data repeatedly, throwing away the first one. This gives extra weight to the caching improvements, but as my interest is mainly in interactivity performance that's what I want.\r\n\r\nusing mock `category_dtick_3` (small line chart with a linear and a category axis):\r\n- before this branch: 144ms\r\n- after this branch: 63ms\r\n\r\nusing a chart with ~30 variable-size bubbles, gradient fill, long category names:\r\n- before this branch: 444ms\r\n- after this branch: 270ms",
    "created_at": "2017-06-11T15:55:21Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1772#issuecomment-307638308",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1772",
    "updated_at": "2017-06-11T15:55:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yeah totally, this will make a lot of applications cleaner 🌟 \r\nJust be careful about 🐎  since this will apply to some pretty high-rate events.",
    "created_at": "2017-06-09T18:19:18Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1770#issuecomment-307462909",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1770",
    "updated_at": "2017-06-09T18:19:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks great, I'm happy to call this unification a bug fix.",
    "created_at": "2017-06-09T18:14:03Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1766#issuecomment-307461598",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1766",
    "updated_at": "2017-06-09T18:14:03Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks great! 💃 ",
    "created_at": "2017-06-08T21:01:01Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1769#issuecomment-307226167",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1769",
    "updated_at": "2017-06-08T21:01:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "hah, the [test failure](https://circleci.com/gh/plotly/plotly.js/4485?utm_campaign=vcs-integration-link&utm_medium=referral&utm_source=github-build-link) is a real bug that's fixed by https://github.com/plotly/plotly.js/pull/1655/commits/597adf96181b40a4eabc7b3622e919d19e1864a0\r\nold version has a light green bar:\r\n![screen shot 2017-06-08 at 4 50 44 pm](https://user-images.githubusercontent.com/2678795/26950151-ad81fd60-4c6a-11e7-946d-401aea6decb2.png)\r\nnew version it's pink:\r\n![screen shot 2017-06-08 at 4 50 20 pm](https://user-images.githubusercontent.com/2678795/26950160-b47ca17e-4c6a-11e7-83a4-0fa440dca314.png)\r\nbecause `'99' > '100'` while `99 < 100`",
    "created_at": "2017-06-08T20:52:53Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1655#issuecomment-307224159",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1655",
    "updated_at": "2017-06-08T20:52:53Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "One tricky aspect of this implementation: whenever `ax.domain` gets changed to satisfy a constraint, the input `gd.layout` axis domain is also changed to match, but the original full domain is stashed in `ax._inputDomain`, so that if you change ranges later and the subplot shape changes, it can expand to fill the originally specified space so it doesn't have to get smaller and smaller.\r\n\r\nI considered doing this by either 1) letting the `_fullLayout` `ax.domain` be different from the `layout` input value, but I thought that would cause confusion & problems, particularly in the workspace; or 2) using another (private) attribute like `ax._finalDomain` for all actual axis positioning, but I felt like that would be too intrusive for a fairly esoteric feature.\r\n\r\nOne pitfall with this approach though is that when a plot is saved, `ax._inputDomain` will be lost so later `relayout`s will not be able to access the full original domain. This isn't a problem for pure GUI use because that *can't* change the shape (see https://github.com/plotly/plotly.js/pull/1767#discussion_r120920709) but I suppose could cause confusion if the plot is brought back into the workspace, or into some other application that permits more granular `relayout`s.",
    "created_at": "2017-06-08T15:41:59Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1767#issuecomment-307142892",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1767",
    "updated_at": "2017-06-08T15:41:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "No more comments from me - looks great! 💃 ",
    "created_at": "2017-06-06T16:57:02Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1761#issuecomment-306550054",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1761",
    "updated_at": "2017-06-06T16:57:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "So I guess previously these colorscale ranges were erroneously taken from the `z` span of the data? Looks great! 💃 ",
    "created_at": "2017-06-02T03:19:08Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1719#issuecomment-305678801",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1719",
    "updated_at": "2017-06-02T03:19:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks great! Thanks for the tweaks.\r\n💃 ",
    "created_at": "2017-05-31T18:56:58Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1748#issuecomment-305283751",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1748",
    "updated_at": "2017-05-31T18:56:58Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "meh, the simplified one worked for me, merged that into #1737 and closing this PR",
    "created_at": "2017-05-26T21:25:49Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1739#issuecomment-304391598",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1739",
    "updated_at": "2017-05-26T21:25:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard I seem to recall we talked at some point about having a config setting that runs `Plotly.validate` during `supplyDefaults` or something, kind of a debug mode - is there an issue for this? @mdamien is right of course that this kind of error is tough to catch, but that's true of every attribute really, they'll all silently ignore invalid input.",
    "created_at": "2017-05-26T20:56:33Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1736#issuecomment-304386437",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1736",
    "updated_at": "2017-05-26T20:56:33Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "That's all from my side, looks great! 💃 ",
    "created_at": "2017-05-26T16:13:25Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1638#issuecomment-304323899",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1638",
    "updated_at": "2017-05-26T16:13:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "nice catch! 💃 ",
    "created_at": "2017-05-25T22:23:05Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1732#issuecomment-304140676",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1732",
    "updated_at": "2017-05-25T22:23:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This looks to be all set yes? Particularly since #1729 is merged so it's tested...\r\n💃 ",
    "created_at": "2017-05-25T22:21:04Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1723#issuecomment-304140340",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1723",
    "updated_at": "2017-05-25T22:21:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Personally the part of this PR I'm most excited about is that the node/link alignment is cleaner now in vertical orientation (as shown in the baseline image change) 🎉 \r\n\r\nThe transition is good too 😉 \r\n\r\n💃 ",
    "created_at": "2017-05-25T22:15:13Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1731#issuecomment-304139222",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1731",
    "updated_at": "2017-05-25T22:15:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Oops 🙃  💃 ",
    "created_at": "2017-05-25T21:45:02Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1730#issuecomment-304133265",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1730",
    "updated_at": "2017-05-25T21:45:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Any objections before I shuffle the new code around?\r\n\r\nsounds reasonable, go for it!",
    "created_at": "2017-05-25T19:12:48Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1638#issuecomment-304097628",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1638",
    "updated_at": "2017-05-25T19:12:48Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> The tweening effect when switching between horizontal and vertical layout was a bit like a circus attraction, and interestingly, the switch to attr made it noticeably worse\r\n\r\nInteresting indeed... I certainly wouldn't have expected that to make a difference.\r\n\r\nPersonally I don't see animating an orientation change as being particularly useful to viewers (did we have an explicit requirement to do this?), so I'd be at least as happy just snapping to the new layout - particularly if it's going to take a noticeable effort to fix this.",
    "created_at": "2017-05-25T18:55:19Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1723#issuecomment-304093504",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1723",
    "updated_at": "2017-05-25T18:55:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 ",
    "created_at": "2017-05-25T17:53:11Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1727#issuecomment-304077124",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1727",
    "updated_at": "2017-05-25T17:53:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Now, we should document these new pseudo-html features\r\n\r\nExcellent point. Our pseudo-html applies to really anywhere we display text: annotations, plot and axis titles, trace names. Also tick labels (categories, ticktext, tickprefix, ticksuffix...) and trace text and hovertext though those are generally unclickable so this *particular* change doesn't matter there.\r\n\r\nSeems like this format is too complex to include outright in all of these attribute, so we need some dedicated text formatting page that all of these attributes can somehow reference?",
    "created_at": "2017-05-25T16:25:11Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1726#issuecomment-304054698",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1726",
    "updated_at": "2017-05-25T16:25:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice use of `PlotSchema` to keep this clean!\r\n\r\nYeah, annoying that we have to do this (for the record from a separate chat: the underlying issue is that a `calcTransform` can modify `fullData`, which is really upstream of the `calc` step that it's run in. We haven't come up with a cleaner way to separate this but will keep ruminating on it)\r\n\r\n:dancer: after https://github.com/plotly/plotly.js/pull/1717#discussion_r118102595",
    "created_at": "2017-05-23T21:09:10Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1717#issuecomment-303532950",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1717",
    "updated_at": "2017-05-23T21:09:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "makes sense 💃 ",
    "created_at": "2017-05-23T20:00:34Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1708#issuecomment-303514842",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1708",
    "updated_at": "2017-05-23T20:00:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Alright, @etpinard especially in light of all the divergent IE behaviors we've seen I don't see much point trying to test this... but at least this fix is now linked forever to #431 in case we ever do push that one through.\r\n\r\nAnything else?",
    "created_at": "2017-05-23T19:04:55Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1715#issuecomment-303500302",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1715",
    "updated_at": "2017-05-23T19:04:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "pinging @rreusser - just to make sure this issue (and @etpinard's fix in #1709) is on your radar re: bar animations",
    "created_at": "2017-05-23T18:54:30Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1706#issuecomment-303497511",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1706",
    "updated_at": "2017-05-23T18:54:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks great, nice work! 💃 ",
    "created_at": "2017-05-23T18:53:19Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1709#issuecomment-303497125",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1709",
    "updated_at": "2017-05-23T18:53:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Oh, even falsey isn't enough - IE9 gives `':'` for the protocol here 🙄 ",
    "created_at": "2017-05-23T17:55:55Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1715#issuecomment-303481524",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1715",
    "updated_at": "2017-05-23T17:55:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> In Edge, `/cats` has a protocol of `\"http:\"` like in Chrome and FF.\r\n\r\nAh great - I didn't test Edge, assumed it would behave like IE but even better if it behaves like Chrome and FF!\r\n\r\n> In IE, `/cats` has a protocol of `undefined`.\r\n\r\nHuh, on Browserstack, IE11 in Win10, I saw `''` and this fix worked. But I can change it to accept anything falsey, still seem reasonable?",
    "created_at": "2017-05-23T17:42:56Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1715#issuecomment-303477958",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1715",
    "updated_at": "2017-05-23T17:42:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Related I suspect: doesn't seem to be an issue in Chrome, but in FF if I move a plot from my external monitor to my laptop monitor (retina display, 2x resolution but this seems partially masked) hover labels get messed up:\r\n<img width=\"1026\" alt=\"screen shot 2017-05-18 at 5 27 52 pm\" src=\"https://cloud.githubusercontent.com/assets/2678795/26224296/b07d2dae-3bef-11e7-9bf6-15f3d3412811.png\">\r\nAnd retina -> normal:\r\n![screen shot 2017-05-18 at 5 33 18 pm](https://cloud.githubusercontent.com/assets/2678795/26224396/228becd2-3bf0-11e7-88f1-a9e5779916d2.png)\r\n\r\n",
    "created_at": "2017-05-18T21:34:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/888#issuecomment-302548069",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/888",
    "updated_at": "2017-05-18T21:34:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks great, thanks for the test! 💃 ",
    "created_at": "2017-05-18T13:21:28Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1700#issuecomment-302401619",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1700",
    "updated_at": "2017-05-18T13:21:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> And a small nitpick that it doesn't feed the new state *into* controls that way. Controls read from `_fullData` to see if the piece they connect to has changed. So hopefully nothing gets too weird here.\r\n\r\nAh, I see. That's good, and seems like it assuages my fears for correlated components. Let me just follow through the implications for an `execute: false` slider itself:\r\n- When you move it somewhere, it stays there, waiting for the change to be realized, even though at that instant plot is in an inconsistent state. This *must* be how we handle that moment, since the event-handler response could happen an arbitrary time later and we don't want to have it do something like jump back immediately to maintain consistency and then jump to the drop value once the change occurs.\r\n- If the event handler executes the change it said it would, we're all happy, the slider doesn't move but the plot is once again in a consistent state.\r\n- But if the event handler executes a change that puts the slider into a *different* state than where it was dragged, I guess the slider should recognize that and move to the true location? While you still have the mouse down on it? Confusing for the viewer but that would get the plot back to consistency. Is that what happens?",
    "created_at": "2017-05-18T13:13:38Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1695#issuecomment-302399617",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1695",
    "updated_at": "2017-05-18T13:13:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "If not a spy, do you want to just check that `gd.data` doesn't change with `execute: false` but then does change if you set it `true`?",
    "created_at": "2017-05-18T12:27:47Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1700#issuecomment-302389107",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1700",
    "updated_at": "2017-05-18T12:27:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I've added a test to updatemenus but not to sliders\r\n\r\nWorks for me. All looks great! 💃 ",
    "created_at": "2017-05-18T12:21:03Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1699#issuecomment-302387767",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1699",
    "updated_at": "2017-05-18T12:21:03Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Can you add a test that the `plotly_sliderchanged` and `plotly_buttonclicked` events still fire with `skip`?",
    "created_at": "2017-05-18T11:21:08Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1699#issuecomment-302376202",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1699",
    "updated_at": "2017-05-18T11:21:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "if the user sets `execute: false` but then doesn't do the thing specified in the action, then the rest of the UI will think it has happened and update accordingly... but it will be wrong.\r\n\r\nAnyway not a big deal, that's just a documentation issue; the functionality sounds good.",
    "created_at": "2017-05-18T02:52:08Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1695#issuecomment-302286317",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1695",
    "updated_at": "2017-05-18T02:52:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Sure, I could go for `execute` if it's well enough described (with the caveat that if you *say* you're going to execute and you don't, all bets are off.",
    "created_at": "2017-05-18T02:03:49Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1695#issuecomment-302280114",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1695",
    "updated_at": "2017-05-18T02:03:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I still think it’s a bad idea to have an axis that doesn’t map data one-to-one to position. What if you want to tile several heatmaps? What if you want a scatter or bar trace on the same axis? What if you bind a click or hover handler, how will you know on which copy of the item the event really happened? All of these situations would be easy to manage with `ticktext` / `tickvals` but would be ambiguous, and probably in some cases impossible to get right, with a many-to-one mapping.\r\n\r\nPerhaps we could consider a mode within the `heatmap` trace (and potentially in other trace types too) that automatically maps `x` and `y` string arrays to `tickvals` and `ticktext` on the appropriate axis (with an optional `x0` and `dx` etc so `tickvals` need not be `[0, 1, 2...]`)? That seems like it would yield the same visual result without the ambiguities.",
    "created_at": "2017-05-17T23:47:58Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1516#issuecomment-302261855",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1516",
    "updated_at": "2017-05-17T23:47:58Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃  ",
    "created_at": "2017-05-17T22:41:24Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1694#issuecomment-302251503",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1694",
    "updated_at": "2017-05-17T22:41:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "👍  for `skip`\r\nI don't like `enable` either - it implies that it will do *nothing* if it's `false` - including not firing any events or anything.\r\n\r\nIdeally it seems like we'd want a way to defer the action, but let you invoke it later - like if the native plotly.js invocation of the animation or whatever were passed into the event that you're going to bind to as a callback. But we can implement that later. For now, lets give it a more precise name at least. I want to say something like `executedseparately: true` (`dflt: false`) because if the user *doesn't* execute the same change as part of the event handler, the plot could end up in an inconsistent state. That's an awfully long name, anybody have a better idea?",
    "created_at": "2017-05-17T21:59:26Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1695#issuecomment-302243554",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1695",
    "updated_at": "2017-05-17T21:59:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Tetrahedra is already plural 🤓 \r\nOther than that needlessly pedantic comment, looks great! 💃 ",
    "created_at": "2017-05-16T18:55:41Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1686#issuecomment-301880344",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1686",
    "updated_at": "2017-05-16T18:55:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃  once #1690 is merged and tests pass",
    "created_at": "2017-05-16T18:45:03Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1683#issuecomment-301877505",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1683",
    "updated_at": "2017-05-16T18:45:03Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "LGTM! 💃 ",
    "created_at": "2017-05-16T18:43:04Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1690#issuecomment-301876973",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1690",
    "updated_at": "2017-05-16T18:43:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Great! 💃 ",
    "created_at": "2017-05-16T18:18:06Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1672#issuecomment-301870008",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1672",
    "updated_at": "2017-05-16T18:18:06Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "We had discussions a long time ago about an idea I was calling \"legends 2.0\" that would support this and many other use cases:\r\n- create a syntax for describing trace legend items (with modifications) within annotations\r\n- the legends we have today would then just be a special case of an annotation, but you could construct any arbitrary legend, or caption (symbols embedded in prose), or whatever, using this syntax.\r\n\r\nFor example, assuming the plot you've made above used one trace with variable color and symbol, its legend could be an annotation like (syntax off the top of my head... could be very different but you get the idea):\r\n\r\n```\r\n'<span style=\"font-size: 1.3em;\">factor(vs)</span><br>' +\r\n'&trace0{\"marker.color\":\"red\",\"marker.symbol\":\"circle\"}; 0<br>' +\r\n'&trace0{\"marker.color\":\"green\",\"marker.symbol\":\"circle\"}; 1<br>' +\r\n'<br>' +\r\n'<span style=\"font-size: 1.3em;\">factor(am)</span><br>' +\r\n'&trace0{\"marker.color\":\"black\",\"marker.symbol\":\"circle\"}; Automatic<br>' +\r\n'&trace0{\"marker.color\":\"black\",\"marker.symbol\":\"triangle-up\"}; Manual'\r\n```\r\n\r\nFor the record, I don't know if other platforms implement a system like this but I'll note that this concept is inspired by a very similar system in [Igor Pro](http://www.wavemetrics.com/).",
    "created_at": "2017-05-16T03:40:02Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1668#issuecomment-301666815",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1668",
    "updated_at": "2017-05-16T03:40:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃  very clean! But consider https://github.com/plotly/plotly.js/pull/1689#discussion_r116596355 before merging.",
    "created_at": "2017-05-15T20:46:56Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1689#issuecomment-301599831",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1689",
    "updated_at": "2017-05-15T20:46:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "One concern I have is the implicit dependence between data and layout through `autorange`, and how it seems like currently that could leave you in an inconsistent state:\r\n- set up an autoranged plot\r\n- do an animation that changes the data (and changes what the autorange results should be)\r\n- but the autorange won't actually reevaluate, so the plot isn't really in the state implied by `data` and `layout`, until some other event causes a full redraw.",
    "created_at": "2017-05-15T17:46:02Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1687#issuecomment-301549850",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1687",
    "updated_at": "2017-05-15T17:46:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Implementation notes from when I rediscovered this issue just now:\r\n\r\nIf the page transforms the `plotDiv` element (or any parent of it) with a scale, rotation, or matrix, any call to `getBoundingClientRect` on an element within that div gives us misleading results and breaks hover effects. Certain `getBoundingClientRect` calls are necessary to find text sizing, but this should always be called on elements in `gd._tester`, which we attach directly to `<body>`, far off-screen. We should get rid of all other `getBoundingClientRect` calls. This will also be better for performance.\r\n\r\nSeems from the comments here like the problems extend beyond just `getBoundingClientRect` calls though - I guess anything that depends on `clientX` and `clientY` from the `mouseEvent` is susceptible. In principle I guess we'll need to find a way to invert the transform in order to interpret these correctly... make 3 little test elements in different corners of the plot and call `getBoundingClientRect` on each? `window.getComputedStyle().transform` on the plot and all its parent nodes and combine them? Those all sound kind of painful, any other options I'm not thinking of?",
    "created_at": "2017-05-10T19:20:05Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/888#issuecomment-300585969",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/888",
    "updated_at": "2017-05-10T19:20:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ah thanks @rreusser - I'll move my comment here over there.",
    "created_at": "2017-05-10T19:03:23Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1667#issuecomment-300581820",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1667",
    "updated_at": "2017-05-10T19:03:23Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃  once tests pass. Epic PR @etpinard 🏆 ",
    "created_at": "2017-05-10T18:54:52Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1582#issuecomment-300579619",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1582",
    "updated_at": "2017-05-10T18:54:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "yes, blocking `1.27.0` IMO",
    "created_at": "2017-05-10T17:32:39Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1662#issuecomment-300556090",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1662",
    "updated_at": "2017-05-10T17:32:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks great! 💃 ",
    "created_at": "2017-05-10T00:06:25Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1609#issuecomment-300336067",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1609",
    "updated_at": "2017-05-10T00:06:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice and clean 💃 ",
    "created_at": "2017-05-09T15:19:47Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1627#issuecomment-300198691",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1627",
    "updated_at": "2017-05-09T15:19:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks good! 💃 ",
    "created_at": "2017-05-09T15:16:39Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1653#issuecomment-300197720",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1653",
    "updated_at": "2017-05-09T15:16:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 ",
    "created_at": "2017-05-09T15:11:08Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1656#issuecomment-300196005",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1656",
    "updated_at": "2017-05-09T15:11:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "from @r1z1a in #1634 - there the use case was a trace that started all one color but during interactions one or another point (bars in that case too, though this applies to at least scatter as well) would change. @r1z1a 's suggestion:\r\n\r\n> An Ideal would be to store legend color when you first time plot it and pass data in, and after that the restyle shouldn't take effect if you are re-styling just single bars.\r\n\r\nIt's important that whatever solution we end up with depend only on the current state, not on its history, so while this suggestion is tempting as it produces the \"right\" result in that specific case, it's not viable in general.\r\n\r\nOne way we could solve this would be to explicitly specify legend styling. In principle this would need to be fairly involved, replicating all the `marker`, `marker.line`, and (for scatter) `line` attributes, but of course as a user you would only need to specify those attributes for which we get the default wrong.",
    "created_at": "2017-05-04T07:52:55Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1560#issuecomment-299118759",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1560",
    "updated_at": "2017-05-04T07:52:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yes, definitely duplicate of #1560 - lets continue this discussion over there.",
    "created_at": "2017-05-04T07:40:43Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1634#issuecomment-299116731",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1634",
    "updated_at": "2017-05-04T07:40:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Am I missing something fundamental here? Is there a purpose of being able to have hyperlinks in the text if you can't click them?\r\n\r\nWe support text in a lot of different contexts, and in most of the other contexts the links are clickable. So it would require special code to *disable* link creation within the unclickable contexts, and that extra complexity seemed unnecessary since really, is there a purpose to adding hyperlinks that you can't click? 😉 ",
    "created_at": "2017-05-04T07:33:42Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/998#issuecomment-299115565",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/998",
    "updated_at": "2017-05-04T07:33:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks great @monfera - Unless @etpinard has anything else to add, I'm ready to 💃 !",
    "created_at": "2017-05-02T18:31:55Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1591#issuecomment-298721515",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1591",
    "updated_at": "2017-05-02T18:31:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Added a test (I want this for my gradient test cases). I did it through a full plot since I wanted to test `restyle` too. I actually thought it might not work on restyle, due to [this line](https://github.com/plotly/plotly.js/blob/master/src/plot_api/subroutines.js#L320) and the fact we didn't make `module.arraysToCalcdata` like we did in [some modules](https://github.com/plotly/plotly.js/blob/master/src/traces/scatter/index.js#L26)... but, test passes (as does a sanity check in the dashboard) so I think we're OK, just may point to an optimization we can do later for style changes like this, perhaps whenever we get around to overhauling restyle/relayout.",
    "created_at": "2017-05-01T19:12:33Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1641#issuecomment-298406075",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1641",
    "updated_at": "2017-05-01T19:12:33Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "FWIW @etpinard and I had a slack chat about styles a few weeks ago... we talked about how I'm freaked out by the restrictions imposed by no `;`, how there are things like [semistandard](https://github.com/Flet/semistandard) but it doesn't have much traction, etc etc... it concluded with me saying:\r\n\r\n> I could still be convinced to go with standard if someone can convince me it really is becoming the standard throughout the js dev community… until then I feel like we should stick with what we have.\r\n\r\nSo let me generalize that statement: if we change styles, it had better be because the community is truly coalescing around a style AND we're convinced it's going to last many years that way. My gut reaction is that we shouldn't switch styles at all unless and until we move to ES6+ (but please don't open that can of worms here!)\r\n\r\nAlso for the record I completely agree with the outcome of #1629 - while enforcing completely automated style has its advantages, if it stops you from doing things that - rules be damned - make your code more readable (extra parens, d3 half-indents, etc etc) - then it's going too far.\r\n\r\nAnd of course @rreusser 's https://github.com/plotly/plotly.js/pull/1629#discussion_r113708332 is spot on:\r\n> The golden rule of conventions: Convention `<insert convention you use here>` is aesthetically superior to `<insert proposed alteration here>`. 😉\r\n\r\nSo there's really no point arguing about what's superior on the merits. Unless you can start the discussion with \"all the major active projects (in ES5) are using this style so it'll be easier for new people to adapt to our project,\" lets leave our style as it is now.",
    "created_at": "2017-04-29T03:32:50Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/950#issuecomment-298144207",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/950",
    "updated_at": "2017-04-29T03:32:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I like the idea of an \"only\" button that appears on hover - perhaps an 👁 icon at the right edge of the label? I don't think that would need to wait for v2, as no functionality would disappear, we'd just turn a doubleclick into a more specific single-click. It would also make this feature more discoverable 🎉 ",
    "created_at": "2017-04-29T01:05:47Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1623#issuecomment-298137263",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1623",
    "updated_at": "2017-04-29T01:05:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@monfera per https://github.com/plotly/d3-sankey/pull/2#issuecomment-298136105 I was curious what would happen if someone tried to make a cycle. So in http://codepen.io/monfera/pen/VbKrXM I added the line:\r\n```\r\nmock.data[0].links[12].target = 5;\r\n```\r\nright before the `Plotly.plot` call (cycling some district heating back to gas). The result seems to be a frozen browser. We don't need to support cycles (at least not yet) but it shouldn't lock up. Can we turn that into deleting the link and logging a warning?",
    "created_at": "2017-04-29T00:55:11Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1591#issuecomment-298136580",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1591",
    "updated_at": "2017-04-29T00:55:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Super! I won't be able to look at this until ~Friday so if you want to move ahead before that I'll defer to Etienne. Thanks for the changes!\n\n----\nAlex Johnson\n617-319-2964\n\n> On Apr 25, 2017, at 11:59, Robert Monfera <notifications@github.com> wrote:\n> \n> Hi @alexcjohnson, hope you see your feedback acted on in the updated example such as\n> \n> no circular bulges when moving nodes too close\n> no partial overlap or gap with multiedges\n> left-swept node labels in the rightmost layer\n> better text-shadow to make node labels stand apart, no matter the surrounding background color and or mixed link color (there's no need for text-shadow in the vertical orientation as text is inside node then)\n> toggle button for black background - it'll swap the default rgba(0,0,0,0.2) link color to rgba(255, 255, 255, 0.6) which isn't noticeable - yielding the same perceived color - but necessary for the right balance of translucency and contrast (you'd notice very much if there were no link color change when switching; an example of which is the manually specified red/blue that was taylored for white background and isn't as good on black background)\n> to me, these goals seem to be met:\n> the hover tooltip is readable with the defaults and various colors, both with dark and light background (toggle w/ the top button on the left)\n> the tooltip is translucent, which is useful as it can be large depending on the contents, and in my experience, not having some translucency is disturbing as it hides the presence of link flows behind it\n> the node / link colors are present in one form or another on the tooltips\n> looks pleasing (subjective)\n> As @etpinard indicated, the Follow mouse will give way to the Sticky tooltip option (see button) as it's more in line with the rest of the trace types.\n> \n> I think Please let me know if you see any glaring unergonomic thing or incompliance, or if I haven't addressed some of your feedback.\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n> \n",
    "created_at": "2017-04-25T21:37:53Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1591#issuecomment-297172751",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1591",
    "updated_at": "2017-04-25T21:37:53Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Adding a class to text groups seems like a great idea - there aren't too many places this would be needed, and then we could ensure this is targeted exactly where we want it. For example, bars with text (eg test_dashboard/#bar_attrs_relative) often the text gets autosized, with a maximum font size that shrinks to fit if necessary, and even auto rotation. This seems like a disaster to replicate on the fly, so I'd vote to just omit bar text from this effect at least for now.\r\n\r\nMake sure it works with axis drag zooms and scroll zooms too!",
    "created_at": "2017-04-21T16:15:07Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1616#issuecomment-296235110",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1616",
    "updated_at": "2017-04-21T16:15:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "And during zoom (by dragging an axis end or corner). @rreusser it was you who put in the inverse-distortion code for points and lines, right? Should be easy to extend to text?",
    "created_at": "2017-04-21T03:48:45Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1608#issuecomment-296046174",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1608",
    "updated_at": "2017-04-21T03:48:45Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard if you want to include this fix in your hover labels PR, it's as simple as removing:\r\n`&& d.zLabelVal === undefined`\r\nfrom https://github.com/plotly/plotly.js/pull/1582/files#diff-53eaf7f3ac3274b40206f89f8f87a5d6R689\r\n\r\nI don't really recall why that condition was put in there - maybe on the idea that you're already showing lots of info about heatmap points and you don't want to show more? Probably some long-obsolete rationale. 🔪 ",
    "created_at": "2017-04-21T03:44:16Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1600#issuecomment-296044904",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1600",
    "updated_at": "2017-04-21T03:44:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for the report @dsholes - #1615 should fix this.",
    "created_at": "2017-04-21T03:19:20Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1614#issuecomment-296037249",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1614",
    "updated_at": "2017-04-21T03:19:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "`tick0` just controls the formula that determines where to draw ticks. It doesn't affect the range of the axis, which in your case doesn't reach zero.\r\n\r\nThe setting you want is [`rangemode: 'tozero'`](https://plot.ly/javascript-graphing-library/reference/#yaxis-rangemode)",
    "created_at": "2017-04-21T02:19:44Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1610#issuecomment-296019224",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1610",
    "updated_at": "2017-04-21T02:19:44Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Yep, this turned out to be easy in a96af57 and abcf1b0 ✅\r\n\r\nAnd 🔪 yet another circular dep! 🍻 ",
    "created_at": "2017-04-20T19:01:58Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1613#issuecomment-295860143",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1613",
    "updated_at": "2017-04-20T19:01:58Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nicely done! 💃 ",
    "created_at": "2017-04-20T18:41:29Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1613#issuecomment-295851783",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1613",
    "updated_at": "2017-04-20T18:41:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I take it from your answer that overflow is not okay\r\n\r\nyeah, I think that's right - I'm not sure we've ever explicitly stated that, but for example if someone specifies the width and height of the div they plot into, we translate that into the plot width and height, and I expect they would not want the plot overflowing that. Also for iframe embeds, if the plot is autosized we will size it to the iframe and disable scrolling.\r\n\r\n> otherwise I'd just place the rightmost labels to the left.\r\n\r\nSounds fine, at least as a starting point.",
    "created_at": "2017-04-20T17:30:20Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1591#issuecomment-295825715",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1591",
    "updated_at": "2017-04-20T17:30:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> both the overlap avoidance, and the avoidance of bulges and the sometimes appearing circular artifacts around the nodes would be best taken care of together, because both would involve a rewrite of the current stroke based link making logic with a fill based one where we'd have finer grained control.\r\n\r\nYes, we definitely need to solve these problems. Your call how to go about it, if you think fill-based drawing is the easiest then go for it, I'll just point out that there are possibilities without dropping stroke-based rendering: The artifacts on fat, short links could use a transform to compress the stroke only along one axis. And the multi-link overlaps could potentially be solved by moving the control points, though seems like that would leave gaps... alternatively use alpha masking - would be a bit annoying to construct, from one or two copies of the original path with different stroke widths and filled to one side... but I'm pretty sure you could get arbitrary lateral segments of the stroke that way.\r\n\r\nThat said, if we ever want to support outlines on the links, might be best to bite the bullet now and go for fill-based links. It's not used very often, but occasionally, like: ![sankey with link outlines](http://3.bp.blogspot.com/-CNmDLcX9duc/T52AWgZAg8I/AAAAAAAAABU/AWZnyFnq2DM/s1600/Image8.jpg)\r\n\r\n> If the color logic feel satisfactory or robust with the Sankey, maybe we can make a separate subsequent PR that unifies behavior across other plots if this task is greenlighted.\r\n\r\nSounds right to me. Get this one perfect and then at some point we'll merge it back to the rest of them. The one thing I'll note right now is what should happen when the background is not white (change `paper_bgcolor` in your example - this also shows that the diagram is overflowing the allowed area...) - the secondary text shouldn't be on semitransparent white, it should be semitransparent of whatever the background color is, then pick a text color that's legible against *that*.",
    "created_at": "2017-04-20T16:15:00Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1591#issuecomment-295797095",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1591",
    "updated_at": "2017-04-20T16:15:00Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@Discmt can you post a complete code example that shows the issue you've encountered? ie a codepen or something? When I try it, as long as `marker.color` is already an array, it behaves as expected and only changes the color of one point.",
    "created_at": "2017-04-19T18:36:41Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/144#issuecomment-295382753",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/144",
    "updated_at": "2017-04-19T18:36:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "BTW just looking at that codepen again - multiple links between the same nodes are cool, but do you have a strategy for ensuring they don't overlap? Perhaps related to the strategy for super-wide links, that may need to move to explicit paths instead of fat-stroked lines?\r\n\r\n![screen shot 2017-04-19 at 2 25 00 pm](https://cloud.githubusercontent.com/assets/2678795/25195585/0dc8a95c-250c-11e7-9769-77f5c191de39.png)\r\n",
    "created_at": "2017-04-19T18:28:31Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1591#issuecomment-295379527",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1591",
    "updated_at": "2017-04-19T18:28:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> The values (e.g. TWh values here) are in the node color, and if the node color is too light, then it's darkened for better contrast on the white tooltip background. It may still be at odds with what you want so my question above stands.\r\n\r\nIt's still a tiny bit different from what we do elsewhere, though that sometimes makes a mistake:\r\n![screen shot 2017-04-19 at 2 09 01 pm](https://cloud.githubusercontent.com/assets/2678795/25194869/d350565a-2509-11e7-8a8f-a3dff560e861.png)\r\n(there's supposed to be some text in the white box's extra section... but it's white! this is mock 10 BTW)\r\n\r\nThe rationale was that we picked a color from the trace that made a visible point against the plot background - the user wouldn't have made a point that wasn't visible! so it should be visible against a semitransparent version of the same. Obviously the premise there (\"we picked a color from the trace that made a visible point against the plot background\") isn't always correct.  Better in that particular case would be to have chosen the red, rather than the white marker fill, but that's a separate issue, there could be cases where no color from the point/trace is really sufficiently contrasting.\r\n\r\nSo actually, if you make sure that the algorithm you're using works for arbitrary background color (white, black, some grey in the middle...) then I think I'd like to use it everywhere. I didn't look at your implementation at all, but in case you didn't see it go by there's a recently added/modified routine [Color.contrast](https://github.com/plotly/plotly.js/blob/master/src/components/color/index.js#L72) made explicitly for purposes like this.",
    "created_at": "2017-04-19T18:24:37Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1591#issuecomment-295378194",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1591",
    "updated_at": "2017-04-19T18:24:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice catch @rpaskowitz! But I think @etpinard is right, we should find a way to still show the spikes. Particularly in `across` mode the spike can be useful without pointing to a labeled value on an axis.\r\n\r\nI propose that if the axis is invisible, we act as though it would have been at the farthest left/bottom of all subplots it's used in. Sound reasonable?",
    "created_at": "2017-04-19T17:18:31Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1604#issuecomment-295352324",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1604",
    "updated_at": "2017-04-19T17:18:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 ",
    "created_at": "2017-04-18T15:03:44Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1589#issuecomment-294873746",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1589",
    "updated_at": "2017-04-18T15:03:44Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Our much-neglected polar charts do this with the text-shadow style:\r\n![screen shot 2017-04-18 at 10 13 56 am](https://cloud.githubusercontent.com/assets/2678795/25135240/c839cf8e-241f-11e7-997f-0cf6910907b9.png)\r\n\r\n\r\n```\r\n<text dy=\"0\" y=\"0\" x=\"0\" dx=\"0\" transform=\"rotate(45) translate(0,15)\" style=\"\r\n  text-anchor: start;\r\n  font-size: 15px;\r\n  font-family: Tahoma, sans-serif;\r\n  fill: gray;\r\n  text-shadow: white -1px 0px 0px, white 1px -1px 0px, white -1px 1px 0px, white 1px 1px 0px;\r\n\">0</text>\r\n```\r\nMight cease to look good at a greater thickness though, as that's not going to increase the radius of curvature. But it at least avoids having to copy everything. Kind of an odd collection of offsets, I wonder if that was intentional...\r\n\r\nI'll also note that applying this to mathjax will require a completely distinct implementation regardless, as it generates its own SVG paths.",
    "created_at": "2017-04-18T14:26:47Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1597#issuecomment-294861769",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1597",
    "updated_at": "2017-04-18T14:26:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Not sure if @alexcjohnson 's #1595 (comment) is blocking though.\r\n\r\nNah, if it only gets sparing use it's not blocking. Awesome work @rreusser & @etpinard !",
    "created_at": "2017-04-17T14:48:03Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1595#issuecomment-294500719",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1595",
    "updated_at": "2017-04-17T14:48:03Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks great to me - I can see this (in both 2D and 3D) being pretty nice for certain abstract plots!\r\n\r\n💃  after my [one comment](https://github.com/plotly/plotly.js/pull/1599#pullrequestreview-32780770).",
    "created_at": "2017-04-14T04:24:25Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1599#issuecomment-294084308",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1599",
    "updated_at": "2017-04-14T04:24:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard @rpaskowitz I'm happy with this now - any comments on these commits before I merge?",
    "created_at": "2017-04-14T03:47:21Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1461#issuecomment-294079251",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1461",
    "updated_at": "2017-04-14T03:47:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yeah, looks legit to me! 💃 ",
    "created_at": "2017-04-13T22:51:37Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1598#issuecomment-294041694",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1598",
    "updated_at": "2017-04-13T22:51:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I don't especially dislike the line going all the way to the axis, but think we'd might like a spikemode to control the behavior. Notably, in the across mode, I don't think this behavior would make sense because it would no longer be helping identify which axis the number is actually plotted on, and the spikeline is more useful for the within-plot point comparison.\r\n\r\nTrue. When we think about free axes, or even anchored axes that might be positioned between two subplots, I suspect there are a bunch of edge cases we're not considering yet. That said, this covers 99% of the cases and won't do *terrible* things in the last few, so I'll try to get this merged today and we can revisit these cases later.",
    "created_at": "2017-04-13T18:46:43Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1461#issuecomment-293988785",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1461",
    "updated_at": "2017-04-13T18:46:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I'm making a few edits to this after merging in the latest master (so @rpaskowitz let me know if you want to contribute any more to this branch, otherwise we'll make a merge mess...), also there was still a weird issue when you turn on droplines and then scroll an element the plot is in...\r\n\r\nBut before I push this in, I wanted to revisit our handling of free axes. The way it works right now the dropline goes to the edge of the plot:\r\n\r\n![screen shot 2017-04-13 at 2 13 03 pm](https://cloud.githubusercontent.com/assets/2678795/25018172/702b6736-2054-11e7-9df6-770beeacb102.png)\r\n\r\nThere was some discussion a while back eg\r\n> so maybe it would be another configurable option in the showspikes configuration to have the line drawn all the way to the axis for the cases where one knows it's not going to do something ugly like draw over other axes.\r\n\r\nBut personally I think drawing over other axes is a small price to pay for pointing out which axis we're really referring to, so I'd prefer it this way (at least by default, we could consider adding a config option for it if anyone is really bothered):\r\n\r\n![screen shot 2017-04-13 at 2 02 30 pm](https://cloud.githubusercontent.com/assets/2678795/25018284/cee50ca0-2054-11e7-8c54-78e42dcfb29f.png)\r\n\r\n@rpaskowitz @etpinard thoughts?\r\n\r\nThere's a further issue where the free axis `side` doesn't match its position relative to the subplot we're hovering on (or in fact if it's in the middle of the subplot), I can fix this easily once we agree which way we go with ^^",
    "created_at": "2017-04-13T18:32:20Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1461#issuecomment-293984591",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1461",
    "updated_at": "2017-04-13T18:32:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@monfera this is looking awesome! A few things popped out to me while playing with it:\r\n- Weird things happen when you have fat bands that need to make a sharp turn. I guess there really isn't a solution that maintains the width in this case, but I'd much prefer to sacrifice precise width and get rid of these sharp artifacts.\r\n![screen shot 2017-04-12 at 7 01 32 pm](https://cloud.githubusercontent.com/assets/2678795/24983064/b6a89640-1fb2-11e7-8df6-f4c43ced066e.png)\r\n- When dragging nodes, I feel like the main thing I want to do is reorder them, but with force layout still running it's hard to reorder because the other nodes keep getting pushed away. Can we do something like disable force layout during drag, then turn it back on at drop? Or make the positions of the other nodes stickier in some other way so they'll push a bit but then you can drag past them and they jump to the other side?\r\n- I definitely prefer sticky tooltips. Looks like their positioning is a little off right now, but I'd vote to have the node tooltips try to stick to the middle of the right edge of the node, then swap to the left only if necessary. And for links, I can see why you made them flip as the mouse moves across the centerline, but I find that a bit jarring... I'm not sure what the best location is for these, maybe where they are (which looks like it's trying to be the very center of the link) but maybe there would be a good way to move them to the edge of the link? I'm not sure.\r\n- Tooltip text: the size should probably go into the main tip. Maybe the node name(s) should go in the secondary text? Not sure how that would look for links though... Perhaps we can make the text a little more conversational? Like maybe from and to instead of source and target, and inflows and outflows instead of incoming / outgoing flow count?\r\n- The secondary text color is a bit funny - normally that gets the tooltip background color, but for nodes it looks like right now you have it as the border color.\r\n![screen shot 2017-04-12 at 7 22 16 pm](https://cloud.githubusercontent.com/assets/2678795/24983534/9b3fa102-1fb5-11e7-8087-0f491765286e.png)\r\n",
    "created_at": "2017-04-12T23:30:52Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1591#issuecomment-293735693",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1591",
    "updated_at": "2017-04-12T23:30:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> CI tests of master seem to be failing since this merge\r\n\r\nHuh, thanks for the heads up @rpaskowitz. Not sure if this is an intermittent issue or a merge issue but I'll sort it out tonight.",
    "created_at": "2017-04-12T20:12:46Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1573#issuecomment-293693700",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1573",
    "updated_at": "2017-04-12T20:12:46Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> How about having `layout.hoverlabel.autocolor` to support this use case?\r\n> When `layout.hoverlabel.autocolor` is `true` any hover labels (axis, annotations) will use the same colour as the *data hover label* (i.e by default the marker colour, unless `data[n].hoverlabel` is defined).\r\n\r\nWhen there's a common label it's because you're in a hover mode (ie compare) that supports multiple labels... so this wouldn't be meaningful in general.",
    "created_at": "2017-04-12T18:12:42Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1582#issuecomment-293662548",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1582",
    "updated_at": "2017-04-12T18:12:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> would make all hover labels have a white bg, common labels will have black text and trace labels blue text. Sounds ok?\r\n\r\nI was thinking the colors in `layout.hoverlabel` would only apply to common labels and annotation labels, since the colors in trace labels pull their defaults from a different route and this serves an important purpose disambiguating traces. But other attributes (font family & size, border width) would propagate to traces.\r\n\r\nBut @n-riesco raises a good point:\r\n> I could understand some users wanting the data and the axis labels have the same style.\r\n\r\nThat would be annoying the way I'm suggesting, as it would require explicitly coloring all the trace labels. I suppose we could make some boolean attribute like `layout.hoverlabel.applycolorstotraces` for this case, and have it default to `false`? Dunno, maybe that's too much, but it would have the advantage that you can say \"oh, see, the trace labels get their own colors because applycolorstotraces is false.\"\r\n\r\n> Then, if someone really wants per-axis common label customizable down the road, we can always add `?axis.hoverlabel` later.\r\n\r\n👍 ",
    "created_at": "2017-04-12T14:26:30Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1582#issuecomment-293594399",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1582",
    "updated_at": "2017-04-12T14:26:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> should we add `layout.?axis.hoverlabel` attribute containers to make the the hover label that appear on the x(y) axes on `hovermode: 'x'('y')` customisable?\r\n\r\nMy gut reaction is to make `layout.hoverlabel`, ie a default label style for the whole plot, which would set defaults for *all* the hover labels, including the new annotation labels, but the colors would only be used (as a default) by the common (axis) labels. It's true that this would preclude different styling for the different axes on which these common labels might appear, but offhand that seems like a fairly obscure use case to me, whereas I can definitely see people wanting a concise way to tailor the style of all the labels across the whole chart.\r\n\r\n> maybe we should add a new component in e.g. in `src/component/hover/`? This new component would include `graph_interact.js` which is becoming less and less a _cartesian_ module.\r\n\r\nAbsolutely. Dunno if now is the time to do it, may be a bit of a project, but if you're excited about it now then by all means go for it.",
    "created_at": "2017-04-12T03:09:11Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1582#issuecomment-293459862",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1582",
    "updated_at": "2017-04-12T03:09:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "If we did this, ideally we would standardize the implementation so it applies to everything that uses these discrete categories:\r\n- `xanchor`/`yanchor` for annotations, legends, images, colorbars, rangeselectors, sliders, updatemenus\r\n- `scatter.textposition`",
    "created_at": "2017-04-11T21:08:35Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1577#issuecomment-293400478",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1577",
    "updated_at": "2017-04-11T21:08:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "My concern about this is that in general (including most `arrayOk` cases), `5` and `[5]` are not equivalent. When used for alongside a data array, `5` applies to all points whereas `[5]` applies to the first point and the rest receive some sort of default value. Even in this case, you wouldn't *just* change from `5` to `[5, 6]`, would you? You'd change `operation` as well, to `[]` or something, and you also can't use `5` with `[]` so they necessarily need to happen together.\r\n\r\nYou could say then that we should automatically wrap or unwrap the value... but I don't think that works either: depending on which operation you changed to, the \"natural\" place to put the `5` depends on which operation you're coming from and going to... eg `'<'` to `'[]'` the `5` would naturally belong in index 1, but going to `']['` it would belong in `0`. And if you're unwrapping, what would you do with the extra value? Which one is extra?\r\n\r\nSo it seems to me safer to leave it as is, that the user must provide the whole object if she wishes to change its type between bare value, array, and hash.",
    "created_at": "2017-04-11T19:37:18Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1580#issuecomment-293377057",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1580",
    "updated_at": "2017-04-11T19:37:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> is there no desire to support plots which specify time as epoch nanoseconds?\r\n\r\nThe precision we have right now - 100 microseconds, one digit better than native dates support - is the best I found I was able to reliably handle using a single javascript number to specify the coordinate. I could imagine a system supporting arbitrary precision within a restricted range where the zero point of the axis linearization is allowed to float - this would be a fairly big project but could be done if someone was sufficiently interested in sponsoring it ;)\r\n\r\nNote that this wouldn't imply any backward incompatibility, so need not be associated with v2",
    "created_at": "2017-04-11T04:57:49Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/420#issuecomment-293149923",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/420",
    "updated_at": "2017-04-11T04:57:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice find! I think I like that function, though I'm a little worried it's too magical and will cause people to misinterpret their data. Perhaps we should mask out the `z` data that goes with the bad `x` or `y` values, since we don't in fact know where to put it?\r\n\r\nIf we do end up using this function (even with masking, we need to know where to put the blanked points!), two thoughts:\r\n- this is mutating the array; I guess that means as soon as we determine it needs filling in it should be copied?\r\n- should this also handle fixing the length, if the authority on what length is required is a different array (`z` for example)?",
    "created_at": "2017-04-11T04:33:31Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1566#issuecomment-293147153",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1566",
    "updated_at": "2017-04-11T04:33:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Hi @htetmyomyint - thanks for the report. There are a few things going on here:\r\n- When we find a trace that has no displayable data in it, we don't display that trace, so in this case we don't have any basis to determine the x and y ranges (so the range falls back to the default with a span of one year, and we draw 5000 ticks at 1 sec intervals before we give up). I can see an argument that heatmaps and contour maps with no `z` data but recognizable `x` and `y` we could at least use the trace to inform axis autoranging... that's a feature we could consider but it's not present now. Unless and until we do that, you can explicitly specify `xaxis.range`, then turn on `xaxis.autorange` as soon as some actual data comes in.\r\n- Although js `Date` objects are officially supported, we strongly suggest using date strings `'YYYY-MM-DD HH:MM:SS.ssss'` or some truncation of that instead. They are more meaningful in a portable (ie JSON) context, particularly as we do not yet have timezone support, and moreover it looks like we may have a bug still in how we interpret js `Date` objects. I'll mark this as a bug to remind us to investigate that further, but in the meantime I'd encourage you to use the string form.",
    "created_at": "2017-04-11T04:17:42Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1579#issuecomment-293145346",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1579",
    "updated_at": "2017-04-11T04:17:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I may have uncovered a test that is passing only through luck?\r\n\r\nHah, nice catch @rpaskowitz 🎣 \r\nI wouldn't worry about it here, but if you wouldn't mind can you make an issue for it so we remember to address it?",
    "created_at": "2017-04-10T18:04:01Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1461#issuecomment-293030439",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1461",
    "updated_at": "2017-04-10T18:04:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> you are right, the button is disabled:\r\n\r\nAh sorry, I thought I was looking at it signed-out on my phone... well, one more reason for us to clamp down on intermittent test failures!",
    "created_at": "2017-04-10T03:43:39Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1544#issuecomment-292842951",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1544",
    "updated_at": "2017-04-10T03:43:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ah yes, I've seen that test fail intermittently. You should be able to retry the test by clicking \"rebuild\" on the test results page, but I'm glad you got this to work anyway. I'm away from my computer but will review this tomorrow night. ",
    "created_at": "2017-04-08T21:56:26Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1544#issuecomment-292748387",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1544",
    "updated_at": "2017-04-08T21:56:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "nice. 💃 ",
    "created_at": "2017-04-07T20:42:45Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1523#issuecomment-292646624",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1523",
    "updated_at": "2017-04-07T20:42:45Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "can't wait to get rid of nw... 💃 ",
    "created_at": "2017-04-07T18:06:28Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1564#issuecomment-292610102",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1564",
    "updated_at": "2017-04-07T18:06:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Oh and tests, which you already mentioned at some point @rpaskowitz - I don't think we need too much, just a couple that the attributes get set right on the modebar clicks, and that the right elements show up (or don't show up) on hover.",
    "created_at": "2017-04-07T16:40:37Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1461#issuecomment-292587581",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1461",
    "updated_at": "2017-04-07T16:40:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice, I think it looks fantastic now. @etpinard how do you want to handle the icon? I think that's the only thing left on my list.",
    "created_at": "2017-04-07T16:31:48Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1461#issuecomment-292585343",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1461",
    "updated_at": "2017-04-07T16:31:48Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard that looks a little small, can we expand it a bit?",
    "created_at": "2017-04-07T14:31:45Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1461#issuecomment-292552711",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1461",
    "updated_at": "2017-04-07T14:31:45Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": ">  In my current implementation, if they change hovermode back to x, the showspike attributes will all be set to false, so moving back to closest will have them off, even though the user hadn't done any toggle action. To get back to the original they would need to reset the axis. This feels weird to me, but I think I can fix it.\r\n\r\nAh I see what you mean now. Yes, that's kind of an obscure edge case but if it's not too cumbersome it would be nice to fix.",
    "created_at": "2017-04-07T14:19:28Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1461#issuecomment-292549355",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1461",
    "updated_at": "2017-04-07T14:19:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I'm mostly ok with the styling tweaks, but I think having the contrast line be an extra pixel wider than the spikeline can still help, otherwise it's possible for the line get a bit lost.\r\n\r\nFair point, it's a nice effect in the light case, but it does bother me in the dark case. Or more precisely, when the contrast line is very different from the plot background, which could even happen to both variants if the plot background was neither black nor white.\r\n\r\nSo what about making the rear line actually match the plot background (which, to account for potential transparency while making this line itself opaque, can be done by `Color.combine(fullLayout.plot_bgcolor, fullLayout.paper_bgcolor)`)? *That* in turn would fall down when the point color is too close to this color - for example, on a white background if you had a nearly white point - which could still be visible on its own if it had a dark border. In that case we could replace the dashed color with the contrast color? Then the question would be how to tell \"too close.\" `tinycolor` has a utility [`readability`](https://github.com/bgrins/TinyColor#readability) which only uses luminance... that may be sufficient, especially since backgrounds are nearly always somewhere on or near the greyscale. Looks to me like `readability < 1.5` or something like that would be a reasonable cutoff. Only when we're taking this color from the trace of course... if the user specified an explicit `spikecolor` we should honor that even if we think it'll be invisible!\r\n\r\nThoughts? Apologies for the extra complication, just want to make sure we're covering all our bases.",
    "created_at": "2017-04-07T14:01:13Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1461#issuecomment-292544505",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1461",
    "updated_at": "2017-04-07T14:01:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "And to your notes about behavior @rpaskowitz - it all seems to work as I'd expect, really well done! Not sure I follow the \"probably not desirable\" part...\r\n\r\nI'd be curious to see how this feels if we *were* to enable it for \"compare\" mode, but definitely not necessary for this PR and could well be a terrible experience.",
    "created_at": "2017-04-07T06:55:06Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1461#issuecomment-292456942",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1461",
    "updated_at": "2017-04-07T06:55:06Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@delekru can you take a look at a modebar icon for toggling these droplines? @rpaskowitz has included one in https://github.com/plotly/plotly.js/pull/1461#issuecomment-292425977 that may be a starting point but I'll defer to your judgment.",
    "created_at": "2017-04-07T06:47:04Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1461#issuecomment-292455651",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1461",
    "updated_at": "2017-04-07T06:47:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I like it! I played with it a bit and there are a few little bits of style I'd tweak. Definitely up for discussion but here are my diff and a couple of before/after screenshots:\r\n\r\n```js\r\n--- a/src/plots/cartesian/graph_interact.js\r\n+++ b/src/plots/cartesian/graph_interact.js\r\n@@ -890,9 +890,10 @@ function createDroplines(hoverData, opts) {\r\n                 .attr('x2', xEndSpike)\r\n                 .attr('y1', yPoint)\r\n                 .attr('y2', yPoint)\r\n-                .attr('stroke-width', yThickness + 2)\r\n+                .attr('stroke-width', yThickness)\r\n// the extra width, particularly with black contrast, seemed too heavy to me\r\n                 .attr('stroke', yContrastColor)\r\n-                .attr('class', 'dropline');\r\n+                .attr('class', 'dropline')\r\n+                .classed('crisp', true);\r\n// this turns on shape-rendering: crisp-edges, which I think looks nicer in general for\r\n// pure vertical or horizontal lines, but particularly if we drop the extra width on the contrast,\r\n// this prevents that line from bleeding around the dashed line by a fractional pixel\r\n \r\n             // Foreground horizontal line (to y-axis)\r\n             container.append('line')\r\n@@ -903,7 +904,8 @@ function createDroplines(hoverData, opts) {\r\n                 .attr('stroke-width', yThickness)\r\n                 .attr('stroke', yColor)\r\n                 .attr('stroke-dasharray', yDash)\r\n-                .attr('class', 'dropline');\r\n+                .attr('class', 'dropline')\r\n+                .classed('crisp', true);\r\n         }\r\n         // Y axis marker\r\n         if(yMarker) {\r\n@@ -922,22 +924,24 @@ function createDroplines(hoverData, opts) {\r\n             container.append('line')\r\n                 .attr('x1', xPoint)\r\n                 .attr('x2', xPoint)\r\n-                .attr('y1', yEndSpike)\r\n-                .attr('y2', yBase)\r\n-                .attr('stroke-width', xThickness + 2)\r\n+                .attr('y2', yEndSpike)\r\n+                .attr('y1', yBase)\r\n+                .attr('stroke-width', xThickness)\r\n                 .attr('stroke', xContrastColor)\r\n-                .attr('class', 'dropline');\r\n+                .attr('class', 'dropline')\r\n+                .classed('crisp', true);\r\n \r\n             // Foreground vertical line (to x-axis)\r\n             container.append('line')\r\n                 .attr('x1', xPoint)\r\n                 .attr('x2', xPoint)\r\n-                .attr('y1', yEndSpike)\r\n-                .attr('y2', yBase)\r\n+                .attr('y2', yEndSpike)\r\n+                .attr('y1', yBase)\r\n// start (specifically the dashed line) at the base, so there's always the main color\r\n// immediately at the axis\r\n                 .attr('stroke-width', xThickness)\r\n                 .attr('stroke', xColor)\r\n                 .attr('stroke-dasharray', xDash)\r\n-                .attr('class', 'dropline');\r\n+                .attr('class', 'dropline')\r\n+                .classed('crisp', true);\r\n         }\r\n \r\n         // X axis marker\r\n```\r\nI thought I would prefer a narrower line, but particularly since it's dashed I ended up concluding I agree with the 3px default.\r\n\r\nBefore these tweaks:\r\n![screen shot 2017-04-07 at 2 03 50 am](https://cloud.githubusercontent.com/assets/2678795/24788182/1d719782-1b3a-11e7-9fb7-ae04f0feabd0.png)\r\n![screen shot 2017-04-07 at 2 04 05 am](https://cloud.githubusercontent.com/assets/2678795/24788190/294dd30e-1b3a-11e7-8359-3a14c47a6be3.png)\r\n\r\nAnd after:\r\n![screen shot 2017-04-07 at 2 32 16 am](https://cloud.githubusercontent.com/assets/2678795/24788241/77cebb7e-1b3a-11e7-83d3-286d2289d27b.png)\r\n![screen shot 2017-04-07 at 2 32 26 am](https://cloud.githubusercontent.com/assets/2678795/24788242/7a88caee-1b3a-11e7-9777-5d92e1f0f540.png)",
    "created_at": "2017-04-07T06:39:16Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1461#issuecomment-292454385",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1461",
    "updated_at": "2017-04-07T06:39:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Main question I have is if people would go for 'showspike' being on the series instead of the axes\r\n\r\nInteresting idea... my gut reaction though is people would find that confusing, and harder to work with given that you often have many traces of the same type on a chart. Also with 3D we already have precedent for `showspike` on the axes.",
    "created_at": "2017-04-07T01:06:28Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1461#issuecomment-292385044",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1461",
    "updated_at": "2017-04-07T01:06:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Right, it's really not a rotation, we should change that wording. One whole diagonal is unchanged, and the rest of the matrix is reflected about that diagonal. And it has period 2 to get back to where you start, not period 4 as a 90-degree rotation would.",
    "created_at": "2017-04-06T13:23:59Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1558#issuecomment-292173137",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1558",
    "updated_at": "2017-04-06T13:23:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "wait, @cldougl your `z` matrix is symmetric - so there's no difference when you transpose it. If I make it asymmetric it *does* change on transpose.\r\n\r\n![screen shot 2017-04-06 at 12 19 59 am](https://cloud.githubusercontent.com/assets/2678795/24737724/d504011e-1a5e-11e7-9eb0-4da70db7a33a.png)\r\n\r\nPerhaps the confusion arises because the heatmap shows up upside-down from the matrix? ie row 0 is on the bottom, but the columns still go left-to-right. So the transpose axis is NE/SW rather than the normal NW/SE.",
    "created_at": "2017-04-06T04:22:28Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1558#issuecomment-292065183",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1558",
    "updated_at": "2017-04-06T04:22:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "doesn't look like #1551 to me, I'm fairly sure @etpinard 's first thought about setting `xref` and/or `yref` to `'paper'` (with appropriate `x` / `y` values) is what you're looking for. If you want to get really precise with positioning, `xanchor` and `yanchor` can also help.\r\n\r\nI'm going to close this, but @stoberblog feel free to reopen if we've missed what you're going for.",
    "created_at": "2017-04-06T04:10:30Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1545#issuecomment-292063925",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1545",
    "updated_at": "2017-04-06T04:10:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Hmm. I guess what we really need is some auto-textwrapping routine.\r\n\r\nAt some point that'd be a nice feature, but not now, it's going to be annoying. For now I just put a note about this in the [description of width](https://github.com/plotly/plotly.js/pull/1551/files#diff-f6bb7a62be1a37018f1c5b143be592aeR60):\r\n`There is no automatic wrapping; use <br> to start a new line.`",
    "created_at": "2017-04-05T23:26:49Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1551#issuecomment-292025850",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1551",
    "updated_at": "2017-04-05T23:26:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> https://github.com/plotly/plotly.js/blob/master/test/jasmine/tests/axes_test.js#L1853-L1877. What is this feature about?\r\n\r\nHaha that test is my doing, it's testing a collection of edge cases with the ticktext/tickvals feature, which lets you simultaneously override both the positions and labels of tick marks. The normal usage is stuff like https://plot.ly/javascript/axes/#enumerated-ticks-with-tickvals-and-ticktext\r\n\r\nIn the category case, `tickvals` entries can either be category strings, or numbers corresponding to the serial numbers assigned to the categories. The reason we need to allow numbers is they can also be fractional values if you want to put a tick in between categories or something. For example, maybe you want to label two neighboring categories with one tick halfway between them. There would be no way to do this using the category string.\r\n\r\nAnd then after you provide a tick value, you *may* choose to override its text with your own string, but if you don't override it the automatic label is used (in this case the category string).\r\n\r\nSo in this case the problem is either actually a real regression the test is picking up, or the `mockCalc` function in this test is incompatible with the changes you've made and needs updating. The way to tell the difference would be to create the plot that this test is trying to mock, and see if it behaves correctly. In this case I'd do:\r\n```js\r\nPlotly.newPlot(gd, [{x: ['a', 'b', 'c', 'd'], y: [1, 2, 3, 4]}],\r\n    {xaxis: {\r\n        range: [-0.5, 4.5],\r\n        tickvals: ['a', 1, 1.5, 'c', 2.7, 3, 'e', 4, 5, -2],\r\n        ticktext: ['A!', 'B?', 'B->C']\r\n    }});\r\n```\r\n(the rest of `ax` is probably included just to get the right pieces in place since the test doesn't call `supplyDefaults`)\r\nIf I do that on the master branch I see:\r\n![screen shot 2017-04-05 at 11 54 09 am](https://cloud.githubusercontent.com/assets/2678795/24714479/a6b46ba4-19f6-11e7-8db6-06814e3a372b.png)\r\nwhich you can see gives the expected tick labels `[ 'A!', 'B?', 'B->C', 'c', 'd', 'd', '' ]`. What do you see on your branch?",
    "created_at": "2017-04-05T16:00:51Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1544#issuecomment-291909204",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1544",
    "updated_at": "2017-04-05T16:00:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard back to you for review. Do the tests I added satisfy the TODO up top?",
    "created_at": "2017-04-05T13:36:48Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1527#issuecomment-291863348",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1527",
    "updated_at": "2017-04-05T13:36:48Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I vote below because I've made the carpet axis lines semi-transparent by default and since the axis lines aren't regular so that the alignment with tick labels isn't implicit/obvious as it is for contour/heatmap plots.\r\n\r\nI agree. That's how it's handled in all the filled contour carpet examples I see online too.",
    "created_at": "2017-04-03T20:23:43Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1239#issuecomment-291262552",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1239",
    "updated_at": "2017-04-03T20:23:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @etpinard 😊  I'll put a note about this into #1200 but I think I should move on for now.",
    "created_at": "2017-04-03T16:52:21Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1522#issuecomment-291203358",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1522",
    "updated_at": "2017-04-03T16:52:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I suspect actually that every time anyone has created a plot with a missing axis anchor, it has been incorrect but not noticed because the axis was in the correct location (as in the examples here), so we wouldn't need to wait for v2 to fix this.\r\n\r\nAnyway, when we do work on this, we should make sure to test constrained axes in gl2d plots per https://github.com/plotly/plotly.js/pull/1522#issuecomment-290893480",
    "created_at": "2017-04-03T16:52:02Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1200#issuecomment-291203263",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1200",
    "updated_at": "2017-04-03T16:52:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This looks great! Really nice simplification. Lets get the `nw` version bumped so we can get *all* images tested before merging this, but other than that 💃 !!",
    "created_at": "2017-04-03T14:49:09Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1543#issuecomment-291166274",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1543",
    "updated_at": "2017-04-03T14:49:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard ready for another review. Single gl2d plots work well with scale constraints now (please try it out and let me know what you think). I did not investigate multiple gl2d subplots (coupled or otherwise) as I was thrown off for a while by https://github.com/plotly/plotly.js/issues/1200#issuecomment-290893266 but now that I understand that I could look into this, if we think it's important.",
    "created_at": "2017-04-01T04:15:09Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1522#issuecomment-290893480",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1522",
    "updated_at": "2017-04-01T04:15:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Just encountered this again as a really peculiar failure mode for gl2d plots: gl2d_stacked_subplots does not have explicit anchors for `yaxis2` and `yaxis3`, which is fine for positioning them (all the x axes have the same left edges) but the plot behaves badly:\r\n\r\n- Open http://localhost:3000/devtools/test_dashboard/#gl2d_stacked_subplots - looks correct initially.\r\n![screen shot 2017-03-31 at 11 52 51 pm](https://cloud.githubusercontent.com/assets/2678795/24575207/31317534-166d-11e7-8117-7938f6e6051c.png)\r\n- Click \"autoscale\" (or zoom in/out) in the modebar, and all but one subplot gets emptied out:\r\n![screen shot 2017-03-31 at 11 43 31 pm](https://cloud.githubusercontent.com/assets/2678795/24575151/fb844746-166b-11e7-84e4-198fc85ae333.png)\r\n- Similar things happen to this plot on `Plotly.redraw`, `Plotly.restyle`, and `Plotly.relayout` calls.\r\n- Behavior after this is weird too: trying to zoom in the top subplot (with a zoombox) causes the top y axis and the BOTTOM x axis to zoom.\r\n- The problem is we have `xy2` and `xy3` subplots as well as `x2y2` and `x3y3` - for some reason the first time around, these are below the real ones, but on redraw they pop to the top.\r\n- Keep clicking buttons up there and after a little while you get `WARNING: Too many active WebGL contexts. Oldest context will be lost.` appearing in the console.\r\n\r\nIf you explicitly set `yaxis2.anchor='x2', yaxis3.anchor='x3'` the plot behaves as expected.",
    "created_at": "2017-04-01T04:10:18Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1200#issuecomment-290893266",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1200",
    "updated_at": "2017-04-01T04:10:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks great to me (once tests pass, of course) 💃 ",
    "created_at": "2017-03-31T19:40:30Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1538#issuecomment-290810680",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1538",
    "updated_at": "2017-03-31T19:40:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 ",
    "created_at": "2017-03-31T14:04:32Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1536#issuecomment-290720972",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1536",
    "updated_at": "2017-03-31T14:04:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I guess if the goal here is \"get this right once and for all\" then we probably should reduce the plot-level filters to a single `!== BADNUM` test, per https://github.com/plotly/plotly.js/pull/1538#discussion_r109043439\r\n\r\nAfter we have that, this looks a great pattern to standardize on. 🎉 ",
    "created_at": "2017-03-30T21:45:15Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1538#issuecomment-290554246",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1538",
    "updated_at": "2017-03-30T21:45:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> A per-axis `showspike` (plus associated color, thickness, dash, mode)\r\n\r\n👍 \r\n\r\n> A per-cartesian-chart-type configuration (scatter X and Y true, line X and Y true, bar Y true, row X true, ...) of the above per-axis values\r\n> Allow manual override of the per-cartesian-chart-type configuration through axis layout options\r\n\r\nI'd vote to omit this for now - just make the default off for all axes, and users can opt into it. We can revisit this later and decide if these warrant turning on by default, once we have the functionality available.\r\n\r\n> A modebar that goes `default` -> (`all off` <-> `all on`)\r\n> The 'reset axis' modebar going back to `default`\r\n\r\n👍 \r\n\r\n > `default` in both these cases meaning whatever the chart configuration happened to be when the spike toggle modebar button was hit (based on per-axis layout options)\r\n\r\nI'd put this in the initial draw - ie alongside [saveRangeInitial](https://github.com/plotly/plotly.js/blob/master/src/plot_api/plot_api.js#L155)",
    "created_at": "2017-03-30T18:21:53Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1461#issuecomment-290499946",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1461",
    "updated_at": "2017-03-30T18:21:53Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I would suggest perhaps a better way would be to store the data internally as milliseconds since 1970-01-01 UTC and format it depending on some settings (or using the default browser's locale representation).\r\n\r\nYes, where the \"some settings\" is the timezone support we don't yet have. At that point that's exactly what we'll do (we already do store the data internally as UTC epoch milliseconds).",
    "created_at": "2017-03-30T15:53:46Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1532#issuecomment-290455363",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1532",
    "updated_at": "2017-03-30T15:53:46Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Rather, it seems to discard all potential timezone information altogether and assume there's only one timezone, making it the \"unique\" timezone.\r\n\r\nExactly. And unless and until we build real timezone support, that's the only consistent way we can handle it.",
    "created_at": "2017-03-30T15:37:48Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1532#issuecomment-290450263",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1532",
    "updated_at": "2017-03-30T15:37:48Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@harbulot I'm pretty sure we're saying the same thing actually about how things work at present.\r\n\r\nTo my knowledge, js `Date`s don't really have any timezone information - they are internally represented as milliseconds since the start of 1970 in UTC, but always displayed in the system timezone unless you use one of the UTC methods. So for me (US east) I can make two objects:\r\n```\r\nvar a = new Date(\"2017-03-30T00:00:00.000Z\");\r\nvar b = new Date(2017, 2, 29, 20, 0, 0);\r\n```\r\nbut these are in fact identical objects, there's no way to tell that one was created as UTC and the other local:\r\n```\r\n+a===+b\r\n> true\r\na.toString()\r\n> \"Wed Mar 29 2017 20:00:00 GMT-0400 (EDT)\"\r\nb.toString()\r\n> \"Wed Mar 29 2017 20:00:00 GMT-0400 (EDT)\"\r\na.getTimezoneOffset()\r\n> 240\r\nb.getTimezoneOffset()\r\n> 240\r\n```\r\n\r\nNow, when you supply a date string, we *DON'T* use the built-in date parser - that would open us up to too many browser-dependent issues but also limit the portability of the plot JSON across timezones. In our string->date parser we explicitly drop any timezone information in the string, so where you see this date on the plot is exactly where you specified *assuming you're in the same timezone as the date*. Until we add explicit timezone support, this is the behavior we need to support (even though it has known problems, like if you provide data with different timezones, they will not be correctly placed relative to each other).",
    "created_at": "2017-03-30T15:32:14Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1532#issuecomment-290448454",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1532",
    "updated_at": "2017-03-30T15:32:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "If I understand your goal correctly, sounds like you don't want to ever see the date, but otherwise you like the automatic time formatting we do?\r\n\r\nThis seems like a somewhat generalizable situation: you have some data where only the time is important - maybe a result of merging together many days worth of data, to see some effect that depends only on time of day.\r\n\r\nYou could also imagine a similar situation where year is arbitrary. Or any other repeated interval such as weeks, months, hours... but those might be harder to handle in a consistent, meaningful way than time within a day - even year is tricky when you consider leap years.\r\n\r\nSeems like a reasonable feature to consider, either in a weak form (just dropping the arbitrary portions of the time from display, that would be fairly easy) or a stronger form (actually wrapping data to that period, would be a bigger project).",
    "created_at": "2017-03-30T14:41:11Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1513#issuecomment-290432203",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1513",
    "updated_at": "2017-03-30T14:41:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I didn't realize it would remove the whitespaces when rendering. \r\n\r\nI don't think it does remove them... look closely at the positioning, the second `d` is a little left of center. So I guess you could use `' d '` to make it symmetric (though adding spaces will probably muck up hover text), or use a [zero-width space](https://en.wikipedia.org/wiki/Zero-width_space#Encoding), but @cpsievert has a much better solution.\r\n\r\nUnless this problem generalizes substantially to the point that ticktext/tickvals becomes unworkable, I wouldn't be in favor of making a new axis mode or type for it. Too many strange follow-on effects if data<->position isn't a 1:1 mapping. Like what does it mean if you try to position something else on the axis at `'d'`? Or if you have a second heatmap, or some scatter data, that you want to plot on top of this? What position value do we report for click or hover events?",
    "created_at": "2017-03-30T14:20:18Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1516#issuecomment-290425425",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1516",
    "updated_at": "2017-03-30T14:20:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for the report @harbulot \r\n\r\nYes, that's certainly inconsistent. Using `Date` objects within data traces is supported for backward compatibility, but - again for backward compatibility - it works in a strange way. I think you understand it correctly, but just for clarity for other folks reading this: we interpret the date in the local time zone but then discard the time zone and treat it as UTC, so for example if you supply a `Date` that amounts to Mar 30, 2017, 01:00 in your local time zone, we treat it as Mar 30, 2017 01:00 UTC and draw the axis as UTC.\r\n\r\nBecause of this strange behavior, it's not recommended to use `Date` objects to build plots. The present behavior is included for backward compatibility to a time before shapes existed and when annotations needed to be positioned using epoch milliseconds (in the local time zone).\r\n\r\nWith that caveat, I would be willing to consider it a bug that shapes and annotations do not support positioning by `Date` objects. It shouldn't be difficult to fix that, although we might not get to it right away (I'd be happy to review a PR to do it though!).\r\n\r\nRe: time zone parsing - unless and until we build real time zone handling into our date axes, which would involve allowing separate time zones for the data (for strings that do not include an explicit time zone component) and the axis display, we are going to continue ignoring this field. The reason is that most of the time people expect to see dates displayed \"WYSIWYG\", ie `'2017-03-30 09:00+0500'` is typically going to be viewed by someone *in* the +5 time zone, so should be displayed at 09:00, even though we're internally turning this into UTC. If we do add time zone support, I expect it will continue to work this way unless and until an explicit time zone is specified for the axis, the data, or both.",
    "created_at": "2017-03-30T14:03:59Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1532#issuecomment-290420534",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1532",
    "updated_at": "2017-03-30T14:03:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "if `isNumeric` is a concern (I'm not sure it is compared to everything else that needs to happen in `<>/plot.js`, but it wouldn't hurt to optimize this) we should be able to ensure `<>/calc.js` replaces all non-numeric points with `BADNUM` and just use `!== BADNUM` which is about as fast as can be imagined.\r\n\r\nRight now scatter uses `false` for non-numerics but that was an ancient decision... if we standardize on something it should be `BADNUM`.",
    "created_at": "2017-03-30T00:47:31Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1529#issuecomment-290268974",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1529",
    "updated_at": "2017-03-30T00:47:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Love it! 💃 ",
    "created_at": "2017-03-29T19:38:59Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1524#issuecomment-290201933",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1524",
    "updated_at": "2017-03-29T19:38:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "After a discussion with @cpsievert I think we'll leave the general structure as it is and let ggplotly handle explicitly setting the subplot shapes to match what ggplot generates.\r\n\r\nBut in the discussion it came up that there are cases you want to constrain several x (or y) axis scales without a corresponding x<->y constraint. See eg https://github.com/ropensci/plotly/issues/908 - so I'll see if I can add that in here too, letting `scaleanchor` reference ANY other axis, regardless of its orientation. I think there's a good chance that it'll \"just work\" ™️ but we'll see.",
    "created_at": "2017-03-29T17:25:34Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1522#issuecomment-290161926",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1522",
    "updated_at": "2017-03-29T17:25:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice - big improvement. At some point we may want to make sure we have tests that throw some garbage or partially garbage points into ALL our trace types - perhaps just add some junk to various image test mocks that shouldn't impact the images - but it's great that we've locked this down for bars now. 💃 ",
    "created_at": "2017-03-28T22:36:29Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1519#issuecomment-289926109",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1519",
    "updated_at": "2017-03-28T22:36:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I'd vote for skipping `coerce('scale*')` when `fixedrange` is turned on. The `scale*` and `fixedrange` sound to me like two conflicting things.\r\n\r\n👍 \r\n\r\n> That would require a few patches in [`gl-select-box`](https://github.com/gl-vis/gl-select-box) which could use some :heart: at the moment. Maybe it's worth investigating using `cartesian/dragbox.js` for gl2d zoom-box interactions instead?\r\n\r\nI'll take a look at it, that might not be too hard. I ran into a few more issues gl2d zoom on multi-subplot plots - the one I mentioned above seems to be dropped contexts, the relayout makes new ones for some reason; but there's another one that the grey overlay covers the whole plot (margins included) EXCEPT whatever other gl subplots happen to be in front of the plot you're zooming on. That probably wouldn't be hard to fix but if we just swap in dragbox.js it would be moot.",
    "created_at": "2017-03-28T20:46:52Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1522#issuecomment-289899430",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1522",
    "updated_at": "2017-03-28T20:46:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "👍  seems clear and I think it covers all use cases. I suppose you could argue for the ability to display BOTH text and hovertext in the hover labels, but that opens a big can of worms just to avoid a bit of duplication in hovertext so doesn't seem like a good idea.\r\n\r\nBar and pie could also benefit from this feature.",
    "created_at": "2017-03-28T18:16:12Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1523#issuecomment-289858271",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1523",
    "updated_at": "2017-03-28T18:16:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@cpsievert \r\n> I am, however, thrown out a bit by the choice of expanding the relevant axis range to match `scaleratio`. I'm more familiar with approaches that shrink/restrict `axisID.domain`'s domain accordingly.\r\n\r\nHmm, yeah, I see that in your ggplot example https://github.com/plotly/plotly.js/issues/272#issuecomment-281405318 - it's obviously not the way I think about it, but I'm not sure if I've seen precedent for this way or not - other than I guess the way we handle maps. The only way I can really see shrinking the actual axis size making sense within our structure is some sort of algorithm to automatically reduce the total plot width to minimize white space, but that seems a bit tricky to get right. I'd also say this approach strikes me as rooted in a static presentation of the plot - those long narrow subplots are not so useful once you start zooming and panning. But of course we want to be able to replicate all the plots folks feed in!\r\n\r\nDo you think that for ggplotly's purposes you could pull out the overall plot dimensions from ggplot's results and just pass them along to plotly.js? In which case I guess it would basically be ggplot enforcing the initial constraints (with plotly.js just verifying and possibly correcting for small differences in layout) and plotly.js's role in this would primarily be in dynamic behavior.\r\n\r\nAnd re: the part that disappeared from your comment above - do you think the with/width confusion merits changing the name `scalewith` to something else?",
    "created_at": "2017-03-28T18:05:18Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1522#issuecomment-289855124",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1522",
    "updated_at": "2017-03-28T18:05:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks great 💃 ",
    "created_at": "2017-03-28T15:07:34Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1520#issuecomment-289800757",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1520",
    "updated_at": "2017-03-28T15:07:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ok, I might still vote to :hocho: this ability in v2.0 but for now this is good :dancer:",
    "created_at": "2017-03-20T16:06:07Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1500#issuecomment-287807987",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1500",
    "updated_at": "2017-03-20T16:06:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "It's possible that `plotly_afterplot` is being emitted synchronously here - so that it has already fired before you can attach the handler. I was able to confirm that on subsequent replots (such as after zooming) it *is* called, so I suspect that's the case here too. We can look into it and ensure that it gets emitted async, but it might be easier anyway to just use the promise returned by `Plotly.plot`, ie:\r\n```js\r\nPlotly.plot(plotDiv, data)\r\n.then(function() {\r\n    // put code here instead of afterplot\r\n});\r\n```\r\n\r\nAnd if you want that code to get called after zooming or other changes to the plot, you can *also* attach the same function to `plotly_afterplot`.",
    "created_at": "2017-03-18T03:09:21Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1498#issuecomment-287512265",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1498",
    "updated_at": "2017-03-18T03:09:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Oh weird. @ni-hil can you do the binning manually and make this with a bar trace? That behavior is [known to work](https://github.com/plotly/plotly.js/blob/master/test/image/baselines/bar-colorscale-colorbar.png).\r\n\r\n@etpinard I wasn't aware that we ever supported this usage but I guess you did if you made that plot! I'm kind of in favor of not allowing it though. Since you need to know the bins already in order to specify colors (and therefore you can't change the bins afterward without also recalculating the color array) seems to me the main advantage of using a histogram instead of a bar trace is lost and outweighed by the pitfalls of potential bin/color mismatches.",
    "created_at": "2017-03-18T02:15:42Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1495#issuecomment-287509647",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1495",
    "updated_at": "2017-03-18T02:15:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for the report @druvisc \r\n\r\n`graphDiv.data` - and `graphDiv.layout` - are intended to be the 'source of truth', and all changes to a plot first modify these objects and then propagate the changes to the plot. We've never made a commitment either way about what would happen to the specific `data` and `layout` objects you pass in, whether they would mutate or be replaced. But I can see that the behavior of `addTraces`, doing half the mutation and then replacing the array, is particularly non-intuitive, and potentially harmful if you aren't expecting it.\r\n\r\nWhen things change, we've *generally* mutated rather than replaced, owing largely to performance for cases like streaming new data into existing x/y arrays. We would consider making this a guarantee, that we will *only* ever mutate these objects, so your original reference remains a valid view into the plot state, but I would consider that a new feature rather than a bug.",
    "created_at": "2017-03-18T02:01:57Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1492#issuecomment-287508869",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1492",
    "updated_at": "2017-03-18T02:01:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks good. I can't really tell if these problems generalize beyond these fixes or not, so I guess if anything else comes up we'll just have to add more test cases...\r\n\r\n💃 ",
    "created_at": "2017-03-17T19:11:07Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1494#issuecomment-287446020",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1494",
    "updated_at": "2017-03-17T19:11:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 ",
    "created_at": "2017-03-17T02:56:22Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1491#issuecomment-287253495",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1491",
    "updated_at": "2017-03-17T02:56:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "All of these are strange \"why the heck would you do this\" cases, but here goes:\r\n\r\nI would think if you have a weird `dtickminor` (ie that's not an even fraction of the major tick spacing) you'd still just increment by that value from the first tick until you get to or past the last tick. So between 0.152 and 0.328 with `dtickminor: 0.1` you'd just get a single tick at 0.252. Strange request from the user, but that seems like the most faithful interpretation of it.\r\n\r\nAnd if you have `ntickminor: 9` but weird major tick spacing, I would just make exactly 9 evenly-spaced ticks. Even spacing seems far \"nicer\" than trying to make \"nice\" spacing and ending up with a weird remainder.\r\n\r\n> I like the 10 - 1 = 9 gridlines between the major gridlines style better\r\n\r\nWorks for me. Igor has made an awful lot of good decisions over the years, you can't go too wrong by following their lead.",
    "created_at": "2017-03-17T01:44:41Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1239#issuecomment-287243907",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1239",
    "updated_at": "2017-03-17T01:44:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Awesome, lets get this up! 💃 ",
    "created_at": "2017-03-16T23:00:49Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1490#issuecomment-287218054",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1490",
    "updated_at": "2017-03-16T23:00:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Do you think I should subtract one instead and the count would include the major grid lines?\r\n\r\nA little survey, since we'll want to add this to regular axes at some point too and it would be great if we can share the API:\r\n- [Igor](http://www.wavemetrics.net/doc/igorman/II-12%20Graphs.pdf) does it as you have it now, counts the number of lines drawn. (they have another option in between major and minor, \"fifth\", and also \"subminor\" that applies to log axes... a little more than we need now!)\r\n- [Matplotlib](http://matplotlib.org/api/ticker_api.html#matplotlib.ticker.AutoMinorLocator) does it as you're suggesting, counts the number of intervals.\r\n- [Matlab](https://www.mathworks.com/matlabcentral/answers/102945-how-can-i-specify-the-spacing-between-minor-tick-marks-and-minor-grid-lines-in-my-figures-in-matlab) only seems to have this in a weird undocumented feature that requires you to specify all the values explicitly?\r\n- [ggplot2](http://docs.ggplot2.org/current/scale_continuous.html) can add a single minor tick, otherwise requires you to generate all of them explicitly.\r\n\r\nSo there's not really a lot of precedent to go with...\r\n\r\nCan we fit this in with the scheme we already have for major ticks? There, we have 3 different ways to do it:\r\n- `nticks: n` to automatically choose \"nice\" values up to a maximum of `n`\r\n- `dtick: v` to use exactly `v`\r\n- `tickvals= [v1, v2, ...]` to give an array of positions\r\n\r\nAll of these would be nice in principle, but 99% of the time seems like using something like `nticksminor` to choose a nice `dtickminor` value is what people would want. `dtickminor` is unambiguous. `nticksminor` *is* grammatically ambiguous in the same way as `minorgridcount` but I think I like your second idea, defining it as the number of intervals, ie the larger of the two numbers, so that `dtickminor >= dtick / nticksminor`.\r\n\r\nThe nice thing about this is if `dtick` is a \"nice\" (1|2|5)x10^n value, the minor interval is always \"nice\" too. If you chose `nticksminor: 5`, it would automatically switch between 4 and 5 intervals depending on the major spacing - 5 for `dtick`=1x10^n or 5x10^n, 4 for `dtick`=2x10^n (if the major spacing isn't nice itself, I guess it should just use `nticksminor` exactly)",
    "created_at": "2017-03-16T21:29:56Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1239#issuecomment-287196955",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1239",
    "updated_at": "2017-03-16T21:29:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice job tracking this down - fix & tests look spot on! 💃 ",
    "created_at": "2017-03-16T19:28:36Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1488#issuecomment-287165968",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1488",
    "updated_at": "2017-03-16T19:28:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Chatted about this with @etpinard on slack - `scalemode: 'match'` doesn't sound quite right to me, since I want it to copy more than just the scale, also the styling if not overridden. I think I'll push ahead with `scalewith` and `scaleratio`, and since I'm not building it now we can ruminate on naming `match`.",
    "created_at": "2017-03-16T18:17:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/272#issuecomment-287146657",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/272",
    "updated_at": "2017-03-16T18:17:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> To state/clarify the obvious, is this only a concern of the cartesian plot type? Would 2d gl plots need/want this too and need to hoist it up out of the cartesian plot code?\r\n\r\nWe should definitely make this work with gl2d. When we get to `match` or whatever that feature gets called, we should also make it work for maps - that would be a sweet experience, like linking a data view and a satellite view, or two different data views. Also I guess we could do that with 3d scenes and ternary subplots. Spin one 3D shape and the neighboring scene spins with it?",
    "created_at": "2017-03-16T18:00:22Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/272#issuecomment-287141794",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/272",
    "updated_at": "2017-03-16T18:00:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> However it could lead to an overconstrained system as scaling ratios between axis pairs could contradict each other\r\n\r\nYes, this is a tricky one - on the other hand we would like it to be flexible and clear which axes you're linking with any given attribute. I think what I'd like to do is describe these linkages within the axis objects and then check for incompatible constraints at the end.\r\n\r\nA closely related feature, that I'm not going to build right now but I'd like to think about so it can fit into this framework, is forcing two axes to be identical - not just the same scaling, but in fact exactly the same range. I'm thinking of plots like [this one](https://plot.ly/~jackp/16209/machine-learning-classifier-comparison.embed):\r\n![machine-learning-classifier-comparison](https://cloud.githubusercontent.com/assets/2678795/23995287/43807cd0-0a1f-11e7-965d-e6b4f30cbb63.png)\r\nwhere all the x axes are really the same axis, as are all the y axes. Usually this would link x-x or y-y but I guess maybe x-y links should be allowed with this framework too?\r\n\r\nFor an API, I'm thinking:\r\n```\r\naxis.scalewith: id - must be the id of an axis of the opposite letter, ie xaxis2.scalewith='y3'\r\naxis.scaleratio: number, ratio of the pixel size of a unit on this axis to the scalewith axis.\r\n    defaults to 1, only applies together with scalewith\r\naxis.match: id - if specified, the range of this axis must exactly match the other one.\r\n    we could also have this axis inherit defaults for style attributes from the one it matches?\r\n```\r\n\r\nI'm also thinking while technically possible, it might be best to forbid a single axis having both `scalewith` and `match`. The effect should be supported, like if you want a 2x2 SPLOM with x axes matching, y axes matching, and a fixed y:x ratio of 10, you could do:\r\n```js\r\nxaxis: {},\r\nyaxis: {scalewith: 'x', scaleratio: 10},\r\nxaxis2: {match: 'x'},\r\nyaxis2: {match: 'y'}\r\n```\r\n\r\nThen all we'd need to do to avoid incompatible constraints is disallow loops - probably just refuse to set `scalewith` or `match` when we see a loop, log a warning and keep going without it.\r\n\r\nThoughts about this API?",
    "created_at": "2017-03-16T12:34:56Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/272#issuecomment-287043579",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/272",
    "updated_at": "2017-03-16T16:46:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I guess `match` is more grammatically similar to other attributes we have than `matches` - changed above.",
    "created_at": "2017-03-16T15:31:32Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/272#issuecomment-287094804",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/272",
    "updated_at": "2017-03-16T15:31:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Re `scalewith`, I'm not sure because it implies (or maybe doesn't?) that there are only two orthogonal dimensions.\r\n\r\nI was imagining that it would be chainable:\r\n```js\r\nxaxis: {},\r\nyaxis: {scalewith: 'x'},\r\n\r\n// multiple axes all scaled with the first one\r\nyaxis2: {scalewith: 'x'},\r\n\r\n// another one, that implicitly links the scale back to x\r\nxaxis2: {scalewith: 'y'},\r\n\r\n// this would be equivalent to scalewith 'x' but if you\r\n// use scaleratio these will multiply together differently\r\n// depending on where you hook yaxis3 into the chain\r\nyaxis3: {scalewith: 'x2'}\r\n```\r\n\r\n> Maybe it's worth thinking about internally modeling scales / projections / axes as shareable 1st class entities\r\n\r\nGood point. I don't think we want to change the API based on this, but down the road this would be a good way to boost our capabilities for these large, complex plots.",
    "created_at": "2017-03-16T15:30:38Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/272#issuecomment-287094525",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/272",
    "updated_at": "2017-03-16T15:30:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yep, lets do it. Gotta get a handle on CI and worry about getting these to work repeatably later. 💃 ",
    "created_at": "2017-03-16T01:52:35Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1478#issuecomment-286934334",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1478",
    "updated_at": "2017-03-16T01:52:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "It doesn't look to me like an issue with the data and layout objects. I think we're just not properly exiting elements from the svg when a subplot disappears like this. Note that we do a bit better with stacked subplots instead of overlaid:\r\n![screen shot 2017-03-15 at 2 08 16 pm](https://cloud.githubusercontent.com/assets/2678795/23963953/3d2ea262-0989-11e7-8285-32d6c5ace9bd.png)\r\nBut even there the old axis title isn't cleaned up.\r\n\r\nThe easy fix, I think, would be to have `Plotly.redraw` delete all children of the `plotDiv` before its call to `Plotly.plot`. That may be fine, as we intend to phase out `redraw` anyway, though of course the longer-term solution should be to refactor the plot framework routines to be more d3-idiomatic.",
    "created_at": "2017-03-15T18:19:09Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1218#issuecomment-286833871",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1218",
    "updated_at": "2017-03-15T18:19:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Snowden is still lit from the opposite side as before this change. The others too, probably, but the rest are hard to say anything about except \"they changed.\"\r\n\r\nSo I'll ask again: which is correct and which is a bug? I understand there may be other advantages to this change, but we cannot just flip the lighting on all of our 3d surfaces without clearly determining that the previous behavior was a bug.",
    "created_at": "2017-03-15T03:34:13Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1423#issuecomment-286631563",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1423",
    "updated_at": "2017-03-15T03:34:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "😿  the intermittent CI failure I saw [yesterday](https://circleci.com/gh/plotly/plotly.js/3794) is [here](https://circleci.com/gh/plotly/plotly.js/3840) again today:\r\n```\r\nTypeError: unsupported file type: undefined (file:\r\n/var/www/streambed/image_server/plotly.js/build/test_images/gl3d_z-range.svg)\r\n```",
    "created_at": "2017-03-15T03:25:08Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1423#issuecomment-286630436",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1423",
    "updated_at": "2017-03-15T03:25:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "looks good to me - 💃  as soon as you update the test image based on #1475 (finishing the loose end there 🎉 )",
    "created_at": "2017-03-14T20:32:38Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1472#issuecomment-286550461",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1472",
    "updated_at": "2017-03-14T20:32:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> lights would illuminate from the source direction and also the anti-source direction.\r\n\r\nThat doesn't sound good... the light needs to act like a real light source and come from one side, so it does its job of helping you to see the shape of the data.\r\n\r\nCan't we just make the active surface normal be the one you see? Which I guess means the one that has a positive dot product with the vector from somewhere on the face to the camera?",
    "created_at": "2017-03-14T16:20:36Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1423#issuecomment-286475227",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1423",
    "updated_at": "2017-03-14T16:20:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> decide which direction is outward\r\n\r\nso we can't do a klein bottle? why can't both directions be \"outward\"?",
    "created_at": "2017-03-14T15:00:42Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1423#issuecomment-286448403",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1423",
    "updated_at": "2017-03-14T15:00:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "No, I think your gut feeling is right - when you make a plot with no data but an explicit range slider, it should show up. I could imagine someone building an application that starts out looking like this and then gets data added to it, and they might think it looks better this way than with the range slider appearing with the first data, so they should have that option.\r\n\r\nMy concern was that `addTrace` and then `deleteTrace` does not get you back to where you started, as the range slider doesn't disappear. But that's starting to seem like it's too complicated for what is frankly a strange edge case. The only place I'm worried about it still is in the workspace, if someone makes a chart that automatically creates a range slider, then decides they don't want that trace type and deletes it, then doesn't know how to get rid of the range slider. But perhaps it's better to worry about that in the workspace, as it's really only an issue there, rather than add more complexity here.",
    "created_at": "2017-03-14T14:58:11Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1473#issuecomment-286447569",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1473",
    "updated_at": "2017-03-14T14:58:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Hah, how can we not have an autoranged log axis bar chart anywhere in our tests? 0.1 to 10^4 is the default y axis range (-1 to 4), there's a problem with the log/linear conversion. I'll sort it out.",
    "created_at": "2017-03-14T12:54:49Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1352#issuecomment-286412093",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1352",
    "updated_at": "2017-03-14T12:54:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃  nice 🐎 !",
    "created_at": "2017-03-13T22:38:05Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1444#issuecomment-286265751",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1444",
    "updated_at": "2017-03-13T22:38:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "#1466 at least makes the behavior not be path-dependent, so that's good. But there's a bigger issue here: points aren't ordered by depth across traces. The trace that was drawn last always has all its points in front of the other traces, even if they are really farther away. It turns out this is only an issue for traces with opacity. If I change the traces in http://codepen.io/etpinard/pen/oYOMZO to `opacity: 1` I see a mixture of blue and grey throughout, not one color dominant throughout the dense middle part:\r\n\r\n![screen shot 2017-03-13 at 4 58 35 pm](https://cloud.githubusercontent.com/assets/2678795/23875549/3daa3ef6-0810-11e7-8a2c-90daecd53c65.png)\r\n\r\nThis seems to me frankly a major bug for partly-transparent traces. It means the essential 3d-ness of the plot is silently lost, making you think the last trace drawn has a greater extent than the others or something...",
    "created_at": "2017-03-13T21:17:09Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1267#issuecomment-286246619",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1267",
    "updated_at": "2017-03-13T21:17:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks good to me, after that small change in the test 💃 \r\n\r\nThat said, I'd like to leave #1267 open, because it points to a bigger problem. I'll update the issue.",
    "created_at": "2017-03-13T21:07:35Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1466#issuecomment-286244070",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1466",
    "updated_at": "2017-03-13T21:07:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I do a check to make sure I don't add the same trace twice. The example I linked to was a simplified version to help isolate the issue.\r\n\r\nAfter that check do you still have a problem (and if so can you post it?), or were you just hoping not to need the check?\r\n\r\nI wouldn't want to add a new event type for rehover, because then people would have to know that in the normal case they need to listen to both types. But we could certainly add something to the event to indicate whether it was triggered by a mouse event or something else like a rehover. Like... the mouse event itself? That could come in handy for other purposes too.",
    "created_at": "2017-03-13T20:21:48Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1467#issuecomment-286231382",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1467",
    "updated_at": "2017-03-13T20:21:48Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Honestly I'm not sure if I would consider this a bug - yes it's an infinite loop, but you'd get an explosion of traces in a case like this anyway, at least for real data sets where you cause hundreds of hover events every time the mouse crosses the plot. And I do think we want rehover-hovers to emit an event so the more typical case of updating something outside the plot (or on a different subplot at least) will still happen.\r\n\r\nIs there a more realistic use case for this? There are always going to be ways to trigger infinite loops when you modify a plot from inside an event handler, and I think at some level it's up to the user to avoid these, otherwise we'll be restricting what they can do.",
    "created_at": "2017-03-13T19:35:15Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1467#issuecomment-286218728",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1467",
    "updated_at": "2017-03-13T19:35:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks great to me! 💃  (which at Plotly means \"approved to merge\" in case it's not clear!)",
    "created_at": "2017-03-13T16:47:27Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1432#issuecomment-286167782",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1432",
    "updated_at": "2017-03-13T16:47:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I don't think anyone is going to go through the thought process \"this graph is super tall so I'd better change how the common axis hover labels get placed\"... and anyway who's to say what's \"too tall\", that's different for each viewer, and depending on the context the plot may be scrolled halfway off screen anyway. So I wouldn't be in favor of making this configurable.\r\n\r\nHow about we try to detect where the bottom of the screen is, and move the label down to the bottom-most shared axis but then push it back up onto the screen if necessary? Not actually sure how to do that but given all the sites that make something happen to an element when it scrolls on screen I imagine it's possible...",
    "created_at": "2017-03-13T15:14:26Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1468#issuecomment-286137865",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1468",
    "updated_at": "2017-03-13T15:14:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@rpaskowitz the present CI test failure is due to #1455 - if you merge master into this branch it should work again.",
    "created_at": "2017-03-12T06:01:37Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1432#issuecomment-285924574",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1432",
    "updated_at": "2017-03-12T06:01:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@rpaskowitz thanks for all the great examples and exploration of so many scenarios!\r\n\r\n> > That said, unlike 3D I don't think we need to allow this on a per-axis basis, a global setting seems fine\r\n>\r\n> I disagree here. I kinda like the idea of adding `showspikes` to every axis object. I can image someone only wanting spikes on the x (or y) axis of a given subplot. We should make sure that the `xaxis.showspikes` description mentions that it only has an effect when `layout.hovermode` is set to `'closest'`.\r\n\r\n> Decide if a modebar is needed to enable/disable this behavior (I'm not 100% on it being a modebar interaction since it wouldn't be a simple on/off, as it's per-axis, including individual axes when there are subplots, and it may not be desirable at all for certain charts - I think it may be best left to the chart designer - one example, x-axis spikes are pretty unnecessary for bar charts).\r\n\r\nTrue, bar charts don't benefit from a guide line down the bar, and in fact it could obscure things... But we could handle that based on trace type instead. I worry that few people will go to the trouble of understanding its implications fully enough to configure it per-axis, and at least for me personally I would really appreciate the ability to turn this effect on or off (ie via the mode bar). I suppose we could define a global `layout.showspikes` that's controlled by the mode bar and sets the default that per-axis values override... seems potentially confusing though.\r\n\r\n> Here's what it looks like with dots on the axes. The dropline will draw the the edge of the plot area, but the dot will appear on whichever axis the series is associated to.\r\n\r\n> Decide if we want either dropline to not just go to the axis the value relates to, but full across the chart. Could be configurable as part of showspikes.\r\n\r\nI like the look when the line is drawn from the point to the axis, no matter where that axis is displayed (even if it's a free axis?), and your point that this helps explain multi-axis plots is a great observation. Does that mean we don't need the dot on the axis? I like that look too when the axis has a line, but it seems redundant if the line gets there, and I *don't* like it when the axis doesn't have a line or ticks - then it overlaps the tick labels. Might be better just to leave it off?\r\n\r\n> Decide if we we need the background line behind the colored line to change based on chart and/or line color.\r\n\r\n> This example also has a white line behind the colored line, which is also a pixel wider on each side. I'm not sure the contrast is needed for alternating colors because the backgrounds purpose is to make the line visible on top of other series, not necessarily visible on top of a series of the same color. Since there could be any number of other colors to differentiate from, alternating backgrounds may not help.\r\n\r\nI still think it would be worth trying exactly the colors that the hover label gets. Maybe it will look a bit heavy on white-background charts when the contrast color goes to black, but it will guarantee contrast in any situation: what if you have light-colored scatter points either in a thick cloud over a dark background, or with a dark `marker.line` on a light background. In both cases the spike lines would disappear. You're right that in a plot with a jumble of small feature of many different colors this won't really differentiate itself locally, but I still think except in some truly pathological cases it will make a clear feature to guide the eye vertically or horizontally when you consider the whole chart. That said I feel like the extra width of the white (or contrasting) line - which would help for some of these really chaotic cases - is probably too wide and obscures too much, particularly if you're using the line to compare values across the plot.\r\n\r\n> Decide if swapping the hovertext position based on axis position should be done as a part of this PR (my feeling now is no, since the axis marker mostly resolves the visibility issue that the problem previously exacerbated, and it's independent)\r\n\r\nAgreed, but might be nice to make an issue for it so we don't forget to revisit it later.",
    "created_at": "2017-03-12T05:56:37Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1461#issuecomment-285924401",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1461",
    "updated_at": "2017-03-12T05:56:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> today `hovermode` really impacts what triggers a hover, and what data is included in the hover events, and not what is shown when a hover is triggered.\r\n\r\nGood point - @etpinard is right that this shouldn't go in config, but we should make it another attribute, independent of `hovermode`, and give it a modebar icon that's only available in `closest` mode so viewers can toggle this.\r\n\r\nThis also has an analog in gl3d, where each axis independently has an attribute `showspikes` - along with `spikesides` for secondary lines, and `spikethickness` and `spikecolor` to style them. I can't say I'm that excited about the name \"spikes\" but we do already have it so using a different name could be confusing... That said, unlike 3D I don't think we need to allow this on a per-axis basis, a global setting seems fine. And maybe sometime we will want to enable styling like color and thickness but lets omit that for now.\r\n\r\n>  I'd might suggest the white background behind the color, which should increase visibility while still keeping some indicator of the series?\r\n\r\nAh, that's nice - we could use the same coloring as the hover label: light colors get a black contrast, dark colors get a white contrast.\r\n\r\n> I could picture a dot/circle on the axis the goes slides along the axis to help make this clear. I'd still likely want to keep the line within the plot/subplot because a second convenience with droplines is not just finding the line on the axis, but also comparing data points of the same or other series with a selected on (\"where we higher or lower 7 days ago?\")\r\n\r\nOh yes - I wasn't suggesting getting rid of the line within the subplot... just not extending it outside the subplot if the axis isn't at the edge of the subplot. But the point about using this line for comparison is interesting - does this mean we should actually extend these lines the full width of the subplot, not just toward the axis?\r\n\r\n> I can take a look at the gl2d implementation, but it could take longer since I've not done any WebGL before.\r\n\r\nDoesn't have to be in this PR, nor does it need to be your job unless you're itching to play with webGL. I just want to make sure that whatever we do here will also work for webGL when we get to it.",
    "created_at": "2017-03-10T18:59:20Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1461#issuecomment-285754824",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1461",
    "updated_at": "2017-03-10T18:59:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yeah, I like it! We should harmonize this behavior with gl2d, which currently does exactly this - always, cannot be turned off, can it? But it uses solid black lines:\r\n\r\n![screen shot 2017-03-10 at 10 50 56 am](https://cloud.githubusercontent.com/assets/2678795/23802020/fd0e577a-057f-11e7-8b85-18ab2f6cde9e.png)\r\n\r\nI can see this being a `hovermode` - that works nicely with not allowing it in compare mode, and also allows the end viewer to turn it on and off, not relying on the developer, since it'll show up in the modebar. Then maybe we can turn it off by default for gl2d as well.\r\n\r\nThoughts on colors? For robustness I kind of want to match the box/lasso select outline, which is alternating black/white dashes (drawn as solid white with dashed black on top of it) which probably isn't the prettiest but it always shows up, no matter what data or background it's drawn against.\r\n\r\nre: axes off to the side (\"free\" axes) - perhaps we can just add a tick or arrow on the axis itself but not draw the whole line over to it (wherever it may be), just draw the line to the edge of the plot area? Same goes for subplots that share an axis, we probably don't want the line to go all the way across the other subplot, just add a mark of some sort on the relevant axis.\r\n\r\nre: flipping the default label orientation for series drawn against the right axis: I think that's a great idea! The hover label then functions as an arrow pointing toward that axis. There's a chance people will find this *less* intuitive, as the label is *positioned* toward the wrong axis, even if it's *pointing* toward the correct one... but the benefits seem greater so lets do it. A thought on implementation: if we did this based on the pixel position of the axis relative to the hovered-on point, rather than on the side, then if you put a free axis over the middle of the plot, the labels would flip as you cross the axis, which seems like it would be a cool & useful effect - and you'd automatically get it right for free axes off the edge like `mocks/20.json`",
    "created_at": "2017-03-10T16:25:13Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1461#issuecomment-285714282",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1461",
    "updated_at": "2017-03-10T16:25:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@rpaskowitz apologies for the delay reviewing your fixes. I think the only blocking issues now are the double_click helper hiding in test assets and seeing if you can reduce the test delays, then we'll be ready to 💃 ",
    "created_at": "2017-03-10T15:44:41Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1432#issuecomment-285702658",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1432",
    "updated_at": "2017-03-10T15:44:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@monfera @etpinard I missed this issue when category arrays went in, particularly [this comment](https://github.com/plotly/plotly.js/blob/master/src/plots/cartesian/ordered_categories.js#L18) - I actually think we *want* string coercion, although this may open a can of worms re: lexicographic vs natural sorting. Thoughts?",
    "created_at": "2017-03-10T13:24:39Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1460#issuecomment-285668012",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1460",
    "updated_at": "2017-03-10T13:24:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "closed by #1453 - now `layer: 'below'` shapes and images are still in front of plot backgrounds in all cases EXCEPT on inset plots (any subplot that overlaps an earlier one without being explicitly overlaying) where the component is NOT referenced to both axes of that subplot. So for example, if `x2/y2` is on top of `x/y`, a shape referenced to `x2/y2` can still be seen with `layer: below` but one referenced to `x2/paper`, `paper/y2`, `x/y`, or anything else cannot be seen where it intersects the `x2/y2` subplot.\r\n\r\nThis is, I believe, the minimal set of objects it's theoretically impossible to show (short of some sort of horribly complicated stitching together of different objects in different z layers, which wouldn't work that well anyway due to antialiasing and would have strange effects of data objects from the lower plot slicing through them.)",
    "created_at": "2017-03-09T23:51:46Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1452#issuecomment-285522747",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1452",
    "updated_at": "2017-03-09T23:51:46Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "closed by #1453 ",
    "created_at": "2017-03-09T23:33:51Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1390#issuecomment-285519000",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1390",
    "updated_at": "2017-03-09T23:33:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "https://github.com/plotly/plotly.js/pull/1453/commits/2102b0f39c9fa09a824417699598baeb9e045a83 fixes #1390 and #1452 - I still want to add a couple of tests of the inset vs flat background behavior though",
    "created_at": "2017-03-08T23:16:30Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1453#issuecomment-285201733",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1453",
    "updated_at": "2017-03-08T23:16:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "#1390 is wrapped up in this too... better fix that at the same time.",
    "created_at": "2017-03-08T15:58:42Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1453#issuecomment-285081458",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1453",
    "updated_at": "2017-03-08T15:58:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Looks like shapes_below_traces produced a diff, is that on purpose?\r\n\r\nHmm, maybe #1452 needs to be addressed together with this PR after all, that's what's going on here. You'll see that the data in the lower left subplot gets covered up in the new result for that image. But the original is clearly wrong in how it breaks the two shapes that span that subplot and either the one above or to the right into two disjoint pieces.\r\n\r\nFrom a slack chat:\r\n\r\n> the reason I said (in #1452 ) \"I'm not sure this really has a solution even theoretically” is that there really isn’t a layering that puts the shape in front of the plot area backgrounds but behind the traces, at least not when you consider inset subplots that want to have their own backgrounds in front of the main plot traces.\r\n>\r\n> One easy thing we could do is put the below shapes completely below the plot layers… then you have to make `plot_bgcolor` transparent to see the shapes.\r\n>\r\n> A trickier thing we could do is pull the background rects out of the subplot layers, putting them behind everything else, UNLESS we detect overlapping (but not overlaying) subplots.\r\n>\r\n> That would cover all the use cases I can think of except below shapes that are half referenced to an axis of an inset subplot… which would be an exceedingly weird situation.\r\n\r\n@etpinard suggested:\r\n> Maybe we should disallow shapes that span multiple subplots\r\n\r\nThat would certainly make this easier (the restriction would only apply to `layer: 'below'` shapes and images) - then we'd just have to figure out which subplot contains the shape. But there are some cool uses of subplot-spanning shapes - for example on the standard finance chart that has candlesticks/OHLC in the main plot and volume in a little lower subplot, if you want to highlight a time range. It would look weird to force these to be two separate shapes. Would also be annoying to try and enforce this restriction during editing (particularly via drag)\r\n\r\nSo I'm leaning toward the \"trickier thing\": pulling the plot backgrounds back to their own layer except for inset plots.\r\n\r\nThoughts?",
    "created_at": "2017-03-08T15:55:08Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1453#issuecomment-285080278",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1453",
    "updated_at": "2017-03-08T15:55:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Note: annotations do not have these issues, as they don't use clip paths. We will happily allow the arrow and text box of an annotation to go outside the plot area as long as its reference point is visible.",
    "created_at": "2017-03-08T06:12:29Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1453#issuecomment-284956523",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1453",
    "updated_at": "2017-03-08T06:12:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Crazy. I certainly would not have caught that, but it makes sense. 💃 \r\n\r\nSometime it might be worth making test cases corresponding to some of our other event-driven examples, both to test the events themselves and to guard against other interactions like this. The Mandelbrot explorer I made is one that comes to mind - where a zoom (relayout) event triggers a restyle (with new heatmap data)",
    "created_at": "2017-03-07T03:27:08Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1448#issuecomment-284610883",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1448",
    "updated_at": "2017-03-07T03:27:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I don't think it's on purpose; I know that for log axes we fiddle with the positioning of individual labels (particularly to keep the small 9 from interfering with the bigger 10^n) but I suspect for linear it's just us making a poor approximation to avoid having to calculate bounding boxes individually for each tick label. I'd be happy to consider this a bug.\r\n\r\nThat said there *are* use cases for offsetting the labels - but perhaps this would be best handled as an anchor (top/middle/bottom, or left/center/right for x axes) rather than a pixel offset?\r\n\r\nLike this Vox chart:\r\n![screen_shot_2015-01-14_at_11 34 49_am 0](https://cloud.githubusercontent.com/assets/2678795/23520569/925fd07a-ff49-11e6-89b0-a1247992a143.png)\r\n",
    "created_at": "2017-03-02T18:12:26Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1434#issuecomment-283733171",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1434",
    "updated_at": "2017-03-02T18:12:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks for the changes. I guess you're still sorting something out re: [fonts](https://github.com/plotly/plotly.js/pull/1431#discussion_r103795795) but I'm ready to 💃 ",
    "created_at": "2017-03-02T17:56:54Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1431#issuecomment-283728900",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1431",
    "updated_at": "2017-03-02T17:56:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> That said, I'm not a big fan that zoom / zoom back notifier, as it only serves new users and experienced users probably get annoyed by it.\r\n\r\nI agree, it's a bit of a blunt instrument but it's what we have for the moment. Lets put it in for now but I'll make an issue to discuss alternatives.",
    "created_at": "2017-03-02T16:46:22Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1432#issuecomment-283708473",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1432",
    "updated_at": "2017-03-02T16:46:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> if we define \"undo\" to mean \"enable all traces\", it seems easy enough.\r\n\r\nHah, exactly this question occurred to me too after posting my comment 🥇 \r\nYes, lets just enable all traces. Having it be precisely an undo would not only be a lot more work, I think it would actually be more confusing to users.",
    "created_at": "2017-03-02T05:34:36Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1432#issuecomment-283561122",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1432",
    "updated_at": "2017-03-02T05:34:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "In other places we tell people about doubleclick opportunities through `Lib.notifier` (eg [`'Double-click to<br>zoom back out'`](https://github.com/plotly/plotly.js/blob/master/src/plots/cartesian/dragbox.js#L331)) - perhaps we should do that here the first time someone single-clicks a legend item?\r\n@etpinard thoughts?",
    "created_at": "2017-03-02T05:32:18Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1432#issuecomment-283560811",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1432",
    "updated_at": "2017-03-02T05:32:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I like it, nice start @rpaskowitz !\r\n\r\nWe need a way to undo this isolation. Can you make that happen on doubleclicking the same trace again?",
    "created_at": "2017-03-02T05:22:36Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1432#issuecomment-283559616",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1432",
    "updated_at": "2017-03-02T05:22:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard I think I prefer double click actually - the decision about whether to toggle or isolate seems like it should be more user-driven than developer-driven, so making it an attribute would limit viewers' ability to interact as they please. The downside seems to me to be discoverability, but once you do discover it, isolating that trace/group seems intuitive as kind of \"stronger than a single click.\" #1432 looks like a good start, so I'll review it.",
    "created_at": "2017-03-02T05:18:52Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/674#issuecomment-283559120",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/674",
    "updated_at": "2017-03-02T05:18:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Easy enough 💃 ",
    "created_at": "2017-03-02T04:53:49Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1427#issuecomment-283556103",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1427",
    "updated_at": "2017-03-02T04:53:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 ",
    "created_at": "2017-02-28T15:03:02Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1425#issuecomment-283063027",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1425",
    "updated_at": "2017-02-28T15:03:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks, 💃 \r\n\r\nNot sure what GH thinks changed in https://github.com/plotly/plotly.js/pull/1419/commits/9f1c6c4ee7a9bcda469564cee91d15a1232a7620#diff-ebde94117620b050ec349c85b9a200ea but anyway it all looks good.",
    "created_at": "2017-02-28T14:54:05Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1419#issuecomment-283060323",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1419",
    "updated_at": "2017-02-28T14:54:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "If we can clearly demonstrate that the previous behavior is a bug then I suppose there's no problem cementing the new behavior. Presumably the default light location was chosen, in the context of the buggy interpretation, to be some standard-ish above-and-to-the-side illumination for the default camera angle? Should we then alter the default lighting at the same time as we fix the bug? Then the practical results would be limited to those folks who've explicitly set a light source - admittedly exactly the folks who are most likely to care, but a bug needs to be fixed...\r\n\r\nIf there's any chance the winding order affects any of this, we need to sort that out and fix it first.",
    "created_at": "2017-02-28T14:50:16Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1423#issuecomment-283059188",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1423",
    "updated_at": "2017-02-28T14:50:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I wouldn't say it's better or worse, but sufficiently different to raise an alarm - it looks like the light source is now coming from exactly the opposite direction? Have we reversed a sign somewhere?",
    "created_at": "2017-02-27T20:33:04Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1423#issuecomment-282844194",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1423",
    "updated_at": "2017-02-27T20:33:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 💃 ",
    "created_at": "2017-02-27T17:30:04Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1414#issuecomment-282790076",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1414",
    "updated_at": "2017-02-27T17:30:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 ",
    "created_at": "2017-02-27T17:00:14Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1421#issuecomment-282781158",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1421",
    "updated_at": "2017-02-27T17:00:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice and easy 💃 ",
    "created_at": "2017-02-27T16:54:51Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1422#issuecomment-282779404",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1422",
    "updated_at": "2017-02-27T16:54:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "🍻 💃 ",
    "created_at": "2017-02-25T05:17:56Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1420#issuecomment-282461235",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1420",
    "updated_at": "2017-02-25T05:17:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Beautiful. Hover effects work better AND the code and svg structure is way simpler. 🌟 💯 🌟 \r\n\r\nI'm not worried about the baseline image differences - seems like just subpixel rounding differences based on the different nesting structure. There does seem to be a little bit of overflow in the clipping, may be worthwhile taking a 🔍  to it at some point but doesn't need to be now - I don't think the effect changed with this PR, it just got a subpixel shift.\r\n\r\n💃 ",
    "created_at": "2017-02-25T03:50:39Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1401#issuecomment-282457508",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1401",
    "updated_at": "2017-02-25T03:50:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ah, the annoying orphan axes... 💃 ",
    "created_at": "2017-02-25T03:03:07Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1393#issuecomment-282455113",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1393",
    "updated_at": "2017-02-25T03:03:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@VeraZab I don't think anything would change in how you call `restyle` or `relayout` - the only difference is that occasionally you'd end up with an empty container (like `line: {}`) where now we notice the empty container and delete it in the pruning step. It doesn't seem to me like the workspace would be bothered by these containers lingering, but @etpinard is absolutely right to check on it.\r\n\r\nCalls like `relayout(gd, {'images[2]': null})` still hit logic to turn that into splicing the item out of the array - and #1403 standardizes that logic to work across all the container arrays in `layout`.",
    "created_at": "2017-02-24T20:00:20Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1410#issuecomment-282389889",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1410",
    "updated_at": "2017-02-24T20:00:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Ohhh, never mind. Yeah, that's the coupling obviously.\r\n\r\nand worse, `nestedProperty` isn't always called with a trace or complete `layout` as the root object.",
    "created_at": "2017-02-23T19:45:11Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1410#issuecomment-282099287",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1410",
    "updated_at": "2017-02-23T19:45:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 ",
    "created_at": "2017-02-23T16:12:01Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1355#issuecomment-282038141",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1355",
    "updated_at": "2017-02-23T16:12:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "In the course of #1403 I made some circular deps involving `Lib`. In the short term I'm fixing these by breaking up `Lib` and just requiring the pieces I need, but longer term perhaps the right solution is to only allow things in `Lib` that do not `require` code from elsewhere in plotly.js. That would make it safe to import `Lib` anywhere, without forcing us to break it into a million little files. Would be a bit of an effort though...",
    "created_at": "2017-02-22T03:01:42Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/236#issuecomment-281554555",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/236",
    "updated_at": "2017-02-22T03:01:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Turns out shapes had a different issue with my branch and do *not* suffer from this bug. I'll keep myself assigned here since I pretty much know what to do, but may be able to keep it separate after all.",
    "created_at": "2017-02-17T20:08:16Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1390#issuecomment-280753399",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1390",
    "updated_at": "2017-02-17T20:08:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Huh, I thought I could wait on this one, but looks like I may need to address it now as part of my work on the array relayout API...",
    "created_at": "2017-02-17T19:44:12Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1390#issuecomment-280747702",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1390",
    "updated_at": "2017-02-17T19:44:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "And see the implementation of `clicktoshow` in #1265 - at some point we do intend to implement a way to generate \"sticky\" annotations programmatically on clicking a data point but for now, as long as you don't have *too* much data you can do it the other way around: pre-generate all the annotations you might want and link them to appear on clicking the appropriate data points.",
    "created_at": "2017-02-15T23:13:54Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/998#issuecomment-280172330",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/998",
    "updated_at": "2017-02-15T23:13:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Good call 💃 ",
    "created_at": "2017-02-15T19:38:41Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1376#issuecomment-280115731",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1376",
    "updated_at": "2017-02-15T19:38:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks good to me 💃 ",
    "created_at": "2017-02-15T19:35:56Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1377#issuecomment-280114950",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1377",
    "updated_at": "2017-02-15T19:35:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Awesome, thanks! 💃 ",
    "created_at": "2017-02-15T19:18:09Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1304#issuecomment-280109879",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1304",
    "updated_at": "2017-02-15T19:18:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Very nice. 💃 ",
    "created_at": "2017-02-15T18:43:12Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1379#issuecomment-280100022",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1379",
    "updated_at": "2017-02-15T18:43:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice. Yes, I think it'd be worthwhile to avoid the loop in the (overwhelmingly common) case of no `customdata`.",
    "created_at": "2017-02-15T17:51:52Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1379#issuecomment-280085531",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1379",
    "updated_at": "2017-02-15T17:51:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks reasonable to me. Do you also want to:\r\n- [x] add a class like `plotly-customdata` to the elements that actually have `d.data` (I think [scatter/style.js](https://github.com/plotly/plotly.js/blob/master/src/traces/scatter/style.js#L28) is the right place (do we need to call out `text` or just `path.point`?) so the API doesn't need to know anything about our selectors to find the right elements to look for `d.data` on.\r\n- [x] explicitly test passing through an object, not just a string, as that's probably what we'll need in practice.",
    "created_at": "2017-02-14T19:45:37Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1379#issuecomment-279814571",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1379",
    "updated_at": "2017-02-15T17:37:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Could you add a test where an update causes the hover label to disappear, then another update causes one to appear again? Maybe a `relayout` changing an axis range, so we're also testing a route that app developers are likely to use when altering the data in their plots, and similar to the route used by streaming?",
    "created_at": "2017-02-14T19:30:33Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1304#issuecomment-279810165",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1304",
    "updated_at": "2017-02-14T19:30:33Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I don't see that we document or test this anywhere, but we do support [removeListener and removeAllListeners](https://github.com/plotly/plotly.js/blob/master/src/lib/events.js#L55-L58) from the npm [`events`](https://nodejs.org/api/events.html#events_emitter_removealllisteners_eventname) module:\r\n\r\n```js\r\nfunction logIt(e) { console.log(e) }\r\n\r\ngd.on('plotly_relayout', logIt)\r\n\r\nPlotly.relayout(gd, {'xaxis.range': [-1,5]})\r\n// here the listener is invoked\r\n> Object {xaxis.range: Array[2]}\r\n> Promise {[[PromiseStatus]]: \"resolved\", [[PromiseValue]]: div#graph.dashboard-plot.js-plotly-plot}\r\n\r\ngd.removeListener('plotly_relayout', logIt)\r\n\r\nPlotly.relayout(gd, {'xaxis.range': [-2,6]})\r\n// now the listener is not invoked\r\n> Promise {[[PromiseStatus]]: \"resolved\", [[PromiseValue]]: div#graph.dashboard-plot.js-plotly-plot}\r\n```",
    "created_at": "2017-02-14T14:09:26Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/107#issuecomment-279716312",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/107",
    "updated_at": "2017-02-14T14:09:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yes, this looks great! 🔒  it down with some tests and we should be ready to roll.\r\n\r\n> It's possible this could be optimized by more carefully relying on flags like docalc etc., but I'm hesitant to get too elaborate\r\n\r\nAgreed 100%",
    "created_at": "2017-02-13T19:27:31Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1304#issuecomment-279495721",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1304",
    "updated_at": "2017-02-13T19:27:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 ",
    "created_at": "2017-02-10T21:44:58Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1369#issuecomment-279074615",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1369",
    "updated_at": "2017-02-10T21:44:58Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Very nice, much cleaner. 💃 ",
    "created_at": "2017-02-10T21:39:51Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1364#issuecomment-279073443",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1364",
    "updated_at": "2017-02-10T21:39:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "🎉  💃 ",
    "created_at": "2017-02-10T21:38:19Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1365#issuecomment-279073093",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1365",
    "updated_at": "2017-02-10T21:38:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yes, definitely a bug, we're clipping fractional msec because we go through native JS dates [here](https://github.com/plotly/plotly.js/blob/master/src/plots/cartesian/set_convert.js#L98) and native dates do not support fractional milliseconds. Should be a fairly easy fix.\r\n\r\n@SemmZemm - we'll fix this, but it's highly recommended to use date strings instead of millisecond numbers. If you do this, it works fine, and as a side benefit your plots will be portable across timezones.",
    "created_at": "2017-02-08T15:43:19Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1363#issuecomment-278364574",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1363",
    "updated_at": "2017-02-08T15:43:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> seems the right answer is `type: 'levels' || 'constraint'`, which I think is straightforward.\r\n\r\nNice, I like it (sorry @etpinard - I didn't see that before posting my comment)",
    "created_at": "2017-02-06T20:15:31Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1239#issuecomment-277800009",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1239",
    "updated_at": "2017-02-06T20:15:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "At the risk of being too opinionated with other peoples' data, I don't think I like the idea of contours + constraints, or multiple constraints, at all, so I think we should try for a mutually exclusive API and if you want both you make multiple traces. In either of those cases, showing all of that together will be too hard to interpret visually; you should just show contours, and perhaps make a custom colorscale that highlights certain boundaries - not sure if we have this documented anywhere, but if you do something like `colorscale: [[0, 'black'], [0.5, 'red'], [0.5, 'blue'], [1, 'white']]` you get a sharp transition from red to blue at the middle of the scale\r\n\r\n![screen shot 2017-02-06 at 3 02 39 pm](https://cloud.githubusercontent.com/assets/2678795/22664150/58d040da-ec7d-11e6-8ed6-346759e30202.png)\r\n",
    "created_at": "2017-02-06T20:04:22Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1239#issuecomment-277796617",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1239",
    "updated_at": "2017-02-06T20:04:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "## Appearance\r\n\r\nI'd focus on the \"permanent hover labels\" case. As you point out, we can already get close to the case where both tip and tail are data-referenced by using traces, so the case of absolute pixel arrow length will give us the most immediate benefit. It's also not entirely clear to me how we'd draw the arrow (ie where to cut it off next to the textbox) in the data-referenced case, particularly when it's pointing mostly into or out of the page. Or the arrowhead for that matter, if it's not supposed to be interpreted as parallel to the plane of the page, do we draw it with a 3D rotation (ie squished in one direction)? Do we draw it as a 3D shape, like a cone?\r\n\r\n## API\r\n\r\nI actually think I prefer the structure of case 3 (a separate annotation array for each subplot), and I see the separation of types as an advantage within the philosophy \"make impossible states impossible to define\" - also this can help reduce the complexity @phxnsharp is rightly concerned by. When we think about all these subplot types, 2D cartesian axes are clearly the outlier in the way you can meaningfully mix and match coordinate references among different axes and the paper.\r\n\r\nTake the 2D cartesian example of `xref: 'x', yref: 'paper'` - this is for the situation where you want to label a certain `x` value - for example an important event in time - and have that label always appear as long as that time is visible, irrespective of how you zoom the `y` axis. In certain other cases it *might* be plausible to have that on another subplot type, but that will be subplot-dependent in very specific ways - For example, label a particular meridian on a geo plot: This really only makes sense for projections with vertical meridians. For other subplot types I guess I can imagine scenarios you might want to label in a similar way, but the API and possibly the display logic will also need to be tailored to the particular subplot to be meaningful.\r\n\r\nRe: case 4, future-proofing - some of that is moot if we go with case 3, but I think it would be worthwhile to take a look at cleaning up the API right now while we're making the first subplot extension. Would simple name changes (compatible with `cleanLayout`) like perhaps changing `ax/axref` to `tailx/tailxref`, make this easier to work with? I see the rationale for separate `tip` and `tail` containers, though I worry that it makes simple things harder, and doesn't fit with annotations that don't *have* an arrow.",
    "created_at": "2017-02-03T15:40:02Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/751#issuecomment-277280113",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/751",
    "updated_at": "2017-02-03T15:40:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I don't think regular contours will work.\r\n\r\nAh, you're right. I thought perhaps we had created the contour fills non-overlapping but that actually wouldn't even work, it would make unpleasant effects at the boundaries due to antialiasing. Next I started thinking you could avoid stitching by transforming z, ie finding zero-crossings of (z-z1) * (z-z2) but even that, I think there would be problems if there's any single cell that goes all the way from <z1 to >z2. So OK, I guess you pretty much have to flip and stitch.\r\n\r\n> I think the MVP for release is labeling the inequalities somewhere, otherwise it's basically impossible to tell which constraint is which.\r\n\r\nI see lots of examples of unlabeled constraints online (and we have the advantage of hover labels while the plot is in the browser), but point taken. Wherever we put these labels it's going to be tough to keep them from colliding - if we label them on the carpet, they'll likely collide with each other and the other stuff being shown. If we label them off the edge, they still might collide with each other, and they'll very likely collide with the a/b labels. Maybe we can try to put them off a side that has no a/b labels, and barring that try to scoot them out until they don't hit anything? Dunno, I'm not sure there will be a solution that works all the time, eventually people will just have to add their own annotations (in x/y space of course!) to get it exactly the way they want it.",
    "created_at": "2017-02-03T01:58:34Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1239#issuecomment-277143995",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1239",
    "updated_at": "2017-02-03T01:58:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> The interesting ones are inequality ranges since it requires merging and flipping the extracted contour paths.\r\n\r\nWould it work to just make it as two regular contours and fiddle with the colors instead (to give out/in/out or in/out/in) rather than stitching together the contours into one? Just a thought, if you're already down that road it may be too late to matter.\r\n\r\nRe:\r\n```\r\n  contours: {\r\n    constraint: {\r\n      operation: '[]',\r\n      value: [1.5, 2.5]\r\n    }\r\n  }\r\n```\r\n\r\nHmm, I see the rationale for this, as just `contours: {operation: '[]', value: [1.5, 2.5]}` is a little strange... but it feels too nested to me. @etpinard thoughts? `contours: {constraint: '[]', value: [1.5, 2.5]}` perhaps? It breaks the correspondence with filters, but only a little bit.\r\n\r\n> `autocontour` will either ignore/not ignore the whole contours section, as it does now.\r\n\r\nSounds fine, as long as specifying a constraint and value is enough to make `autocontour` default to `false`.\r\n\r\n> if a constraint operation is present, it will overwrite the `size` `start` and `end` properties with whatever it needs to get the contours to work correctly.\r\n\r\n👍 \r\n\r\n> Labeling the inequalities may be required. Wondering if there's ever been talk of making + labeling contours along the contour itself or whether should push labels to the boundary.\r\n\r\nThere's been \"that would be nice\" discussion but no action. Lets omit it for the initial PR and put it in the hopper to be implemented for both standard and carpet contours, along with better gradient following for the contours.",
    "created_at": "2017-02-03T00:21:52Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1239#issuecomment-277128189",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1239",
    "updated_at": "2017-02-03T00:21:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 ",
    "created_at": "2017-02-02T21:11:40Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1348#issuecomment-277085200",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1348",
    "updated_at": "2017-02-02T21:11:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 ",
    "created_at": "2017-02-02T21:05:40Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1350#issuecomment-277083563",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1350",
    "updated_at": "2017-02-02T21:05:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Gotta love the 1-line fix with 76 lines of tests! 💃 ",
    "created_at": "2017-02-02T20:57:57Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1349#issuecomment-277081436",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1349",
    "updated_at": "2017-02-02T20:57:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Arbitrary functions are nice for flexibility - but I worry about them for security but also because we already have an enumerated syntax for filters.",
    "created_at": "2017-02-01T16:26:14Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1239#issuecomment-276704549",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1239",
    "updated_at": "2017-02-01T16:26:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Pretty sure #1332 fixes this - but please reopen if this or related problems persist.",
    "created_at": "2017-02-01T15:19:40Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/166#issuecomment-276684738",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/166",
    "updated_at": "2017-02-01T15:19:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Should the carpet axis grid fall on top of the fill? this seems highly desirable (or at the very least should perhaps be configurable since otherwise there's no way to interpret the plot.\r\n\r\nGood call, on top only. I don't see any examples of carpet plots that *aren't* built this way, and if you don't want the grid, presumably you can just turn it off (set its width to zero or something)? No need to make a setting for it until someone explicitly requires it - anyway the only case I can see that this would be different from turning the grid off is if your contour mesh doesn't cover the full a/b domain.\r\n\r\n> What's the best syntax for inequalities instead of the contours pictured above.\r\n\r\nLets see if we can share syntax with [filters](https://github.com/plotly/plotly.js/blob/master/src/transforms/filter.js) - I can imagine, for example, wanting to accept a band, like `operation: '[]'`. Maybe even reject a band, it's harder to think of uses for that but why not. So how about we use the same, `operation` and `value`?\r\n\r\nIn a bunch of other cases we let a setting default to `false` rather than inventing a value to keep the type consistent, so I'd propose doing that with `operation` as well. Makes the internal logic a tiny bit simpler too - `if(contours.operation)`\r\n\r\nFor this purpose there's no difference between `<` and `<=` etc, so we wouldn't need all the `operation` values present in filters, though it might actually be nice to support them all: what if a user adds scatter data to the carpet, using one of these filters, and would like to match it to a constraint using the same filter? And even `'{}'` could be neat - you'd use that to provide an explicit list of contour values to show, rather than being limited to linear spacing.\r\n\r\nLast question: how will the colors be set in these cases? The way we describe colorscales right now is an array of length-2 arrays, each `[fraction, color]` where fraction must rise monotonically from 0 to 1. I suppose we can use `fraction=0` to denote \"false\" (excluded) and `fraction=1` to denote \"true\" (allowed), is that what you had in mind?",
    "created_at": "2017-02-01T03:24:01Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1239#issuecomment-276563058",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1239",
    "updated_at": "2017-02-01T03:24:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 ",
    "created_at": "2017-01-31T03:54:46Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1342#issuecomment-276268787",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1342",
    "updated_at": "2017-01-31T03:54:46Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "#1338 ensures that calls like `Plotly.restyle(gd, {'marker.color[23]': 'red'}, null, [0]) will work. Closing this, but note that @etpinard 's concern about restyling different marker indices in different traces is still valid: you cannot change the color of point 23 in trace 0 and point 22 in trace 1 in a single `restyle` call. At that point, just use two restyle calls.",
    "created_at": "2017-01-30T21:08:25Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/144#issuecomment-276190947",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/144",
    "updated_at": "2017-01-30T21:08:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "It seems a little funny to me to have something as presentational as hover take place during the calc stage. And there may be some changes that affect the hover label but don't recalc - like changing trace color? I *think* `Plots.style` gets called near the end of all of these paths, though that also seems like a little bit of a nonintuitive place to put it. Maybe checking for rehover actually warrants being an explicit step that `Plotly.plot`, `Plotly.restyle`, `Plotly.relayout`, and `Plotly.update` all tack onto their queues?\r\n\r\nAnother thing I worry about is whether `maindrag` always still exists and represents the actual dragger at the end of the update. We're probably not handling its creation and update using regular d3 idioms... until we do, might rehover fail if you do something like change a subplot size in the update - like `Plotly.relayout(gd, {xaxis.domain: [0, 0.5]})`? In a case like that I'd be fine if we just drop the hover label entirely - something like `try { hover(...) } except { unhover(...) }`.\r\n\r\nAnyway the general behavior your demo shows (hover label jumps while animation is smooth) seems totally reasonable.",
    "created_at": "2017-01-30T17:59:56Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1304#issuecomment-276138911",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1304",
    "updated_at": "2017-01-30T17:59:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@rgbkrk thanks! For the second part, if you can post reproducible code (or a codepen) for it we can investigate this as a bug.\r\n\r\nFor the first part - that's right, we actually mutate the input objects a fair amount - adding uids to traces seems to be the first instance but there are quite a few more. We've talked a fair amount (cc @etpinard ) about how this is not great practice but it will take a bunch of work if we decide to undo it.\r\n\r\nAnother approach would be to deep-copy these objects as they're provided to `Plotly.plot/newPlot`. I worry that it would be a lot of overhead for large plots. But it would also break another update method - which I'm not sure we've documented but I know some people have used: modify the objects you passed in and call `Plotly.redraw(graphDiv)`. If users modify the copy of the object attached to the plot div it would still work, but if they hold onto a copy of the object they initially plotted and modify that it would break.\r\n\r\nModifying a plot through the methods `restyle`, `relayout`, `addTraces` and so on also mutates the internal `data` and `layout`. This is probably always going to be the case, particularly due to streaming plots, where you have a large data array and want to frequently add one or two points to the end of it. But I suppose if we were to go the deep-copy route that could be just mutating our internal state, rather than the objects the user provided.\r\n\r\nAnyway, this is definitely a discussion we should have, and all of this is up for grabs in v2.0.\r\n\r\nOne thought I had - that I don't think is a good idea but I'll mention it just for completeness - is that we could check if any input object is frozen (`Object.isFrozen`) and deep copy them if so. That might solve your immediate issue but seems to invite confusion, as people would try freezing, see that we don't mutate the objects, and then expect that to always be the case.",
    "created_at": "2017-01-30T17:00:14Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1339#issuecomment-276120120",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1339",
    "updated_at": "2017-01-30T17:00:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃  Thanks!",
    "created_at": "2017-01-25T15:20:02Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1327#issuecomment-275135753",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1327",
    "updated_at": "2017-01-25T15:20:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice find. In the top example the hover box *does* show up... if you hover over exactly the middle of the bar. The issue is that we're not taking the manual width into account in determining the region you can hover over to see the label. We'll have to be careful with how this plays with grouped bars (which can mean that the hoverable region is quite different from the bar itself) and note that the problem is only in \"compare data\" mode - in \"closest data\" mode it works as expected.",
    "created_at": "2017-01-25T14:39:44Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1317#issuecomment-275124453",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1317",
    "updated_at": "2017-01-25T14:39:44Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "closed by #1265 ",
    "created_at": "2017-01-21T02:15:18Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1208#issuecomment-274225623",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1208",
    "updated_at": "2017-01-21T02:15:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "thanks @bpostlethwaite \r\n\r\n@rreusser I like the concept of caching the event - but I think rather than re-evaluating it on click, I think it needs to happen after any change to the plot. That way if animation actually changes which point you're over, this will be captured by the displayed hover info (and therefore by the click too).\r\n\r\nNote that this issue has existed *forever* (though never bubbled up into an issue...) in the case that something else that wasn't directly initiated by the user changes the plot while the mouse is over it - such as streaming, or restyle/relayout/whatever calls coming from some larger javascript app that the plot is embedded in. Would be great if whatever we do here can solve those cases too.\r\n\r\n- Streaming: eg https://plot.ly/~streaming-demos/4/double-pendulum-simulation/ - mouse over the history, the hovertext will remain even when the history has disappeared from that point.\r\n- JS app: here's one using postMessage: http://codepen.io/plotly/pen/ogpGbL?editors=101 - same deal, and same happens if a plot is inserted directly in the page rather than through postMessage to an iframe.",
    "created_at": "2017-01-20T19:29:11Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1304#issuecomment-274158324",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1304",
    "updated_at": "2017-01-20T19:29:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> markers and lines at the edges get clipped\r\n\r\nThis is the optimal handling for lines, but it would be awesome if we could filter, rather than clip, the markers - ie show the *entire* marker if it's in or on the boundary, and *no marker* if it's outside the boundary (even close enough that it would partly show, though as discussed before perhaps with a 1ppm or similar buffer for FP rounding errors). Don't worry about it if you think it's more than a couple of hours work though.\r\n\r\n> lines don't necessarily follow the axes. ... I think this is best neglected at the moment since scatter traces are not the major focus of carpet plots.\r\n\r\nAgreed. It's not ideal, but it's already a bit of an edge case, lets leave it until someone is bothered by it.",
    "created_at": "2017-01-19T22:49:20Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1239#issuecomment-273923671",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1239",
    "updated_at": "2017-01-19T22:49:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> floating point errors: e.g. a only goes up to 10. Your scatter trace has a point with value 10.000000000000007. Is there precedent for selecting a proper tolerance?\r\n\r\nYes. We do this in different (but always simple) ways around the library, I just tightened up the tolerance for contour range to [1ppm here](https://github.com/plotly/plotly.js/pull/1309/files#diff-adc91b6a2df65ee51ff82a3b36078542R17), it used have a tolerance of 10% of contour spacing which had some effects I decided were strange and unexpected. I'm not sure if it makes sense to try and make them all the same - [which axis ticks to draw](https://github.com/plotly/plotly.js/blob/master/src/plots/cartesian/axes.js#L722), for example, gets a little bigger tolerance, my rationale being that it's related to the number of pixels on a screen, and there could be cases where for example an autorange gets very close to zero but off by more than just a floating point rounding error - my inclination is this case is more like contours actually, since you're explicitly specifying the a/b ranges somewhere, but I don't have a super strong opinion.\r\n\r\n> line traces. You connect point from (5, 5) (inside the valid range) to point (70, 5) (outside the valid range). Presumably it should detect this, break the curve into segments, and break any connections with points that are not valid.\r\n\r\nYes, we should try to figure out how to display the line in the correct direction as it exits the defined range. For cartesian lines we do this by always drawing the segment that exits, no matter how far it goes, but it gets clipped by the viewport so that won't work for you. FWIW I don't think we handle it correctly necessarily if *both* ends of a segment are outside but the line connecting them passes through the viewport, so I wouldn't worry too much about that case.",
    "created_at": "2017-01-18T16:47:24Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1239#issuecomment-273530558",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1239",
    "updated_at": "2017-01-18T16:47:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Do you think I should change this and do all of the computation in screen coordinates?\r\n\r\nThe way you have it is better, and in fact we could consider altering the other splines accordingly, as generally x and y do not share units so they *should* be treated independently.",
    "created_at": "2017-01-18T07:14:52Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1239#issuecomment-273401220",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1239",
    "updated_at": "2017-01-18T07:14:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@rreusser the [test image](https://github.com/plotly/plotly.js/pull/1309/files#diff-34eeda8aa1783dd2381a3c2ea97ad0ca) I added here shows some contour crossings - well beyond the scope here to clean those up, this is just to fix the overall topology, but when we get around to making a better smoothing algorithm, these will be good ones to watch and fix. There are also cases where a contour crosses itself, which are not included here but I can pull some up when we get to it.",
    "created_at": "2017-01-18T07:09:31Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1309#issuecomment-273400493",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1309",
    "updated_at": "2017-01-18T07:09:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Gah, good thing our test cases include yet *another* edge case... more work to do here.",
    "created_at": "2017-01-18T05:31:55Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1309#issuecomment-273387229",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1309",
    "updated_at": "2017-01-18T05:31:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Those tests are fine. No need to do an actual click.\r\n💃 ",
    "created_at": "2017-01-18T00:09:09Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1300#issuecomment-273342029",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1300",
    "updated_at": "2017-01-18T00:09:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 ",
    "created_at": "2017-01-17T21:42:07Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1289#issuecomment-273309129",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1289",
    "updated_at": "2017-01-17T21:42:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "nonblocking comment only. 💃 ",
    "created_at": "2017-01-17T19:26:50Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1261#issuecomment-273272232",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1261",
    "updated_at": "2017-01-17T19:26:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "How hard would it be to test toggling one of these traces on/off, maybe by clicking the legend? Might be overkill given the tests you *do* have...",
    "created_at": "2017-01-17T19:10:07Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1300#issuecomment-273267361",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1300",
    "updated_at": "2017-01-17T19:10:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 ",
    "created_at": "2017-01-17T18:48:55Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1307#issuecomment-273261402",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1307",
    "updated_at": "2017-01-17T18:48:55Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 ",
    "created_at": "2017-01-17T18:01:43Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1305#issuecomment-273248021",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1305",
    "updated_at": "2017-01-17T18:01:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "LGTM 💃 ",
    "created_at": "2017-01-17T17:39:50Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1306#issuecomment-273241455",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1306",
    "updated_at": "2017-01-17T17:39:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice, I thought it would be harder to get that to work! 💃 ",
    "created_at": "2017-01-13T19:23:25Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1299#issuecomment-272524387",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1299",
    "updated_at": "2017-01-13T19:23:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks like a good test of the exact change I made here - thanks! 💃 \r\n\r\nThat said, I'm not sure how realistic this approach really is, or could be made to be.\r\n\r\nFor one, a complete test would need to mock globals before importing Plotly, as some of the errors occur when the code is first loaded rather than when it runs (which, if we had done it in this case, would have necessitated loading a subset of the full bundle).\r\n\r\nAlso, simply setting a property of `window` to `undefined` is not enough, it would need to actually throw an error if you try to access it. Can you `delete` it instead? We could define a getter for it that throws an error, but then I'm not sure if `typeof` would could be made to yield `undefined` in case anyone looks for the property that way...",
    "created_at": "2017-01-13T17:24:23Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1299#issuecomment-272495342",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1299",
    "updated_at": "2017-01-13T17:24:23Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "What's going on here is that during these drags, I do funny things with what the axis thinks its range is. That's because:\r\n- The plot area itself doesn't get redrawn, just rescaled, until the end, so during the interaction it doesn't care what the axis thinks its range is\r\n- But the ticks, grids, and labels DO get completely redrawn at every step, so they need to think the axis has its new range\r\n- Then at the end, we redraw the plot area. In order to make sure it really redraws, and to get the `undoit` value correct, I first put the axis range back to what it was before, and then call `relayout` to set it to the new value. This, presumably, is what is causing it to look like it jumps back to the old value and transitions to the new one.\r\n\r\nSo I suspect if we don't include the intermediate reset to the original range, this problem would go away. Maybe we don't actually care about including these transitions in undo/redo? Maybe we already don't? Maybe it would just work to `relayout` from the final range to the same values with no actual changes, or maybe we need to insert an infinitesimal change just to force a redraw? Or maybe we don't use `relayout` at all for this, and just go straight to the redraw, which could then be done more granularly, esp. with subplots. Just some thoughts.\r\n\r\n@rreusser and I also chatted just now about, before we go for the full fix, whether we can keep the zoom/pan interactions disabled but enable other interactions (notably click).",
    "created_at": "2017-01-11T23:38:40Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1293#issuecomment-272030950",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1293",
    "updated_at": "2017-01-11T23:38:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> > it seems like the lines got a little bit shorter.\r\n>\r\n> I can't detect a difference to be honest, maybe I'm going blind :eyeglasses: \r\n\r\nOk, don't worry about it. Probably just some different antialiasing algorithm when opacity is included.\r\n\r\n> Hopefully something like 849782d is what you had in mind.\r\n\r\nTechnically it does show what I wanted to see - it will fail if the marker and line get `trace.opacity` applied separately rather than to the containing group - though that failure would be rather subtle, especially since you included marker opacity. I was imagining something that will make it blazingly obvious how the opacity was applied, like:\r\n```\r\nPlotly.newPlot(gd,[{\r\n    x: [1, 2, 3],\r\n    y: [1, 2, 3],\r\n    opacity: 0.2,\r\n    line: {width: 10, color: 'red'},\r\n    marker: {size: 20, color: 'blue'}\r\n}], {\r\n    showlegend: true\r\n})\r\n```\r\nAnd the legend matches the plot:\r\n![screen shot 2017-01-11 at 12 27 30 pm](https://cloud.githubusercontent.com/assets/2678795/21859110/686f835e-d7f9-11e6-9907-99fc624b9864.png)\r\nbut if it was done wrong, the legend would look like:\r\n![screen shot 2017-01-11 at 12 22 28 pm](https://cloud.githubusercontent.com/assets/2678795/21858887/b20b9ee0-d7f8-11e6-9d7a-ab05eb877462.png)\r\n",
    "created_at": "2017-01-11T17:29:00Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1204#issuecomment-271934324",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1204",
    "updated_at": "2017-01-11T17:29:00Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@monfera \r\n> When I call Plotly.restyle(gd, {dimensions: [.....], ...}) then newData arriving to defaults.js doesn't receive the full dimensions array; it only receives the first array element.\r\n\r\nPreviously our solution to this has been to wrap the value in another array `Plotly.restyle(gd, {dimensions: [[.....]], ...})`, so that we can support the case of restyling several traces simultaneously with different values (that's why only the first element gets pulled out at the moment). Disambiguating this otherwise seems tricky to me.",
    "created_at": "2017-01-10T18:13:34Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1256#issuecomment-271652875",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1256",
    "updated_at": "2017-01-10T18:13:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> So, in d009798 a new <g> is added grouping the fill, lines and symbols <g> and applying trace.opacity once.\r\n\r\n👍 \r\n\r\nand then a test with lines+markers? Ideally with different line and marker colors?\r\n\r\nDo you know why [28.png changed](https://github.com/plotly/plotly.js/pull/1204/files#diff-c6c980e600bb49bb47c36649957e4925) the way it did? I don't think the new one looks wrong per se, but in addition to the slight transparency to the legend lines, it seems like the lines got a little bit shorter. And in some of the other cases the semitransparent lines got a little thinner. Any idea why?",
    "created_at": "2017-01-09T22:15:07Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1204#issuecomment-271424920",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1204",
    "updated_at": "2017-01-09T22:15:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 ",
    "created_at": "2017-01-09T16:17:20Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1284#issuecomment-271328675",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1284",
    "updated_at": "2017-01-09T16:17:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> would you be ok with this kind of (hacky) solution\r\n\r\nyes - hack away :)",
    "created_at": "2017-01-06T23:18:56Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1285#issuecomment-271036710",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1285",
    "updated_at": "2017-01-06T23:18:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "If we do that, then you can't use `newPlot` in cases where the axis autotype is wrong.\r\n\r\nOne way I can imagine doing this that wouldn't be *too* invasive:\r\n- when we set an autotype, save a private var (like `_autotype: true`) in the `fullLayout` axis.\r\n- in your new loop in `newPlot`, instead do something like:\r\n\r\n```js\r\nvar axList = Plotly.Axes.list(gd);\r\nfor(var i = 0; i < axList.length; i++) {\r\n    var ax = axList[i];\r\n    var axIn = layout[ax._name];\r\n    if(axIn && axIn.type && ax._autotype) axIn.type = '-';\r\n}\r\n```",
    "created_at": "2017-01-06T22:31:43Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1285#issuecomment-271028464",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1285",
    "updated_at": "2017-01-06T22:31:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 ",
    "created_at": "2017-01-05T15:16:18Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1281#issuecomment-270667966",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1281",
    "updated_at": "2017-01-05T15:16:18Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice - super clear tests! 💃 ",
    "created_at": "2017-01-05T01:29:34Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1283#issuecomment-270538718",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1283",
    "updated_at": "2017-01-05T01:29:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@rreusser I think the key is to make sure all this logic as far as possible is in `supplyDefaults`, with the occasional things like `auto*` results calculated in a `calc` step and pointed out in comments and/or PR notes. Then it's just on me and @etpinard to review those parts extra carefully to ensure consistency. I'm not going to pick through every line of your drawing code as long as there are tests that it does what it's supposed to, but the default inheritance I am, for exactly this reason.",
    "created_at": "2017-01-05T00:19:35Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1282#issuecomment-270526200",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1282",
    "updated_at": "2017-01-05T00:19:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "nice. 💃 ",
    "created_at": "2017-01-04T20:43:38Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1260#issuecomment-270481200",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1260",
    "updated_at": "2017-01-04T20:43:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Should categorical bars always have a width of 1?\r\n\r\nI think so - it's misleading otherwise, as otherwise a bar would bleed into neighboring categories, which in principle have no relation to each other.",
    "created_at": "2017-01-04T20:39:21Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1181#issuecomment-270480237",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1181",
    "updated_at": "2017-01-04T20:39:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@monfera \r\n\r\n> may I just update `gd.data` in the callback directly, and emit a `plotly_restyle` event, without ever calling `Plotly.restyle`?\r\n\r\nIt's important for extensibility that the `Plotly.restyle` (-> `Plotly.update`, not quite sure the status of that) calls work as expected. So I suppose it would be fine to not use it during regular interactions if there's a perf benefit from skirting it, but when a user *does* call it, it needs to work. At some point we will rearchitect that whole system so the trace modules can control what happens in a `restyle`... and some modules do already short-circuit the regular machinery there (eg annotations, though that's in `relayout`).\r\n\r\n> passing on an array to `'dimensions[' + i + '].constraintrange'` didn't work\r\n\r\n> Then I tried the object form of `Plotly.restyle`, but for some reason, it worked once, but then `gd.data` became deteriorated\r\n\r\nNot quite sure what's going on here, but one thing to be aware of is that restyling with an array argument you need to wrap it in another (length-1) array to distinguish from the case of restyling multiple traces with different values.",
    "created_at": "2016-12-28T21:06:49Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1256#issuecomment-269540906",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1256",
    "updated_at": "2016-12-28T21:06:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Added `clicktoshow` #1266 to this PR as it's all somewhat coupled.\r\n\r\n@etpinard @bpostlethwaite ready for review.",
    "created_at": "2016-12-24T07:16:46Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1265#issuecomment-269072912",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1265",
    "updated_at": "2016-12-24T07:17:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Hmm. Something is off when panning the axes\r\n\r\nAh good catch - part of the incorrect behavior was already there (while panning, if you start from autoranged, annotations don't get deleted when they go off plot) but the console errors are new. I'll fix both pieces.",
    "created_at": "2016-12-22T17:08:50Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1265#issuecomment-268844809",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1265",
    "updated_at": "2016-12-22T17:08:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "closes #1208 ",
    "created_at": "2016-12-22T04:22:28Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1265#issuecomment-268715370",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1265",
    "updated_at": "2016-12-22T04:22:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> So, I would be ok with having (slightly) different behavior for showarrow true and false annotations.\r\n\r\nGreat, I'll go with it, thanks!\r\n\r\n> Adding an option to either define the anchor before or after rotating the text might end up make things too confusing (and hard to implement).\r\n\r\nRight - there would be uses for it, but\r\n- using the existing mode with `showarrow` is too prone to breaking, doesn't offer any new functionality that you would actually want.\r\n- the new behavior without `showarrow` could be handy, but you could get it (with some extra flexibility) by turning `showarrow` on and making the arrow invisible",
    "created_at": "2016-12-20T17:19:03Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1208#issuecomment-268302273",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1208",
    "updated_at": "2016-12-20T17:19:03Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Trying to work out how this plays with rotated text: I don't like it, but I think we need very different behaviors with and without arrows.\r\n\r\nWithout an arrow, when we specify an anchor point as one of the edges or corners (which we already support so we can't really change this), we do the rotation and THEN set the anchor point based on the new bounding box. So for example if you say the anchor is left middle and the position is (0,0), no matter what rotation you specify the text will always be to the right of x=0 and centered on y=0.\r\n\r\nBut this doesn't seem to make sense when there's an arrow, and its tail is attached to the text box. Then it seems to me like we should define the anchor point BEFORE rotating the text. So if you specify left middle, the tail will always be attached next to the beginning of the words, even if you rotate it 180 degrees so this is actually the right side.\r\n\r\nIf we only ever rotated by multiples of 90 degrees we could keep the no-arrow behavior with arrows... but if you rotate by some other angle that way, the arrow tail will not in general be attached to the text at all, it'll be floating out in space.\r\n\r\n@etpinard @cldougl does that make sense? Any thoughts?",
    "created_at": "2016-12-20T16:38:10Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1208#issuecomment-268291536",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1208",
    "updated_at": "2016-12-20T16:38:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "LGTM. Great tests! nonblocking [comment](https://github.com/plotly/plotly.js/pull/1260#discussion_r93086039), 💃 ",
    "created_at": "2016-12-19T18:20:25Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1260#issuecomment-268037896",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1260",
    "updated_at": "2016-12-19T18:20:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks reasonable to me. Sometime we need to have a discussion about what an explicitly *designed* pipeline should look like in the context of updates; but until then seems like this kind of change (accumulating as many tests along the way as possible) is about the only way.",
    "created_at": "2016-12-19T17:09:28Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1257#issuecomment-268020445",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1257",
    "updated_at": "2016-12-19T17:09:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> What do you mean by the use of the zoom out cursor? That this cursor gets activated if the filter is active and the user hovers over the non-filtered part, on which a click removes the filter?\r\n\r\nyes, that's what I had in mind. But...\r\n\r\n> Btw. this part serves not only a reset function but also a 'start new selection' interaction.\r\n\r\nAh, I hadn't discovered that at all, but it makes sense. That complicates it a little though... might be even *harder* to discover that you can start a new selection this way if the cursor becomes \"zoom-out\". Alright, so perhaps lets leave this cursor as it is at least for now. I suppose if we do add a reset button to each axis we might get rid of reset on an off-selection click... though there's something nice about having it all together as you have now if we can make it intuitive enough.\r\n\r\n> I'll look into the cursor changes you've suggested.\r\n\r\nCool, I think the other ones I suggested still stand.\r\n\r\n> Also, there hasn't been work toward unifying with Cartesian axes, so a bunch of things may become closer in API and behavior as well.\r\n\r\nYour call to what extent to do this - as this comes together it's seeming to me that the interactions and drawing are sufficiently different that you shouldn't try to reuse cartesian for these parts, just mimic its feel to the extent you can. But there are likely still benefits to using the cartesian *code and attributes* for tick selection & formatting and using cartesian *attributes* for some other style aspects.",
    "created_at": "2016-12-16T20:49:05Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1256#issuecomment-267692469",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1256",
    "updated_at": "2016-12-16T20:49:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@monfera this is looking really slick! Just a comment about the interactions: I didn't find resetting a single constraint (click in the unselected portion of its axis) to be particularly discoverable. I notice there's a \"zoom out\" cursor that most browsers support, can we use that when it's available? And perhaps also reset that axis when you double-click on the selection bar, akin to how our cartesian interaction works?\r\n\r\nAlso for parity with cartesian, can we make the cursor on the bottom `s-resize`, on the top `n-resize`, and in the middle `ns-resize`? And `ew-resize` for reordering axes?",
    "created_at": "2016-12-16T19:37:51Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1256#issuecomment-267678210",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1256",
    "updated_at": "2016-12-16T19:37:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "added cleanData step to turn `calendar` into `valuecalendar` for backward compatibility",
    "created_at": "2016-12-14T19:33:05Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1253#issuecomment-267132569",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1253",
    "updated_at": "2016-12-14T19:33:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice note! 💃 ",
    "created_at": "2016-12-12T03:04:26Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1246#issuecomment-266333431",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1246",
    "updated_at": "2016-12-12T03:04:26Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "When you say \"the true contour\" are you referring to the exact path the contour takes within one grid cell being different if you draw it in a,b space and map back to x,y vs if you drew it in x,y space in the first place? I'm actually not sure if there *is* an objectively true contour in that sense... in fact if you've chosen a really good carpet transformation, the contours you draw in x,y space might even be more meaningful at sub-cell resolution than in a,b space because the variation of physically relevant properties might be more homogeneous than in a,b space (where they could be stretched along a diagonal for example).\r\n\r\nAlso what do you mean by \"high-resolution grid\" - isn't the grid just whatever data we get from the user?",
    "created_at": "2016-12-09T05:58:49Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1239#issuecomment-265940255",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1239",
    "updated_at": "2016-12-09T05:58:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "closed in #1220 ",
    "created_at": "2016-12-09T01:53:27Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/196#issuecomment-265911302",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/196",
    "updated_at": "2016-12-09T01:53:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "easy peasy :) If we add localization support later we can bring the rest in as another component.\r\n💃  ",
    "created_at": "2016-12-07T20:38:04Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1237#issuecomment-265566230",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1237",
    "updated_at": "2016-12-07T20:38:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard this looks ready to me! Remaining comments are nonblocking from my perspective 💃  ",
    "created_at": "2016-12-07T18:50:04Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1230#issuecomment-265536125",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1230",
    "updated_at": "2016-12-07T18:50:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Down the road (but hopefully soon), we should require world-calendars in a component module.\r\n\r\nI think this would be easy, actually... [here](https://github.com/plotly/plotly.js/blob/86b31eaff0ce6243a7f445e27d1bbb91d7f88ace/src/lib/dates.js#L40) is the only place we directly call out to `world-calendars` (though we probably need another in [`isWorldCalendar`](https://github.com/plotly/plotly.js/blob/86b31eaff0ce6243a7f445e27d1bbb91d7f88ace/src/lib/dates.js#L44)) I just don't know the right pattern - @etpinard if you've got a few free cycles would you want to turn this into a pluggable component?",
    "created_at": "2016-12-05T18:41:28Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1220#issuecomment-264938486",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1220",
    "updated_at": "2016-12-05T18:41:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Relatedly, controlling the shape of this line - along the lines of scatter `line.shape`, I'd like to have the options `'hv'` (horizontal line coming out of the note, making a right angle and continuing vertically to the arrowhead), `'vh'`, `'hvh'`, `'vhv'`, and possibly some variants of spline. spline itself doesn't mean anything with just two points, but we should invent modes you might call `'hspline'` and `'vspline'`, ie the start and end of the line are horizontal (or vertical) and they're connected with a cubic spline. Those could be nice additions to `line.shape` for scatter as well, then we could remake the sources tab from shareplot as a regular plotly plot!",
    "created_at": "2016-11-30T16:30:59Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1208#issuecomment-263921307",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1208",
    "updated_at": "2016-11-30T16:30:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "closed by #1194 ",
    "created_at": "2016-11-25T23:24:02Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/811#issuecomment-263031895",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/811",
    "updated_at": "2016-11-25T23:24:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "ugh, this didn't like separately merging master vs `date-iso8601` - I'll just reopen this PR after we merge that one.",
    "created_at": "2016-11-23T21:57:36Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1172#issuecomment-262639842",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1172",
    "updated_at": "2016-11-23T21:57:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@chriddyp Re: line mode for histograms - yes, I think it's a good idea, but it would be good to get real line/area trace stacking working first. Then it would be easy to plumb this into a rolling average transform if someone wants that. Agreed that it would be misleading to do this on bars.\r\n\r\n@etpinard re: cumulative histograms - I haven't looked at the attributes you've proposed yet, but we should be careful about our presentation.\r\n\r\nThe way you've done it in the gif up top - each bar is at the same location as its PDF analog, with height equal to its own height plus the sum of all bars before it - is very common (it's used in the [wikipedia article](https://en.wikipedia.org/wiki/Histogram#Cumulative_histogram) you linked), but it's also arguably wrong. Visually you've shifted the distribution half a bar to the left. Imagine thinking of the bars as a continuous function (ie constant over the domain of each bar) and integrating that function, which is really what the CDF is supposed to mean. You'd actually get a piecewise linear result where the value at the *right edge* of each bar is the sum of that bar and all bars before it.\r\n\r\nI suppose if you really want to keep bars, you could imagine each cumulative bar being the sum of all the bars before it plus *half* of the current bar... that would be more \"correct\" but that seems like it would just confuse people. Or you can show *both* the [previous total and the current bin](https://www.r-bloggers.com/modeling-incomes-and-inequalities/):\r\n![prev and current](https://cloud.githubusercontent.com/assets/2678795/20574585/367e2e78-b183-11e6-8532-8c74862ac95e.png)\r\nThat's both visually correct and (to me anyway) intuitive... but it's a bit complicated.\r\n\r\nIn short though, I really don't like bars for CDFs, however common they are. Take that with a grain of salt though, I haven't used them much for real data analysis myself, would love to hear the perspective of someone who has.\r\n\r\nThere's something similar to be said about the plot @chriddyp posted (which has now disappeared? But I think I remember what it looked like) although ironically with a partially opposite solution. It looks like in that plot you're showing the *exact* CDF by adding a data point for each individual sample? In that case linearly interpolating between points is incorrect, the CDF does not linearly increase from one sample to the next, it jumps up exactly at each sample - because it's really an integral of delta functions, one for each sample. So in plotly.js language, you should use `line.shape='hv'` if the vertical position of each point is equal to the number (or fraction) of samples to the left of and including that one:\r\n![hv cdf](https://cloud.githubusercontent.com/assets/2678795/20574711/eb8fb480-b183-11e6-9930-4ba558d6ecc9.gif)\r\n\r\nAlternatively (and arguably more correctly in terms of the visual significance of the point markers, but confusing for the same reasons as above) you could set the vertical position of each point to the number of samples to the left of this one plus *half* a sample for the current one, and connect points using `line.shape='vhv'`. Nobody seems to do this though.\r\n\r\nSome people also normalize to `N+1` points and connect with straight lines, it's called an ogive plot - see http://www.physics.csbsju.edu/stats/display.distribution.html - this looks a bit weird though and I don't know what the theoretical justification for it is. I guess an attempt to project from the sample distribution to the population distribution?\r\n![ogive](https://cloud.githubusercontent.com/assets/2678795/20574355/08984b66-b182-11e6-82dd-1e9ea91bc840.gif)\r\n\r\n\r\nThis kind of situation is, incidentally, exactly what's hard about doing real stacked area charts correctly... you'd be trying to stack y values of functions that are defined at uneven x values... so for the second trace, do you make steps at the x values of the first trace, even though the second trace doesn't have a data point there?",
    "created_at": "2016-11-23T18:53:33Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1189#issuecomment-262601221",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1189",
    "updated_at": "2016-11-23T18:53:33Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Man, this code has a ridiculous number of edge cases, but all the ones I can think of are tested now (including the `date_axis` hovertext you pointed out). Any more?",
    "created_at": "2016-11-23T02:17:06Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1191#issuecomment-262420736",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1191",
    "updated_at": "2016-11-23T02:17:06Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I'd say 💃  to this one, and close #1184 ",
    "created_at": "2016-11-22T05:33:56Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1185#issuecomment-262151938",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1185",
    "updated_at": "2016-11-22T05:33:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "See TODOs added to `histogram(2d)?_test.js` in #1186 ",
    "created_at": "2016-11-22T05:07:40Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1151#issuecomment-262148920",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1151",
    "updated_at": "2016-11-22T05:07:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Since we're reverting this to buy us some time... lets do this right. Can we do:\r\n`var JUNK = /(^['\"%,$#\\s]|,|['\"%,$#\\s]/g`\r\nie strip only commas in the middle, and all these other characters on the ends?",
    "created_at": "2016-11-21T22:44:20Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1184#issuecomment-262091404",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1184",
    "updated_at": "2016-11-21T22:44:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "that's a funny one, I think it's two bugs:\r\n- the categories are being read from the original trace, pre-filtering, which doesn't seem like what we want\r\n- then when we make bars only at `a` and `f` they each get a width of 5 categories - also probably not what we want, category axis bars should always have width 1 (one category), right? You can also trigger this second one with two overlaid traces:\r\n```\r\nPlotly.newPlot(gd,[\r\n        {x:['a','b','c','d','e'], y:[1,2,3,4,5], type: 'bar'},\r\n        {x:['a','e'], y:[4,2], type:'bar'}\r\n    ],\r\n    {barmode:'overlay'})\r\n```\r\n![screen shot 2016-11-21 at 4 11 41 pm](https://cloud.githubusercontent.com/assets/2678795/20500855/4334e85c-b005-11e6-9aaf-1e1e1854b20f.png)\r\n",
    "created_at": "2016-11-21T21:16:15Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1181#issuecomment-262069568",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1181",
    "updated_at": "2016-11-21T21:16:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "the \"09h\" type format has been removed from the auto-formatting routine as part of #1078 - this also changes some other subtle bits of the formatting, like in cases where the date got pushed to a second line, now it shows up on every tick where the date changes, rather than just the first tick. This doesn't give the full flexibility folks had discussed above, but it does address the most common reason you WANTED that flexibility. Going to close this for now, but feel free to reopen or open a new issue with a specific use case that would benefit from more flexibility. Thanks for the discussion!\n",
    "created_at": "2016-11-19T03:42:20Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/99#issuecomment-261690693",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/99",
    "updated_at": "2016-11-19T03:42:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I like it. One related thing people may want to do is set missing bricks to a certain _data value_ - often 0 but I can imagine cases where you'd want to use other values. That way it automatically takes that value from the colorscale.\n\nThese two effects are a bit different - which you can see most clearly when you think about smoothed heatmaps or contour maps (which should also get this feature!) setting nan to a specific _color_ should not attempt to interpolate it, or its color, to its neighbor, but setting nan to a specific _value_ **should** interpolate. Also setting a nan value could extend the auto range of the color scale, depending on whether there's a nan in the data or not.\n\nSo we could attempt to specify these by the same attribute, which has the advantage that it's impossible for folks to specify both, and one less attribute to learn - something like `nanfill=0` vs `nanfill='red'`... or to better distinguish their behaviors we could keep them separate, handle `nancolor` as you have it and add another like `nanvalue`, then we need to decide which takes precedence. I don't have a strong preference between these options, anyone?\n",
    "created_at": "2016-11-19T02:05:54Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1170#issuecomment-261685708",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1170",
    "updated_at": "2016-11-19T02:05:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Beautiful. Nice cleanup of the tests. 💃 \n",
    "created_at": "2016-11-17T17:12:58Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1162#issuecomment-261307804",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1162",
    "updated_at": "2016-11-17T17:12:58Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "A few notes on how I'm going about this.\n\n**One decision I'd like some feedback on:** at least for now (unless and until we build in proper timezone support), I'm leaning toward simply throwing away timezone information. That means, however, that if you have a single dataset containing dates recorded at different timezones, they will become shifted relative to each other. I think this will generally be more useful than for example shifting everything to UTC, and making some sort of smart decision about harmonizing timezones across a whole dataset is outside the scope I can tackle right now. Is this going to be a major constraint for anyone?\n\nThe formats I'm intending to support are:\n- The exact syntax described in https://tools.ietf.org/html/rfc3339#section-5.6 ( 🎩 @john-soklaski ) including allowing for uppercase or lowercase T and Z, and (+/-)HH:MM timezones\n- A few extensions to it, like (+/-)HHMM, and accepting the same time variants that we take for regular Plotly format dates, including fractional seconds\n- But none of the extra formats described in https://en.wikipedia.org/wiki/ISO_8601 such as without the separators, or using ordinal days or week numbers\n\nAny comments before I write this?\n",
    "created_at": "2016-11-16T21:50:29Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1003#issuecomment-261083463",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1003",
    "updated_at": "2016-11-16T21:50:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Haha thanks. Do you want to test this behavior? Maybe add an annotation to [mock 16](https://github.com/plotly/plotly.js/blob/master/test/image/baselines/16.png)?\n",
    "created_at": "2016-11-16T17:56:06Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1155#issuecomment-261020679",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1155",
    "updated_at": "2016-11-16T17:56:06Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@spencerlyon2 \n\n> Does this PR by chance recognize `\"2013-10-04T22:23:00\"` as  date time?\n\nNo, that's not in this PR, but it's on my list to add soon #1003 \n",
    "created_at": "2016-11-14T16:49:28Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1078#issuecomment-260390762",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1078",
    "updated_at": "2016-11-14T16:49:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 \n",
    "created_at": "2016-11-10T23:38:52Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1118#issuecomment-259840454",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1118",
    "updated_at": "2016-11-10T23:38:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice. 💃 \n",
    "created_at": "2016-11-10T23:18:46Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1112#issuecomment-259836986",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1112",
    "updated_at": "2016-11-10T23:18:46Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "(after I fix the jasmine test I broke that is)\n",
    "created_at": "2016-11-09T19:29:38Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1078#issuecomment-259503423",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1078",
    "updated_at": "2016-11-09T19:29:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard @rreusser this is ready to go from my perspective (along with https://github.com/plotly/streambed/pull/8434 for W2 compatibility) - any more comments esp. re: gl and animations?\n",
    "created_at": "2016-11-09T19:27:01Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1078#issuecomment-259502741",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1078",
    "updated_at": "2016-11-09T19:27:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I'd vote for the opposite. Rename all axis ids `'xaxis'`, `'xaxis2'`, `'yaxis2'`, ...\n\nThat could work. It gives us the same simplification, clears up the ambiguity, and is a smaller change for users to adapt to. Means we have to do something more clever to manage backward compatibility but maybe that's unavoidable.\n\n> I'd vote for not having \"names\" that require parsing at all - put them as indexed elements in a list.\n\nLike `layout.xaxes=[{...}, {...}, {...}]`? two things bother me with that idea:\n- If you delete an axis, all your references to later axes need to change\n- It violates the idea of \"simple things should be simple\" - almost all plots have only one x axis, and making everyone put that axis into a list just because some other people will make multiple axes is annoying. And then scenes, ternaries, geos that can only have one axis of each type, either the structure is different or they also have that extra list cruft.\n",
    "created_at": "2016-11-04T23:05:48Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/420#issuecomment-258568834",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/420",
    "updated_at": "2016-11-04T23:05:48Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "- rename all the axis objects `'x', 'x2', 'y2'` etc. instead of `'xaxis', 'xaxis2', 'yaxis2'` so you can go straight from `xref`/`yref` to the axis object and we can get rid of `Axes.id2name` and `name2id`\n\nIn principle this allows us to also change log axis ranges to data values backward-compatibly, since you can't make a log axis without explicitly specifying the container. The only downside I see to this is attribute names are a bit overloaded: `trace.x`, `annotation.x`, `scene.domain.x` etc are data values or arrays of data values, but `layout.x` and `scene.x` are axis objects. Doesn't seem too confusing to me but it should be discussed.\n",
    "created_at": "2016-11-04T19:25:24Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/420#issuecomment-258525477",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/420",
    "updated_at": "2016-11-04T19:25:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Really nice generalization of the `visible` attribute! 💃 from me after those couple of comments on the tests.\n",
    "created_at": "2016-11-04T16:13:21Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1110#issuecomment-258475657",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1110",
    "updated_at": "2016-11-04T16:13:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 nice consolidation!\n",
    "created_at": "2016-10-27T17:08:42Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1090#issuecomment-256708342",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1090",
    "updated_at": "2016-10-27T17:08:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard I think I've addressed your comments. I'll ping you tomorrow about `npm link`.\n",
    "created_at": "2016-10-26T03:40:21Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1078#issuecomment-256241783",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1078",
    "updated_at": "2016-10-26T03:40:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "- Specify log axes with data values, not linearized values. ie range `[0.1, 100]` rather than `[-1, 2]`. For dates we're doing this in #1078 but I can't see a backward-compatible way to do it for logs. This also applies to annotation and image positions (but shapes already get it right!) and `tick0`. Perhaps in 2.0 we also remove the compatibility transform that #1078 introduces for dates that supports the old range-as-epoch-milliseconds format.\n- Along the lines of \"Drop 'add' and 'remove' relayout values\" above, drop the built-in coordinate transforms when an annotation or shape has its axis references changed. This is really just for GUI editing so should reside in streambed.\n",
    "created_at": "2016-10-26T03:33:15Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/420#issuecomment-256241040",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/420",
    "updated_at": "2016-10-26T03:33:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I would prefer making this PR a stepping-stone for non-western set for `1.20.0` - if you don't mind of course.\n\nFine by me. 20 can be the big date overhaul.\n",
    "created_at": "2016-10-26T00:21:02Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1078#issuecomment-256216340",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1078",
    "updated_at": "2016-10-26T00:21:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💃 \n",
    "created_at": "2016-10-25T20:30:41Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1066#issuecomment-256166427",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1066",
    "updated_at": "2016-10-25T20:30:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "`coordinate` is an interesting idea... though you could say categories are coordinates too so it doesn't specify much.  but yeah, dates and numbers are generally not interchangeable so we need to manage them separately. \n\nI wonder if there would be value in valType unions, so you could specify number or date string, for example. \n",
    "created_at": "2016-10-25T13:56:07Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1075#issuecomment-256041597",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1075",
    "updated_at": "2016-10-25T13:56:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "In general if there's no concept of zero on an axis then bar charts don't make sense. Though interestingly I guess with `base` we could relax that requirement and say distance must be meaningful (and the size data would be expressed as such a distance) but you don't need a zero. Date axes match that description, and the corresponding chart is a Gantt chart (cc @jackparmer ) so if we want to support that I guess base would need to be 'any' but size would still be a number (milliseconds)\n",
    "created_at": "2016-10-25T12:44:05Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1075#issuecomment-256024044",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1075",
    "updated_at": "2016-10-25T12:44:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💯  💃 \n",
    "created_at": "2016-10-25T04:49:19Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1077#issuecomment-255935992",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1077",
    "updated_at": "2016-10-25T04:49:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Per our slack chat on Friday (edited bcs you convinced me it's per x-axis, not per subplot):\n\n> what would happen if you for example display tickers for two stocks traded on opposite sides of the world, and to indicate that you offset one of them by 10 hours (or whatever) from the other.\n> \n> you wouldn’t want the minimum difference to drop to 10 hours, it should stay at 24 hours\n> \n> I feel like within each x axis you should calculate the minimum difference for each trace (ignoring traces with only one x value), then take the smallest of all of those as the winner for all traces on that x axis.\n\nSo, to also avoid looping over _all_ traces during calc for _each_ trace, I think we need to do something like:\n- If this is calc for the _first_ OHLC trace on this x axis, do the calculation and stash the result as a private attr in fullData for _all_ the traces.\n- If it's not the first one, just return the previously stashed result\n- The calculation for a given trace should be the same as it was before (though I guess `Lib.distinctVals` is better because it sorts them... but we shouldn't concatenate into a single array)\n- Then take the smallest nonzero difference for any trace, and that becomes the value for all of them.\n- Can you make a test that works like my example, with a few hours offset between the traces? Jasmine should be fine, wouldn't need to be an image test.\n",
    "created_at": "2016-10-24T14:51:09Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1066#issuecomment-255762978",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1066",
    "updated_at": "2016-10-24T14:51:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "It's true that this is _in general_ ambiguous, though there are two reasons I think we should allow it:\n- _In context_ it's often clear - for example in the waterfall example above, the depreciation, O&M, and tax bars would generally be negative but using the preceding subtotal as the base, and having that subtotal right next to it, it's clear which end of the bar is its start and which its end.\n- Our hover text should still show up at the end no matter what. Doesn't help viewers of the static plot, but that will disambiguate it for online viewers.\n",
    "created_at": "2016-10-19T12:34:56Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/80#issuecomment-254799097",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/80",
    "updated_at": "2016-10-19T12:34:56Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ah interesting... true, every other truncation of the full date format is common except this one. I'll make sure we keep minutes unless hours are going away too. \n",
    "created_at": "2016-10-18T21:59:16Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/911#issuecomment-254651923",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/911",
    "updated_at": "2016-10-18T21:59:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I'm pretty sure this is the daylight saving time bug, will go away when we switch to UTC internally, which is part 2 of my cleanup plan, once nothing user-facing involves epoch milliseconds. Thanks for pointing me to this @etpinard\n",
    "created_at": "2016-10-18T21:52:40Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/811#issuecomment-254650464",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/811",
    "updated_at": "2016-10-18T21:52:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Huge improvement - love it!\n\nCan we set `showcountries: false` by default when the scope is just the USA? This would extend to any other single-country scope we might add in the future too...\n",
    "created_at": "2016-10-14T22:21:50Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/899#issuecomment-253933872",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/899",
    "updated_at": "2016-10-14T22:21:50Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> also the `Date` type?\n\nYes. Pretty sure the way I'm doing it (by hooking into the same machinery we use to convert date data) will make that work automatically for cartesian, but in any event I'll make sure it works.\n",
    "created_at": "2016-10-13T19:57:25Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1021#issuecomment-253621535",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1021",
    "updated_at": "2016-10-13T19:57:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Note to self: make it work without the `valueOf()` calls\n\nI'm actually working _right now_ on (for cartesian axes) having ranges (and a few other things that currently work like ranges) use date strings rather than milliseconds. You may want to hold off on that one until mine is done so we don't duplicate efforts.\n",
    "created_at": "2016-10-13T19:33:00Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1021#issuecomment-253614973",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1021",
    "updated_at": "2016-10-13T19:33:00Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I see - thanks for clarifying. In fact the same thing happens with `x:[1, 1, 2]`. Yes, it does seem like all modes should work the same way in this regard, though I'm not sure if adding them up is really the right way, vs. just taking the first, or the biggest... is there a real use case for this or is it a mistake? I guess perhaps if it _is_ a mistake, totaling the values may give the user the best clue as to what is going on.\n\nFYI what's _actually_ happening in group mode currently is it's showing _all_ the bars. Try `x:[1, 1, 2], y: [20, -14, -23]` for example. And changing _that_ to stack mode gives really screwy results depending on the relative signs of the coincident bars: bars of the same sign as the first add to it, but bars of the opposite sign get discarded. Relative mode at least seems self-consistent, both the positive and negative totals get shown.\n",
    "created_at": "2016-10-12T21:40:53Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/475#issuecomment-253348000",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/475",
    "updated_at": "2016-10-12T21:40:53Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard this looks great! Just a question about the default tickwidth - feels to me like we should be using more of the space we have available, both to guide the eye better to whether one day's close is above or below the next day's open, and so the ticks are more visible when they're really closely spaced.\n\nAside from that, 💃 from me!\n",
    "created_at": "2016-10-12T19:47:25Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/1020#issuecomment-253318147",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1020",
    "updated_at": "2016-10-12T19:47:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@n-riesco that's a good question. This behavior comes from [Lib.distinctVals](https://github.com/plotly/plotly.js/blob/master/src/lib/search.js#L63-L64):\n\n```\nfind distinct values in an array, lumping together ones that appear to\njust be off by a rounding error\n```\n\nWhere the criterion for a rounding error is a difference less than `(max - min) / ((length-1) * 10000)`\n\nSo 1 and 2 in your example are right over the edge of that criterion. It's definitely an unintuitive result, though the plot is pretty darn useless just on the other side of that boundary (put in 1e4 for example), with a bunch of sub-pixel bars. But I guess when you zoom in it could become useful. We could change that cutoff to be smarter - tighter and/or with an explicit lower bound so integers never get marked the same? Mostly this cutoff is meant to match between different traces, in case their x values have slight rounding differences due to different calculation methods or something.\n",
    "created_at": "2016-10-12T17:07:51Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/475#issuecomment-253275553",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/475",
    "updated_at": "2016-10-12T17:07:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@n-riesco I agree with @etpinard on all points except\n\n> > on stack/relative mode, if width is set, what would be the alignment? left-aligned?\n> \n> I'd vote for left-aligned. This is probably what most users would expect.\n\nMost or all of the rest of the user-facing bar positioning is centered, so I'd keep it that way.\n",
    "created_at": "2016-10-06T16:03:57Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/80#issuecomment-252008839",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/80",
    "updated_at": "2016-10-06T16:03:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@n-riesco I think it could be useful to treat the different aspects separately. So with `barmode='group'`, normally `base` is 0 and `width` and `offset` are set automatically per trace in the group. But if you only provide an explicit `base`, you could still get the automatic `width` and `offset`, which could be useful for a multiple waterfall plot, where you want to show components adding and subtracting vertically to arrive at a total, but still grouped horizontally. For example: http://wiki.analytica.com/images/b/b3/Waterfall_chart_example.png\n![waterfall_chart_example](https://cloud.githubusercontent.com/assets/2678795/19139836/de41637c-8b55-11e6-8df9-599d2fdaafb0.png)\n\nIn `barmode='stack'` the case is not so clear to me... why would you want to tweak `width` or `offset` while retaining automatic `base` from the stacking? Maybe you want skinny bars stacked on top of fat bars? Dunno, but I don't see a reason to forbid it. Same in `'group'` mode if you want to use the `offset` machinery but explicitly override `width`... would be weird but I think it's clear what the intent of the user is in this case.\n\nBUT it does seem like if you override the key attribute that's aggregated per trace (`base` in `'stack'` mode, `offset` in `'group'` mode) then you're right, that trace should get removed from the aggregation and treated as `'overlay'` so the other traces stack or group without it.\n",
    "created_at": "2016-10-06T04:27:15Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/80#issuecomment-251864209",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/80",
    "updated_at": "2016-10-06T04:27:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "From an off-line chat with @etpinard - `calcTransform` transforms always happen after `transform` (`supplyDefaults`) transforms, even if you put the `calc` ones first in the transform list. Within our current structure there isn't really any way around this. The situation will get even more complicated if a transform has both methods. This doesn't mean we should change anything about what we're building here, but we need to make it crystal clear to transform users what this means. Also note that it's irrelevant for transforms that commute (which groupBy and filter do)\n\nTo be concrete: lets imagine a transform `truncate(N)` that just passes on the first `N` points. This could be implemented either way (and both would have limitations) but let's imagine we make it with `calcTransform`. Conceptually, `[truncate(100), groupBy]` should result in grouping just the first 100 points of the trace into separate traces (each with <100 points) but it will actually result in the first 100 points of each group, which is what we expect from `[groupBy, truncate(100)]`, and there would be no way to get the former behavior without making a new implementation of `truncate` using `transform` only. However, if you combine `truncate` and `filter`, the result _will_ respect the order you give them.\n- [x] Make this limitation crystal clear to users (through appropriate docs / comments)\n",
    "created_at": "2016-09-30T23:13:20Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/978#issuecomment-250873016",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/978",
    "updated_at": "2016-10-06T01:06:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thx :dancer:\n",
    "created_at": "2016-10-05T23:32:59Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/978#issuecomment-251829404",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/978",
    "updated_at": "2016-10-05T23:32:59Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard I see. Right, people don't have a lot to go on yet... but that may not stop people from trying! How about just a warning here https://github.com/plotly/plotly.js/pull/978/files#diff-6d186b954a58d5bb740f73d84fe39073R34 - where anyone who writes a transform will have to list it - that this feature is still alpha.\n",
    "created_at": "2016-10-05T21:14:07Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/978#issuecomment-251801510",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/978",
    "updated_at": "2016-10-05T21:14:07Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Yeah, `Plotly.restyle` and `Plotly.relayout` are monsters in serious need of refactoring. Maybe to start down that road, can we extract the argument-normalizing functionality into a separate module, that you could reuse outside of those functions to ensure consistency?\n",
    "created_at": "2016-10-04T16:42:27Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1002#issuecomment-251443451",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1002",
    "updated_at": "2016-10-04T16:42:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> As part of this, I'd like to factor out the `method` and `args` logic into a general set of helpers, so a routine that builds this table of bindings (even if it's a bit complicated) might not be a bad idea.\n\nSounds great! Complicated is fine ( ❤️ 🐅 ! ) if it makes the resulting experience more robust and simpler, which this seems like it will do. \n",
    "created_at": "2016-10-04T15:59:34Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1002#issuecomment-251431947",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1002",
    "updated_at": "2016-10-04T15:59:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Don't we already have that information in the definition of what each control does? ie if a control sets `marker.color` to `red` then we can also tell we need to update it if `marker.color` changes. If we want to calculate some binding table behind the scenes to make our lives easier that's fine, but it seems redundant and confusing to have to specify this again.\n\nAlso it's possible for a control to be bound to more than one attribute, right? Like a button could change both `marker.color` and `marker.size` - in which case you'd have to check the state when either one of those changes, and only mark the control as active if the state matches all parts.\n",
    "created_at": "2016-10-04T15:40:28Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/1002#issuecomment-251426326",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/1002",
    "updated_at": "2016-10-04T15:40:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> With commit 2a7738e registering a transform module with both a transform and calcTransform method will log info about execution order. Were you looking for something even clearer?\n> \n> Maybe we could add a src/transforms/_example.js file or a src/transforms/README.md with more info about transforms?\n\nIf someone goes to the trouble of making a _single_ transform that has both components, they probably already know what this will do. The issue I wanted to highlight comes when people (who probably weren't the transform author) use multiple transforms on the same plot that are split between the two modalities, so that, it seems to me, should be mentioned in two places: 1) wherever users will first learn about transforms, and 2) a log message would be great, but the best place for it would be when transforms are found that may not do what you expect. Specifically, if the first transform that has a `calcTransform` is earlier in the list than the last one that has a `transform`.\n",
    "created_at": "2016-10-03T16:43:16Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/978#issuecomment-251158095",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/978",
    "updated_at": "2016-10-03T16:43:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> a global lookup is not difficulty-wise different from component-local only\n\nI'm not sure about that... what happens when two components use the same variable in an action? Do you require them both to define the full action and only do it once? Do you hunt for any actions that use the variable that changed and execute them all? Do you do nothing in one component, and wait until the other component is tweaked to make the change? All of those seem potentially confusing to users. That problem at least would be solved with action definitions, but it's really not clear to me that this is a capability we need. Perhaps we should to come at this from the other direction: what are you imagining as the declarative spec for slicing, or whatever other operations we're imagining wanting to do with sliders & dropdowns?\n\n> the substitution in your example only exists for the sake of DRYing up the notation but doesn't actually enable anything you couldn't accomplish by enumerating all the arguments for each slider position\n\nCorrect. I think it may be pretty important to allow (and encourage) this though - otherwise you can (inadvertently or with good but misguided intention) generate different changes at different selection values, so your selection doesn't guarantee state, state is history-dependent.\n",
    "created_at": "2016-09-23T20:21:16Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/742#issuecomment-249292786",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/742",
    "updated_at": "2016-09-23T20:21:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "It's true, action definitions are introducing a whole extra layer that's unnecessary 99% of the time - only when two or more controls need to be involved in the same edit. Perhaps if we define the slicing grammar right they can be decoupled in this particular use case, then we can see if there are any other use cases that still will need to be coupled... though I guess as long as we're always editing part of a declarative spec it should always be possible to keep them decoupled.\n\nSo then perhaps we can do away with the idea of variables, and just have the `values` entries be either arrays or objects:\n\n``` js\nsliders: [\n  {\n    label: 'Year',\n    // each item is an array, so you address $0, $1\n    values: [[0, 1990], [1, 1995], [2, 2000], [3, 2005], [4, 2010], [5, 2015]],\n    method: 'restyle',\n    // update attribute zsliceindices[0] of traces 0 and 1 with the first element of\n    // the chosen array out of values.\n    // Insert whatever attribute we choose to define how to slice...\n    args: [{'zsliceindices[0]': '$0'}, [0, 1]],\n    // display the year value next to the slider\n    valueLabel: '$1'\n  },\n  {\n    label: 'Age',\n    // each item is an object, so you address $i, $age\n    values: [{i: 0, age: '0-5 years'}, {i: 1, age: '5-10 years'}, {i: 2, age: '10-20 years'}],\n    // update a different, decoupled attribute of only trace 0\n    method: 'restyle',\n    args: [{'zsliceindices[1]': '$i'}, [0]],\n    valueLabel: '$age'\n  }\n]\n```\n\nWhat if we wanted to change different attributes of each trace? Do we have a restyle / update syntax that supports this, or do we need to allow several method/args pairs somehow?\n",
    "created_at": "2016-09-23T19:49:33Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/742#issuecomment-249286144",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/742",
    "updated_at": "2016-09-23T19:49:33Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "What if we separate out the variable settings from the actions? Particularly in cases like multidimensional slicing, you'll need several controls setting different variables that go into the same action, then that would also let us do multiple things with the same control:\n\n``` js\nsliders: [\n  {\n    label: 'Year',\n    values: [[0, 1990], [1, 1995], [2, 2000], [3, 2005], [4, 2010], [5, 2015]],\n    // if a control specifies variables, it should NOT specify method/args\n    variables: ['yearindex', 'year'],\n    value: '$year'\n  },\n  {\n    label: 'Something else',\n    steps: { // alternative to enumerating all values\n      start: 0,\n      stop: 12,\n      step: 1\n    },\n    variables: ['index1']\n  }\n],\nactions: [\n  {\n    method: 'slice', // or is this just restyle/animate through a transform?\n    args: [\n      ['$yearindex', '$index1'],\n      0 // trace index\n    ],\n    variables: ['$yearindex', '$index1'] // or just search through args to find these?\n  },\n  {\n    method: 'slice',\n    args: [\n      ['$yearindex'],\n      1 // another trace that only has 3 dimensions, but we slice it on year with the same slider\n    ]\n  }\n]\n```\n\nThe `{start, stop, step}` syntax is appealing for reducing overhead, though I'm not sure how to deal with the fact that it's going to want to map between some scaled value and an index, at least when it's used with slicing.\n",
    "created_at": "2016-09-23T17:31:42Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/742#issuecomment-249254071",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/742",
    "updated_at": "2016-09-23T17:31:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "closed by #915 \n",
    "created_at": "2016-09-08T03:28:38Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/574#issuecomment-245483820",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/574",
    "updated_at": "2016-09-08T03:28:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard + test image expanding on #725 \n",
    "created_at": "2016-09-08T03:11:35Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/915#issuecomment-245481905",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/915",
    "updated_at": "2016-09-08T03:11:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Fixes #574 as well.\n\nUsing the data from https://jsfiddle.net/cf4j5vxz/ -\n![screen shot 2016-09-07 at 8 30 37 pm](https://cloud.githubusercontent.com/assets/2678795/18333093/1680db46-753a-11e6-9621-7b31d6d1a2da.png)\n",
    "created_at": "2016-09-08T00:32:27Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/915#issuecomment-245460727",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/915",
    "updated_at": "2016-09-08T00:32:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Oh man, that's pathological... but should be a quick fix.\n",
    "created_at": "2016-09-07T23:48:08Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/725#issuecomment-245453914",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/725",
    "updated_at": "2016-09-07T23:48:08Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This latest commit about label positions addresses a different issue from the ternary hover disappearing entirely... but I added it here because a) I needed to fix that before I could even see the zoomed-in label positions, and b) it still fits the PR title \"fix ternary (and scatter!) hover after zoom/pan events\"\n",
    "created_at": "2016-06-24T23:27:35Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/688#issuecomment-228488014",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/688",
    "updated_at": "2016-06-24T23:27:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I consolidated all the separate definitions of `click` and `doubleClick` in our jasmine tests... `doubleClick` in particular was slightly different in different places, for no good reason.\n",
    "created_at": "2016-06-24T14:03:57Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/688#issuecomment-228354123",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/688",
    "updated_at": "2016-06-24T14:03:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "You can't comment on the combined diff until it's in a PR I guess... But you can comment on individual commits\n",
    "created_at": "2016-06-21T22:15:10Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/598#issuecomment-227588772",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/598",
    "updated_at": "2016-06-21T22:15:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard I love the strategy and the structure of the response. Aside from a few comments I made on the commits, I would just try and make the error codes look more like errors than benign \"differences\" like those returned by `deep-diff`. So instead of \"visible\", use \"invisible\" or even \"aborted\" because that's likely what happened - coercion was aborted because something crucial was missing. \"unsettable\" I might just call \"unused\", and it needs more explanation like \"key XXX is valid but was not used because other values made it irrelevant\"\n",
    "created_at": "2016-06-21T22:04:29Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/598#issuecomment-227586522",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/598",
    "updated_at": "2016-06-21T22:04:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard I converted `hoveron` to a `flaglist`, and wrapped the test mocks in `deepExtend`. Note that the [hover label test](https://github.com/plotly/plotly.js/pull/673/commits/aec4c95181b86a9e39d942308c6b0bf9ae7c4a01#diff-846cf5b534aa0d22bdd1da2b43ac3cbaR701) verifies that `'points+fills'` indeed generates exactly one label of either type.\n\nAnything else?\n",
    "created_at": "2016-06-21T21:02:22Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/673#issuecomment-227570781",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/673",
    "updated_at": "2016-06-21T21:02:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Locally I see a default body margin of 8px. I'd rather just set this to 0, then the pixel positions we have to use for mouse events will make more sense anyway. I'll try to address this in my working branch.\n",
    "created_at": "2016-06-20T19:31:12Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/666#issuecomment-227244713",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/666",
    "updated_at": "2016-06-20T19:31:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@n-riesco this is great, that's definitely where the autosize code belongs.\n\nMy only question (which goes along with @etpinard 's concern about test coverage - there are tons of cases to consider) is whether there are cases we'd like `autosize` to coerce to `true` - ie if width or height is missing? For example if someone is using element size to determine plot size, but has not explicitly set `autosize: true` - then something outside the plot (window resize or some event on their page) causes the element size to change, I would expect a simple redraw or relayout to resize the plot too.\n\nThis then begs the question (that we probably don't need to delve into now, might be a rabbit hole, but something to keep in mind for later) of whether we actually gain anything with the initial / redraw distinction. Either I'm missing something or it used to work differently, but I don't see that `plotAutoSize` does anything time-consuming, so what's to stop us from _always_ running it if there's one or more missing dimensions or if `autosize` is explicitly `true`? There will be places (`relayout`?) where we need to track whether anything actually changed to decide how much to do next, but we already do that anyway.\n",
    "created_at": "2016-05-30T21:49:24Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/577#issuecomment-222558433",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/577",
    "updated_at": "2016-05-30T21:49:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@ubershmekel 💃  - nice optimization.\n\n@monfera I'm all for enhancements that make it easier to understand the data, or improve aesthetics without compromising understanding. I like the idea of debounce; fade out, when we're not going to show another tooltip; fade in maybe if it's very quick. But I have to say that tooltips easing from one data point to another have always grated on me when I've seen that done in other libraries. Animation has its place in object constancy but elsewhere I feel it impedes understanding the data.\n",
    "created_at": "2016-05-05T21:02:32Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/514#issuecomment-217279074",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/514",
    "updated_at": "2016-05-05T21:02:32Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> To note, a loop over fullLayout._basePlotModules list would users to write their own pluggable basePlotModule.\n\nSure... Though it's better for the ecosystem if those modules eventually make it into the main repo - so users can still share plots, including via plot.ly. \n",
    "created_at": "2016-04-29T16:25:21Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/491#issuecomment-215793132",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/491",
    "updated_at": "2016-04-29T16:25:21Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "💯  for the idea. It's going to be a bit slower than all the individual flags but doesn't look like it's called much in hot paths, so I think we're fine. I wonder if we can even turn [this block](https://github.com/plotly/plotly.js/blob/has-plot-type/src/plot_api/plot_api.js#L277-L283) into a loop over `fullLayout._modules` - or actually, that needs to be a loop over `basePlotModule`s, which makes me wonder if we shouldn't make a `fullLayout._basePlotModules` too? \n",
    "created_at": "2016-04-29T08:18:44Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/491#issuecomment-215656040",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/491",
    "updated_at": "2016-04-29T08:18:44Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard \n\n> Is there a way to ensure the line are always above the fills?\n\nI'm not quite sure what that raw data is... but if you make each region `fill: 'toself'`, with all the lines set the same, AND you make sure all the polygons are explicitly closed (so you may need to repeat the last point?), then the lines should all be consistent width, I would think? That half-width effect comes only when there's an edge that _doesn't_ have a line on it, abutting a trace underneath it (or with `fill: 'tonext'`, a trace more than one below it... which is going to happen a lot in this kind of diagram). I don't think you can just say \"lines are always above fills\" which is what you'd need to do in order to get consistent width without duplicate edges, because if there are overlapping regions, you want the lower one covered up completely, not covering up the fill but letting the line show through.\n\nAnother way to construct this is to make the filled traces with NO lines, then add a trace on top of them all with the lines and no fill. Then you can get away without duplicating any edges.\n\n> and perhaps ternary fills should be below the grid lines\n\nFor now, semitransparent fills can let the gridlines shine through.\n\nWe might make an option in `layout.ternary` for whether to draw gridlines above or below the data. I don't think we want it _always_ this way, because markers normally should go in front of the gridlines. And if we try to make the markers in front but the fills in back, then what happens when there's a fill in one trace that should cover some markers in a previous trace (same issue as with the lines)? But if we make such an option, then we could set its default smartly... maybe if any trace has opaque fill we put the gridlines in front?\n\nThis option would also interact with what we were talking about the other day with clipping (or not) the markers to the edge of the plot. My proposal, for the record, was that for any side with `min=0` we should NOT clip the trace at that edge, so you can see the full marker drawn on top of the axis line if there is one, but as soon as `min>0` we should start clipping on that edge. But if the gridlines are on top, I think we would need to clip on all edges no matter what, otherwise you'd see half a marker peeking out from behind the gridlines and it would look weird.\n",
    "created_at": "2016-04-22T16:38:54Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/462#issuecomment-213501891",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/462",
    "updated_at": "2016-04-22T16:38:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@jackparmer \n\n> Would be great to have the axes color shortcut you mentioned in CPH.\n\nYes, that's in here. But it does still need testing:\n- [x] test supplyDefaults and test image for `axis.color`\n\nAnd @etpinard I will do what I can but would :heart_eyes: some help on these tests - thanks!\n",
    "created_at": "2016-04-04T07:38:09Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/390#issuecomment-205176265",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/390",
    "updated_at": "2016-04-11T18:36:22Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@cpsievert right, this _has_ to be done in the js library itself for the aspect ratio to survive nearly all our interactivity. I suppose you're right that having _different_ aspect ratios on different subplots is an unusual case, but having some subplots that want a fixed ratio and others that don't seems like a fairly common case, at which point we've nearly arrived at each one supporting its own aspect ratio anyway.\n",
    "created_at": "2016-04-08T10:03:04Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/272#issuecomment-207357030",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/272",
    "updated_at": "2016-04-08T10:03:04Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "There are two separate issues here. One is making sure the overall plot keeps a nice shape when the window is resized - like if you have a responsive webpage, it would be cool if the plot could take its width from the container element and its height from this aspect ratio. That should work fine with `layout.aspectratio`.\n\nThe second is where the data on a plot has a 2D metric, like if you're showing physical positions in two dimensions, or in momentum space, really anything where x and y have identical units so relative scales and angles are meaningful. The first (`layout.aspectratio`) can be used to solve this problem, though not if you allow zooming, not if you allow auto-margin, and anyway you have to do a bunch of calculations to get it right even in the beginning. Really we need something per-subplot that enforces pixel equivalence in the two directions. This is tricky for a multitude of reasons:\n- API - as already mentioned, we don't have per-subplot settings for cartesian, we only have per-axis settings. That might be a blessing in disguise though, as you can't have more than one constraint per axis. \n  - one option: define `axis.constrainwith` and `axis.aspectratio`. I would think that if you provide neither, then both are omitted, but if you provide `constrainwith` then `aspectratio` defaults to 1, and if you provide `aspectratio` then `constrainwith` defaults to `axis.anchor`, or the first counteraxis if `anchor=='free'`.\n  - another option: define something like `layout.xy_aspectratio` which could perhaps be just a number for simple plots (or to give all subplots the same ratio), or an object like `{xy: 1, x2y: 2}` (my comments below about couplings should apply just as well if we choose this form, except that the obviously silly contradiction wouldn't be possible, but a circular reference could still be created out of 4 subplots).\n- couplings - what happens when you have two subplots sharing an x axis, with two y axes that both want to enforce an aspect ratio? We could certainly start out allowing only one constraint per axis, but eventually someone will want subplots sharing an axis and both to have aspect ratio constraints. But with a 2x2 or bigger layout, if all x and y axes had aspect ratio constraints you could actually define a self-contradictory system:\n\n```\nxaxis: {constrainwith: 'y', aspectratio: 1}\nyaxis: {constrainwith: 'x2', aspectratio: 1}\nxaxis2: {constrainwith: 'y2', aspectratio: 1}\nyaxis2: {constrainwith: 'x', aspectratio: 2}\n```\n\nIn fact you could say something obviously silly:\n\n```\nxaxis: {constrainwith: 'y', aspectratio: 1}\nyaxis: {constrainwith: 'x', aspectratio: 2}\n```\n\nI think for the most general case we need to allow both x and y axes to define constraints, otherwise there would be no way to create a _legitimate_ fully-constrained 2x2 layout, or even three subplots (central, top, and right, for example). We could just say it's an error to define a circular constraint reference, that should avoid this problem.\n- conflict resolution - say the user specifies both x and y ranges, as well as aspect ratio. What do we do? It seems like we want the aspect ratio to be enforced, and probably only show _more_ than what was asked for, ie never reduce a range, only expand (symmetrically). Similarly for autoscale, just symmetrically expand one axis. But then what happens if someone resizes the plot multiple times, does the range keep growing (ie the x range grows when you make the plot wider, then the y range grows when you make it narrower...)? Or does it somehow remember what the last range was that the user _really_ asked for, and size based on that? Maybe it would work to have `layout` just keep what the user asked for, and `_fullLayout` the recalculated (expanded) ranges?\n- zoom - I already had to do one form of constrained zoom for ternary #390 - and I suspect we could do something similar here for the main zoom... like the smallest rectangle that contains the start and end points of the drag, centered in the direction that needs to be bigger than you've dragged. But for ternary I totally ignored the single-axis and corner draggers. At least initially we could do the same here too, though I imagine we could come up with fairly compelling arguments as to what should happen with each of these draggers. Corner draggers could just project your drag onto the diagonal from that corner to the opposite one. Single-axis pan draggers (and 2D pan) are no problem as they don't alter aspect ratio. Single-axis endpoint draggers (And again for coupled subplots, where one axis change is triggered by the main or corner draggers of a different subplot), the obvious choice seems that the counteraxis should get a symmetric change keeping the same center point.\n",
    "created_at": "2016-04-07T21:26:43Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/272#issuecomment-207094331",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/272",
    "updated_at": "2016-04-07T21:26:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@n-riesco I like the way you've put the zoombox in a root layer and added a transform to it; but lets just make it a totally new root layer. I suspect it wants to go above [infolayer](https://github.com/plotly/plotly.js/blob/master/src/plot_api/plot_api.js#L2634) too, annotations likely have the same problem as shapes at the moment? I suppose we could put it in hoverlayer, since hover info is deleted as soon as zooming starts... but it'd be clearer and more flexible just to give it its own layer.\n",
    "created_at": "2016-04-06T16:34:10Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/395#issuecomment-206453109",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/395",
    "updated_at": "2016-04-06T16:34:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Also title positions - I think as I've done it _looks_ pretty good, but most examples I've seen have in particular the C title moved up and to the right, sometimes rotated, to make it clearer which axis it's referring to. This may not be necessary if we set different default colors for the three axes (which I haven't done yet)... thoughts?\n\n![screen shot 2016-04-03 at 10 11 10 am](https://cloud.githubusercontent.com/assets/2678795/14231460/ac2e2a7c-f984-11e5-97fd-84dd6b60fe6c.png)\n",
    "created_at": "2016-04-03T08:14:10Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/390#issuecomment-204912421",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/390",
    "updated_at": "2016-04-03T08:14:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "FYI all the normal interactions should work on ternary plots - zoom, pan, select (box/lasso). Zoom is the most interesting, as it needs to show a triangle, and needs to preserve aspect ratio (so what I did _might_ server as a model for implementing fixed aspect ratios (see #272 https://github.com/plotly/plotly.py/issues/70 ) - would be grateful for comments on how this works.\n\nFor a simple ternary test plot to play with:\n\n```\ndata = [{a:[2,1,1], b:[1,2,1], c:[1,1,2.12345], type: 'scatterternary'}]\nlayout = {ternary: {\n    aaxis: {showline: true, ticks: 'outside', showgrid: true, color:'#ccc', min: 0.231},\n    baxis: {showline: true, ticks: 'outside', showgrid: true, color: '#0f0', min: 0.2},\n    caxis: {showline: true, ticks: 'outside', showgrid: true, min:0.11}, bgcolor: '#eee'}\n}\nPlotly.plot(Tabs.fresh(),data, layout);\n```\n\nright now zooming looks like this:\n![screen shot 2016-04-01 at 11 14 48 pm](https://cloud.githubusercontent.com/assets/2678795/14231442/bd768f46-f983-11e5-9b27-3d3276f45ec5.png)\nThe triangle is the smallest appropriate one (aligned equilateral) that contains the start and end points.\n",
    "created_at": "2016-04-03T08:10:24Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/390#issuecomment-204911555",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/390",
    "updated_at": "2016-04-03T08:10:24Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard any idea why tests won't run on circle for this branch? `npm run cibuild` works fine locally but on circle it can't find my new components... https://circleci.com/gh/plotly/plotly.js/923\n",
    "created_at": "2016-04-03T07:59:25Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/390#issuecomment-204907231",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/390",
    "updated_at": "2016-04-03T07:59:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ok, I'd vote for 500 then, Windows probably sets a precedent that will work for most people. \n",
    "created_at": "2016-04-01T22:26:57Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/355#issuecomment-204592483",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/355",
    "updated_at": "2016-04-01T22:26:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Maybe I'm getting old and slow, but since I merged this into my WIP I find `DBLCLICKDELAY` is too fast for me... I only successfully generate a doubleclick about 2/3 of the time. Was the drop from 600 to 300 important to this fix, or did it just reduce the frequency of the bug before you implemented the real fix? Can we bump it back up? Really annoying that JS doesn't have access to the OS-defined doubleclick timing but I guess there's nothing we can do about that.\n",
    "created_at": "2016-04-01T22:10:52Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/355#issuecomment-204587701",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/355",
    "updated_at": "2016-04-01T22:10:52Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "At some point it may be worthwhile to look into making `getTolerance` more aggressive (superlinear in distance from the viewport, perhaps, at least to a point) but this will need some heavy testing to make sure it doesn't introduce new failure modes.\n",
    "created_at": "2016-03-26T19:08:39Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/353#issuecomment-201912592",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/353",
    "updated_at": "2016-03-26T19:08:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Sure. Actually it seems like the way [`getTolerance`](https://github.com/plotly/plotly.js/blob/master/src/traces/scatter/line_points.js#L60-L64) is implemented, the points will continue to get sparser and sparser as they get farther away, so it's likely this won't have _too_ much effect on performance anyway. :dancer: \n",
    "created_at": "2016-03-26T19:01:30Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/353#issuecomment-201911878",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/353",
    "updated_at": "2016-03-26T19:01:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ok, makes sense. I found where this went in, it was when I made the plotlyjs showcase for streambed - https://github.com/plotly/streambed/pull/1176\n\nUnfortunately I don't see that I discussed _why_ at that point, but at the very least we should be able to run the examples in there against this branch and see if something fails. Remember to try all 3 different kinds of Cartesian drag/zoom regions (plot, single axis, and corner) as well as plots with enough data that you need more than `DBLCLICKDELAY` to redraw - that's what the comment seems to say, that if you don't do this, then in some cases you get a redraw (and its associated events, which may be what I cared most about for the showcase, but the redraw itself could be problematic too if it flashes or slows stuff too much) on the first click of what will ultimately be a double click. \n",
    "created_at": "2016-03-24T23:29:05Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/355#issuecomment-201072984",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/355",
    "updated_at": "2016-03-24T23:29:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Interesting... I'm not entirely sure what condition `pauseForDrag` was supposed to catch but I do recall it being another edge case. I suppose it's hard to figure out from git because it's from long before reorganizing the repo, huh?\n\nSo that we don't recreate whatever problem it was though, what about a different solution: whenever `finishDrag` gets called, call `clearTimeout` on the one in `pauseForDrag`. That's probably the issue, right? That `finishDrag` gets called once for the doubleclick and then again when the timeout triggers, even though at that point your mouse is down so a `finishDrag` erroneously resets the flags telling us what's happening? Alternatively we could abort `finishDrag` if it looks like the mouse is down, but in that case I'd worry about what happens when you mouse out of the window while dragging. \n",
    "created_at": "2016-03-24T19:50:40Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/355#issuecomment-200990416",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/355",
    "updated_at": "2016-03-24T19:50:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": ":+1:\n",
    "created_at": "2016-03-01T06:20:39Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/295#issuecomment-190566837",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/295",
    "updated_at": "2016-03-01T06:20:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Looks good to me. I'm not quite sure whether this represents a temporary situation or the way we will keep it long-term, but given the convoluted logic that can arise I'm starting to think it's clearer for everyone if orphan subplots are simply not drawn.\n:dancer: \n",
    "created_at": "2016-02-29T14:23:28Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/289#issuecomment-190229241",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/289",
    "updated_at": "2016-02-29T14:23:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "For clarity, here's the 1D zoom effect we have now:\n![screen shot 2016-02-28 at 9 45 57 pm](https://cloud.githubusercontent.com/assets/2678795/13381783/c2c87818-de64-11e5-81ed-5de59dd5fd06.png)\n\nAnd @mdtusz to your behavior checklist, my vote is all of the above. Drag the handles anywhere (including past each other), click & drag between the handles to move the region, click and drag outside to start a new region.\n",
    "created_at": "2016-02-28T20:51:51Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/279#issuecomment-189943481",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/279",
    "updated_at": "2016-02-28T20:51:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "We already have precedent within plotlyjs with the zoombox, specifically the 1D zoom variant - which has handles (a little more subtle than highcharts), greys out the unselected area (ala chrome @bpostlethwaite), and lets you slide bounds past each other (@mdtusz)... the only real difference is it's not persistent. Seems to me we should mimic that, and then later if we want to tweak the style we tweak them both.\n",
    "created_at": "2016-02-26T19:17:47Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/279#issuecomment-189438091",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/279",
    "updated_at": "2016-02-26T19:17:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Just chatting with @etpinard - one more thing popped up: With the orphan logic, if you change trace type and thereby change subplot type (say heatmap -> surface and back again) you'll keep both subplots. @etpinard points out that `restyle` is the right place to delete the extra subplot when this happens.\n- [ ] remove the extra subplot when restyling empties one out\n",
    "created_at": "2016-02-23T18:24:10Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/268#issuecomment-187829159",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/268",
    "updated_at": "2016-02-23T18:24:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "right - it just seems to ignore the nesting and put the inner content some random place (with no clipping).\n",
    "created_at": "2016-02-10T23:48:28Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/243#issuecomment-182638939",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/243",
    "updated_at": "2016-02-10T23:48:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I mainly wanted to avoid making the nested svg problem _worse_... so I won't complain if you leave it at that. But I suspect it wouldn't be that hard: `x` and `y` --> `transform=translate(x,y)`, and `width` and `height` --> `clipPath` width and height. Granted a lot of ugly math could probably be cleaned up with a more substantial rewrite...\n\nUp to @jackparmer how much he wants Illustrator compatibility, people have been complaining about it forever but at a low level.\n",
    "created_at": "2016-02-10T23:45:43Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/243#issuecomment-182638435",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/243",
    "updated_at": "2016-02-10T23:45:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> having the movements be perfectly in sync would likely be hard to achieve.\n\nNot an issue here because you _can_ do it with a single transform... but as far as I've seen, browsers will not repaint during synchronous js execution. This is in fact the primary motivation behind `syncOrAsync`, so we can chain things that may or may not contain async parts without making every link in the chain async. That way when you _are_ sync there are no intermediate flashes.\n",
    "created_at": "2016-02-10T22:47:11Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/243#issuecomment-182617866",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/243",
    "updated_at": "2016-02-10T22:47:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "If you make a `<g>` with clipping and put another `<g>` inside it with a shifting `transform`, the clip path should not need to change. This is basically what happens to shapes when you drag an axis - though there I probably change its path rather than its transform, but the idea is the same. \n",
    "created_at": "2016-02-10T17:12:34Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/243#issuecomment-182486986",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/243",
    "updated_at": "2016-02-10T17:12:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Can we get away from adding another nested svg, and do it with `<g clip-path=...>` instead? @jackparmer forwarded me another complaint about illustrator compatibility just last night. I started down that road with shapes (clipping to axes) and contours with missing data (which wouldn't have been possible at all otherwise as it's non-rectangular clipping). See `drawing.setClipUrl`. It probably wouldn't be very hard to axe ALL nested svgs right now, but we should at least not be adding new ones.\n",
    "created_at": "2016-02-10T08:33:39Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/243#issuecomment-182252088",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/243",
    "updated_at": "2016-02-10T08:33:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This issue is a bit of a hydra. It's also connected, for example, to the bug (not sure if it's listed somewhere...) that if you set an explicit range for a date axis, save the plot, and someone in a different timezone opens the plot they will see the wrong range.\n\nRather than (or at least before) supporting timezones, which seems to me like it would add a whole bunch of complexity but wouldn't get much use, I feel like it would be much better to switch our date/time handling to UTC. To do this in the most nearly backward-compatible way for plot.ly users we should do this at the same time as changing axis ranges from linearized numbers to data values (and annotation positions - I think everything else, including shape positions, is already stored as data values). And THAT issue is tricky for ensuring backward compatibility on log axes, which is where I stopped thinking about it and moved onto other things :see_no_evil: \n\nThere's also the issue that our auto ticks are at weird hours (13:00 instead of 12:00 for example) in the summer months; that would get trivially solved by switching to UTC.\n\nThe biggest disadvantage I see of using UTC is for people who care about hourly data around the time changes. But for a lot of other use cases it's nice if every day renders as 24 hours long rather than occasionally being 23 or 25 hours. Timezones could certainly be added in explicitly later for the people that care about this.\n\nI'm not sure what the simple `Date` call would do to our date handling, but I would be worried about it - for example, as I recall there are no specs for what dates the browser should be able to parse and how, and I believe I've seen some fairly significant browser differences that we really don't want to introduce into our plots.\n",
    "created_at": "2016-02-02T13:56:29Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/171#issuecomment-178583549",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/171",
    "updated_at": "2016-02-02T13:56:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "A hack that can get the effect you want is to make dummy traces with one point each and zero value, in place of each trace on the other y axis. So for example, if you want the first trace on `y` and the second on `y2`, make 4 traces:\n\n```\nPlotly.newPlot(div, [\n    // real trace on the left y axis\n    {x:[1,2,3,4], y:[1,2,3,4], type: 'bar'},\n    // invisible second trace in the first group\n    {x:[1], y: [0], type: 'bar', hoverinfo: 'none', showlegend: false},\n    // invisible first trace in the second group\n    {x:[1], y: [0], type: 'bar', yaxis: 'y2', hoverinfo: 'none', showlegend: false},\n    // real trace on the right y axis\n    {x:[1,2,3,4], y:[40,30,20,10], type: 'bar', yaxis: 'y2'}\n],\n{\n    yaxis2: {side: 'right', overlaying: 'y'}\n});\n```\n\nBe warned though that once this issue is fixed, plots using this hack will break - this plot would then show up as a single group of 4 traces, two of which are invisible but still get space allotted to them.\n",
    "created_at": "2016-01-27T00:02:17Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/78#issuecomment-175301348",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/78",
    "updated_at": "2016-01-27T00:02:27Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": ":dancer: \n",
    "created_at": "2016-01-11T22:22:19Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/174#issuecomment-170710209",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/174",
    "updated_at": "2016-01-11T22:22:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I think [this](https://github.com/plotly/plotly.js/commit/026e16e3dba3a5829ac54c76daf0f955a45ae79f#commitcomment-15382678) is OK - `fx.unhover` works fine when there's no hover to begin with, and in all of those cases if for whatever reason there DID happen to be some hovertext that didn't get cleared, it would be nice to do so!\n",
    "created_at": "2016-01-11T22:17:40Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/173#issuecomment-170709056",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/173",
    "updated_at": "2016-01-11T22:17:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "```\ndhcp159:plotlyjs alex$ ag dragElement\nsrc/components/annotations/index.js\n586:                Plotly.Fx.dragElement({\n644:            Plotly.Fx.dragElement({\n\nsrc/components/colorbar/draw.js\n458:            Plotly.Fx.dragElement({\n\nsrc/components/legend/index.js\n531:        Plotly.Fx.dragElement({\n\nsrc/plots/cartesian/graph_interact.js\n1412:    fx.dragElement(dragOptions);\n1992:fx.dragElement = function(options) {\n```\n",
    "created_at": "2016-01-11T22:15:40Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/173#issuecomment-170708585",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/173",
    "updated_at": "2016-01-11T22:15:40Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "see https://github.com/plotly/plotly.js/issues/173#issuecomment-170705656 - there's a better way.\n",
    "created_at": "2016-01-11T22:03:57Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/174#issuecomment-170705851",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/174",
    "updated_at": "2016-01-11T22:03:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ah, nuts.\n\n> Right. We need to clear the hover labels when starting a selection.\n\nbingo. It's nice there because that clears hover labels on ANY drag event... select, zoom, pan... but I guess the solution would be to wait until `dragged` is `true` (which gets plugged into `gd._dragged`, though at this point that's only used within the `fx.dragElement` closure so could and should be ditched in favor of a local var). I suppose either we could say hover effects should always clear when you're dragging, no matter what it is you're dragging... then we could put the `fx.unhover` call right there in `fx.dragElement` next to [`gd._dragged = true;`](https://github.com/plotly/plotly.js/blob/b1a1c24b37ed6040ca6345ba88b118dc18968cfb/src/plots/cartesian/graph_interact.js#L2038). If you don't feel comfortable with that in all cases, we could add an `options.draggedFn` (these should really be called `options.onDragged` etc shouldn't they...) to be called there. \n",
    "created_at": "2016-01-11T22:03:11Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/173#issuecomment-170705656",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/173",
    "updated_at": "2016-01-11T22:03:11Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "no, I don't think so. Weird, dunno why I would have written it that way.\n",
    "created_at": "2016-01-08T14:19:47Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/152#issuecomment-170016039",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/152",
    "updated_at": "2016-01-08T14:19:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Just to be clear on what `gd._modules` is doing though - it's not _all_ modules, it's just the ones you need to draw _this_ plot, because the `plot` and `style` steps act on all traces for that module at once. It would be a bit of a waste to call `plot` and `style` from every module when you only use one or two.\n",
    "created_at": "2016-01-06T20:50:41Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/157#issuecomment-169457232",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/157",
    "updated_at": "2016-01-06T20:50:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@delekru those icons look great!\n",
    "created_at": "2016-01-06T16:56:39Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/154#issuecomment-169387199",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/154",
    "updated_at": "2016-01-06T16:56:39Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "OK, I think this is good from my side - all yours @delekru for the icons. If you need help getting them into the ploticon font check with @alexander-daniel \n\n@etpinard @chriddyp anything else?\n",
    "created_at": "2016-01-06T14:56:42Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/154#issuecomment-169344892",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/154",
    "updated_at": "2016-01-06T14:56:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@mdtusz \n\n>  (it doesn't do curves does it?)\n\nTry it out! It simplifies your mouse movements just a little, but it still looks like a curve - in fact probably looks _more_ like a curve than if it didn't simplify at all, because that would have a fuzzy edge with ugly dashes.\n\n@delekru I'd go for something nice and round - bokeh's is ok, but there are some cleaner ones from a quick \"lasso icon\" google, like https://thenounproject.com/term/lasso/177503/ (right next to the one you pointed out @mdtusz )\n\n![lasso](https://cloud.githubusercontent.com/assets/2678795/12101065/09206f58-b333-11e5-8952-f88274eb8441.png)\n",
    "created_at": "2016-01-04T21:34:43Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/154#issuecomment-168816831",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/154",
    "updated_at": "2016-01-04T22:47:10Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard \n\n> > the Jasmine tests fail without it because they want to load topo data from the cdn. Is that necessary?\n> \n> Not necessary. But useful to test the `Plotly.plot` does return a Promise when plotting a geo map.\n\nI see, yes, that's nice. I probably don't even want to get into this discussion, but couldn't it still load async locally and get the same benefit?\n",
    "created_at": "2016-01-04T22:15:49Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/154#issuecomment-168828320",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/154",
    "updated_at": "2016-01-04T22:15:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@chriddyp \n\n> It'd be cool to have a 1D selection too\n\nGreat idea! this would be easy to add exactly the same way as the zoombox does, an x motion without y makes horizontal 1D and y without x makes vertical. Though I think it's still not _exactly_ 1D, as I don't think we want to select points that are off-screen, would you agree?\n\n> It'd also be cool if you could click and drag your selection around\n\nala @cpsievert 's example too - what if a mousedown inside the selection moved it, and mousedown outside the selection started adding to it?\n",
    "created_at": "2016-01-04T22:13:16Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/154#issuecomment-168827661",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/154",
    "updated_at": "2016-01-04T22:13:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "not sure what's going on with the image tests... going to have to wait and look at that tonight.\n",
    "created_at": "2015-12-31T10:16:15Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/154#issuecomment-168163388",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/154",
    "updated_at": "2015-12-31T10:16:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard I mostly don't have internet here in Albania... and the Jasmine tests fail without it because they want to load topo data from the cdn. Is that necessary?\n",
    "created_at": "2015-12-31T09:09:00Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/154#issuecomment-168153569",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/154",
    "updated_at": "2015-12-31T09:09:00Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Why not both?\n> :star2:\n",
    "created_at": "2015-12-17T23:05:49Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/116#issuecomment-165610542",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/116",
    "updated_at": "2015-12-17T23:05:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Not `2, 'e', 8, 10, 16`?\n",
    "created_at": "2015-12-17T22:46:13Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/116#issuecomment-165606116",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/116",
    "updated_at": "2015-12-17T22:46:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Though e is an important base for log axes (I can't see wanting it for linear)\n",
    "created_at": "2015-12-17T22:28:43Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/116#issuecomment-165601746",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/116",
    "updated_at": "2015-12-17T22:28:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Add 16 and I'm sold (at least for now)\n",
    "created_at": "2015-12-17T22:26:15Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/116#issuecomment-165600687",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/116",
    "updated_at": "2015-12-17T22:26:15Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ah ok... yes, some parts it's getting right. So maybe some of them are making rounding errors?\nyaxis2: what's `40.00488M`? These should be `40M`, `44M`, etc, right?\nyaxis5: what's `384.04882812e+10`? Should be `384` but why is it allowed to use `exponentformat='e'`? \nyaxis6 chose `2*11^6` for `dtick`, which might be OK (but see below), but it's ugly when expressed as `x*11^7`\n\n How do we generalize `dtick` to other bases? For base 10 we use `dtick` ending in 1, 2, or 5. For other bases, the generalization is to use powers of the base times factors of the base, so eg for base 6 we could have `dtick` be 1, 2, 3, 6, 12, 18, 36. For base 2 or powers of 2 that means the dtick will also be powers of 2. So in yaxis5, if the ticks actually _were_ 384, 416, etc, this would be correct for base 2 (`dtick=32`)\n\nWhat about your base 11 on yaxis6? I don't see any bulletproof answer here, but how about for bases with a gap in factors of more than maybe 3, we should fill in with 1/2, 1/5, 1/10 of the bigger one, as `dtick`? That way we still ensure that the next bigger good tick spacing is among the spacings we see - so in the case of 11, the ticks would be 1, 11/5=2.2, 11/2=5.5, 11 - so with `exponentformat='power'` the first ticks we'd see would be 1, 0.2_11^1, 0.5_11^1, 11^1 respectively - so the power to show should be `>=dtick` (which is what you _did_ show on yaxis6, but choosing 2*the lower power, rather than 1/5 the bigger power, it gets an ugly decimal representation)\n",
    "created_at": "2015-12-17T22:04:16Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/116#issuecomment-165595263",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/116",
    "updated_at": "2015-12-17T22:04:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Wait, the behavior in the [test image](https://github.com/plotly/plotly.js/blob/exponent-base/test/image/baselines/axes_exponentbase.png) is not what we want. All of those axes use autoticks, right? The automatic values it chooses should adjust to the `exponentbase` so they look clean... looks like they're still using the base 10 auto values maybe?\n\nAlso, nonstandard `exponentbase` values are most useful for log axes, we should definitely have these in the tests.\n",
    "created_at": "2015-12-17T21:13:37Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/116#issuecomment-165583770",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/116",
    "updated_at": "2015-12-17T21:13:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I'm not going to be able to give this a full review, but overall the changes look great!\n",
    "created_at": "2015-12-16T21:42:02Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/124#issuecomment-165258234",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/124",
    "updated_at": "2015-12-16T21:42:02Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard \n\n> I would rename the `bars` / `Bars` and `boxes` / `Box` modules to `bar` and `box` to make their name match their corresponding trace type.\n\nSure.\n",
    "created_at": "2015-12-16T21:40:06Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/124#issuecomment-165257836",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/124",
    "updated_at": "2015-12-16T21:40:06Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "I think there are still some client installations that use `plots.purge` because they were written before we had `Plotly.newPlot`... but yeah, I'm good with hiding `plots.purge` anyway and if those old clients ever upgrade plotly.js they can deal, it's probably only 2 or 3 of them. - if you _don't_ follow `purge` up with another `Plotly.plot` all hell breaks loose.\n",
    "created_at": "2015-12-16T16:20:30Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/117#issuecomment-165163086",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/117",
    "updated_at": "2015-12-16T16:20:30Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@iustin \n\n> I'mnot sure what's the difference between the `low` trace (`fill:none`) and my `no-fill` trace (also `fill:none`).\n\n`high` `low` I'm thinking of things like [confidence bands](http://blogs.sas.com/iml/uploads/jitterreg.png) - which _eventually_ plotly will have as an option for displaying error bars... but for now a plot like this has three line traces (and one trace of points). `low` is the bottom of the band, and has `fill:none`, and `high` is the next trace, with `fill:tonext` - if you hide `low`, I'd argue, the fill should disappear. That is exactly what would happen if `high` inherits the `fill:none` from the hidden `low`. It would never inspect the center trace or the data points, regardless of whether these come before or after the band in the trace list.\n\n@etpinard perhaps one of you guys can flesh out the above algorithm, then make a few tests (side-by-side subplots with all the traces visible on one side, some turned off on the other?) so we can see if we all agree that this is doing the right thing?\n",
    "created_at": "2015-12-16T09:36:20Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/113#issuecomment-165047323",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/113",
    "updated_at": "2015-12-16T09:36:20Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "This is the [expected behavior](https://github.com/plotly/plotly.js/blob/master/src/plots/cartesian/axes.js#L1548) but we can debate whether that's really ideal. We need to have the date in this case, because you commonly span into a second day, and I thought `Dec 9 07:00` was getting a bit long - but you're right that that would be a more standard time format.\n",
    "created_at": "2015-12-15T21:49:45Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/99#issuecomment-164907966",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/99",
    "updated_at": "2015-12-15T21:49:45Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Oh interesting indeed... I hadn't thought about what should happen with fill when you hide traces but this definitely is NOT it. Good catch. This is I believe the _only_ case we have, at least so far, where the attributes of a hidden trace should still matter!\n\nI think the right logic is to chain `tonext` across hidden scatter traces until you reach a scatter trace that's either visible or some other fill, NOT `tonext`, or you reach the beginning. That way you'll always fill to the same endpoint as when all traces are visible, except when that endpoint is itself hidden in which case you don't fill at all. Lets look at two cases:\n- your plot, ie a stack that starts at zero with an unfilled trace before it: hide `fill-1`, and `fill-2` currently fills to `no-fill`. With this new rule `fill-2` looks at `fill-1`, sees hidden `fill:tozero` and inherits it, so your stack still fills to zero. If you hide `fill-1` AND `fill-2`, then `fill-3` looks at `fill-2`, sees hidden `fill:tonext` and keeps looking; it looks at `fill-1` and sees hidden `fill:tozero` and inherits it, so your stack (which is now only `fill-3` still fills to zero.\n- two traces `low` and `high`, filled between to make a confidence band, and you hide the first one (`low`). Right now we would fill from `high` either to some other earlier trace (if there is a visible scatter trace before it) or to zero. With this new rule, `high` would look at `low`, see `fill:none`, and inherit it, so the fill disappears entirely, regardless of what comes before it\n\nSo to be precise, lets say trace `i` is your `fill:tonext` trace: (but to be **im**precise I'm not sure where we can use fullData vs data for invisible traces so this pseudocode ignores that...)\n\n``` javascript\nfilli = tracei.fill;\nfor(j = i; j >= 0; j--) {\n    tracej = data[j];\n    if(tracej.type !== 'scatter') continue;\n    if(tracej.visible !== true) break; // recall visible='legendonly'...\n    if(trace.fill.substr(0,6) !== 'tonext') {\n        filli = tracej.fill;\n        break;\n    }\n    // what's left to continue looping is only invisible scatter fill:tonext traces\n}\n```\n",
    "created_at": "2015-12-15T21:36:53Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/113#issuecomment-164904902",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/113",
    "updated_at": "2015-12-15T21:36:53Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I'd prefer exposing the explicit over the implicit\n\nAh I see, so the other args to the existing `Plotly.Plots.register` get exported as module attributes and picked up by the new `Plotly.register` - sounds great. This requires a 1:1 correspondence between trace modules and trace types, but that has a whole bunch of benefits of its own :star2: \n\nThe call could even be `Plotly.register(require('plotly.js/traces/scatter3d'));` etc. for each trace type... but I don't feel strongly about that. Though, one possible benefit of that would be to allow including modules post-build... so the build includes some modules, but then in your app after loading plotly.js you can bring in another module as a separate js file and register it.\n",
    "created_at": "2015-12-14T23:57:13Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/41#issuecomment-164598465",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/41",
    "updated_at": "2015-12-14T23:57:13Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "**re: (1), library modules**\nThinking about this from a user's perspective, people will know what kind of traces they want to draw, and what kind of components (shapes, annotations, colorbars, legends...) they want to add. Just based on that, we can determine what plot types (gl3d, gl2d, geo) the bundle needs to include. We should make the source follow that logic as well. That means that:\n- we group the resources needed for each plot type into an easily `require`able module, as @etpinard describes.\n- each trace module `require`s the plot type it, er, requires.\n- components get registered too (in a separate registry from traces, we wouldn't want to try and draw a 'shapes' trace!) and when a plot or a trace on a plot wants to use a component, it has to look up the component in the registry, and only continue if it finds said component.\n- then the bundle index wouldn't directly include anything in the [plots](https://github.com/plotly/plotly.js/blob/master/src/plotly.js#L36-L44) section (except the first file - that's where this register stuff is! that still needs a bit of refactoring I suppose...), and the process of making a custom build would be just to omit whichever traces and components you don't want.\n- That said, most of the size optimization is accomplished by filtering out any plot types you don't need - at a first cut we can make this easier by grouping traces and components by plot type within the bundle index, then down the line we could have a script to automatically prepare filtered index files.\n\n**re: (2), d3**\n:+1: \n",
    "created_at": "2015-12-14T22:55:25Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/41#issuecomment-164586456",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/41",
    "updated_at": "2015-12-14T22:55:25Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Ideally it would be nice to do a little exploration of whether our async behavior really is what we think it is, ie only MathJax (and maybe gl?) make plotting be async. Mainly to make it easier to write tests around plotting.\n\nAlso when it _is_ async, it looks to me as though we need [`cleanUp`](https://github.com/plotly/plotly.js/blob/master/src/plot_api/plot_api.js#L338) to return `gd` as well so that the resolve arg is consistent?\n",
    "created_at": "2015-12-14T20:49:14Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/76#issuecomment-164555168",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/76",
    "updated_at": "2015-12-14T20:49:14Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": ":heart_eyes: \n",
    "created_at": "2015-12-14T19:36:47Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/110#issuecomment-164536917",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/110",
    "updated_at": "2015-12-14T19:36:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Easy. :dancer:\n",
    "created_at": "2015-12-10T17:31:48Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/100#issuecomment-163696644",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/100",
    "updated_at": "2015-12-10T17:31:48Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @etpinard , :dancer: for my part.\n",
    "created_at": "2015-12-09T09:11:16Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/91#issuecomment-163156986",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/91",
    "updated_at": "2015-12-09T09:11:16Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "If you want an exciting error condition, follow @mdtusz 's initial recreation code, then call `Plotly.Plots.purge(graphDiv)` - endless loop of js errors!\n\nLong ago the plotly workspace opened with a blank (cartesian) graph, ie we had designed it to do that when there was no data. If we do want to show something, this seems like the thing to show. But doing it by adding a fictitious trace is going to cause problems for users. And I wonder, are there also problems when deleting the last trace off a subplot? Or maybe in the future whenever we get to support for different subplot types, ie you have a map, or 3D scene, next to a cartesian subplot, and you delete the last trace off that. I'd much prefer to get to the bottom of why the data sticks around (I notice axis titles stick around too, if you have them) and THEN as a separate issue decide what to do with a blank plot.\n\nWe also muck it up if a user decides to make a plot entirely out of annotations, or shapes, with no data. For instance:\n\n```\nPlotly.newPlot(gd, [], {\n    xaxis:{title:'red'},\n    yaxis:{title:'blue'},\n    annotations:[{text:'hi!', xref:'x', yref:'y', x:12, y:22}]\n})\n```\n\nThis _should_ create x and y axes (with titles) and autorange them so the annotation is in the middle. Instead the annotation falls back to paper reference, and gets drawn way up in the corner (you can just see the corner of the h - this is so it's not gone entirely, though that requirement is itself a holdover from when the only way to position an annotation in the workspace was with the mouse... we could allow it to go offscreen completely now. So many layers to this seemingly simple bug!)\n",
    "created_at": "2015-12-09T09:09:36Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/73#issuecomment-163156718",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/73",
    "updated_at": "2015-12-09T09:09:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> But I suspect that @alexcjohnson originally put `['z-index']` there for a reason.\n\nMaybe I need to spend some more time on W3Schools :) @tlrdstd 's fix seems correct.\n",
    "created_at": "2015-12-09T08:33:17Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/92#issuecomment-163149905",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/92",
    "updated_at": "2015-12-09T08:33:17Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Migrated part of this discussion to #50 and @etpinard opened #83 with another part - is there anything left here or should we close it?\n",
    "created_at": "2015-12-07T23:12:12Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/42#issuecomment-162701219",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/42",
    "updated_at": "2015-12-07T23:12:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard from https://github.com/plotly/plotly.js/issues/42#issuecomment-162563275:\n\n> Calculating histogram autobins from all traces might break some plots that maneuver around that problem.\n\nWouldn't any plot maneuvering around this do so by setting manual bins (so altering autobin wouldn't affect them)? You're right that we need to be careful not to change the autobin results much if at all in cases where it gives a decent result... but that should be manageable. And given that the plot step matches bar widths _anyway_, I think it's safe to say it's _always_ a bad choice when grouped or stacked histograms use different bins - I'd go so far as to say it mucks up the central metaphor of binning!\n",
    "created_at": "2015-12-07T23:10:28Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/50#issuecomment-162700889",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/50",
    "updated_at": "2015-12-07T23:10:28Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> `barweight` or `thickness` maybe?\n\n`barweight` seems ambiguous to me, I almost expect it to mean how opaque it is or something. `thickness` could be OK, though somehow I associate that with lines (even though we use `width` for line thickness. go figure.)\n",
    "created_at": "2015-12-07T15:18:35Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/80#issuecomment-162554458",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/80",
    "updated_at": "2015-12-07T15:18:35Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "yup, #50 is the crux - what we should _really_ be doing here is calculating the histogram autobins taking _all_ histogram traces into account at the same time. Then you'd probably get a bin size of 1 or 2 and this would all be moot.\n\nFrom the plot.ly workspace you can download your image at arbitrary (higher) resolution, but the version on the plot itself is not so full featured.\n",
    "created_at": "2015-12-07T13:19:51Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/42#issuecomment-162522099",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/42",
    "updated_at": "2015-12-07T13:19:51Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": ":+1:\n(right, SI and B are only different in how they show 10^9 - G or B)\n\nBinary vs decimal might need to be a separate item from `exponentformat` though - because even in binary mode, you might want to use `exponentformat` of `'none'` (512, 1024, 2048...), `'power'` (2^9, 2^10, 2^11...), or `'SI'` (512, 1K, 2K... that's not technically SI but it seems like the logical extension?). And if we're putting in binary, we might as well allow for other bases too.\n\nSo I'm thinking of `exponentbase`, which would default to 10 but you could set it to 2, 8, 16, and if we're feeling energetic `'e'` or an arbitrary (positive) number. But then only some `exponentformat`s would be allowed - `'none'` and `'power'` are always good, `'SI'` is only good for powers of 2 or 10, and `'e'`, `'E'`, and `'B'` are only valid for 10. The default is `'B'` for base 10, seems like `'SI'` would be a good default for powers of 2, and `'power'` for other bases.\n\n@iustin @etpinard thoughts?\n",
    "created_at": "2015-12-07T13:14:37Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/79#issuecomment-162520790",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/79",
    "updated_at": "2015-12-07T13:14:37Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Thanks @iustin - yes, we should be able to support that.\n\nThe rule (I think) should be: group bar traces that are on the _same_ position axis, and on the same _or overlaying the same_ size axis.\n",
    "created_at": "2015-12-07T10:41:34Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/78#issuecomment-162479174",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/78",
    "updated_at": "2015-12-07T10:41:34Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@etpinard you still want to call this a bug? I suppose could imagine a rule like \"if we're going to rasterize, AND a bar (stack) has width < 1 px AND there's no bar to draw on at least one side of it, expand it to at least one px width. But that's super complicated and I still think it sounds sketchy - what if for example the plot is a comb, consisting of 0.1 px bars separated by 0.1 px? Then you have to figure out that there's a bar near (but not quite touching) and not expand so much that you overlap it... and even then you give a misleading picture, because it would look like the space is filled when really it's only half full.\n\nThe real problem here seems to me the conflicting demands on bar widths. How do we handle grouped or stacked histograms with explicitly different bin widths? I'd almost like to make that an error, but at the very least we should let the user know somehow, and harmonize them before binning, not during plotting, so we can ensure that bin width and bar width are always the same.\n",
    "created_at": "2015-12-07T10:11:57Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/42#issuecomment-162471237",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/42",
    "updated_at": "2015-12-07T10:11:57Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "The browser vs download difference here is really one of rounding and a peculiarity of how we have to draw bar charts. With `bargap=0` (as is the default for histograms) or when you stack bars (also the case here) we need to disable antialiasing (css `shape-rendering: crispEdges;`) otherwise you get horrible artifacts where bars meet. But then when you draw with low resolution, some items simply disappear.\n\nIt's kind of an interesting question actually, what we should do with bar widths in this plot. We don't currently have any way to explicitly set the width of bars in a bar chart / histogram, they just get set as wide as they can with the constraints that 1) they're all the same within one trace, 2) they don't overlap each other within one trace, and 3) if `barmode` is `'stack'` or `'group'`, all the traces get the same bar width.\n\nIn this plot you've explicitly set bin widths, which SHOULD be the same as the bar widths if we want to interpret histograms in the normal way. BUT because `barmode='stack'` all the widths have to be the same, so we have conflicting demands. What to do?\n",
    "created_at": "2015-12-04T23:14:54Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/42#issuecomment-162107441",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/42",
    "updated_at": "2015-12-04T23:14:54Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@ni-hil That's definitely a bug, and leads to a highly misleading chart. If you don't specify bins explicitly, grouped or stacked histograms need to all get the same bins.\n",
    "created_at": "2015-12-04T22:53:19Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/50#issuecomment-162104057",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/50",
    "updated_at": "2015-12-04T22:53:19Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@mdtusz spot on - `'tonexty'` behaves identically to `'tozeroy'` for the first trace. This is driven by the use case of filled area charts, where you always want to fill the first trace to zero and all the others to the adjacent trace - set set all the traces to the same fill mode `'tonexty'` and this is what you get.\n",
    "created_at": "2015-12-04T22:41:33Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/55#issuecomment-162102085",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/55",
    "updated_at": "2015-12-04T22:41:33Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": ":+1: that can be very useful, in fact we've implemented this exact feature for clients by using hover/unhover events.\n\nPerhaps this even deserves a button in the mode bar? It would be nice to give viewers the option to turn it on and off while they're looking at the plot - for instance, I can imagine wanting it on while I'm getting an overview of all the traces, then wanting it off while I'm drawing a box to zoom in, or while focusing on two traces simultaneously to study their correlation.\n",
    "created_at": "2015-12-04T22:34:01Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/60#issuecomment-162100755",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/60",
    "updated_at": "2015-12-04T22:34:01Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> The current handler would simply be the default.\n\nor, as in some other cases like [plotly_beforeplot](https://github.com/plotly/plotly.js/blob/master/src/plot_api/plot_api.js#L48-L49), it will still execute the default handler unless you return `false` from the custom handler\n",
    "created_at": "2015-12-04T22:15:42Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/65#issuecomment-162097388",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/65",
    "updated_at": "2015-12-04T22:15:42Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "You can do this statically using [ticktext](https://plot.ly/javascript/reference/#layout-xaxis-ticktext)\n\nI don't want to include javascript in the plot definition - makes it either not portable, or a security risk.\n\nWhat I'd prefer to do is make smarter hover text for histograms. So the axis labels (which may or may not correspond to bins) can stay as they are, unless you use ticktext, but the hover text will be smarter - perhaps even showing the _actual_ range of data aggregated in the bin, which would provide more useful information than just what the precise edges of the bin are.\n",
    "created_at": "2015-12-04T22:10:36Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/69#issuecomment-162096195",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/69",
    "updated_at": "2015-12-04T22:10:36Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": ":dancer: if you're going to make a separate PR to fix and test `sqrt`\n",
    "created_at": "2015-12-04T18:08:47Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/74#issuecomment-162037770",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/74",
    "updated_at": "2015-12-04T18:08:47Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Doesn't hurt to pass it along in any case!\n\n:+1: yup, that was basically the kind of case I was imagining, go for it. \n",
    "created_at": "2015-12-04T18:04:45Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/76#issuecomment-162036993",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/76",
    "updated_at": "2015-12-04T18:04:45Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@mdtusz sure, if you think it would be useful. Generally I don't see why it would, as all these functions take `gd` as an arg so the caller already has it. But I guess there could be cases, like if you bundle a bunch of plot promises together...\n",
    "created_at": "2015-12-04T17:02:12Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/76#issuecomment-162022212",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/76",
    "updated_at": "2015-12-04T17:02:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "What _should_ it do? Show them all (what if there are 100)? Show the one closest to your mouse? Show the max and min? first, last, max, min (ala open-high-low-close)?\n",
    "created_at": "2015-12-04T13:07:17Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/72#issuecomment-161962979",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/72",
    "updated_at": "2015-12-04T13:07:17Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "We certainly could check for labels going off the edge of the plot, and shrink them to fit, that probably wouldn't be very hard.\n\nThe problem gets worse if you have several pies, their respective labels do nothing to avoid each other. That seems like a harder one to fix...\n",
    "created_at": "2015-12-04T13:00:44Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/75#issuecomment-161961971",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/75",
    "updated_at": "2015-12-04T13:00:44Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Nice catch. Maybe one more test image that covers sqrt and symmetric data?\n",
    "created_at": "2015-12-04T08:47:44Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/74#issuecomment-161910262",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/74",
    "updated_at": "2015-12-04T08:47:44Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "From a separate convo\n\n@etpinard \n\n> Plotly.plot's promise story is still a bit of a mystery to me\n> One thing I do know: we can't test `Plotly.plot` in jasmine without handling the `then()` regardless of the plot type\n\n@alexcjohnson\n\n> huh, OK, it seems weird to me. We do always return a promise, but everything should be synchronous up to that point in the normal case, so by the time the function exits it should be complete.\n> might be interesting to watch [`donePlotting`](https://github.com/plotly/plotly.js/blob/master/src/plot_api/plot_api.js#L358)\n> and see if we are really making everything async for some dumb reason...\n\nIt's not the end of the world if plotting is less synchronous than it could be, but the experience is better for the viewer (at the very least fewer flashes of half-built plots, and likely faster display overall) if it's sync. For the developer using plotly.js it's probably no different, they should get used to expecting `Plotly.plot` and `Plotly.newPlot` (and everything else in `plot_api` but there's some more for us to clean up there) to return a promise.\n",
    "created_at": "2015-12-04T08:28:43Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/76#issuecomment-161907606",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/76",
    "updated_at": "2015-12-04T08:28:43Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@tlrdstd excellent, I'll work with @etpinard to make it easier to get these image tests running locally - and I'll ping you when I have a PR that tests this particular patch so you see how it works.\n",
    "created_at": "2015-12-03T13:23:05Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/63#issuecomment-161638236",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/63",
    "updated_at": "2015-12-03T13:23:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@tlrdstd looks good, thanks!\n\n@etpinard normally colors would get set in the `style` step (even later than `plot`), but for pies this is actually the correct step. The reason is that pie colors talk between traces for color matching labels across pies, so we need to assign them early in the process.\n\nWe need to include this in a test - perhaps give some opacity to one of the colors in [pie_labels_colors_text](https://github.com/plotly/plotly.js/blob/master/test/image/mocks/pie_labels_colors_text.json)? Looks like we don't really have instructions written up for updating test images yet, maybe for now I'll just merge this in and update the tests in a separate PR.\n",
    "created_at": "2015-12-03T12:41:05Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/63#issuecomment-161622358",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/63",
    "updated_at": "2015-12-03T12:41:05Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "For 2d svg the main requirement was to get rid of all `getBoundingClientRect` calls inside the plot (which we only used for text and moved to an off-screen tester element)... So probably geo either already works or will be easy. No idea how gl will respond. There are a lot of integrations (both C12 and Ambri for example) where being able to draw out-of-DOM or at least display:none plots that will get displayed later is important. \n",
    "created_at": "2015-12-01T15:36:12Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/27#issuecomment-161003585",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/27",
    "updated_at": "2015-12-01T15:36:12Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "@EricForgy I think I agree with @etpinard - creating a new element implicitly here seems like a recipe for confusion, and how often do you want your new plot simply appended to the body anyhow, vs inserted somewhere particular? But the idea of a one-liner to create the div and plot into it _is_ appealing. What if we had a wrapper for this, that, instead of returning a promise like `Plotly.plot`, creates (if it doesn't already exist) and returns the div. Then you could do things like:\n\n``` javascript\ndocument.body.appendChild(Plotly.createPlot('newId', data, layout))\n```\n\nLess concise (but still 1 line, vs. 3 or 4 with `Plotly.plot`), but this way you could put it anywhere, not just at the end of the body. Note that doing it this way requires you to be able to make a plot in a div that's _not_ attached to the DOM yet - I know this works for cartesian SVG plots, not sure about gl or maps, @etpinard have we tested that?\n",
    "created_at": "2015-12-01T12:37:23Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/27#issuecomment-160955742",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/27",
    "updated_at": "2015-12-01T12:37:23Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "In fact more pieces of the pie chart text functionality should be replicated here - like `textposition='auto'` putting labels inside the bars if they fit (or if there's another bar stacked on top), and outside otherwise; shrinking the label if need be when it's displayed inside; `insidetextfont` and `outsidetextfont` so you can have differences (usually just different color, like white inside and black outside) in addition to `textfont` controlling them both.\n",
    "created_at": "2015-11-30T14:29:49Z",
    "html_url": "https://github.com/plotly/plotly.js/issues/34#issuecomment-160645382",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/34",
    "updated_at": "2015-11-30T14:29:49Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "just 2 non-blocking comments left from me - :dancer: \n",
    "created_at": "2015-11-25T10:12:31Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/23#issuecomment-159560995",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/23",
    "updated_at": "2015-11-25T10:12:31Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> I'd vote for `Modebar`, `modebar` and `modebarButtons` (although `displayModeBar` will need to stay for backward compat.)\n\nI suppose we could support _both_ `displayModeBar` and `displayModebar` if we want to change to lowercase b, and warn devs about the deprecated uppercase B. But unless you think lowercase b is more intuitive (I don't, modebar isn't one word, it's two) I'd still vote for uppercase B.\n",
    "created_at": "2015-11-24T15:27:09Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/23#issuecomment-159304048",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/23",
    "updated_at": "2015-11-24T15:27:09Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "> Nested arrays of objects would be considered custom while nested arrays of string would be references to the default set of buttons.\n\nSure\n\n> Potential problem: users could only append group or buttons to the existing ones i.e. there is no way to tell where to place the buttons among the default buttons.\n\nTheir custom buttons would go at the end, after the built-in buttons. I don't think most users would mind this. That's a pretty normal pattern I think for extending built-in menu bars and the like. The advantage is that users don't need to worry about what's already in the modebar if all they want to do is add their own cool function.\n",
    "created_at": "2015-11-24T15:22:41Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/23#issuecomment-159302815",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/23",
    "updated_at": "2015-11-24T15:22:41Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "from a chat I just had with @etpinard -\n\nNormally, people will want to specify icons at plot creation, so it makes sense that this be handled by config args. Occasionally people might want to alter buttons on the fly (maybe even have a BUTTON that modifies BUTTONS!! :dizzy_face: ) so it would be nice to expose something in the API to do that too, but that seems secondary to me. The config args that @etpinard and I discussed:\n- `modeBarButtonsToRemove` - as implemented, a list of built-in button names to exclude (as an aside... we need to be careful about `modebar` and `Modebar` vs `modeBar` and `ModeBar` in names - mostly we use a capital B, we should standardize on that.\n- `modeBarButtonsToAdd` - an array (one group) or nested array (multiple groups) of button objects, exactly like in `buttons.js` - ie `{name: string, title: string, icon: {icon object}, click: function}` - this will get added at the end of whatever built-in modebar is created.\n- `modeBarButtons` - a nested array of button objects, to completely supersede the built-in set (and supersede  `modeBarButtonsToRemove` and `modeBarButtonsToRemove`)\n\n@bpostlethwaite thoughts? I agree with you about not wanting to pass around strings as references to other objects - this seems like it accomplishes that, the only strings used are destined to remain strings.\n",
    "created_at": "2015-11-24T15:01:46Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/23#issuecomment-159293791",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/23",
    "updated_at": "2015-11-24T15:01:46Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": ":dancer: \n",
    "created_at": "2015-11-17T15:42:29Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/9#issuecomment-157408199",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/9",
    "updated_at": "2015-11-17T15:42:29Z",
    "user": {
      "login": "alexcjohnson"
    }
  },
  {
    "body": "Beautiful. :dancer: \n",
    "created_at": "2015-11-15T23:02:38Z",
    "html_url": "https://github.com/plotly/plotly.js/pull/2#issuecomment-156867459",
    "issue_url": "https://api.github.com/repos/plotly/plotly.js/issues/2",
    "updated_at": "2015-11-15T23:02:38Z",
    "user": {
      "login": "alexcjohnson"
    }
  }
]
