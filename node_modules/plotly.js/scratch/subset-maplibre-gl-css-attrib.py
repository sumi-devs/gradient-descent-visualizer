#!/usr/bin/env python3
"""
CSS Parser to extract selectors containing "attrib" from maplibre-gl.css
Uses tinycss2 library for proper CSS parsing.
Retains original nesting for @media queries and preserves structure.
"""

import sys
try:
    import tinycss2
except ImportError:
    print("Error: tinycss2 library not found. Install with: pip install tinycss2")
    sys.exit(1)

def parse_css_for_attrib_selectors(input_file, output_file):
    """
    Parse CSS file and extract only selectors containing 'attrib'
    Preserves @media query nesting and original structure
    """
    
    with open(input_file, 'r', encoding='utf-8') as f:
        css_content = f.read()
    
    # Parse the CSS
    rules = tinycss2.parse_stylesheet(css_content)
    
    output_sections = []
    
    for rule in rules:
        if rule.type == 'at-rule' and rule.at_keyword == 'media':
            # Handle @media rules
            media_query = f"@media {tinycss2.serialize(rule.prelude).strip()}"
            
            # Parse the content inside the media query
            media_content = tinycss2.parse_rule_list(rule.content)
            attrib_rules_in_media = []
            
            for media_rule in media_content:
                if media_rule.type == 'qualified-rule':
                    attrib_rule = process_qualified_rule(media_rule)
                    if attrib_rule:
                        attrib_rules_in_media.append(attrib_rule)
            
            if attrib_rules_in_media:
                output_sections.append(f"{media_query} {{")
                for attrib_rule in attrib_rules_in_media:
                    # Indent the rules inside media query
                    indented_rule = '\n'.join('  ' + line if line.strip() else line 
                                            for line in attrib_rule.split('\n'))
                    output_sections.append(indented_rule)
                    output_sections.append("")
                output_sections.append("}")
                output_sections.append("")
        
        elif rule.type == 'qualified-rule':
            # Handle regular CSS rules (not inside @media)
            attrib_rule = process_qualified_rule(rule)
            if attrib_rule:
                output_sections.append(attrib_rule)
                output_sections.append("")
    
    # Write output
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write('\n'.join(output_sections).rstrip() + '\n')
    
    print(f"Extracted CSS selectors containing 'attrib' to: {output_file}")

def process_qualified_rule(rule):
    """
    Process a qualified CSS rule and return it if it contains 'attrib' selectors
    """
    # Get the selector(s)
    selector_text = tinycss2.serialize(rule.prelude).strip()
    
    # Check if any part of the selector contains "attrib"
    if 'attrib' in selector_text:
        # Use tinycss2's built-in serialization which properly handles semicolons
        return rule.serialize()
    
    return None

if __name__ == "__main__":
    input_file = "scratch/maplibre-gl.css"
    output_file = "scratch/maplibre-gl-attrib.css"
    
    try:
        parse_css_for_attrib_selectors(input_file, output_file)
    except FileNotFoundError:
        print(f"Error: Could not find input file: {input_file}")
        sys.exit(1)
    except Exception as e:
        print(f"Error processing CSS: {e}")
        sys.exit(1)