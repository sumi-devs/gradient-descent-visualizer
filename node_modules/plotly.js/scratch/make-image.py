import asyncio
import json
import os

import kaleido
from kaleido import PageGenerator
import plotly.io as pio

# Uncomment for additional Kaleido logging output
# import logging
# logging.basicConfig(level=logging.DEBUG)

PLOTLY_JS_PATH = "dist/plotly.js"

MOCK_DIR = "test/image/mocks"
IMG_DIR = "scratch/images"


async def generate_images(mock_names):
    page = PageGenerator(plotly=os.path.abspath(PLOTLY_JS_PATH))

    # For each mock .json file in the mocks directory, generate an image
    async with kaleido.Kaleido(
        n=1, 
        page_generator=page,
        stepper=True,
        headless=False,
        ) as k:
        for mock_name in mock_names:
            mock_path = os.path.join(MOCK_DIR, mock_name + ".json")
            output_filename = mock_name + ".png"
            output_path = os.path.join(IMG_DIR, output_filename)

            if os.path.exists(output_path):
                print(f"Overwriting {output_path}")
            else:
                print(f"Creating new image at {output_path}")

            # Load the mock data
            with open(mock_path, "r") as f:
                fig = json.load(f)

            # Apply same modifications done in Plotly.js image test pipeline
            width = 700
            height = 500
            if "layout" in fig:
                layout = fig["layout"]
                if "autosize" not in layout or layout["autosize"] != True:
                    if "width" in layout:
                        width = layout["width"]
                    if "height" in layout:
                        height = layout["height"]

            # pio.write_image(fig, output_path, validate=False)
            # img_data = await k.calc_fig(
            #     fig,
            #     path=None,
            #     opts=dict(
            #         format="png",
            #         width=width,
            #         height=height,
            #     ),
            # )
            # with open(output_path, "wb") as f:
            #     f.write(img_data)
            await k.write_fig(
                fig,
                path=output_path,
                opts=dict(
                    format="png",
                    width=width,
                    height=height,
                ),
            )

    print("Done.")




if __name__ == "__main__":

    # Get list of mock names from command line arguments
    import sys

    if not len(sys.argv) > 1:
        print("Usage: python generate.py mock_name1 mock_name2 ...")
        sys.exit(1)
    mock_names = sys.argv[1:]

    asyncio.run(generate_images(mock_names))
